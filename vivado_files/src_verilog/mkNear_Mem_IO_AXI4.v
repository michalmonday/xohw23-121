//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// RDY_set_addr_map               O     1 const
// axi4_slave_aw_canPut           O     1 reg
// RDY_axi4_slave_aw_put          O     1 reg
// axi4_slave_w_canPut            O     1 reg
// RDY_axi4_slave_w_put           O     1 reg
// axi4_slave_b_canPeek           O     1 reg
// axi4_slave_b_peek              O     7 reg
// RDY_axi4_slave_b_peek          O     1 reg
// RDY_axi4_slave_b_drop          O     1 reg
// axi4_slave_ar_canPut           O     1 reg
// RDY_axi4_slave_ar_put          O     1 reg
// axi4_slave_r_canPeek           O     1 reg
// axi4_slave_r_peek              O    72 reg
// RDY_axi4_slave_r_peek          O     1 reg
// RDY_axi4_slave_r_drop          O     1 reg
// get_timer_interrupt_req_get    O     1 reg
// RDY_get_timer_interrupt_req_get  O     1 reg
// get_sw_interrupt_req_get       O     1 reg
// RDY_get_sw_interrupt_req_get   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_addr_map_addr_base         I    64 reg
// set_addr_map_addr_lim          I    64 reg
// axi4_slave_aw_put_val          I    98 reg
// axi4_slave_w_put_val           I    73 reg
// axi4_slave_ar_put_val          I    98 reg
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_set_addr_map                I     1
// EN_axi4_slave_aw_put           I     1
// EN_axi4_slave_w_put            I     1
// EN_axi4_slave_b_drop           I     1
// EN_axi4_slave_ar_put           I     1
// EN_axi4_slave_r_drop           I     1
// EN_get_timer_interrupt_req_get  I     1
// EN_get_sw_interrupt_req_get    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkNear_Mem_IO_AXI4(CLK,
			  RST_N,

			  EN_server_reset_request_put,
			  RDY_server_reset_request_put,

			  EN_server_reset_response_get,
			  RDY_server_reset_response_get,

			  set_addr_map_addr_base,
			  set_addr_map_addr_lim,
			  EN_set_addr_map,
			  RDY_set_addr_map,

			  axi4_slave_aw_canPut,

			  axi4_slave_aw_put_val,
			  EN_axi4_slave_aw_put,
			  RDY_axi4_slave_aw_put,

			  axi4_slave_w_canPut,

			  axi4_slave_w_put_val,
			  EN_axi4_slave_w_put,
			  RDY_axi4_slave_w_put,

			  axi4_slave_b_canPeek,

			  axi4_slave_b_peek,
			  RDY_axi4_slave_b_peek,

			  EN_axi4_slave_b_drop,
			  RDY_axi4_slave_b_drop,

			  axi4_slave_ar_canPut,

			  axi4_slave_ar_put_val,
			  EN_axi4_slave_ar_put,
			  RDY_axi4_slave_ar_put,

			  axi4_slave_r_canPeek,

			  axi4_slave_r_peek,
			  RDY_axi4_slave_r_peek,

			  EN_axi4_slave_r_drop,
			  RDY_axi4_slave_r_drop,

			  EN_get_timer_interrupt_req_get,
			  get_timer_interrupt_req_get,
			  RDY_get_timer_interrupt_req_get,

			  EN_get_sw_interrupt_req_get,
			  get_sw_interrupt_req_get,
			  RDY_get_sw_interrupt_req_get);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method set_addr_map
  input  [63 : 0] set_addr_map_addr_base;
  input  [63 : 0] set_addr_map_addr_lim;
  input  EN_set_addr_map;
  output RDY_set_addr_map;

  // value method axi4_slave_aw_canPut
  output axi4_slave_aw_canPut;

  // action method axi4_slave_aw_put
  input  [97 : 0] axi4_slave_aw_put_val;
  input  EN_axi4_slave_aw_put;
  output RDY_axi4_slave_aw_put;

  // value method axi4_slave_w_canPut
  output axi4_slave_w_canPut;

  // action method axi4_slave_w_put
  input  [72 : 0] axi4_slave_w_put_val;
  input  EN_axi4_slave_w_put;
  output RDY_axi4_slave_w_put;

  // value method axi4_slave_b_canPeek
  output axi4_slave_b_canPeek;

  // value method axi4_slave_b_peek
  output [6 : 0] axi4_slave_b_peek;
  output RDY_axi4_slave_b_peek;

  // action method axi4_slave_b_drop
  input  EN_axi4_slave_b_drop;
  output RDY_axi4_slave_b_drop;

  // value method axi4_slave_ar_canPut
  output axi4_slave_ar_canPut;

  // action method axi4_slave_ar_put
  input  [97 : 0] axi4_slave_ar_put_val;
  input  EN_axi4_slave_ar_put;
  output RDY_axi4_slave_ar_put;

  // value method axi4_slave_r_canPeek
  output axi4_slave_r_canPeek;

  // value method axi4_slave_r_peek
  output [71 : 0] axi4_slave_r_peek;
  output RDY_axi4_slave_r_peek;

  // action method axi4_slave_r_drop
  input  EN_axi4_slave_r_drop;
  output RDY_axi4_slave_r_drop;

  // actionvalue method get_timer_interrupt_req_get
  input  EN_get_timer_interrupt_req_get;
  output get_timer_interrupt_req_get;
  output RDY_get_timer_interrupt_req_get;

  // actionvalue method get_sw_interrupt_req_get
  input  EN_get_sw_interrupt_req_get;
  output get_sw_interrupt_req_get;
  output RDY_get_sw_interrupt_req_get;

  // signals for module outputs
  wire [71 : 0] axi4_slave_r_peek;
  wire [6 : 0] axi4_slave_b_peek;
  wire RDY_axi4_slave_ar_put,
       RDY_axi4_slave_aw_put,
       RDY_axi4_slave_b_drop,
       RDY_axi4_slave_b_peek,
       RDY_axi4_slave_r_drop,
       RDY_axi4_slave_r_peek,
       RDY_axi4_slave_w_put,
       RDY_get_sw_interrupt_req_get,
       RDY_get_timer_interrupt_req_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_addr_map,
       axi4_slave_ar_canPut,
       axi4_slave_aw_canPut,
       axi4_slave_b_canPeek,
       axi4_slave_r_canPeek,
       axi4_slave_w_canPut,
       get_sw_interrupt_req_get,
       get_timer_interrupt_req_get;

  // inlined wires
  wire [63 : 0] crg_time$port0__write_1,
		crg_time$port1__write_1,
		crg_time$port2__read,
		crg_timecmp$port1__write_1,
		crg_timecmp$port2__read;
  wire crg_time$EN_port1__write, crg_timecmp$EN_port1__write;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register crg_time
  reg [63 : 0] crg_time;
  wire [63 : 0] crg_time$D_IN;
  wire crg_time$EN;

  // register crg_timecmp
  reg [63 : 0] crg_timecmp;
  wire [63 : 0] crg_timecmp$D_IN;
  wire crg_timecmp$EN;

  // register rg_addr_base
  reg [63 : 0] rg_addr_base;
  wire [63 : 0] rg_addr_base$D_IN;
  wire rg_addr_base$EN;

  // register rg_addr_lim
  reg [63 : 0] rg_addr_lim;
  wire [63 : 0] rg_addr_lim$D_IN;
  wire rg_addr_lim$EN;

  // register rg_msip
  reg rg_msip;
  wire rg_msip$D_IN, rg_msip$EN;

  // register rg_mtip
  reg rg_mtip;
  wire rg_mtip$D_IN, rg_mtip$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_sw_interrupt_req
  wire f_sw_interrupt_req$CLR,
       f_sw_interrupt_req$DEQ,
       f_sw_interrupt_req$D_IN,
       f_sw_interrupt_req$D_OUT,
       f_sw_interrupt_req$EMPTY_N,
       f_sw_interrupt_req$ENQ,
       f_sw_interrupt_req$FULL_N;

  // ports of submodule f_timer_interrupt_req
  wire f_timer_interrupt_req$CLR,
       f_timer_interrupt_req$DEQ,
       f_timer_interrupt_req$D_IN,
       f_timer_interrupt_req$D_OUT,
       f_timer_interrupt_req$EMPTY_N,
       f_timer_interrupt_req$ENQ,
       f_timer_interrupt_req$FULL_N;

  // ports of submodule slavePortShim_arff
  wire [97 : 0] slavePortShim_arff$D_IN, slavePortShim_arff$D_OUT;
  wire slavePortShim_arff$CLR,
       slavePortShim_arff$DEQ,
       slavePortShim_arff$EMPTY_N,
       slavePortShim_arff$ENQ,
       slavePortShim_arff$FULL_N;

  // ports of submodule slavePortShim_awff
  wire [97 : 0] slavePortShim_awff$D_IN, slavePortShim_awff$D_OUT;
  wire slavePortShim_awff$CLR,
       slavePortShim_awff$DEQ,
       slavePortShim_awff$EMPTY_N,
       slavePortShim_awff$ENQ,
       slavePortShim_awff$FULL_N;

  // ports of submodule slavePortShim_bff
  wire [6 : 0] slavePortShim_bff$D_IN, slavePortShim_bff$D_OUT;
  wire slavePortShim_bff$CLR,
       slavePortShim_bff$DEQ,
       slavePortShim_bff$EMPTY_N,
       slavePortShim_bff$ENQ,
       slavePortShim_bff$FULL_N;

  // ports of submodule slavePortShim_rff
  wire [71 : 0] slavePortShim_rff$D_IN, slavePortShim_rff$D_OUT;
  wire slavePortShim_rff$CLR,
       slavePortShim_rff$DEQ,
       slavePortShim_rff$EMPTY_N,
       slavePortShim_rff$ENQ,
       slavePortShim_rff$FULL_N;

  // ports of submodule slavePortShim_wff
  wire [72 : 0] slavePortShim_wff$D_IN, slavePortShim_wff$D_OUT;
  wire slavePortShim_wff$CLR,
       slavePortShim_wff$DEQ,
       slavePortShim_wff$EMPTY_N,
       slavePortShim_wff$ENQ,
       slavePortShim_wff$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_compare,
       CAN_FIRE_RL_rl_process_rd_req,
       CAN_FIRE_RL_rl_process_wr_req,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_soft_reset,
       CAN_FIRE_RL_rl_tick_timer,
       CAN_FIRE_axi4_slave_ar_put,
       CAN_FIRE_axi4_slave_aw_put,
       CAN_FIRE_axi4_slave_b_drop,
       CAN_FIRE_axi4_slave_r_drop,
       CAN_FIRE_axi4_slave_w_put,
       CAN_FIRE_get_sw_interrupt_req_get,
       CAN_FIRE_get_timer_interrupt_req_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_addr_map,
       WILL_FIRE_RL_rl_compare,
       WILL_FIRE_RL_rl_process_rd_req,
       WILL_FIRE_RL_rl_process_wr_req,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_soft_reset,
       WILL_FIRE_RL_rl_tick_timer,
       WILL_FIRE_axi4_slave_ar_put,
       WILL_FIRE_axi4_slave_aw_put,
       WILL_FIRE_axi4_slave_b_drop,
       WILL_FIRE_axi4_slave_r_drop,
       WILL_FIRE_axi4_slave_w_put,
       WILL_FIRE_get_sw_interrupt_req_get,
       WILL_FIRE_get_timer_interrupt_req_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_addr_map;

  // inputs to muxes for submodule ports
  wire MUX_crg_time$port1__write_1__SEL_1,
       MUX_crg_timecmp$port1__write_1__SEL_1,
       MUX_rg_msip$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h10388;
  reg [31 : 0] v__h10510;
  reg [31 : 0] v__h2020;
  reg [31 : 0] v__h2199;
  reg [31 : 0] v__h2411;
  reg [31 : 0] v__h2652;
  reg [31 : 0] v__h2910;
  reg [31 : 0] v__h3253;
  reg [31 : 0] v__h3516;
  reg [31 : 0] v__h9098;
  reg [31 : 0] v__h9346;
  reg [31 : 0] v__h9731;
  reg [31 : 0] v__h9837;
  reg [31 : 0] v__h9958;
  reg [31 : 0] v__h1773;
  reg [31 : 0] v__h1767;
  reg [31 : 0] v__h2014;
  reg [31 : 0] v__h2193;
  reg [31 : 0] v__h2405;
  reg [31 : 0] v__h2646;
  reg [31 : 0] v__h2904;
  reg [31 : 0] v__h3247;
  reg [31 : 0] v__h3510;
  reg [31 : 0] v__h9092;
  reg [31 : 0] v__h9340;
  reg [31 : 0] v__h9725;
  reg [31 : 0] v__h9831;
  reg [31 : 0] v__h9952;
  reg [31 : 0] v__h10382;
  reg [31 : 0] v__h10504;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] _theResult___fst__h2573;
  reg [1 : 0] CASE_byte_addr362_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q1,
	      CASE_byte_addr477_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q2;
  wire [63 : 0] byte_addr__h2362,
		byte_addr__h3477,
		crg_timecmp_port1__read__09_AND_INV_SEXT_slave_ETC___d248,
		mask__h3943,
		new_time__h5219,
		new_timecmp__h3918,
		old_time__h7786,
		rdata___1__h2569,
		x__h2789,
		x__h3954,
		x__h5255,
		y__h3955,
		y__h3956;
  wire [7 : 0] SEXT_slavePortShim_wff_first__42_BIT_1_34___d235,
	       SEXT_slavePortShim_wff_first__42_BIT_2_31___d232,
	       SEXT_slavePortShim_wff_first__42_BIT_3_27___d228,
	       SEXT_slavePortShim_wff_first__42_BIT_4_24___d225,
	       SEXT_slavePortShim_wff_first__42_BIT_5_20___d221,
	       SEXT_slavePortShim_wff_first__42_BIT_6_17___d218,
	       SEXT_slavePortShim_wff_first__42_BIT_7_13___d214,
	       SEXT_slavePortShim_wff_first__42_BIT_8_10___d211;
  wire NOT_cfg_verbosity_read_ULE_1_1___d32,
       NOT_crg_time_port0__read__4_ULT_crg_timecmp_po_ETC___d25,
       rg_msip_07_EQ_slavePortShim_wff_first__42_BIT__ETC___d144,
       slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d104,
       slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71,
       slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138,
       slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d280,
       slavePortShim_awff_i_notEmpty__32_AND_slavePor_ETC___d152;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method set_addr_map
  assign RDY_set_addr_map = 1'd1 ;
  assign CAN_FIRE_set_addr_map = 1'd1 ;
  assign WILL_FIRE_set_addr_map = EN_set_addr_map ;

  // value method axi4_slave_aw_canPut
  assign axi4_slave_aw_canPut = slavePortShim_awff$FULL_N ;

  // action method axi4_slave_aw_put
  assign RDY_axi4_slave_aw_put = slavePortShim_awff$FULL_N ;
  assign CAN_FIRE_axi4_slave_aw_put = slavePortShim_awff$FULL_N ;
  assign WILL_FIRE_axi4_slave_aw_put = EN_axi4_slave_aw_put ;

  // value method axi4_slave_w_canPut
  assign axi4_slave_w_canPut = slavePortShim_wff$FULL_N ;

  // action method axi4_slave_w_put
  assign RDY_axi4_slave_w_put = slavePortShim_wff$FULL_N ;
  assign CAN_FIRE_axi4_slave_w_put = slavePortShim_wff$FULL_N ;
  assign WILL_FIRE_axi4_slave_w_put = EN_axi4_slave_w_put ;

  // value method axi4_slave_b_canPeek
  assign axi4_slave_b_canPeek = slavePortShim_bff$EMPTY_N ;

  // value method axi4_slave_b_peek
  assign axi4_slave_b_peek = slavePortShim_bff$D_OUT ;
  assign RDY_axi4_slave_b_peek = slavePortShim_bff$EMPTY_N ;

  // action method axi4_slave_b_drop
  assign RDY_axi4_slave_b_drop = slavePortShim_bff$EMPTY_N ;
  assign CAN_FIRE_axi4_slave_b_drop = slavePortShim_bff$EMPTY_N ;
  assign WILL_FIRE_axi4_slave_b_drop = EN_axi4_slave_b_drop ;

  // value method axi4_slave_ar_canPut
  assign axi4_slave_ar_canPut = slavePortShim_arff$FULL_N ;

  // action method axi4_slave_ar_put
  assign RDY_axi4_slave_ar_put = slavePortShim_arff$FULL_N ;
  assign CAN_FIRE_axi4_slave_ar_put = slavePortShim_arff$FULL_N ;
  assign WILL_FIRE_axi4_slave_ar_put = EN_axi4_slave_ar_put ;

  // value method axi4_slave_r_canPeek
  assign axi4_slave_r_canPeek = slavePortShim_rff$EMPTY_N ;

  // value method axi4_slave_r_peek
  assign axi4_slave_r_peek = slavePortShim_rff$D_OUT ;
  assign RDY_axi4_slave_r_peek = slavePortShim_rff$EMPTY_N ;

  // action method axi4_slave_r_drop
  assign RDY_axi4_slave_r_drop = slavePortShim_rff$EMPTY_N ;
  assign CAN_FIRE_axi4_slave_r_drop = slavePortShim_rff$EMPTY_N ;
  assign WILL_FIRE_axi4_slave_r_drop = EN_axi4_slave_r_drop ;

  // actionvalue method get_timer_interrupt_req_get
  assign get_timer_interrupt_req_get = f_timer_interrupt_req$D_OUT ;
  assign RDY_get_timer_interrupt_req_get = f_timer_interrupt_req$EMPTY_N ;
  assign CAN_FIRE_get_timer_interrupt_req_get =
	     f_timer_interrupt_req$EMPTY_N ;
  assign WILL_FIRE_get_timer_interrupt_req_get =
	     EN_get_timer_interrupt_req_get ;

  // actionvalue method get_sw_interrupt_req_get
  assign get_sw_interrupt_req_get = f_sw_interrupt_req$D_OUT ;
  assign RDY_get_sw_interrupt_req_get = f_sw_interrupt_req$EMPTY_N ;
  assign CAN_FIRE_get_sw_interrupt_req_get = f_sw_interrupt_req$EMPTY_N ;
  assign WILL_FIRE_get_sw_interrupt_req_get = EN_get_sw_interrupt_req_get ;

  // submodule f_reset_reqs
  FIFO20 #(.guarded(1'd1)) f_reset_reqs(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_reqs$ENQ),
					.DEQ(f_reset_reqs$DEQ),
					.CLR(f_reset_reqs$CLR),
					.FULL_N(f_reset_reqs$FULL_N),
					.EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(1'd1)) f_reset_rsps(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_rsps$ENQ),
					.DEQ(f_reset_rsps$DEQ),
					.CLR(f_reset_rsps$CLR),
					.FULL_N(f_reset_rsps$FULL_N),
					.EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_sw_interrupt_req
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_sw_interrupt_req(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_sw_interrupt_req$D_IN),
							    .ENQ(f_sw_interrupt_req$ENQ),
							    .DEQ(f_sw_interrupt_req$DEQ),
							    .CLR(f_sw_interrupt_req$CLR),
							    .D_OUT(f_sw_interrupt_req$D_OUT),
							    .FULL_N(f_sw_interrupt_req$FULL_N),
							    .EMPTY_N(f_sw_interrupt_req$EMPTY_N));

  // submodule f_timer_interrupt_req
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_timer_interrupt_req(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(f_timer_interrupt_req$D_IN),
							       .ENQ(f_timer_interrupt_req$ENQ),
							       .DEQ(f_timer_interrupt_req$DEQ),
							       .CLR(f_timer_interrupt_req$CLR),
							       .D_OUT(f_timer_interrupt_req$D_OUT),
							       .FULL_N(f_timer_interrupt_req$FULL_N),
							       .EMPTY_N(f_timer_interrupt_req$EMPTY_N));

  // submodule slavePortShim_arff
  FIFO2 #(.width(32'd98), .guarded(1'd1)) slavePortShim_arff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(slavePortShim_arff$D_IN),
							     .ENQ(slavePortShim_arff$ENQ),
							     .DEQ(slavePortShim_arff$DEQ),
							     .CLR(slavePortShim_arff$CLR),
							     .D_OUT(slavePortShim_arff$D_OUT),
							     .FULL_N(slavePortShim_arff$FULL_N),
							     .EMPTY_N(slavePortShim_arff$EMPTY_N));

  // submodule slavePortShim_awff
  FIFO2 #(.width(32'd98), .guarded(1'd1)) slavePortShim_awff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(slavePortShim_awff$D_IN),
							     .ENQ(slavePortShim_awff$ENQ),
							     .DEQ(slavePortShim_awff$DEQ),
							     .CLR(slavePortShim_awff$CLR),
							     .D_OUT(slavePortShim_awff$D_OUT),
							     .FULL_N(slavePortShim_awff$FULL_N),
							     .EMPTY_N(slavePortShim_awff$EMPTY_N));

  // submodule slavePortShim_bff
  FIFO2 #(.width(32'd7), .guarded(1'd1)) slavePortShim_bff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(slavePortShim_bff$D_IN),
							   .ENQ(slavePortShim_bff$ENQ),
							   .DEQ(slavePortShim_bff$DEQ),
							   .CLR(slavePortShim_bff$CLR),
							   .D_OUT(slavePortShim_bff$D_OUT),
							   .FULL_N(slavePortShim_bff$FULL_N),
							   .EMPTY_N(slavePortShim_bff$EMPTY_N));

  // submodule slavePortShim_rff
  FIFO2 #(.width(32'd72), .guarded(1'd1)) slavePortShim_rff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(slavePortShim_rff$D_IN),
							    .ENQ(slavePortShim_rff$ENQ),
							    .DEQ(slavePortShim_rff$DEQ),
							    .CLR(slavePortShim_rff$CLR),
							    .D_OUT(slavePortShim_rff$D_OUT),
							    .FULL_N(slavePortShim_rff$FULL_N),
							    .EMPTY_N(slavePortShim_rff$EMPTY_N));

  // submodule slavePortShim_wff
  FIFO2 #(.width(32'd73), .guarded(1'd1)) slavePortShim_wff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(slavePortShim_wff$D_IN),
							    .ENQ(slavePortShim_wff$ENQ),
							    .DEQ(slavePortShim_wff$DEQ),
							    .CLR(slavePortShim_wff$CLR),
							    .D_OUT(slavePortShim_wff$D_OUT),
							    .FULL_N(slavePortShim_wff$FULL_N),
							    .EMPTY_N(slavePortShim_wff$EMPTY_N));

  // rule RL_rl_soft_reset
  assign CAN_FIRE_RL_rl_soft_reset = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_soft_reset = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_compare
  assign CAN_FIRE_RL_rl_compare =
	     f_timer_interrupt_req$FULL_N && rg_state &&
	     rg_mtip !=
	     NOT_crg_time_port0__read__4_ULT_crg_timecmp_po_ETC___d25 &&
	     !f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_compare = CAN_FIRE_RL_rl_compare ;

  // rule RL_rl_process_rd_req
  assign CAN_FIRE_RL_rl_process_rd_req =
	     slavePortShim_arff$EMPTY_N && slavePortShim_rff$FULL_N &&
	     rg_state &&
	     !f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_process_rd_req = CAN_FIRE_RL_rl_process_rd_req ;

  // rule RL_rl_tick_timer
  assign CAN_FIRE_RL_rl_tick_timer =
	     rg_state && crg_time != 64'hFFFFFFFFFFFFFFFF &&
	     !f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_tick_timer = CAN_FIRE_RL_rl_tick_timer ;

  // rule RL_rl_process_wr_req
  assign CAN_FIRE_RL_rl_process_wr_req =
	     slavePortShim_awff$EMPTY_N &&
	     slavePortShim_awff_i_notEmpty__32_AND_slavePor_ETC___d152 &&
	     rg_state &&
	     !f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_process_wr_req = CAN_FIRE_RL_rl_process_wr_req ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_reset = MUX_rg_state$write_1__SEL_2 ;

  // inputs to muxes for submodule ports
  assign MUX_crg_time$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	     (byte_addr__h3477 == 64'h000000000000BFF8 ||
	      byte_addr__h3477 == 64'h000000000000BFFC) ;
  assign MUX_crg_timecmp$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	     (byte_addr__h3477 == 64'h0000000000004000 ||
	      byte_addr__h3477 == 64'h0000000000004004) ;
  assign MUX_rg_msip$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	     byte_addr__h3477 == 64'h0 &&
	     !rg_msip_07_EQ_slavePortShim_wff_first__42_BIT__ETC___d144 ;
  assign MUX_rg_state$write_1__SEL_1 = f_reset_reqs$EMPTY_N && rg_state ;
  assign MUX_rg_state$write_1__SEL_2 =
	     f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N && !rg_state ;

  // inlined wires
  assign crg_time$port0__write_1 = crg_time + 64'd1 ;
  assign crg_time$EN_port1__write =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	     (byte_addr__h3477 == 64'h000000000000BFF8 ||
	      byte_addr__h3477 == 64'h000000000000BFFC) ||
	     WILL_FIRE_RL_rl_reset ;
  assign crg_time$port1__write_1 =
	     MUX_crg_time$port1__write_1__SEL_1 ? new_time__h5219 : 64'd1 ;
  assign crg_time$port2__read =
	     crg_time$EN_port1__write ?
	       crg_time$port1__write_1 :
	       old_time__h7786 ;
  assign crg_timecmp$EN_port1__write =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	     (byte_addr__h3477 == 64'h0000000000004000 ||
	      byte_addr__h3477 == 64'h0000000000004004) ||
	     WILL_FIRE_RL_rl_reset ;
  assign crg_timecmp$port1__write_1 =
	     MUX_crg_timecmp$port1__write_1__SEL_1 ?
	       new_timecmp__h3918 :
	       64'd0 ;
  assign crg_timecmp$port2__read =
	     crg_timecmp$EN_port1__write ?
	       crg_timecmp$port1__write_1 :
	       crg_timecmp ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register crg_time
  assign crg_time$D_IN = crg_time$port2__read ;
  assign crg_time$EN = 1'b1 ;

  // register crg_timecmp
  assign crg_timecmp$D_IN = crg_timecmp$port2__read ;
  assign crg_timecmp$EN = 1'b1 ;

  // register rg_addr_base
  assign rg_addr_base$D_IN = set_addr_map_addr_base ;
  assign rg_addr_base$EN = EN_set_addr_map ;

  // register rg_addr_lim
  assign rg_addr_lim$D_IN = set_addr_map_addr_lim ;
  assign rg_addr_lim$EN = EN_set_addr_map ;

  // register rg_msip
  assign rg_msip$D_IN =
	     MUX_rg_msip$write_1__SEL_1 && slavePortShim_wff$D_OUT[9] ;
  assign rg_msip$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	     byte_addr__h3477 == 64'h0 &&
	     !rg_msip_07_EQ_slavePortShim_wff_first__42_BIT__ETC___d144 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_mtip
  assign rg_mtip$D_IN =
	     !WILL_FIRE_RL_rl_compare ||
	     NOT_crg_time_port0__read__4_ULT_crg_timecmp_po_ETC___d25 ;
  assign rg_mtip$EN = WILL_FIRE_RL_rl_compare || WILL_FIRE_RL_rl_reset ;

  // register rg_state
  assign rg_state$D_IN = !WILL_FIRE_RL_rl_soft_reset ;
  assign rg_state$EN = WILL_FIRE_RL_rl_soft_reset || WILL_FIRE_RL_rl_reset ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_server_reset_request_put ;
  assign f_reset_reqs$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_2 ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_sw_interrupt_req
  assign f_sw_interrupt_req$D_IN = slavePortShim_wff$D_OUT[9] ;
  assign f_sw_interrupt_req$ENQ = MUX_rg_msip$write_1__SEL_1 ;
  assign f_sw_interrupt_req$DEQ = EN_get_sw_interrupt_req_get ;
  assign f_sw_interrupt_req$CLR = MUX_rg_state$write_1__SEL_2 ;

  // submodule f_timer_interrupt_req
  assign f_timer_interrupt_req$D_IN =
	     NOT_crg_time_port0__read__4_ULT_crg_timecmp_po_ETC___d25 ;
  assign f_timer_interrupt_req$ENQ = CAN_FIRE_RL_rl_compare ;
  assign f_timer_interrupt_req$DEQ = EN_get_timer_interrupt_req_get ;
  assign f_timer_interrupt_req$CLR = MUX_rg_state$write_1__SEL_2 ;

  // submodule slavePortShim_arff
  assign slavePortShim_arff$D_IN = axi4_slave_ar_put_val ;
  assign slavePortShim_arff$ENQ = EN_axi4_slave_ar_put ;
  assign slavePortShim_arff$DEQ = CAN_FIRE_RL_rl_process_rd_req ;
  assign slavePortShim_arff$CLR = MUX_rg_state$write_1__SEL_2 ;

  // submodule slavePortShim_awff
  assign slavePortShim_awff$D_IN = axi4_slave_aw_put_val ;
  assign slavePortShim_awff$ENQ = EN_axi4_slave_aw_put ;
  assign slavePortShim_awff$DEQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign slavePortShim_awff$CLR = MUX_rg_state$write_1__SEL_2 ;

  // submodule slavePortShim_bff
  assign slavePortShim_bff$D_IN =
	     { slavePortShim_awff$D_OUT[97:93],
	       slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ?
		 2'd3 :
		 CASE_byte_addr477_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q2 } ;
  assign slavePortShim_bff$ENQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign slavePortShim_bff$DEQ = EN_axi4_slave_b_drop ;
  assign slavePortShim_bff$CLR = MUX_rg_state$write_1__SEL_2 ;

  // submodule slavePortShim_rff
  assign slavePortShim_rff$D_IN =
	     { slavePortShim_arff$D_OUT[97:93],
	       x__h2789,
	       slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ?
		 2'd3 :
		 CASE_byte_addr362_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q1,
	       1'd1 } ;
  assign slavePortShim_rff$ENQ = CAN_FIRE_RL_rl_process_rd_req ;
  assign slavePortShim_rff$DEQ = EN_axi4_slave_r_drop ;
  assign slavePortShim_rff$CLR = MUX_rg_state$write_1__SEL_2 ;

  // submodule slavePortShim_wff
  assign slavePortShim_wff$D_IN = axi4_slave_w_put_val ;
  assign slavePortShim_wff$ENQ = EN_axi4_slave_w_put ;
  assign slavePortShim_wff$DEQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign slavePortShim_wff$CLR = MUX_rg_state$write_1__SEL_2 ;

  // remaining internal signals
  assign NOT_cfg_verbosity_read_ULE_1_1___d32 = cfg_verbosity > 4'd1 ;
  assign NOT_crg_time_port0__read__4_ULT_crg_timecmp_po_ETC___d25 =
	     crg_time >= crg_timecmp ;
  assign SEXT_slavePortShim_wff_first__42_BIT_1_34___d235 =
	     {8{slavePortShim_wff$D_OUT[1]}} ;
  assign SEXT_slavePortShim_wff_first__42_BIT_2_31___d232 =
	     {8{slavePortShim_wff$D_OUT[2]}} ;
  assign SEXT_slavePortShim_wff_first__42_BIT_3_27___d228 =
	     {8{slavePortShim_wff$D_OUT[3]}} ;
  assign SEXT_slavePortShim_wff_first__42_BIT_4_24___d225 =
	     {8{slavePortShim_wff$D_OUT[4]}} ;
  assign SEXT_slavePortShim_wff_first__42_BIT_5_20___d221 =
	     {8{slavePortShim_wff$D_OUT[5]}} ;
  assign SEXT_slavePortShim_wff_first__42_BIT_6_17___d218 =
	     {8{slavePortShim_wff$D_OUT[6]}} ;
  assign SEXT_slavePortShim_wff_first__42_BIT_7_13___d214 =
	     {8{slavePortShim_wff$D_OUT[7]}} ;
  assign SEXT_slavePortShim_wff_first__42_BIT_8_10___d211 =
	     {8{slavePortShim_wff$D_OUT[8]}} ;
  assign byte_addr__h2362 = slavePortShim_arff$D_OUT[92:29] - rg_addr_base ;
  assign byte_addr__h3477 = slavePortShim_awff$D_OUT[92:29] - rg_addr_base ;
  assign crg_timecmp_port1__read__09_AND_INV_SEXT_slave_ETC___d248 =
	     new_timecmp__h3918 - old_time__h7786 ;
  assign mask__h3943 =
	     { SEXT_slavePortShim_wff_first__42_BIT_8_10___d211,
	       SEXT_slavePortShim_wff_first__42_BIT_7_13___d214,
	       SEXT_slavePortShim_wff_first__42_BIT_6_17___d218,
	       SEXT_slavePortShim_wff_first__42_BIT_5_20___d221,
	       SEXT_slavePortShim_wff_first__42_BIT_4_24___d225,
	       SEXT_slavePortShim_wff_first__42_BIT_3_27___d228,
	       SEXT_slavePortShim_wff_first__42_BIT_2_31___d232,
	       SEXT_slavePortShim_wff_first__42_BIT_1_34___d235 } ;
  assign new_time__h5219 = x__h5255 | y__h3955 ;
  assign new_timecmp__h3918 = x__h3954 | y__h3955 ;
  assign old_time__h7786 =
	     CAN_FIRE_RL_rl_tick_timer ? crg_time$port0__write_1 : crg_time ;
  assign rdata___1__h2569 = { 63'd0, rg_msip } ;
  assign rg_msip_07_EQ_slavePortShim_wff_first__42_BIT__ETC___d144 =
	     rg_msip == slavePortShim_wff$D_OUT[9] ;
  assign slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d104 =
	     (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	      byte_addr__h2362 != 64'h0 &&
	      byte_addr__h2362 != 64'h0000000000004000 &&
	      byte_addr__h2362 != 64'h000000000000BFF8 &&
	      byte_addr__h2362 != 64'h0000000000000004 &&
	      byte_addr__h2362 != 64'h0000000000004004 &&
	      byte_addr__h2362 != 64'h000000000000BFFC) &&
	     slavePortShim_arff$D_OUT[17:16] != 2'd0 &&
	     slavePortShim_arff$D_OUT[17:16] != 2'd1 &&
	     slavePortShim_arff$D_OUT[17:16] != 2'd2 ;
  assign slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 =
	     slavePortShim_arff$D_OUT[92:29] < rg_addr_base ;
  assign slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 =
	     slavePortShim_awff$D_OUT[92:29] < rg_addr_base ;
  assign slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d280 =
	     (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	      byte_addr__h3477 != 64'h0 &&
	      byte_addr__h3477 != 64'h0000000000004000 &&
	      byte_addr__h3477 != 64'h000000000000BFF8 &&
	      byte_addr__h3477 != 64'h0000000000000004 &&
	      byte_addr__h3477 != 64'h0000000000004004 &&
	      byte_addr__h3477 != 64'h000000000000BFFC) &&
	     slavePortShim_awff$D_OUT[17:16] != 2'd0 &&
	     slavePortShim_awff$D_OUT[17:16] != 2'd1 &&
	     slavePortShim_awff$D_OUT[17:16] != 2'd2 ;
  assign slavePortShim_awff_i_notEmpty__32_AND_slavePor_ETC___d152 =
	     slavePortShim_awff$EMPTY_N && slavePortShim_wff$EMPTY_N &&
	     slavePortShim_bff$FULL_N &&
	     (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	      byte_addr__h3477 != 64'h0 ||
	      rg_msip_07_EQ_slavePortShim_wff_first__42_BIT__ETC___d144 ||
	      f_sw_interrupt_req$FULL_N) ;
  assign x__h2789 =
	     slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ?
	       64'd0 :
	       _theResult___fst__h2573 ;
  assign x__h3954 = crg_timecmp & y__h3956 ;
  assign x__h5255 = old_time__h7786 & y__h3956 ;
  assign y__h3955 = slavePortShim_wff$D_OUT[72:9] & mask__h3943 ;
  assign y__h3956 =
	     { ~SEXT_slavePortShim_wff_first__42_BIT_8_10___d211,
	       ~SEXT_slavePortShim_wff_first__42_BIT_7_13___d214,
	       ~SEXT_slavePortShim_wff_first__42_BIT_6_17___d218,
	       ~SEXT_slavePortShim_wff_first__42_BIT_5_20___d221,
	       ~SEXT_slavePortShim_wff_first__42_BIT_4_24___d225,
	       ~SEXT_slavePortShim_wff_first__42_BIT_3_27___d228,
	       ~SEXT_slavePortShim_wff_first__42_BIT_2_31___d232,
	       ~SEXT_slavePortShim_wff_first__42_BIT_1_34___d235 } ;
  always@(byte_addr__h2362 or rdata___1__h2569 or crg_timecmp or crg_time)
  begin
    case (byte_addr__h2362)
      64'h0: _theResult___fst__h2573 = rdata___1__h2569;
      64'h0000000000000004: _theResult___fst__h2573 = 64'd0;
      64'h0000000000004000, 64'h0000000000004004:
	  _theResult___fst__h2573 = crg_timecmp;
      64'h000000000000BFF8, 64'h000000000000BFFC:
	  _theResult___fst__h2573 = crg_time;
      default: _theResult___fst__h2573 = 64'd0;
    endcase
  end
  always@(byte_addr__h2362)
  begin
    case (byte_addr__h2362)
      64'h0,
      64'h0000000000000004,
      64'h0000000000004000,
      64'h0000000000004004,
      64'h000000000000BFF8,
      64'h000000000000BFFC:
	  CASE_byte_addr362_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q1 = 2'd0;
      default: CASE_byte_addr362_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q1 = 2'd3;
    endcase
  end
  always@(byte_addr__h3477)
  begin
    case (byte_addr__h3477)
      64'h0,
      64'h0000000000000004,
      64'h0000000000004000,
      64'h0000000000004004,
      64'h000000000000BFF8,
      64'h000000000000BFFC:
	  CASE_byte_addr477_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q2 = 2'd0;
      default: CASE_byte_addr477_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q2 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	crg_time <= `BSV_ASSIGNMENT_DELAY 64'd1;
	crg_timecmp <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mtip <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (crg_time$EN) crg_time <= `BSV_ASSIGNMENT_DELAY crg_time$D_IN;
	if (crg_timecmp$EN)
	  crg_timecmp <= `BSV_ASSIGNMENT_DELAY crg_timecmp$D_IN;
	if (rg_mtip$EN) rg_mtip <= `BSV_ASSIGNMENT_DELAY rg_mtip$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_addr_base$EN)
      rg_addr_base <= `BSV_ASSIGNMENT_DELAY rg_addr_base$D_IN;
    if (rg_addr_lim$EN) rg_addr_lim <= `BSV_ASSIGNMENT_DELAY rg_addr_lim$D_IN;
    if (rg_msip$EN) rg_msip <= `BSV_ASSIGNMENT_DELAY rg_msip$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    crg_time = 64'hAAAAAAAAAAAAAAAA;
    crg_timecmp = 64'hAAAAAAAAAAAAAAAA;
    rg_addr_base = 64'hAAAAAAAAAAAAAAAA;
    rg_addr_lim = 64'hAAAAAAAAAAAAAAAA;
    rg_msip = 1'h0;
    rg_mtip = 1'h0;
    rg_state = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_timer_interrupt_req_get &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	begin
	  v__h10388 = $stime;
	  #0;
	end
    v__h10382 = v__h10388 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_timer_interrupt_req_get &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("%0d: Near_Mem_IO_AXI4: get_timer_interrupt_req: %x",
		 v__h10382,
		 f_timer_interrupt_req$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_sw_interrupt_req_get && NOT_cfg_verbosity_read_ULE_1_1___d32)
	begin
	  v__h10510 = $stime;
	  #0;
	end
    v__h10504 = v__h10510 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_sw_interrupt_req_get && NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("%0d: Near_Mem_IO_AXI4: get_sw_interrupt_req: %x",
		 v__h10504,
		 f_sw_interrupt_req$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_compare && NOT_cfg_verbosity_read_ULE_1_1___d32)
	begin
	  v__h2020 = $stime;
	  #0;
	end
    v__h2014 = v__h2020 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_compare && NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("%0d: Near_Mem_IO_AXI4.rl_compare: new MTIP = %0d, sim_time = %0d, timecmp = %0d",
		 v__h2014,
		 NOT_crg_time_port0__read__4_ULT_crg_timecmp_po_ETC___d25,
		 crg_time,
		 crg_timecmp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	begin
	  v__h2199 = $stime;
	  #0;
	end
    v__h2193 = v__h2199 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("%0d: Near_Mem_IO_AXI4.rl_process_rd_req: rg_mtip = %0d",
		 v__h2193,
		 rg_mtip);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd0 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd1 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_arff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  !slavePortShim_arff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	begin
	  v__h2411 = $stime;
	  #0;
	end
    v__h2405 = v__h2411 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$display("%0d: ERROR: Near_Mem_IO_AXI4.rl_process_rd_req: unrecognized addr",
		 v__h2405);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("'h%h", slavePortShim_arff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("'h%h", slavePortShim_arff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("'h%h", slavePortShim_arff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("'h%h", slavePortShim_arff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd0 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd1 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 &&
	  slavePortShim_arff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 &&
	  !slavePortShim_arff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("'h%h", slavePortShim_arff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("'h%h", slavePortShim_arff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("'h%h", slavePortShim_arff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("'h%h", slavePortShim_arff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	begin
	  v__h2652 = $stime;
	  #0;
	end
    v__h2646 = v__h2652 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$display("%0d: ERROR: Near_Mem_IO_AXI4.rl_process_rd_req: unrecognized addr",
		 v__h2646);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_arff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_arff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_arff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_arff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC) &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC) &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC) &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d104)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC) &&
	  slavePortShim_arff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC) &&
	  !slavePortShim_arff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_arff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_arff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_arff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_arff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	begin
	  v__h2910 = $stime;
	  #0;
	end
    v__h2904 = v__h2910 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("%0d: Near_Mem_IO_AXI4.rl_process_rd_req", v__h2904);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd0 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd1 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_arff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  !slavePortShim_arff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_arff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", x__h2789);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  !slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 &&
	  (byte_addr__h2362 == 64'h0 ||
	   byte_addr__h2362 == 64'h0000000000004000 ||
	   byte_addr__h2362 == 64'h000000000000BFF8 ||
	   byte_addr__h2362 == 64'h0000000000000004 ||
	   byte_addr__h2362 == 64'h0000000000004004 ||
	   byte_addr__h2362 == 64'h000000000000BFFC))
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  (slavePortShim_arff_first__4_BITS_92_TO_29_6_UL_ETC___d71 ||
	   byte_addr__h2362 != 64'h0 &&
	   byte_addr__h2362 != 64'h0000000000004000 &&
	   byte_addr__h2362 != 64'h000000000000BFF8 &&
	   byte_addr__h2362 != 64'h0000000000000004 &&
	   byte_addr__h2362 != 64'h0000000000004004 &&
	   byte_addr__h2362 != 64'h000000000000BFFC))
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	begin
	  v__h3253 = $stime;
	  #0;
	end
    v__h3247 = v__h3253 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("%0d: Near_Mem_IO_AXI4.rl_process_wr_req: rg_mtip = %0d",
		 v__h3247,
		 rg_mtip);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd0 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd1 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_awff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  !slavePortShim_awff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_wff$D_OUT[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_wff$D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_wff$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  !slavePortShim_wff$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	begin
	  v__h3516 = $stime;
	  #0;
	end
    v__h3510 = v__h3516 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$display("%0d: ERROR: Near_Mem_IO_AXI4.rl_process_wr_req: unrecognized addr",
		 v__h3510);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("'h%h", slavePortShim_awff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("'h%h", slavePortShim_awff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("'h%h", slavePortShim_awff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("'h%h", slavePortShim_awff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd0 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd1 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  slavePortShim_awff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  !slavePortShim_awff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("'h%h", slavePortShim_awff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("'h%h", slavePortShim_awff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("'h%h", slavePortShim_awff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("'h%h", slavePortShim_awff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("'h%h", slavePortShim_wff$D_OUT[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("'h%h", slavePortShim_wff$D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  slavePortShim_wff$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  !slavePortShim_wff$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h0 &&
	  !rg_msip_07_EQ_slavePortShim_wff_first__42_BIT__ETC___d144 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("    new MSIP = %0d", slavePortShim_wff$D_OUT[9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h0000000000004000 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("    Writing MTIMECMP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h0000000000004000 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("        old MTIMECMP         = 0x%0h", crg_timecmp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h0000000000004000 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("        new MTIMECMP         = 0x%0h", new_timecmp__h3918);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h0000000000004000 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("        cur MTIME            = 0x%0h", old_time__h7786);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h0000000000004000 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("        new MTIMECMP - MTIME = 0x%0h",
		 crg_timecmp_port1__read__09_AND_INV_SEXT_slave_ETC___d248);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h000000000000BFF8 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("    Writing MTIME");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h000000000000BFF8 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("        old MTIME = 0x%0h", old_time__h7786);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h000000000000BFF8 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("        new MTIME = 0x%0h", new_time__h5219);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h0000000000004004 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("    Writing MTIMECMP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h0000000000004004 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("        old MTIMECMP         = 0x%0h", crg_timecmp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h0000000000004004 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("        new MTIMECMP         = 0x%0h", new_timecmp__h3918);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h0000000000004004 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("        cur MTIME            = 0x%0h", old_time__h7786);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h0000000000004004 &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("        new MTIMECMP - MTIME = 0x%0h",
		 crg_timecmp_port1__read__09_AND_INV_SEXT_slave_ETC___d248);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h000000000000BFFC &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("    Writing MTIME");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h000000000000BFFC &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("        old MTIME = 0x%0h", old_time__h7786);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  byte_addr__h3477 == 64'h000000000000BFFC &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("        new MTIME = 0x%0h", new_time__h5219);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	begin
	  v__h9098 = $stime;
	  #0;
	end
    v__h9092 = v__h9098 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$display("%0d: ERROR: Near_Mem_IO_AXI4.rl_process_wr_req: unrecognized addr",
		 v__h9092);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_awff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_awff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_awff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_awff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC) &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC) &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC) &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d280)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC) &&
	  slavePortShim_awff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC) &&
	  !slavePortShim_awff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_awff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_awff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_awff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_awff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_wff$D_OUT[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("'h%h", slavePortShim_wff$D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC) &&
	  slavePortShim_wff$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC) &&
	  !slavePortShim_wff$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	begin
	  v__h9346 = $stime;
	  #0;
	end
    v__h9340 = v__h9346 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$display("%0d: Near_Mem_IO.AXI4.rl_process_wr_req", v__h9340);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd0 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd1 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_awff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  !slavePortShim_awff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_wff$D_OUT[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_wff$D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  slavePortShim_wff$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  !slavePortShim_wff$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", slavePortShim_awff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  !slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 &&
	  (byte_addr__h3477 == 64'h0 ||
	   byte_addr__h3477 == 64'h0000000000004000 ||
	   byte_addr__h3477 == 64'h000000000000BFF8 ||
	   byte_addr__h3477 == 64'h0000000000000004 ||
	   byte_addr__h3477 == 64'h0000000000004004 ||
	   byte_addr__h3477 == 64'h000000000000BFFC))
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32 &&
	  (slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138 ||
	   byte_addr__h3477 != 64'h0 &&
	   byte_addr__h3477 != 64'h0000000000004000 &&
	   byte_addr__h3477 != 64'h000000000000BFF8 &&
	   byte_addr__h3477 != 64'h0000000000000004 &&
	   byte_addr__h3477 != 64'h0000000000004004 &&
	   byte_addr__h3477 != 64'h000000000000BFFC))
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_1___d32)
	$write("\n");
    if (EN_set_addr_map && set_addr_map_addr_base[1:0] != 2'd0)
      begin
        v__h9731 = $stime;
	#0;
      end
    v__h9725 = v__h9731 / 32'd10;
    if (EN_set_addr_map && set_addr_map_addr_base[1:0] != 2'd0)
      $display("%0d: WARNING: Near_Mem_IO_AXI4.set_addr_map: addr_base 0x%0h is not 4-Byte-aligned",
	       v__h9725,
	       set_addr_map_addr_base);
    if (EN_set_addr_map && set_addr_map_addr_lim[1:0] != 2'd0)
      begin
        v__h9837 = $stime;
	#0;
      end
    v__h9831 = v__h9837 / 32'd10;
    if (EN_set_addr_map && set_addr_map_addr_lim[1:0] != 2'd0)
      $display("%0d: WARNING: Near_Mem_IO_AXI4.set_addr_map: addr_lim 0x%0h is not 4-Byte-aligned",
	       v__h9831,
	       set_addr_map_addr_lim);
    if (EN_set_addr_map)
      begin
        v__h9958 = $stime;
	#0;
      end
    v__h9952 = v__h9958 / 32'd10;
    if (EN_set_addr_map)
      $display("%0d: Near_Mem_IO_AXI4.set_addr_map: addr_base 0x%0h addr_lim 0x%0h",
	       v__h9952,
	       set_addr_map_addr_base,
	       set_addr_map_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && cfg_verbosity != 4'd0)
	begin
	  v__h1773 = $stime;
	  #0;
	end
    v__h1767 = v__h1773 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && cfg_verbosity != 4'd0)
	$display("%0d: Near_Mem_IO_AXI4.rl_reset", v__h1767);
  end
  // synopsys translate_on
endmodule  // mkNear_Mem_IO_AXI4

