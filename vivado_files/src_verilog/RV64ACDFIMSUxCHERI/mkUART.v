//
// Generated by Bluespec Compiler, version untagged-gb2fda995 (build b2fda995)
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// RDY_set_addr_map               O     1 const
// slave_aw_canPut                O     1 reg
// RDY_slave_aw_put               O     1 reg
// slave_w_canPut                 O     1 reg
// RDY_slave_w_put                O     1 reg
// slave_b_canPeek                O     1 reg
// slave_b_peek                   O     9 reg
// RDY_slave_b_peek               O     1 reg
// RDY_slave_b_drop               O     1 reg
// slave_ar_canPut                O     1 reg
// RDY_slave_ar_put               O     1 reg
// slave_r_canPeek                O     1 reg
// slave_r_peek                   O    74 reg
// RDY_slave_r_peek               O     1 reg
// RDY_slave_r_drop               O     1 reg
// get_to_console_get             O     8 reg
// RDY_get_to_console_get         O     1 reg
// RDY_put_from_console_put       O     1 reg
// intr                           O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_addr_map_addr_base         I    64 reg
// set_addr_map_addr_lim          I    64 reg
// slave_aw_put_val               I   100 reg
// slave_w_put_val                I    73 reg
// slave_ar_put_val               I   100 reg
// put_from_console_put           I     8 reg
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_set_addr_map                I     1
// EN_slave_aw_put                I     1
// EN_slave_w_put                 I     1
// EN_slave_b_drop                I     1
// EN_slave_ar_put                I     1
// EN_slave_r_drop                I     1
// EN_put_from_console_put        I     1
// EN_get_to_console_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkUART(CLK,
	      RST_N,

	      EN_server_reset_request_put,
	      RDY_server_reset_request_put,

	      EN_server_reset_response_get,
	      RDY_server_reset_response_get,

	      set_addr_map_addr_base,
	      set_addr_map_addr_lim,
	      EN_set_addr_map,
	      RDY_set_addr_map,

	      slave_aw_canPut,

	      slave_aw_put_val,
	      EN_slave_aw_put,
	      RDY_slave_aw_put,

	      slave_w_canPut,

	      slave_w_put_val,
	      EN_slave_w_put,
	      RDY_slave_w_put,

	      slave_b_canPeek,

	      slave_b_peek,
	      RDY_slave_b_peek,

	      EN_slave_b_drop,
	      RDY_slave_b_drop,

	      slave_ar_canPut,

	      slave_ar_put_val,
	      EN_slave_ar_put,
	      RDY_slave_ar_put,

	      slave_r_canPeek,

	      slave_r_peek,
	      RDY_slave_r_peek,

	      EN_slave_r_drop,
	      RDY_slave_r_drop,

	      EN_get_to_console_get,
	      get_to_console_get,
	      RDY_get_to_console_get,

	      put_from_console_put,
	      EN_put_from_console_put,
	      RDY_put_from_console_put,

	      intr);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method set_addr_map
  input  [63 : 0] set_addr_map_addr_base;
  input  [63 : 0] set_addr_map_addr_lim;
  input  EN_set_addr_map;
  output RDY_set_addr_map;

  // value method slave_aw_canPut
  output slave_aw_canPut;

  // action method slave_aw_put
  input  [99 : 0] slave_aw_put_val;
  input  EN_slave_aw_put;
  output RDY_slave_aw_put;

  // value method slave_w_canPut
  output slave_w_canPut;

  // action method slave_w_put
  input  [72 : 0] slave_w_put_val;
  input  EN_slave_w_put;
  output RDY_slave_w_put;

  // value method slave_b_canPeek
  output slave_b_canPeek;

  // value method slave_b_peek
  output [8 : 0] slave_b_peek;
  output RDY_slave_b_peek;

  // action method slave_b_drop
  input  EN_slave_b_drop;
  output RDY_slave_b_drop;

  // value method slave_ar_canPut
  output slave_ar_canPut;

  // action method slave_ar_put
  input  [99 : 0] slave_ar_put_val;
  input  EN_slave_ar_put;
  output RDY_slave_ar_put;

  // value method slave_r_canPeek
  output slave_r_canPeek;

  // value method slave_r_peek
  output [73 : 0] slave_r_peek;
  output RDY_slave_r_peek;

  // action method slave_r_drop
  input  EN_slave_r_drop;
  output RDY_slave_r_drop;

  // actionvalue method get_to_console_get
  input  EN_get_to_console_get;
  output [7 : 0] get_to_console_get;
  output RDY_get_to_console_get;

  // action method put_from_console_put
  input  [7 : 0] put_from_console_put;
  input  EN_put_from_console_put;
  output RDY_put_from_console_put;

  // value method intr
  output intr;

  // signals for module outputs
  wire [73 : 0] slave_r_peek;
  wire [8 : 0] slave_b_peek;
  wire [7 : 0] get_to_console_get;
  wire RDY_get_to_console_get,
       RDY_put_from_console_put,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_addr_map,
       RDY_slave_ar_put,
       RDY_slave_aw_put,
       RDY_slave_b_drop,
       RDY_slave_b_peek,
       RDY_slave_r_drop,
       RDY_slave_r_peek,
       RDY_slave_w_put,
       intr,
       slave_ar_canPut,
       slave_aw_canPut,
       slave_b_canPeek,
       slave_r_canPeek,
       slave_w_canPut;

  // register rg_addr_base
  reg [63 : 0] rg_addr_base;
  wire [63 : 0] rg_addr_base$D_IN;
  wire rg_addr_base$EN;

  // register rg_addr_lim
  reg [63 : 0] rg_addr_lim;
  wire [63 : 0] rg_addr_lim$D_IN;
  wire rg_addr_lim$EN;

  // register rg_dll
  reg [7 : 0] rg_dll;
  wire [7 : 0] rg_dll$D_IN;
  wire rg_dll$EN;

  // register rg_dlm
  reg [7 : 0] rg_dlm;
  wire [7 : 0] rg_dlm$D_IN;
  wire rg_dlm$EN;

  // register rg_fcr
  reg [7 : 0] rg_fcr;
  wire [7 : 0] rg_fcr$D_IN;
  wire rg_fcr$EN;

  // register rg_ier
  reg [7 : 0] rg_ier;
  wire [7 : 0] rg_ier$D_IN;
  wire rg_ier$EN;

  // register rg_lcr
  reg [7 : 0] rg_lcr;
  wire [7 : 0] rg_lcr$D_IN;
  wire rg_lcr$EN;

  // register rg_lsr
  reg [7 : 0] rg_lsr;
  reg [7 : 0] rg_lsr$D_IN;
  wire rg_lsr$EN;

  // register rg_mcr
  reg [7 : 0] rg_mcr;
  wire [7 : 0] rg_mcr$D_IN;
  wire rg_mcr$EN;

  // register rg_msr
  reg [7 : 0] rg_msr;
  wire [7 : 0] rg_msr$D_IN;
  wire rg_msr$EN;

  // register rg_rbr
  reg [7 : 0] rg_rbr;
  wire [7 : 0] rg_rbr$D_IN;
  wire rg_rbr$EN;

  // register rg_scr
  reg [7 : 0] rg_scr;
  wire [7 : 0] rg_scr$D_IN;
  wire rg_scr$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // register rg_thr
  reg [7 : 0] rg_thr;
  wire [7 : 0] rg_thr$D_IN;
  wire rg_thr$EN;

  // ports of submodule f_from_console
  wire [7 : 0] f_from_console$D_IN, f_from_console$D_OUT;
  wire f_from_console$CLR,
       f_from_console$DEQ,
       f_from_console$EMPTY_N,
       f_from_console$ENQ,
       f_from_console$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_to_console
  wire [7 : 0] f_to_console$D_IN, f_to_console$D_OUT;
  wire f_to_console$CLR,
       f_to_console$DEQ,
       f_to_console$EMPTY_N,
       f_to_console$ENQ,
       f_to_console$FULL_N;

  // ports of submodule slavePortShim_arff
  wire [99 : 0] slavePortShim_arff$D_IN, slavePortShim_arff$D_OUT;
  wire slavePortShim_arff$CLR,
       slavePortShim_arff$DEQ,
       slavePortShim_arff$EMPTY_N,
       slavePortShim_arff$ENQ,
       slavePortShim_arff$FULL_N;

  // ports of submodule slavePortShim_awff
  wire [99 : 0] slavePortShim_awff$D_IN, slavePortShim_awff$D_OUT;
  wire slavePortShim_awff$CLR,
       slavePortShim_awff$DEQ,
       slavePortShim_awff$EMPTY_N,
       slavePortShim_awff$ENQ,
       slavePortShim_awff$FULL_N;

  // ports of submodule slavePortShim_bff
  wire [8 : 0] slavePortShim_bff$D_IN, slavePortShim_bff$D_OUT;
  wire slavePortShim_bff$CLR,
       slavePortShim_bff$DEQ,
       slavePortShim_bff$EMPTY_N,
       slavePortShim_bff$ENQ,
       slavePortShim_bff$FULL_N;

  // ports of submodule slavePortShim_rff
  wire [73 : 0] slavePortShim_rff$D_IN, slavePortShim_rff$D_OUT;
  wire slavePortShim_rff$CLR,
       slavePortShim_rff$DEQ,
       slavePortShim_rff$EMPTY_N,
       slavePortShim_rff$ENQ,
       slavePortShim_rff$FULL_N;

  // ports of submodule slavePortShim_wff
  wire [72 : 0] slavePortShim_wff$D_IN, slavePortShim_wff$D_OUT;
  wire slavePortShim_wff$CLR,
       slavePortShim_wff$DEQ,
       slavePortShim_wff$EMPTY_N,
       slavePortShim_wff$ENQ,
       slavePortShim_wff$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_process_rd_req,
       CAN_FIRE_RL_rl_process_wr_req,
       CAN_FIRE_RL_rl_receive,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_get_to_console_get,
       CAN_FIRE_put_from_console_put,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_addr_map,
       CAN_FIRE_slave_ar_put,
       CAN_FIRE_slave_aw_put,
       CAN_FIRE_slave_b_drop,
       CAN_FIRE_slave_r_drop,
       CAN_FIRE_slave_w_put,
       WILL_FIRE_RL_rl_process_rd_req,
       WILL_FIRE_RL_rl_process_wr_req,
       WILL_FIRE_RL_rl_receive,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_get_to_console_get,
       WILL_FIRE_put_from_console_put,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_addr_map,
       WILL_FIRE_slave_ar_put,
       WILL_FIRE_slave_aw_put,
       WILL_FIRE_slave_b_drop,
       WILL_FIRE_slave_r_drop,
       WILL_FIRE_slave_w_put;

  // inputs to muxes for submodule ports
  wire [7 : 0] MUX_rg_lsr$write_1__VAL_2, MUX_rg_lsr$write_1__VAL_3;
  wire MUX_rg_lsr$write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1955;
  reg [31 : 0] v__h3025;
  reg [31 : 0] v__h2424;
  reg [31 : 0] v__h2220;
  reg [31 : 0] v__h3650;
  reg [31 : 0] v__h5426;
  reg [31 : 0] v__h4093;
  reg [31 : 0] v__h3894;
  reg [31 : 0] v__h6056;
  reg [31 : 0] v__h6162;
  reg [31 : 0] v__h1949;
  reg [31 : 0] v__h2214;
  reg [31 : 0] v__h2418;
  reg [31 : 0] v__h3019;
  reg [31 : 0] v__h3644;
  reg [31 : 0] v__h3888;
  reg [31 : 0] v__h4087;
  reg [31 : 0] v__h5420;
  reg [31 : 0] v__h6050;
  reg [31 : 0] v__h6156;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] x__h4386;
  reg [7 : 0] y_avValue_snd__h3236;
  wire [63 : 0] offset__h1893,
		offset__h3600,
		rdata___1__h3379,
		rdata__h3327,
		rdr_rdata__h3354,
		result__h4400,
		result__h4430,
		result__h4457,
		result__h4484,
		result__h4511,
		result__h4538,
		result__h4565,
		result__h4592,
		result__h4619,
		result__h4646,
		result__h4673,
		result__h4700,
		result__h4727,
		result__h4754,
		slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47,
		slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228;
  wire [7 : 0] fn_iir__h1314,
	       rdata_byte__h3326,
	       y_avValue_snd__h3249,
	       y_avValue_snd__h3262,
	       y_avValue_snd__h3277,
	       y_avValue_snd__h3291;
  wire [1 : 0] IF_slavePortShim_arff_first__1_BITS_92_TO_29_2_ETC___d214,
	       IF_slavePortShim_awff_first__22_BITS_92_TO_29__ETC___d554;
  wire NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d102,
       NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d107,
       NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d112,
       NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d117,
       NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d122,
       NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d145,
       NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d60,
       NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d97,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d281,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d347,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d352,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d356,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d360,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d364,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d368,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d372,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d404,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d410,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d416,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d422,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d428,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d434,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d440,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d446,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d452,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d458,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d464,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d470,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d477,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d483,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d490,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d496,
       NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d514,
       slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14,
       slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16,
       slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224,
       slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225,
       slavePortShim_bff_i_notFull__21_AND_slavePortS_ETC___d244;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method set_addr_map
  assign RDY_set_addr_map = 1'd1 ;
  assign CAN_FIRE_set_addr_map = 1'd1 ;
  assign WILL_FIRE_set_addr_map = EN_set_addr_map ;

  // value method slave_aw_canPut
  assign slave_aw_canPut = slavePortShim_awff$FULL_N ;

  // action method slave_aw_put
  assign RDY_slave_aw_put = slavePortShim_awff$FULL_N ;
  assign CAN_FIRE_slave_aw_put = slavePortShim_awff$FULL_N ;
  assign WILL_FIRE_slave_aw_put = EN_slave_aw_put ;

  // value method slave_w_canPut
  assign slave_w_canPut = slavePortShim_wff$FULL_N ;

  // action method slave_w_put
  assign RDY_slave_w_put = slavePortShim_wff$FULL_N ;
  assign CAN_FIRE_slave_w_put = slavePortShim_wff$FULL_N ;
  assign WILL_FIRE_slave_w_put = EN_slave_w_put ;

  // value method slave_b_canPeek
  assign slave_b_canPeek = slavePortShim_bff$EMPTY_N ;

  // value method slave_b_peek
  assign slave_b_peek = slavePortShim_bff$D_OUT ;
  assign RDY_slave_b_peek = slavePortShim_bff$EMPTY_N ;

  // action method slave_b_drop
  assign RDY_slave_b_drop = slavePortShim_bff$EMPTY_N ;
  assign CAN_FIRE_slave_b_drop = slavePortShim_bff$EMPTY_N ;
  assign WILL_FIRE_slave_b_drop = EN_slave_b_drop ;

  // value method slave_ar_canPut
  assign slave_ar_canPut = slavePortShim_arff$FULL_N ;

  // action method slave_ar_put
  assign RDY_slave_ar_put = slavePortShim_arff$FULL_N ;
  assign CAN_FIRE_slave_ar_put = slavePortShim_arff$FULL_N ;
  assign WILL_FIRE_slave_ar_put = EN_slave_ar_put ;

  // value method slave_r_canPeek
  assign slave_r_canPeek = slavePortShim_rff$EMPTY_N ;

  // value method slave_r_peek
  assign slave_r_peek = slavePortShim_rff$D_OUT ;
  assign RDY_slave_r_peek = slavePortShim_rff$EMPTY_N ;

  // action method slave_r_drop
  assign RDY_slave_r_drop = slavePortShim_rff$EMPTY_N ;
  assign CAN_FIRE_slave_r_drop = slavePortShim_rff$EMPTY_N ;
  assign WILL_FIRE_slave_r_drop = EN_slave_r_drop ;

  // actionvalue method get_to_console_get
  assign get_to_console_get = f_to_console$D_OUT ;
  assign RDY_get_to_console_get = f_to_console$EMPTY_N ;
  assign CAN_FIRE_get_to_console_get = f_to_console$EMPTY_N ;
  assign WILL_FIRE_get_to_console_get = EN_get_to_console_get ;

  // action method put_from_console_put
  assign RDY_put_from_console_put = f_from_console$FULL_N ;
  assign CAN_FIRE_put_from_console_put = f_from_console$FULL_N ;
  assign WILL_FIRE_put_from_console_put = EN_put_from_console_put ;

  // value method intr
  assign intr = !fn_iir__h1314[0] ;

  // submodule f_from_console
  FIFO2 #(.width(32'd8), .guarded(1'd1)) f_from_console(.RST(RST_N),
							.CLK(CLK),
							.D_IN(f_from_console$D_IN),
							.ENQ(f_from_console$ENQ),
							.DEQ(f_from_console$DEQ),
							.CLR(f_from_console$CLR),
							.D_OUT(f_from_console$D_OUT),
							.FULL_N(f_from_console$FULL_N),
							.EMPTY_N(f_from_console$EMPTY_N));

  // submodule f_reset_reqs
  FIFO20 #(.guarded(1'd1)) f_reset_reqs(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_reqs$ENQ),
					.DEQ(f_reset_reqs$DEQ),
					.CLR(f_reset_reqs$CLR),
					.FULL_N(f_reset_reqs$FULL_N),
					.EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(1'd1)) f_reset_rsps(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_rsps$ENQ),
					.DEQ(f_reset_rsps$DEQ),
					.CLR(f_reset_rsps$CLR),
					.FULL_N(f_reset_rsps$FULL_N),
					.EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_to_console
  FIFO2 #(.width(32'd8), .guarded(1'd1)) f_to_console(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_to_console$D_IN),
						      .ENQ(f_to_console$ENQ),
						      .DEQ(f_to_console$DEQ),
						      .CLR(f_to_console$CLR),
						      .D_OUT(f_to_console$D_OUT),
						      .FULL_N(f_to_console$FULL_N),
						      .EMPTY_N(f_to_console$EMPTY_N));

  // submodule slavePortShim_arff
  FIFO2 #(.width(32'd100), .guarded(1'd1)) slavePortShim_arff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(slavePortShim_arff$D_IN),
							      .ENQ(slavePortShim_arff$ENQ),
							      .DEQ(slavePortShim_arff$DEQ),
							      .CLR(slavePortShim_arff$CLR),
							      .D_OUT(slavePortShim_arff$D_OUT),
							      .FULL_N(slavePortShim_arff$FULL_N),
							      .EMPTY_N(slavePortShim_arff$EMPTY_N));

  // submodule slavePortShim_awff
  FIFO2 #(.width(32'd100), .guarded(1'd1)) slavePortShim_awff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(slavePortShim_awff$D_IN),
							      .ENQ(slavePortShim_awff$ENQ),
							      .DEQ(slavePortShim_awff$DEQ),
							      .CLR(slavePortShim_awff$CLR),
							      .D_OUT(slavePortShim_awff$D_OUT),
							      .FULL_N(slavePortShim_awff$FULL_N),
							      .EMPTY_N(slavePortShim_awff$EMPTY_N));

  // submodule slavePortShim_bff
  FIFO2 #(.width(32'd9), .guarded(1'd1)) slavePortShim_bff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(slavePortShim_bff$D_IN),
							   .ENQ(slavePortShim_bff$ENQ),
							   .DEQ(slavePortShim_bff$DEQ),
							   .CLR(slavePortShim_bff$CLR),
							   .D_OUT(slavePortShim_bff$D_OUT),
							   .FULL_N(slavePortShim_bff$FULL_N),
							   .EMPTY_N(slavePortShim_bff$EMPTY_N));

  // submodule slavePortShim_rff
  FIFO2 #(.width(32'd74), .guarded(1'd1)) slavePortShim_rff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(slavePortShim_rff$D_IN),
							    .ENQ(slavePortShim_rff$ENQ),
							    .DEQ(slavePortShim_rff$DEQ),
							    .CLR(slavePortShim_rff$CLR),
							    .D_OUT(slavePortShim_rff$D_OUT),
							    .FULL_N(slavePortShim_rff$FULL_N),
							    .EMPTY_N(slavePortShim_rff$EMPTY_N));

  // submodule slavePortShim_wff
  FIFO2 #(.width(32'd73), .guarded(1'd1)) slavePortShim_wff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(slavePortShim_wff$D_IN),
							    .ENQ(slavePortShim_wff$ENQ),
							    .DEQ(slavePortShim_wff$DEQ),
							    .CLR(slavePortShim_wff$CLR),
							    .D_OUT(slavePortShim_wff$D_OUT),
							    .FULL_N(slavePortShim_wff$FULL_N),
							    .EMPTY_N(slavePortShim_wff$EMPTY_N));

  // rule RL_rl_process_rd_req
  assign CAN_FIRE_RL_rl_process_rd_req =
	     slavePortShim_arff$EMPTY_N && slavePortShim_rff$FULL_N &&
	     rg_state ;
  assign WILL_FIRE_RL_rl_process_rd_req =
	     CAN_FIRE_RL_rl_process_rd_req && !WILL_FIRE_RL_rl_receive ;

  // rule RL_rl_process_wr_req
  assign CAN_FIRE_RL_rl_process_wr_req =
	     slavePortShim_awff$EMPTY_N && slavePortShim_wff$EMPTY_N &&
	     slavePortShim_bff_i_notFull__21_AND_slavePortS_ETC___d244 &&
	     rg_state ;
  assign WILL_FIRE_RL_rl_process_wr_req = CAN_FIRE_RL_rl_process_wr_req ;

  // rule RL_rl_receive
  assign CAN_FIRE_RL_rl_receive = f_from_console$EMPTY_N && !rg_lsr[0] ;
  assign WILL_FIRE_RL_rl_receive = CAN_FIRE_RL_rl_receive ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_rg_lsr$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_process_rd_req &&
	     NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d60 ;
  assign MUX_rg_lsr$write_1__VAL_2 = { rg_lsr[7:1], 1'd1 } ;
  assign MUX_rg_lsr$write_1__VAL_3 = { rg_lsr[7:1], 1'd0 } ;

  // register rg_addr_base
  assign rg_addr_base$D_IN = set_addr_map_addr_base ;
  assign rg_addr_base$EN = EN_set_addr_map ;

  // register rg_addr_lim
  assign rg_addr_lim$D_IN = set_addr_map_addr_lim ;
  assign rg_addr_lim$EN = EN_set_addr_map ;

  // register rg_dll
  assign rg_dll$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4386[7:0] ;
  assign rg_dll$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d347 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_dlm
  assign rg_dlm$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4386[7:0] ;
  assign rg_dlm$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d356 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_fcr
  assign rg_fcr$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4386[7:0] ;
  assign rg_fcr$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d360 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_ier
  assign rg_ier$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4386[7:0] ;
  assign rg_ier$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d352 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_lcr
  assign rg_lcr$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4386[7:0] ;
  assign rg_lcr$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d364 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_lsr
  always@(WILL_FIRE_RL_rl_reset or
	  WILL_FIRE_RL_rl_receive or
	  MUX_rg_lsr$write_1__VAL_2 or
	  MUX_rg_lsr$write_1__SEL_3 or MUX_rg_lsr$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset: rg_lsr$D_IN = 8'd96;
    WILL_FIRE_RL_rl_receive: rg_lsr$D_IN = MUX_rg_lsr$write_1__VAL_2;
    MUX_rg_lsr$write_1__SEL_3: rg_lsr$D_IN = MUX_rg_lsr$write_1__VAL_3;
    default: rg_lsr$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign rg_lsr$EN =
	     WILL_FIRE_RL_rl_process_rd_req &&
	     NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d60 ||
	     WILL_FIRE_RL_rl_receive ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_mcr
  assign rg_mcr$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4386[7:0] ;
  assign rg_mcr$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d368 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_msr
  assign rg_msr$D_IN = 8'd0 ;
  assign rg_msr$EN = CAN_FIRE_RL_rl_reset ;

  // register rg_rbr
  assign rg_rbr$D_IN = f_from_console$D_OUT ;
  assign rg_rbr$EN = CAN_FIRE_RL_rl_receive ;

  // register rg_scr
  assign rg_scr$D_IN = WILL_FIRE_RL_rl_reset ? 8'd0 : x__h4386[7:0] ;
  assign rg_scr$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d372 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_state
  assign rg_state$D_IN = 1'd1 ;
  assign rg_state$EN = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // register rg_thr
  assign rg_thr$D_IN = x__h4386[7:0] ;
  assign rg_thr$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d281 ;

  // submodule f_from_console
  assign f_from_console$D_IN = put_from_console_put ;
  assign f_from_console$ENQ = EN_put_from_console_put ;
  assign f_from_console$DEQ = CAN_FIRE_RL_rl_receive ;
  assign f_from_console$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_server_reset_request_put ;
  assign f_reset_reqs$DEQ = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_to_console
  assign f_to_console$D_IN = x__h4386[7:0] ;
  assign f_to_console$ENQ =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d281 ;
  assign f_to_console$DEQ = EN_get_to_console_get ;
  assign f_to_console$CLR = 1'b0 ;

  // submodule slavePortShim_arff
  assign slavePortShim_arff$D_IN = slave_ar_put_val ;
  assign slavePortShim_arff$ENQ = EN_slave_ar_put ;
  assign slavePortShim_arff$DEQ = WILL_FIRE_RL_rl_process_rd_req ;
  assign slavePortShim_arff$CLR =
	     f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // submodule slavePortShim_awff
  assign slavePortShim_awff$D_IN = slave_aw_put_val ;
  assign slavePortShim_awff$ENQ = EN_slave_aw_put ;
  assign slavePortShim_awff$DEQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign slavePortShim_awff$CLR =
	     f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // submodule slavePortShim_bff
  assign slavePortShim_bff$D_IN =
	     { slavePortShim_awff$D_OUT[99:93],
	       IF_slavePortShim_awff_first__22_BITS_92_TO_29__ETC___d554 } ;
  assign slavePortShim_bff$ENQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign slavePortShim_bff$DEQ = EN_slave_b_drop ;
  assign slavePortShim_bff$CLR = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // submodule slavePortShim_rff
  assign slavePortShim_rff$D_IN =
	     { slavePortShim_arff$D_OUT[99:93],
	       rdr_rdata__h3354,
	       IF_slavePortShim_arff_first__1_BITS_92_TO_29_2_ETC___d214,
	       1'd1 } ;
  assign slavePortShim_rff$ENQ = WILL_FIRE_RL_rl_process_rd_req ;
  assign slavePortShim_rff$DEQ = EN_slave_r_drop ;
  assign slavePortShim_rff$CLR = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // submodule slavePortShim_wff
  assign slavePortShim_wff$D_IN = slave_w_put_val ;
  assign slavePortShim_wff$ENQ = EN_slave_w_put ;
  assign slavePortShim_wff$DEQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign slavePortShim_wff$CLR = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // remaining internal signals
  assign IF_slavePortShim_arff_first__1_BITS_92_TO_29_2_ETC___d214 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	      !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16) ?
	       2'd3 :
	       ((slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
		 2'd0) ?
		  ((slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] ==
		    59'd0) ?
		     2'd0 :
		     2'd3) :
		  2'd2) ;
  assign IF_slavePortShim_awff_first__22_BITS_92_TO_29__ETC___d554 =
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	      !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225) ?
	       2'd3 :
	       ((slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
		 2'd0) ?
		  ((slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
		    59'd0) ?
		     2'd0 :
		     2'd3) :
		  2'd2) ;
  assign NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d102 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h2 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h3 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h4 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h5 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h6 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h7 &&
	     slavePortShim_arff$D_OUT[17:16] == 2'd1 ;
  assign NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d107 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h2 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h3 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h4 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h5 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h6 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h7 &&
	     slavePortShim_arff$D_OUT[17:16] == 2'd2 ;
  assign NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d112 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h2 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h3 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h4 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h5 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h6 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h7 &&
	     slavePortShim_arff$D_OUT[17:16] != 2'd0 &&
	     slavePortShim_arff$D_OUT[17:16] != 2'd1 &&
	     slavePortShim_arff$D_OUT[17:16] != 2'd2 ;
  assign NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d117 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h2 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h3 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h4 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h5 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h6 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h7 &&
	     slavePortShim_arff$D_OUT[15] ;
  assign NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d122 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h2 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h3 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h4 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h5 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h6 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h7 &&
	     !slavePortShim_arff$D_OUT[15] ;
  assign NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d145 =
	     !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	     2'd0 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	     59'd0 &&
	     slavePortShim_arff$D_OUT[17:16] != 2'd0 &&
	     slavePortShim_arff$D_OUT[17:16] != 2'd1 &&
	     slavePortShim_arff$D_OUT[17:16] != 2'd2 ;
  assign NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d60 =
	     !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	     2'd0 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] ==
	     59'd0 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] ==
	     3'h0 &&
	     !rg_lcr[7] ;
  assign NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d97 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h2 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h3 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h4 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h5 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h6 &&
	     slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	     3'h7 &&
	     slavePortShim_arff$D_OUT[17:16] == 2'd0 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d281 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] ==
	     3'h0 &&
	     !rg_lcr[7] ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d347 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] ==
	     3'h0 &&
	     rg_lcr[7] ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d352 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] ==
	     3'h1 &&
	     !rg_lcr[7] ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d356 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] ==
	     3'h1 &&
	     rg_lcr[7] ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d360 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] ==
	     3'h2 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d364 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] ==
	     3'h3 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d368 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] ==
	     3'h4 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d372 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] ==
	     3'h7 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d404 =
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h2 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h3 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h4 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h5 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h6 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h7 &&
	     slavePortShim_awff$D_OUT[17:16] == 2'd0 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d410 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d404 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d416 =
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h2 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h3 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h4 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h5 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h6 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h7 &&
	     slavePortShim_awff$D_OUT[17:16] == 2'd1 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d422 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d416 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d428 =
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h2 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h3 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h4 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h5 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h6 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h7 &&
	     slavePortShim_awff$D_OUT[17:16] == 2'd2 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d434 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d428 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d440 =
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h2 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h3 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h4 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h5 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h6 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h7 &&
	     slavePortShim_awff$D_OUT[17:16] != 2'd0 &&
	     slavePortShim_awff$D_OUT[17:16] != 2'd1 &&
	     slavePortShim_awff$D_OUT[17:16] != 2'd2 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d446 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d440 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d452 =
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h2 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h3 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h4 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h5 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h6 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h7 &&
	     slavePortShim_awff$D_OUT[15] ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d458 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d452 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d464 =
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h2 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h3 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h4 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h5 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h6 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h7 &&
	     !slavePortShim_awff$D_OUT[15] ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d470 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d464 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d477 =
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h2 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h3 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h4 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h5 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h6 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h7 &&
	     slavePortShim_wff$D_OUT[0] ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d483 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d477 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d490 =
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      !rg_lcr[7]) &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h2 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h3 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h4 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h5 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h6 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	     3'h7 &&
	     !slavePortShim_wff$D_OUT[0] ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d496 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] ==
	     59'd0 &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      !rg_lcr[7]) &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h1 ||
	      rg_lcr[7]) &&
	     NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d490 ;
  assign NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d514 =
	     !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	     2'd0 &&
	     slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	     59'd0 &&
	     slavePortShim_awff$D_OUT[17:16] != 2'd0 &&
	     slavePortShim_awff$D_OUT[17:16] != 2'd1 &&
	     slavePortShim_awff$D_OUT[17:16] != 2'd2 ;
  assign fn_iir__h1314 =
	     (rg_ier[0] && rg_lsr[0]) ? 8'h04 : (rg_ier[1] ? 8'h02 : 8'h01) ;
  assign offset__h1893 =
	     { 2'd0,
	       slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:2] } ;
  assign offset__h3600 =
	     { 2'd0,
	       slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:2] } ;
  assign rdata___1__h3379 = { 24'd0, rdata_byte__h3326, 32'd0 } ;
  assign rdata__h3327 = { 56'd0, rdata_byte__h3326 } ;
  assign rdata_byte__h3326 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	      !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 ||
	      slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	      2'd0 ||
	      slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	      59'd0) ?
	       8'd0 :
	       y_avValue_snd__h3291 ;
  assign rdr_rdata__h3354 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[2:0] ==
	      3'b100) ?
	       rdata___1__h3379 :
	       rdata__h3327 ;
  assign result__h4400 = { 56'd0, slavePortShim_wff$D_OUT[16:9] } ;
  assign result__h4430 = { 56'd0, slavePortShim_wff$D_OUT[24:17] } ;
  assign result__h4457 = { 56'd0, slavePortShim_wff$D_OUT[32:25] } ;
  assign result__h4484 = { 56'd0, slavePortShim_wff$D_OUT[40:33] } ;
  assign result__h4511 = { 56'd0, slavePortShim_wff$D_OUT[48:41] } ;
  assign result__h4538 = { 56'd0, slavePortShim_wff$D_OUT[56:49] } ;
  assign result__h4565 = { 56'd0, slavePortShim_wff$D_OUT[64:57] } ;
  assign result__h4592 = { 56'd0, slavePortShim_wff$D_OUT[72:65] } ;
  assign result__h4619 = { 48'd0, slavePortShim_wff$D_OUT[24:9] } ;
  assign result__h4646 = { 48'd0, slavePortShim_wff$D_OUT[40:25] } ;
  assign result__h4673 = { 48'd0, slavePortShim_wff$D_OUT[56:41] } ;
  assign result__h4700 = { 48'd0, slavePortShim_wff$D_OUT[72:57] } ;
  assign result__h4727 = { 32'd0, slavePortShim_wff$D_OUT[40:9] } ;
  assign result__h4754 = { 32'd0, slavePortShim_wff$D_OUT[72:41] } ;
  assign slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47 =
	     slavePortShim_arff$D_OUT[92:29] - rg_addr_base ;
  assign slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 =
	     slavePortShim_arff$D_OUT[92:29] < rg_addr_base ;
  assign slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 =
	     slavePortShim_arff$D_OUT[92:29] < rg_addr_lim ;
  assign slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 =
	     slavePortShim_awff$D_OUT[92:29] < rg_addr_base ;
  assign slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 =
	     slavePortShim_awff$D_OUT[92:29] < rg_addr_lim ;
  assign slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228 =
	     slavePortShim_awff$D_OUT[92:29] - rg_addr_base ;
  assign slavePortShim_bff_i_notFull__21_AND_slavePortS_ETC___d244 =
	     slavePortShim_bff$FULL_N &&
	     (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	      !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 ||
	      slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	      2'd0 ||
	      slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	      59'd0 ||
	      slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[4:2] !=
	      3'h0 ||
	      rg_lcr[7] ||
	      f_to_console$FULL_N) ;
  assign y_avValue_snd__h3249 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] ==
	      3'h1 &&
	      rg_lcr[7]) ?
	       rg_dlm :
	       y_avValue_snd__h3236 ;
  assign y_avValue_snd__h3262 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] ==
	      3'h1 &&
	      !rg_lcr[7]) ?
	       rg_ier :
	       y_avValue_snd__h3249 ;
  assign y_avValue_snd__h3277 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] ==
	      3'h0 &&
	      rg_lcr[7]) ?
	       rg_dll :
	       y_avValue_snd__h3262 ;
  assign y_avValue_snd__h3291 =
	     (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] ==
	      3'h0 &&
	      !rg_lcr[7]) ?
	       rg_rbr :
	       y_avValue_snd__h3277 ;
  always@(slavePortShim_wff$D_OUT or
	  result__h4400 or
	  result__h4430 or
	  result__h4619 or
	  result__h4457 or
	  result__h4484 or
	  result__h4646 or
	  result__h4727 or
	  result__h4511 or
	  result__h4538 or
	  result__h4673 or
	  result__h4565 or result__h4592 or result__h4700 or result__h4754)
  begin
    case (slavePortShim_wff$D_OUT[8:1])
      8'b00000001: x__h4386 = result__h4400;
      8'b00000010: x__h4386 = result__h4430;
      8'b00000011: x__h4386 = result__h4619;
      8'b00000100: x__h4386 = result__h4457;
      8'b00001000: x__h4386 = result__h4484;
      8'b00001100: x__h4386 = result__h4646;
      8'b00001111: x__h4386 = result__h4727;
      8'b00010000: x__h4386 = result__h4511;
      8'b00100000: x__h4386 = result__h4538;
      8'b00110000: x__h4386 = result__h4673;
      8'b01000000: x__h4386 = result__h4565;
      8'b10000000: x__h4386 = result__h4592;
      8'b11000000: x__h4386 = result__h4700;
      8'b11110000: x__h4386 = result__h4754;
      8'b11111111: x__h4386 = slavePortShim_wff$D_OUT[72:9];
      default: x__h4386 = 64'd0;
    endcase
  end
  always@(slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47 or
	  fn_iir__h1314 or rg_lcr or rg_mcr or rg_lsr or rg_msr or rg_scr)
  begin
    case (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2])
      3'h2: y_avValue_snd__h3236 = fn_iir__h1314;
      3'h3: y_avValue_snd__h3236 = rg_lcr;
      3'h4: y_avValue_snd__h3236 = rg_mcr;
      3'h5: y_avValue_snd__h3236 = rg_lsr;
      3'h6: y_avValue_snd__h3236 = rg_msr;
      3'h7: y_avValue_snd__h3236 = rg_scr;
      default: y_avValue_snd__h3236 = 8'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_dll <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_dlm <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_fcr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_ier <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_lcr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_lsr <= `BSV_ASSIGNMENT_DELAY 8'd96;
	rg_mcr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_msr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_scr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_dll$EN) rg_dll <= `BSV_ASSIGNMENT_DELAY rg_dll$D_IN;
	if (rg_dlm$EN) rg_dlm <= `BSV_ASSIGNMENT_DELAY rg_dlm$D_IN;
	if (rg_fcr$EN) rg_fcr <= `BSV_ASSIGNMENT_DELAY rg_fcr$D_IN;
	if (rg_ier$EN) rg_ier <= `BSV_ASSIGNMENT_DELAY rg_ier$D_IN;
	if (rg_lcr$EN) rg_lcr <= `BSV_ASSIGNMENT_DELAY rg_lcr$D_IN;
	if (rg_lsr$EN) rg_lsr <= `BSV_ASSIGNMENT_DELAY rg_lsr$D_IN;
	if (rg_mcr$EN) rg_mcr <= `BSV_ASSIGNMENT_DELAY rg_mcr$D_IN;
	if (rg_msr$EN) rg_msr <= `BSV_ASSIGNMENT_DELAY rg_msr$D_IN;
	if (rg_scr$EN) rg_scr <= `BSV_ASSIGNMENT_DELAY rg_scr$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_addr_base$EN)
      rg_addr_base <= `BSV_ASSIGNMENT_DELAY rg_addr_base$D_IN;
    if (rg_addr_lim$EN) rg_addr_lim <= `BSV_ASSIGNMENT_DELAY rg_addr_lim$D_IN;
    if (rg_rbr$EN) rg_rbr <= `BSV_ASSIGNMENT_DELAY rg_rbr$D_IN;
    if (rg_thr$EN) rg_thr <= `BSV_ASSIGNMENT_DELAY rg_thr$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_addr_base = 64'hAAAAAAAAAAAAAAAA;
    rg_addr_lim = 64'hAAAAAAAAAAAAAAAA;
    rg_dll = 8'hAA;
    rg_dlm = 8'hAA;
    rg_fcr = 8'hAA;
    rg_ier = 8'hAA;
    rg_lcr = 8'hAA;
    rg_lsr = 8'hAA;
    rg_mcr = 8'hAA;
    rg_msr = 8'hAA;
    rg_rbr = 8'hAA;
    rg_scr = 8'hAA;
    rg_state = 1'h0;
    rg_thr = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	begin
	  v__h1955 = $stime;
	  #0;
	end
    v__h1949 = v__h1955 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$display("%0d: %m.rl_process_rd_req: ERROR: UART addr out of bounds",
		 v__h1949);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$display("    UART base addr 0x%0h  limit addr 0x%0h",
		 rg_addr_base,
		 rg_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("    AXI4 request: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("'h%h", slavePortShim_arff$D_OUT[99:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("'h%h", slavePortShim_arff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("'h%h", slavePortShim_arff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("'h%h", slavePortShim_arff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16) &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16) &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16) &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16) &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd0 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd1 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16) &&
	  slavePortShim_arff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16) &&
	  !slavePortShim_arff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("'h%h", slavePortShim_arff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("'h%h", slavePortShim_arff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("'h%h", slavePortShim_arff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("'h%h", slavePortShim_arff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 ||
	   !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	begin
	  v__h3025 = $stime;
	  #0;
	end
    v__h3019 = v__h3025 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$display("%0d: %m.rl_process_rd_req: ERROR: UART unsupported addr",
		 v__h3019);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_arff$D_OUT[99:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_arff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_arff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_arff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] ==
	  59'd0 &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	   3'h0 ||
	   rg_lcr[7]) &&
	  NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d97)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] ==
	  59'd0 &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	   3'h0 ||
	   rg_lcr[7]) &&
	  NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d102)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] ==
	  59'd0 &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	   3'h0 ||
	   rg_lcr[7]) &&
	  NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d107)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] ==
	  59'd0 &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	   3'h0 ||
	   rg_lcr[7]) &&
	  NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d112)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] ==
	  59'd0 &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	   3'h0 ||
	   rg_lcr[7]) &&
	  NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d117)
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] ==
	  59'd0 &&
	  (slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[4:2] !=
	   3'h0 ||
	   rg_lcr[7]) &&
	  NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d122)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_arff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_arff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_arff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_arff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	begin
	  v__h2424 = $stime;
	  #0;
	end
    v__h2418 = v__h2424 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$display("%0d: %m.rl_process_rd_req: ERROR: UART unsupported addr",
		 v__h2418);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$display("    Register offset 0x%0h", offset__h1893);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[99:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slavePortShim_arff_first__1_BITS_92_TO_29__ETC___d145)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0 &&
	  slavePortShim_arff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0 &&
	  !slavePortShim_arff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] ==
	  2'd0 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[63:5] !=
	  59'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	begin
	  v__h2220 = $stime;
	  #0;
	end
    v__h2214 = v__h2220 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$display("%0d: %m.rl_process_rd_req: ERROR: UART misaligned addr",
		 v__h2214);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[99:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd0 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd1 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0 &&
	  slavePortShim_arff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0 &&
	  !slavePortShim_arff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_arff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  !slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d14 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_UL_ETC___d16 &&
	  slavePortShim_arff_first__1_BITS_92_TO_29_2_MI_ETC___d47[1:0] !=
	  2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	begin
	  v__h3650 = $stime;
	  #0;
	end
    v__h3644 = v__h3650 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$display("%0d: %m.rl_process_rd_req: ERROR: UART addr out of bounds",
		 v__h3644);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$display("    UART base addr 0x%0h  limit addr 0x%0h",
		 rg_addr_base,
		 rg_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("    AXI4 request: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("'h%h", slavePortShim_awff$D_OUT[99:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("'h%h", slavePortShim_awff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("'h%h", slavePortShim_awff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("'h%h", slavePortShim_awff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225) &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225) &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225) &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225) &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd0 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd1 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225) &&
	  slavePortShim_awff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225) &&
	  !slavePortShim_awff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("'h%h", slavePortShim_awff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("'h%h", slavePortShim_awff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("'h%h", slavePortShim_awff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("'h%h", slavePortShim_awff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 ||
	   !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	begin
	  v__h5426 = $stime;
	  #0;
	end
    v__h5420 = v__h5426 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$display("%0d: %m.rl_process_wr_req: ERROR: UART unsupported addr",
		 v__h5420);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_awff$D_OUT[99:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_awff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_awff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_awff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d410)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d422)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d434)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d446)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d458)
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d470)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_awff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_awff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_awff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_awff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_wff$D_OUT[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", slavePortShim_wff$D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d483)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d496)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  1'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	begin
	  v__h4093 = $stime;
	  #0;
	end
    v__h4087 = v__h4093 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$display("%0d: %m.rl_process_wr_req: ERROR: UART unsupported addr",
		 v__h4087);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$display("    Register offset 0x%0h", offset__h3600);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[99:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slavePortShim_awff_first__22_BITS_92_TO_29_ETC___d514)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0 &&
	  slavePortShim_awff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0 &&
	  !slavePortShim_awff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_wff$D_OUT[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("'h%h", slavePortShim_wff$D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0 &&
	  slavePortShim_wff$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0 &&
	  !slavePortShim_wff$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] ==
	  2'd0 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[63:5] !=
	  59'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	begin
	  v__h3894 = $stime;
	  #0;
	end
    v__h3888 = v__h3894 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$display("%0d: %m.rl_process_wr_req: ERROR: UART misaligned addr",
		 v__h3888);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[99:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd0 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd1 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0 &&
	  slavePortShim_awff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0 &&
	  !slavePortShim_awff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("'h%h", slavePortShim_awff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d224 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d225 &&
	  slavePortShim_awff_first__22_BITS_92_TO_29_23__ETC___d228[1:0] !=
	  2'd0)
	$write("\n");
    if (EN_set_addr_map && set_addr_map_addr_base[2:0] != 3'd0)
      begin
        v__h6056 = $stime;
	#0;
      end
    v__h6050 = v__h6056 / 32'd10;
    if (EN_set_addr_map && set_addr_map_addr_base[2:0] != 3'd0)
      $display("%0d: WARNING: UART.set_addr_map: addr_base 0x%0h is not 8-Byte-aligned",
	       v__h6050,
	       set_addr_map_addr_base);
    if (EN_set_addr_map && set_addr_map_addr_lim[2:0] != 3'd0)
      begin
        v__h6162 = $stime;
	#0;
      end
    v__h6156 = v__h6162 / 32'd10;
    if (EN_set_addr_map && set_addr_map_addr_lim[2:0] != 3'd0)
      $display("%0d: WARNING: UART.set_addr_map: addr_lim 0x%0h is not 8-Byte-aligned",
	       v__h6156,
	       set_addr_map_addr_lim);
  end
  // synopsys translate_on
endmodule  // mkUART

