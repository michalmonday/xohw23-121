//
// Generated by Bluespec Compiler, version untagged-gb2fda995 (build b2fda995)
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// RDY_set_addr_map               O     1
// slave_aw_canPut                O     1 reg
// RDY_slave_aw_put               O     1 reg
// slave_w_canPut                 O     1 reg
// RDY_slave_w_put                O     1 reg
// slave_b_canPeek                O     1 reg
// slave_b_peek                   O     9 reg
// RDY_slave_b_peek               O     1 reg
// RDY_slave_b_drop               O     1 reg
// slave_ar_canPut                O     1 reg
// RDY_slave_ar_put               O     1 reg
// slave_r_canPeek                O     1 reg
// slave_r_peek                   O    74 reg
// RDY_slave_r_peek               O     1 reg
// RDY_slave_r_drop               O     1 reg
// to_raw_mem_request_get         O   353
// RDY_to_raw_mem_request_get     O     1
// RDY_to_raw_mem_response_put    O     1
// status                         O     8 reg
// RDY_set_watch_tohost           O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_addr_map_addr_base         I    64 reg
// set_addr_map_addr_lim          I    64 reg
// slave_aw_put_val               I   100 reg
// slave_w_put_val                I    73 reg
// slave_ar_put_val               I   100 reg
// to_raw_mem_response_put        I   256
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_set_addr_map                I     1
// EN_slave_aw_put                I     1
// EN_slave_w_put                 I     1
// EN_slave_b_drop                I     1
// EN_slave_ar_put                I     1
// EN_slave_r_drop                I     1
// EN_to_raw_mem_response_put     I     1
// EN_set_watch_tohost            I     1
// EN_to_raw_mem_request_get      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMem_Controller(CLK,
			RST_N,

			EN_server_reset_request_put,
			RDY_server_reset_request_put,

			EN_server_reset_response_get,
			RDY_server_reset_response_get,

			set_addr_map_addr_base,
			set_addr_map_addr_lim,
			EN_set_addr_map,
			RDY_set_addr_map,

			slave_aw_canPut,

			slave_aw_put_val,
			EN_slave_aw_put,
			RDY_slave_aw_put,

			slave_w_canPut,

			slave_w_put_val,
			EN_slave_w_put,
			RDY_slave_w_put,

			slave_b_canPeek,

			slave_b_peek,
			RDY_slave_b_peek,

			EN_slave_b_drop,
			RDY_slave_b_drop,

			slave_ar_canPut,

			slave_ar_put_val,
			EN_slave_ar_put,
			RDY_slave_ar_put,

			slave_r_canPeek,

			slave_r_peek,
			RDY_slave_r_peek,

			EN_slave_r_drop,
			RDY_slave_r_drop,

			EN_to_raw_mem_request_get,
			to_raw_mem_request_get,
			RDY_to_raw_mem_request_get,

			to_raw_mem_response_put,
			EN_to_raw_mem_response_put,
			RDY_to_raw_mem_response_put,

			status,

			set_watch_tohost_watch_tohost,
			set_watch_tohost_tohost_addr,
			EN_set_watch_tohost,
			RDY_set_watch_tohost);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method set_addr_map
  input  [63 : 0] set_addr_map_addr_base;
  input  [63 : 0] set_addr_map_addr_lim;
  input  EN_set_addr_map;
  output RDY_set_addr_map;

  // value method slave_aw_canPut
  output slave_aw_canPut;

  // action method slave_aw_put
  input  [99 : 0] slave_aw_put_val;
  input  EN_slave_aw_put;
  output RDY_slave_aw_put;

  // value method slave_w_canPut
  output slave_w_canPut;

  // action method slave_w_put
  input  [72 : 0] slave_w_put_val;
  input  EN_slave_w_put;
  output RDY_slave_w_put;

  // value method slave_b_canPeek
  output slave_b_canPeek;

  // value method slave_b_peek
  output [8 : 0] slave_b_peek;
  output RDY_slave_b_peek;

  // action method slave_b_drop
  input  EN_slave_b_drop;
  output RDY_slave_b_drop;

  // value method slave_ar_canPut
  output slave_ar_canPut;

  // action method slave_ar_put
  input  [99 : 0] slave_ar_put_val;
  input  EN_slave_ar_put;
  output RDY_slave_ar_put;

  // value method slave_r_canPeek
  output slave_r_canPeek;

  // value method slave_r_peek
  output [73 : 0] slave_r_peek;
  output RDY_slave_r_peek;

  // action method slave_r_drop
  input  EN_slave_r_drop;
  output RDY_slave_r_drop;

  // actionvalue method to_raw_mem_request_get
  input  EN_to_raw_mem_request_get;
  output [352 : 0] to_raw_mem_request_get;
  output RDY_to_raw_mem_request_get;

  // action method to_raw_mem_response_put
  input  [255 : 0] to_raw_mem_response_put;
  input  EN_to_raw_mem_response_put;
  output RDY_to_raw_mem_response_put;

  // value method status
  output [7 : 0] status;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // signals for module outputs
  wire [352 : 0] to_raw_mem_request_get;
  wire [73 : 0] slave_r_peek;
  wire [8 : 0] slave_b_peek;
  wire [7 : 0] status;
  wire RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_addr_map,
       RDY_set_watch_tohost,
       RDY_slave_ar_put,
       RDY_slave_aw_put,
       RDY_slave_b_drop,
       RDY_slave_b_peek,
       RDY_slave_r_drop,
       RDY_slave_r_peek,
       RDY_slave_w_put,
       RDY_to_raw_mem_request_get,
       RDY_to_raw_mem_response_put,
       slave_ar_canPut,
       slave_aw_canPut,
       slave_b_canPeek,
       slave_r_canPeek,
       slave_w_canPut;

  // inlined wires
  reg [353 : 0] f_raw_mem_reqs_rv$port1__write_1;
  wire [353 : 0] f_raw_mem_reqs_rv$port1__read,
		 f_raw_mem_reqs_rv$port2__read,
		 f_raw_mem_reqs_rv$port3__read;
  wire [256 : 0] f_raw_mem_rsps_rv$port1__read,
		 f_raw_mem_rsps_rv$port1__write_1,
		 f_raw_mem_rsps_rv$port2__read,
		 f_raw_mem_rsps_rv$port3__read;
  wire [173 : 0] f_reqs_rv$port1__read,
		 f_reqs_rv$port1__write_1,
		 f_reqs_rv$port2__read;
  wire f_raw_mem_reqs_rv$EN_port1__write,
       f_raw_mem_reqs_rv$EN_port2__write,
       f_raw_mem_rsps_rv$EN_port2__write,
       f_reqs_rv$EN_port0__write,
       f_reqs_rv$EN_port1__write;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register f_raw_mem_reqs_rv
  reg [353 : 0] f_raw_mem_reqs_rv;
  wire [353 : 0] f_raw_mem_reqs_rv$D_IN;
  wire f_raw_mem_reqs_rv$EN;

  // register f_raw_mem_rsps_rv
  reg [256 : 0] f_raw_mem_rsps_rv;
  wire [256 : 0] f_raw_mem_rsps_rv$D_IN;
  wire f_raw_mem_rsps_rv$EN;

  // register f_reqs_rv
  reg [173 : 0] f_reqs_rv;
  wire [173 : 0] f_reqs_rv$D_IN;
  wire f_reqs_rv$EN;

  // register rg_addr_base
  reg [63 : 0] rg_addr_base;
  wire [63 : 0] rg_addr_base$D_IN;
  wire rg_addr_base$EN;

  // register rg_addr_lim
  reg [63 : 0] rg_addr_lim;
  wire [63 : 0] rg_addr_lim$D_IN;
  wire rg_addr_lim$EN;

  // register rg_cached_clean
  reg rg_cached_clean;
  wire rg_cached_clean$D_IN, rg_cached_clean$EN;

  // register rg_cached_raw_mem_addr
  reg [63 : 0] rg_cached_raw_mem_addr;
  wire [63 : 0] rg_cached_raw_mem_addr$D_IN;
  wire rg_cached_raw_mem_addr$EN;

  // register rg_cached_raw_mem_word
  reg [255 : 0] rg_cached_raw_mem_word;
  wire [255 : 0] rg_cached_raw_mem_word$D_IN;
  wire rg_cached_raw_mem_word$EN;

  // register rg_mem_map_set
  reg rg_mem_map_set;
  wire rg_mem_map_set$D_IN, rg_mem_map_set$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  reg [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_status
  reg [7 : 0] rg_status;
  wire [7 : 0] rg_status$D_IN;
  wire rg_status$EN;

  // register rg_tohost_addr
  reg [63 : 0] rg_tohost_addr;
  wire [63 : 0] rg_tohost_addr$D_IN;
  wire rg_tohost_addr$EN;

  // register rg_watch_tohost
  reg rg_watch_tohost;
  wire rg_watch_tohost$D_IN, rg_watch_tohost$EN;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule slavePortShim_arff
  wire [99 : 0] slavePortShim_arff$D_IN, slavePortShim_arff$D_OUT;
  wire slavePortShim_arff$CLR,
       slavePortShim_arff$DEQ,
       slavePortShim_arff$EMPTY_N,
       slavePortShim_arff$ENQ,
       slavePortShim_arff$FULL_N;

  // ports of submodule slavePortShim_awff
  wire [99 : 0] slavePortShim_awff$D_IN, slavePortShim_awff$D_OUT;
  wire slavePortShim_awff$CLR,
       slavePortShim_awff$DEQ,
       slavePortShim_awff$EMPTY_N,
       slavePortShim_awff$ENQ,
       slavePortShim_awff$FULL_N;

  // ports of submodule slavePortShim_bff
  wire [8 : 0] slavePortShim_bff$D_IN, slavePortShim_bff$D_OUT;
  wire slavePortShim_bff$CLR,
       slavePortShim_bff$DEQ,
       slavePortShim_bff$EMPTY_N,
       slavePortShim_bff$ENQ,
       slavePortShim_bff$FULL_N;

  // ports of submodule slavePortShim_rff
  wire [73 : 0] slavePortShim_rff$D_IN, slavePortShim_rff$D_OUT;
  wire slavePortShim_rff$CLR,
       slavePortShim_rff$DEQ,
       slavePortShim_rff$EMPTY_N,
       slavePortShim_rff$ENQ,
       slavePortShim_rff$FULL_N;

  // ports of submodule slavePortShim_wff
  wire [72 : 0] slavePortShim_wff$D_IN, slavePortShim_wff$D_OUT;
  wire slavePortShim_wff$CLR,
       slavePortShim_wff$DEQ,
       slavePortShim_wff$EMPTY_N,
       slavePortShim_wff$ENQ,
       slavePortShim_wff$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_external_reset,
       CAN_FIRE_RL_rl_invalid_rd_address,
       CAN_FIRE_RL_rl_invalid_wr_address,
       CAN_FIRE_RL_rl_merge_rd_req,
       CAN_FIRE_RL_rl_merge_wr_req,
       CAN_FIRE_RL_rl_miss_clean_req,
       CAN_FIRE_RL_rl_power_on_reset,
       CAN_FIRE_RL_rl_process_rd_req,
       CAN_FIRE_RL_rl_process_wr_req,
       CAN_FIRE_RL_rl_reload,
       CAN_FIRE_RL_rl_reset_reload_cache,
       CAN_FIRE_RL_rl_writeback_dirty,
       CAN_FIRE_RL_rl_writeback_dirty_idle,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_addr_map,
       CAN_FIRE_set_watch_tohost,
       CAN_FIRE_slave_ar_put,
       CAN_FIRE_slave_aw_put,
       CAN_FIRE_slave_b_drop,
       CAN_FIRE_slave_r_drop,
       CAN_FIRE_slave_w_put,
       CAN_FIRE_to_raw_mem_request_get,
       CAN_FIRE_to_raw_mem_response_put,
       WILL_FIRE_RL_rl_external_reset,
       WILL_FIRE_RL_rl_invalid_rd_address,
       WILL_FIRE_RL_rl_invalid_wr_address,
       WILL_FIRE_RL_rl_merge_rd_req,
       WILL_FIRE_RL_rl_merge_wr_req,
       WILL_FIRE_RL_rl_miss_clean_req,
       WILL_FIRE_RL_rl_power_on_reset,
       WILL_FIRE_RL_rl_process_rd_req,
       WILL_FIRE_RL_rl_process_wr_req,
       WILL_FIRE_RL_rl_reload,
       WILL_FIRE_RL_rl_reset_reload_cache,
       WILL_FIRE_RL_rl_writeback_dirty,
       WILL_FIRE_RL_rl_writeback_dirty_idle,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_addr_map,
       WILL_FIRE_set_watch_tohost,
       WILL_FIRE_slave_ar_put,
       WILL_FIRE_slave_aw_put,
       WILL_FIRE_slave_b_drop,
       WILL_FIRE_slave_r_drop,
       WILL_FIRE_slave_w_put,
       WILL_FIRE_to_raw_mem_request_get,
       WILL_FIRE_to_raw_mem_response_put;

  // inputs to muxes for submodule ports
  wire [353 : 0] MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_1,
		 MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_3;
  wire [255 : 0] MUX_rg_cached_raw_mem_word$write_1__VAL_1;
  wire [173 : 0] MUX_f_reqs_rv$port1__write_1__VAL_1,
		 MUX_f_reqs_rv$port1__write_1__VAL_2;
  wire [73 : 0] MUX_slavePortShim_rff$enq_1__VAL_1,
		MUX_slavePortShim_rff$enq_1__VAL_2;
  wire [8 : 0] MUX_slavePortShim_bff$enq_1__VAL_1,
	       MUX_slavePortShim_bff$enq_1__VAL_2;
  wire MUX_f_raw_mem_reqs_rv$port1__write_1__SEL_1,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h2444;
  reg [31 : 0] v__h3455;
  reg [31 : 0] v__h3973;
  reg [31 : 0] v__h4469;
  reg [31 : 0] v__h4758;
  reg [31 : 0] v__h5473;
  reg [31 : 0] v__h7746;
  reg [31 : 0] v__h7978;
  reg [31 : 0] v__h8503;
  reg [31 : 0] v__h9354;
  reg [31 : 0] v__h10053;
  reg [31 : 0] v__h2760;
  reg [31 : 0] v__h3124;
  reg [31 : 0] v__h1703;
  reg [31 : 0] v__h2011;
  reg [31 : 0] v__h1697;
  reg [31 : 0] v__h2005;
  reg [31 : 0] v__h2438;
  reg [31 : 0] v__h2754;
  reg [31 : 0] v__h3118;
  reg [31 : 0] v__h3449;
  reg [31 : 0] v__h3967;
  reg [31 : 0] v__h4463;
  reg [31 : 0] v__h4752;
  reg [31 : 0] v__h5467;
  reg [31 : 0] v__h7740;
  reg [31 : 0] v__h7972;
  reg [31 : 0] v__h8497;
  reg [31 : 0] v__h9348;
  reg [31 : 0] v__h10047;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] rdata__h5144, word64_old__h5981;
  wire [63 : 0] exit_value__h8024,
		f_reqs_rv_BITS_164_TO_101_MINUS_rg_addr_base__q1,
		mask__h5986,
		req_raw_mem_addr__h3280,
		updated_word64__h5987,
		x__h6369,
		y__h6370,
		y__h6371;
  wire [7 : 0] SEXT_f_reqs_rv_port0__read__08_BIT_64_66___d267,
	       SEXT_f_reqs_rv_port0__read__08_BIT_65_63___d264,
	       SEXT_f_reqs_rv_port0__read__08_BIT_66_59___d260,
	       SEXT_f_reqs_rv_port0__read__08_BIT_67_56___d257,
	       SEXT_f_reqs_rv_port0__read__08_BIT_68_52___d253,
	       SEXT_f_reqs_rv_port0__read__08_BIT_69_49___d250,
	       SEXT_f_reqs_rv_port0__read__08_BIT_70_45___d246,
	       SEXT_f_reqs_rv_port0__read__08_BIT_71_42___d243;
  wire [4 : 0] n__h5143;
  wire NOT_cfg_verbosity_read_ULE_1___d5,
       NOT_cfg_verbosity_read_ULE_2_4___d35,
       NOT_f_reqs_rv_port0__read__08_BITS_92_TO_90_24_ETC___d331,
       f_reqs_rv_port0__read__08_BITS_164_TO_101_62_U_ETC___d165,
       f_reqs_rv_port0__read__08_BITS_92_TO_90_24_EQ__ETC___d160,
       rg_addr_base_61_ULE_f_reqs_rv_port0__read__08__ETC___d163,
       rg_cached_raw_mem_addr_16_EQ_0_CONCAT_f_reqs_r_ETC___d172,
       rg_state_read_EQ_3_3_AND_rg_mem_map_set_22_23__ETC___d168,
       rg_state_read_EQ_3_3_AND_rg_mem_map_set_22_23__ETC___d336,
       rg_watch_tohost_89_AND_f_reqs_rv_port0__read___ETC___d295;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method set_addr_map
  assign RDY_set_addr_map = rg_state == 2'd3 ;
  assign CAN_FIRE_set_addr_map = rg_state == 2'd3 ;
  assign WILL_FIRE_set_addr_map = EN_set_addr_map ;

  // value method slave_aw_canPut
  assign slave_aw_canPut = slavePortShim_awff$FULL_N ;

  // action method slave_aw_put
  assign RDY_slave_aw_put = slavePortShim_awff$FULL_N ;
  assign CAN_FIRE_slave_aw_put = slavePortShim_awff$FULL_N ;
  assign WILL_FIRE_slave_aw_put = EN_slave_aw_put ;

  // value method slave_w_canPut
  assign slave_w_canPut = slavePortShim_wff$FULL_N ;

  // action method slave_w_put
  assign RDY_slave_w_put = slavePortShim_wff$FULL_N ;
  assign CAN_FIRE_slave_w_put = slavePortShim_wff$FULL_N ;
  assign WILL_FIRE_slave_w_put = EN_slave_w_put ;

  // value method slave_b_canPeek
  assign slave_b_canPeek = slavePortShim_bff$EMPTY_N ;

  // value method slave_b_peek
  assign slave_b_peek = slavePortShim_bff$D_OUT ;
  assign RDY_slave_b_peek = slavePortShim_bff$EMPTY_N ;

  // action method slave_b_drop
  assign RDY_slave_b_drop = slavePortShim_bff$EMPTY_N ;
  assign CAN_FIRE_slave_b_drop = slavePortShim_bff$EMPTY_N ;
  assign WILL_FIRE_slave_b_drop = EN_slave_b_drop ;

  // value method slave_ar_canPut
  assign slave_ar_canPut = slavePortShim_arff$FULL_N ;

  // action method slave_ar_put
  assign RDY_slave_ar_put = slavePortShim_arff$FULL_N ;
  assign CAN_FIRE_slave_ar_put = slavePortShim_arff$FULL_N ;
  assign WILL_FIRE_slave_ar_put = EN_slave_ar_put ;

  // value method slave_r_canPeek
  assign slave_r_canPeek = slavePortShim_rff$EMPTY_N ;

  // value method slave_r_peek
  assign slave_r_peek = slavePortShim_rff$D_OUT ;
  assign RDY_slave_r_peek = slavePortShim_rff$EMPTY_N ;

  // action method slave_r_drop
  assign RDY_slave_r_drop = slavePortShim_rff$EMPTY_N ;
  assign CAN_FIRE_slave_r_drop = slavePortShim_rff$EMPTY_N ;
  assign WILL_FIRE_slave_r_drop = EN_slave_r_drop ;

  // actionvalue method to_raw_mem_request_get
  assign to_raw_mem_request_get = f_raw_mem_reqs_rv[352:0] ;
  assign RDY_to_raw_mem_request_get = f_raw_mem_reqs_rv[353] ;
  assign CAN_FIRE_to_raw_mem_request_get = f_raw_mem_reqs_rv[353] ;
  assign WILL_FIRE_to_raw_mem_request_get = EN_to_raw_mem_request_get ;

  // action method to_raw_mem_response_put
  assign RDY_to_raw_mem_response_put = !f_raw_mem_rsps_rv$port1__read[256] ;
  assign CAN_FIRE_to_raw_mem_response_put =
	     !f_raw_mem_rsps_rv$port1__read[256] ;
  assign WILL_FIRE_to_raw_mem_response_put = EN_to_raw_mem_response_put ;

  // value method status
  assign status = rg_status ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // submodule f_reset_reqs
  FIFO20 #(.guarded(1'd1)) f_reset_reqs(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_reqs$ENQ),
					.DEQ(f_reset_reqs$DEQ),
					.CLR(f_reset_reqs$CLR),
					.FULL_N(f_reset_reqs$FULL_N),
					.EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(1'd1)) f_reset_rsps(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_rsps$ENQ),
					.DEQ(f_reset_rsps$DEQ),
					.CLR(f_reset_rsps$CLR),
					.FULL_N(f_reset_rsps$FULL_N),
					.EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule slavePortShim_arff
  FIFO2 #(.width(32'd100), .guarded(1'd1)) slavePortShim_arff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(slavePortShim_arff$D_IN),
							      .ENQ(slavePortShim_arff$ENQ),
							      .DEQ(slavePortShim_arff$DEQ),
							      .CLR(slavePortShim_arff$CLR),
							      .D_OUT(slavePortShim_arff$D_OUT),
							      .FULL_N(slavePortShim_arff$FULL_N),
							      .EMPTY_N(slavePortShim_arff$EMPTY_N));

  // submodule slavePortShim_awff
  FIFO2 #(.width(32'd100), .guarded(1'd1)) slavePortShim_awff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(slavePortShim_awff$D_IN),
							      .ENQ(slavePortShim_awff$ENQ),
							      .DEQ(slavePortShim_awff$DEQ),
							      .CLR(slavePortShim_awff$CLR),
							      .D_OUT(slavePortShim_awff$D_OUT),
							      .FULL_N(slavePortShim_awff$FULL_N),
							      .EMPTY_N(slavePortShim_awff$EMPTY_N));

  // submodule slavePortShim_bff
  FIFO2 #(.width(32'd9), .guarded(1'd1)) slavePortShim_bff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(slavePortShim_bff$D_IN),
							   .ENQ(slavePortShim_bff$ENQ),
							   .DEQ(slavePortShim_bff$DEQ),
							   .CLR(slavePortShim_bff$CLR),
							   .D_OUT(slavePortShim_bff$D_OUT),
							   .FULL_N(slavePortShim_bff$FULL_N),
							   .EMPTY_N(slavePortShim_bff$EMPTY_N));

  // submodule slavePortShim_rff
  FIFO2 #(.width(32'd74), .guarded(1'd1)) slavePortShim_rff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(slavePortShim_rff$D_IN),
							    .ENQ(slavePortShim_rff$ENQ),
							    .DEQ(slavePortShim_rff$DEQ),
							    .CLR(slavePortShim_rff$CLR),
							    .D_OUT(slavePortShim_rff$D_OUT),
							    .FULL_N(slavePortShim_rff$FULL_N),
							    .EMPTY_N(slavePortShim_rff$EMPTY_N));

  // submodule slavePortShim_wff
  FIFO2 #(.width(32'd73), .guarded(1'd1)) slavePortShim_wff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(slavePortShim_wff$D_IN),
							    .ENQ(slavePortShim_wff$ENQ),
							    .DEQ(slavePortShim_wff$DEQ),
							    .CLR(slavePortShim_wff$CLR),
							    .D_OUT(slavePortShim_wff$D_OUT),
							    .FULL_N(slavePortShim_wff$FULL_N),
							    .EMPTY_N(slavePortShim_wff$EMPTY_N));

  // rule RL_rl_reset_reload_cache
  assign CAN_FIRE_RL_rl_reset_reload_cache =
	     !f_raw_mem_reqs_rv$port1__read[353] && rg_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_reset_reload_cache =
	     CAN_FIRE_RL_rl_reset_reload_cache ;

  // rule RL_rl_writeback_dirty_idle
  assign CAN_FIRE_RL_rl_writeback_dirty_idle =
	     !f_raw_mem_reqs_rv$port1__read[353] && rg_state == 2'd3 &&
	     !f_reqs_rv[173] &&
	     !rg_cached_clean ;
  assign WILL_FIRE_RL_rl_writeback_dirty_idle =
	     CAN_FIRE_RL_rl_writeback_dirty_idle ;

  // rule RL_rl_writeback_dirty
  assign CAN_FIRE_RL_rl_writeback_dirty =
	     !f_raw_mem_reqs_rv$port1__read[353] && f_reqs_rv[173] &&
	     rg_state_read_EQ_3_3_AND_rg_mem_map_set_22_23__ETC___d168 &&
	     !rg_cached_raw_mem_addr_16_EQ_0_CONCAT_f_reqs_r_ETC___d172 &&
	     !rg_cached_clean ;
  assign WILL_FIRE_RL_rl_writeback_dirty = CAN_FIRE_RL_rl_writeback_dirty ;

  // rule RL_rl_miss_clean_req
  assign CAN_FIRE_RL_rl_miss_clean_req =
	     f_reqs_rv[173] && !f_raw_mem_reqs_rv$port1__read[353] &&
	     rg_state_read_EQ_3_3_AND_rg_mem_map_set_22_23__ETC___d168 &&
	     !rg_cached_raw_mem_addr_16_EQ_0_CONCAT_f_reqs_r_ETC___d172 &&
	     rg_cached_clean ;
  assign WILL_FIRE_RL_rl_miss_clean_req = CAN_FIRE_RL_rl_miss_clean_req ;

  // rule RL_rl_reload
  assign CAN_FIRE_RL_rl_reload = MUX_rg_state$write_1__SEL_3 ;
  assign WILL_FIRE_RL_rl_reload = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_process_rd_req
  assign CAN_FIRE_RL_rl_process_rd_req =
	     f_reqs_rv[173] && slavePortShim_rff$FULL_N &&
	     rg_state_read_EQ_3_3_AND_rg_mem_map_set_22_23__ETC___d168 &&
	     rg_cached_raw_mem_addr_16_EQ_0_CONCAT_f_reqs_r_ETC___d172 &&
	     !f_reqs_rv[172] ;
  assign WILL_FIRE_RL_rl_process_rd_req = CAN_FIRE_RL_rl_process_rd_req ;

  // rule RL_rl_process_wr_req
  assign CAN_FIRE_RL_rl_process_wr_req =
	     f_reqs_rv[173] && slavePortShim_bff$FULL_N &&
	     rg_state_read_EQ_3_3_AND_rg_mem_map_set_22_23__ETC___d168 &&
	     rg_cached_raw_mem_addr_16_EQ_0_CONCAT_f_reqs_r_ETC___d172 &&
	     f_reqs_rv[172] ;
  assign WILL_FIRE_RL_rl_process_wr_req = CAN_FIRE_RL_rl_process_wr_req ;

  // rule RL_rl_invalid_rd_address
  assign CAN_FIRE_RL_rl_invalid_rd_address =
	     f_reqs_rv[173] && slavePortShim_rff$FULL_N &&
	     rg_state_read_EQ_3_3_AND_rg_mem_map_set_22_23__ETC___d336 &&
	     !f_reqs_rv[172] ;
  assign WILL_FIRE_RL_rl_invalid_rd_address =
	     CAN_FIRE_RL_rl_invalid_rd_address ;

  // rule RL_rl_invalid_wr_address
  assign CAN_FIRE_RL_rl_invalid_wr_address =
	     f_reqs_rv[173] && slavePortShim_bff$FULL_N &&
	     rg_state_read_EQ_3_3_AND_rg_mem_map_set_22_23__ETC___d336 &&
	     f_reqs_rv[172] ;
  assign WILL_FIRE_RL_rl_invalid_wr_address =
	     CAN_FIRE_RL_rl_invalid_wr_address ;

  // rule RL_rl_merge_rd_req
  assign CAN_FIRE_RL_rl_merge_rd_req =
	     slavePortShim_arff$EMPTY_N && !f_reqs_rv$port1__read[173] ;
  assign WILL_FIRE_RL_rl_merge_rd_req = CAN_FIRE_RL_rl_merge_rd_req ;

  // rule RL_rl_merge_wr_req
  assign CAN_FIRE_RL_rl_merge_wr_req =
	     !f_reqs_rv$port1__read[173] && slavePortShim_awff$EMPTY_N &&
	     slavePortShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_rl_merge_wr_req =
	     CAN_FIRE_RL_rl_merge_wr_req && !WILL_FIRE_RL_rl_merge_rd_req ;

  // rule RL_rl_power_on_reset
  assign CAN_FIRE_RL_rl_power_on_reset = rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_power_on_reset = rg_state == 2'd0 ;

  // rule RL_rl_external_reset
  assign CAN_FIRE_RL_rl_external_reset = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_external_reset = MUX_rg_state$write_1__SEL_1 ;

  // inputs to muxes for submodule ports
  assign MUX_f_raw_mem_reqs_rv$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_writeback_dirty ||
	     WILL_FIRE_RL_rl_writeback_dirty_idle ;
  assign MUX_rg_state$write_1__SEL_1 =
	     f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N && rg_state == 2'd3 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     f_raw_mem_rsps_rv[256] && rg_state == 2'd2 ;
  assign MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_1 =
	     { 34'h3FFFFFFFF,
	       rg_cached_raw_mem_addr,
	       rg_cached_raw_mem_word } ;
  assign MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_3 =
	     { 34'h2FFFFFFFF,
	       req_raw_mem_addr__h3280,
	       256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_reqs_rv$port1__write_1__VAL_1 =
	     { 2'd2, slavePortShim_arff$D_OUT, 72'hAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_reqs_rv$port1__write_1__VAL_2 =
	     { 2'd3,
	       slavePortShim_awff$D_OUT,
	       slavePortShim_wff$D_OUT[8:1],
	       slavePortShim_wff$D_OUT[72:9] } ;
  assign MUX_rg_cached_raw_mem_word$write_1__VAL_1 =
	     { (f_reqs_rv[105:104] == 2'd3) ?
		 updated_word64__h5987 :
		 rg_cached_raw_mem_word[255:192],
	       (f_reqs_rv[105:104] == 2'd2) ?
		 updated_word64__h5987 :
		 rg_cached_raw_mem_word[191:128],
	       (f_reqs_rv[105:104] == 2'd1) ?
		 updated_word64__h5987 :
		 rg_cached_raw_mem_word[127:64],
	       (f_reqs_rv[105:104] == 2'd0) ?
		 updated_word64__h5987 :
		 rg_cached_raw_mem_word[63:0] } ;
  assign MUX_slavePortShim_bff$enq_1__VAL_1 = { f_reqs_rv[171:165], 2'd0 } ;
  assign MUX_slavePortShim_bff$enq_1__VAL_2 = { f_reqs_rv[171:165], 2'd2 } ;
  assign MUX_slavePortShim_rff$enq_1__VAL_1 =
	     { f_reqs_rv[171:165], rdata__h5144, 3'd1 } ;
  assign MUX_slavePortShim_rff$enq_1__VAL_2 = { f_reqs_rv[171:101], 3'd5 } ;

  // inlined wires
  assign f_reqs_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_invalid_wr_address ||
	     WILL_FIRE_RL_rl_invalid_rd_address ||
	     WILL_FIRE_RL_rl_process_wr_req ||
	     WILL_FIRE_RL_rl_process_rd_req ;
  assign f_reqs_rv$port1__read =
	     f_reqs_rv$EN_port0__write ?
	       174'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       f_reqs_rv ;
  assign f_reqs_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_merge_rd_req || WILL_FIRE_RL_rl_merge_wr_req ;
  assign f_reqs_rv$port1__write_1 =
	     WILL_FIRE_RL_rl_merge_rd_req ?
	       MUX_f_reqs_rv$port1__write_1__VAL_1 :
	       MUX_f_reqs_rv$port1__write_1__VAL_2 ;
  assign f_reqs_rv$port2__read =
	     f_reqs_rv$EN_port1__write ?
	       f_reqs_rv$port1__write_1 :
	       f_reqs_rv$port1__read ;
  assign f_raw_mem_reqs_rv$port1__read =
	     EN_to_raw_mem_request_get ?
	       354'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       f_raw_mem_reqs_rv ;
  assign f_raw_mem_reqs_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_writeback_dirty ||
	     WILL_FIRE_RL_rl_writeback_dirty_idle ||
	     WILL_FIRE_RL_rl_reset_reload_cache ||
	     WILL_FIRE_RL_rl_miss_clean_req ;
  always@(MUX_f_raw_mem_reqs_rv$port1__write_1__SEL_1 or
	  MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_1 or
	  WILL_FIRE_RL_rl_reset_reload_cache or
	  WILL_FIRE_RL_rl_miss_clean_req or
	  MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_raw_mem_reqs_rv$port1__write_1__SEL_1:
	  f_raw_mem_reqs_rv$port1__write_1 =
	      MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_1;
      WILL_FIRE_RL_rl_reset_reload_cache:
	  f_raw_mem_reqs_rv$port1__write_1 =
	      354'h2FFFFFFFF0000000000000000AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_miss_clean_req:
	  f_raw_mem_reqs_rv$port1__write_1 =
	      MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_3;
      default: f_raw_mem_reqs_rv$port1__write_1 =
		   354'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_raw_mem_reqs_rv$port2__read =
	     f_raw_mem_reqs_rv$EN_port1__write ?
	       f_raw_mem_reqs_rv$port1__write_1 :
	       f_raw_mem_reqs_rv$port1__read ;
  assign f_raw_mem_reqs_rv$EN_port2__write =
	     WILL_FIRE_RL_rl_external_reset ||
	     WILL_FIRE_RL_rl_power_on_reset ;
  assign f_raw_mem_reqs_rv$port3__read =
	     f_raw_mem_reqs_rv$EN_port2__write ?
	       354'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       f_raw_mem_reqs_rv$port2__read ;
  assign f_raw_mem_rsps_rv$port1__read =
	     MUX_rg_state$write_1__SEL_3 ?
	       257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       f_raw_mem_rsps_rv ;
  assign f_raw_mem_rsps_rv$port1__write_1 =
	     { 1'd1, to_raw_mem_response_put } ;
  assign f_raw_mem_rsps_rv$port2__read =
	     EN_to_raw_mem_response_put ?
	       f_raw_mem_rsps_rv$port1__write_1 :
	       f_raw_mem_rsps_rv$port1__read ;
  assign f_raw_mem_rsps_rv$EN_port2__write =
	     WILL_FIRE_RL_rl_external_reset ||
	     WILL_FIRE_RL_rl_power_on_reset ;
  assign f_raw_mem_rsps_rv$port3__read =
	     f_raw_mem_rsps_rv$EN_port2__write ?
	       257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       f_raw_mem_rsps_rv$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register f_raw_mem_reqs_rv
  assign f_raw_mem_reqs_rv$D_IN = f_raw_mem_reqs_rv$port3__read ;
  assign f_raw_mem_reqs_rv$EN = 1'b1 ;

  // register f_raw_mem_rsps_rv
  assign f_raw_mem_rsps_rv$D_IN = f_raw_mem_rsps_rv$port3__read ;
  assign f_raw_mem_rsps_rv$EN = 1'b1 ;

  // register f_reqs_rv
  assign f_reqs_rv$D_IN = f_reqs_rv$port2__read ;
  assign f_reqs_rv$EN = 1'b1 ;

  // register rg_addr_base
  assign rg_addr_base$D_IN = set_addr_map_addr_base ;
  assign rg_addr_base$EN = EN_set_addr_map ;

  // register rg_addr_lim
  assign rg_addr_lim$D_IN = set_addr_map_addr_lim ;
  assign rg_addr_lim$EN = EN_set_addr_map ;

  // register rg_cached_clean
  assign rg_cached_clean$D_IN = !WILL_FIRE_RL_rl_process_wr_req ;
  assign rg_cached_clean$EN =
	     WILL_FIRE_RL_rl_process_wr_req || WILL_FIRE_RL_rl_reload ||
	     WILL_FIRE_RL_rl_writeback_dirty ||
	     WILL_FIRE_RL_rl_writeback_dirty_idle ;

  // register rg_cached_raw_mem_addr
  assign rg_cached_raw_mem_addr$D_IN =
	     WILL_FIRE_RL_rl_miss_clean_req ?
	       req_raw_mem_addr__h3280 :
	       64'd0 ;
  assign rg_cached_raw_mem_addr$EN =
	     WILL_FIRE_RL_rl_miss_clean_req ||
	     WILL_FIRE_RL_rl_reset_reload_cache ;

  // register rg_cached_raw_mem_word
  assign rg_cached_raw_mem_word$D_IN =
	     WILL_FIRE_RL_rl_process_wr_req ?
	       MUX_rg_cached_raw_mem_word$write_1__VAL_1 :
	       f_raw_mem_rsps_rv[255:0] ;
  assign rg_cached_raw_mem_word$EN =
	     WILL_FIRE_RL_rl_process_wr_req || WILL_FIRE_RL_rl_reload ;

  // register rg_mem_map_set
  assign rg_mem_map_set$D_IN = 1'd1 ;
  assign rg_mem_map_set$EN = EN_set_addr_map ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_external_reset or
	  WILL_FIRE_RL_rl_power_on_reset or
	  WILL_FIRE_RL_rl_reload or
	  WILL_FIRE_RL_rl_miss_clean_req or
	  WILL_FIRE_RL_rl_reset_reload_cache)
  case (1'b1)
    WILL_FIRE_RL_rl_external_reset || WILL_FIRE_RL_rl_power_on_reset:
	rg_state$D_IN = 2'd1;
    WILL_FIRE_RL_rl_reload: rg_state$D_IN = 2'd3;
    WILL_FIRE_RL_rl_miss_clean_req || WILL_FIRE_RL_rl_reset_reload_cache:
	rg_state$D_IN = 2'd2;
    default: rg_state$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_external_reset ||
	     WILL_FIRE_RL_rl_power_on_reset ||
	     WILL_FIRE_RL_rl_miss_clean_req ||
	     WILL_FIRE_RL_rl_reset_reload_cache ||
	     WILL_FIRE_RL_rl_reload ;

  // register rg_status
  assign rg_status$D_IN =
	     (WILL_FIRE_RL_rl_external_reset ||
	      WILL_FIRE_RL_rl_power_on_reset) ?
	       8'd0 :
	       8'd1 ;
  assign rg_status$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     rg_watch_tohost_89_AND_f_reqs_rv_port0__read___ETC___d295 ||
	     WILL_FIRE_RL_rl_external_reset ||
	     WILL_FIRE_RL_rl_power_on_reset ;

  // register rg_tohost_addr
  assign rg_tohost_addr$D_IN = set_watch_tohost_tohost_addr ;
  assign rg_tohost_addr$EN = EN_set_watch_tohost ;

  // register rg_watch_tohost
  assign rg_watch_tohost$D_IN = set_watch_tohost_watch_tohost ;
  assign rg_watch_tohost$EN = EN_set_watch_tohost ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_server_reset_request_put ;
  assign f_reset_reqs$DEQ = MUX_rg_state$write_1__SEL_1 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_1 ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule slavePortShim_arff
  assign slavePortShim_arff$D_IN = slave_ar_put_val ;
  assign slavePortShim_arff$ENQ = EN_slave_ar_put ;
  assign slavePortShim_arff$DEQ = CAN_FIRE_RL_rl_merge_rd_req ;
  assign slavePortShim_arff$CLR =
	     WILL_FIRE_RL_rl_external_reset ||
	     WILL_FIRE_RL_rl_power_on_reset ;

  // submodule slavePortShim_awff
  assign slavePortShim_awff$D_IN = slave_aw_put_val ;
  assign slavePortShim_awff$ENQ = EN_slave_aw_put ;
  assign slavePortShim_awff$DEQ = WILL_FIRE_RL_rl_merge_wr_req ;
  assign slavePortShim_awff$CLR =
	     WILL_FIRE_RL_rl_external_reset ||
	     WILL_FIRE_RL_rl_power_on_reset ;

  // submodule slavePortShim_bff
  assign slavePortShim_bff$D_IN =
	     WILL_FIRE_RL_rl_process_wr_req ?
	       MUX_slavePortShim_bff$enq_1__VAL_1 :
	       MUX_slavePortShim_bff$enq_1__VAL_2 ;
  assign slavePortShim_bff$ENQ =
	     WILL_FIRE_RL_rl_process_wr_req ||
	     WILL_FIRE_RL_rl_invalid_wr_address ;
  assign slavePortShim_bff$DEQ = EN_slave_b_drop ;
  assign slavePortShim_bff$CLR =
	     WILL_FIRE_RL_rl_external_reset ||
	     WILL_FIRE_RL_rl_power_on_reset ;

  // submodule slavePortShim_rff
  assign slavePortShim_rff$D_IN =
	     WILL_FIRE_RL_rl_process_rd_req ?
	       MUX_slavePortShim_rff$enq_1__VAL_1 :
	       MUX_slavePortShim_rff$enq_1__VAL_2 ;
  assign slavePortShim_rff$ENQ =
	     WILL_FIRE_RL_rl_process_rd_req ||
	     WILL_FIRE_RL_rl_invalid_rd_address ;
  assign slavePortShim_rff$DEQ = EN_slave_r_drop ;
  assign slavePortShim_rff$CLR =
	     WILL_FIRE_RL_rl_external_reset ||
	     WILL_FIRE_RL_rl_power_on_reset ;

  // submodule slavePortShim_wff
  assign slavePortShim_wff$D_IN = slave_w_put_val ;
  assign slavePortShim_wff$ENQ = EN_slave_w_put ;
  assign slavePortShim_wff$DEQ = WILL_FIRE_RL_rl_merge_wr_req ;
  assign slavePortShim_wff$CLR =
	     WILL_FIRE_RL_rl_external_reset ||
	     WILL_FIRE_RL_rl_power_on_reset ;

  // remaining internal signals
  assign NOT_cfg_verbosity_read_ULE_1___d5 = cfg_verbosity > 4'd1 ;
  assign NOT_cfg_verbosity_read_ULE_2_4___d35 = cfg_verbosity > 4'd2 ;
  assign NOT_f_reqs_rv_port0__read__08_BITS_92_TO_90_24_ETC___d331 =
	     f_reqs_rv[92:90] != 3'b0 &&
	     (f_reqs_rv[92:90] != 3'b001 || f_reqs_rv[101]) &&
	     (f_reqs_rv[92:90] != 3'b010 || f_reqs_rv[102:101] != 2'h0) &&
	     (f_reqs_rv[92:90] != 3'b011 || f_reqs_rv[103:101] != 3'h0) &&
	     (f_reqs_rv[92:90] != 3'b100 || f_reqs_rv[104:101] != 4'h0) &&
	     (f_reqs_rv[92:90] != 3'b101 || f_reqs_rv[105:101] != 5'h0) &&
	     (f_reqs_rv[92:90] != 3'b110 || f_reqs_rv[106:101] != 6'h0) &&
	     (f_reqs_rv[92:90] != 3'b111 || f_reqs_rv[107:101] != 7'h0) ;
  assign SEXT_f_reqs_rv_port0__read__08_BIT_64_66___d267 =
	     {8{f_reqs_rv[64]}} ;
  assign SEXT_f_reqs_rv_port0__read__08_BIT_65_63___d264 =
	     {8{f_reqs_rv[65]}} ;
  assign SEXT_f_reqs_rv_port0__read__08_BIT_66_59___d260 =
	     {8{f_reqs_rv[66]}} ;
  assign SEXT_f_reqs_rv_port0__read__08_BIT_67_56___d257 =
	     {8{f_reqs_rv[67]}} ;
  assign SEXT_f_reqs_rv_port0__read__08_BIT_68_52___d253 =
	     {8{f_reqs_rv[68]}} ;
  assign SEXT_f_reqs_rv_port0__read__08_BIT_69_49___d250 =
	     {8{f_reqs_rv[69]}} ;
  assign SEXT_f_reqs_rv_port0__read__08_BIT_70_45___d246 =
	     {8{f_reqs_rv[70]}} ;
  assign SEXT_f_reqs_rv_port0__read__08_BIT_71_42___d243 =
	     {8{f_reqs_rv[71]}} ;
  assign exit_value__h8024 = { 1'd0, f_reqs_rv[63:1] } ;
  assign f_reqs_rv_BITS_164_TO_101_MINUS_rg_addr_base__q1 =
	     f_reqs_rv[164:101] - rg_addr_base ;
  assign f_reqs_rv_port0__read__08_BITS_164_TO_101_62_U_ETC___d165 =
	     f_reqs_rv[164:101] < rg_addr_lim ;
  assign f_reqs_rv_port0__read__08_BITS_92_TO_90_24_EQ__ETC___d160 =
	     f_reqs_rv[92:90] == 3'b0 ||
	     f_reqs_rv[92:90] == 3'b001 && !f_reqs_rv[101] ||
	     f_reqs_rv[92:90] == 3'b010 && f_reqs_rv[102:101] == 2'h0 ||
	     f_reqs_rv[92:90] == 3'b011 && f_reqs_rv[103:101] == 3'h0 ||
	     f_reqs_rv[92:90] == 3'b100 && f_reqs_rv[104:101] == 4'h0 ||
	     f_reqs_rv[92:90] == 3'b101 && f_reqs_rv[105:101] == 5'h0 ||
	     f_reqs_rv[92:90] == 3'b110 && f_reqs_rv[106:101] == 6'h0 ||
	     f_reqs_rv[92:90] == 3'b111 && f_reqs_rv[107:101] == 7'h0 ;
  assign mask__h5986 =
	     { SEXT_f_reqs_rv_port0__read__08_BIT_71_42___d243,
	       SEXT_f_reqs_rv_port0__read__08_BIT_70_45___d246,
	       SEXT_f_reqs_rv_port0__read__08_BIT_69_49___d250,
	       SEXT_f_reqs_rv_port0__read__08_BIT_68_52___d253,
	       SEXT_f_reqs_rv_port0__read__08_BIT_67_56___d257,
	       SEXT_f_reqs_rv_port0__read__08_BIT_66_59___d260,
	       SEXT_f_reqs_rv_port0__read__08_BIT_65_63___d264,
	       SEXT_f_reqs_rv_port0__read__08_BIT_64_66___d267 } ;
  assign n__h5143 = { 3'd0, f_reqs_rv[105:104] } ;
  assign req_raw_mem_addr__h3280 =
	     { 5'd0,
	       f_reqs_rv_BITS_164_TO_101_MINUS_rg_addr_base__q1[63:5] } ;
  assign rg_addr_base_61_ULE_f_reqs_rv_port0__read__08__ETC___d163 =
	     rg_addr_base <= f_reqs_rv[164:101] ;
  assign rg_cached_raw_mem_addr_16_EQ_0_CONCAT_f_reqs_r_ETC___d172 =
	     rg_cached_raw_mem_addr == req_raw_mem_addr__h3280 ;
  assign rg_state_read_EQ_3_3_AND_rg_mem_map_set_22_23__ETC___d168 =
	     rg_state == 2'd3 && rg_mem_map_set &&
	     f_reqs_rv_port0__read__08_BITS_92_TO_90_24_EQ__ETC___d160 &&
	     rg_addr_base_61_ULE_f_reqs_rv_port0__read__08__ETC___d163 &&
	     f_reqs_rv_port0__read__08_BITS_164_TO_101_62_U_ETC___d165 ;
  assign rg_state_read_EQ_3_3_AND_rg_mem_map_set_22_23__ETC___d336 =
	     rg_state == 2'd3 && rg_mem_map_set &&
	     (NOT_f_reqs_rv_port0__read__08_BITS_92_TO_90_24_ETC___d331 ||
	      !rg_addr_base_61_ULE_f_reqs_rv_port0__read__08__ETC___d163 ||
	      !f_reqs_rv_port0__read__08_BITS_164_TO_101_62_U_ETC___d165) ;
  assign rg_watch_tohost_89_AND_f_reqs_rv_port0__read___ETC___d295 =
	     rg_watch_tohost && f_reqs_rv[164:101] == rg_tohost_addr &&
	     f_reqs_rv[63:0] != 64'd0 ;
  assign updated_word64__h5987 = x__h6369 | y__h6370 ;
  assign x__h6369 = word64_old__h5981 & y__h6371 ;
  assign y__h6370 = f_reqs_rv[63:0] & mask__h5986 ;
  assign y__h6371 =
	     { ~SEXT_f_reqs_rv_port0__read__08_BIT_71_42___d243,
	       ~SEXT_f_reqs_rv_port0__read__08_BIT_70_45___d246,
	       ~SEXT_f_reqs_rv_port0__read__08_BIT_69_49___d250,
	       ~SEXT_f_reqs_rv_port0__read__08_BIT_68_52___d253,
	       ~SEXT_f_reqs_rv_port0__read__08_BIT_67_56___d257,
	       ~SEXT_f_reqs_rv_port0__read__08_BIT_66_59___d260,
	       ~SEXT_f_reqs_rv_port0__read__08_BIT_65_63___d264,
	       ~SEXT_f_reqs_rv_port0__read__08_BIT_64_66___d267 } ;
  always@(f_reqs_rv or rg_cached_raw_mem_word)
  begin
    case (f_reqs_rv[105:104])
      2'd0: word64_old__h5981 = rg_cached_raw_mem_word[63:0];
      2'd1: word64_old__h5981 = rg_cached_raw_mem_word[127:64];
      2'd2: word64_old__h5981 = rg_cached_raw_mem_word[191:128];
      2'd3: word64_old__h5981 = rg_cached_raw_mem_word[255:192];
    endcase
  end
  always@(n__h5143 or rg_cached_raw_mem_word)
  begin
    case (n__h5143)
      5'd0: rdata__h5144 = rg_cached_raw_mem_word[63:0];
      5'd1: rdata__h5144 = rg_cached_raw_mem_word[127:64];
      5'd2: rdata__h5144 = rg_cached_raw_mem_word[191:128];
      5'd3: rdata__h5144 = rg_cached_raw_mem_word[255:192];
      default: rdata__h5144 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	f_raw_mem_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	    354'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	f_raw_mem_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	    257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	f_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	    174'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	rg_mem_map_set <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_status <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_tohost_addr <= `BSV_ASSIGNMENT_DELAY 64'h0000000080001000;
	rg_watch_tohost <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (f_raw_mem_reqs_rv$EN)
	  f_raw_mem_reqs_rv <= `BSV_ASSIGNMENT_DELAY f_raw_mem_reqs_rv$D_IN;
	if (f_raw_mem_rsps_rv$EN)
	  f_raw_mem_rsps_rv <= `BSV_ASSIGNMENT_DELAY f_raw_mem_rsps_rv$D_IN;
	if (f_reqs_rv$EN) f_reqs_rv <= `BSV_ASSIGNMENT_DELAY f_reqs_rv$D_IN;
	if (rg_mem_map_set$EN)
	  rg_mem_map_set <= `BSV_ASSIGNMENT_DELAY rg_mem_map_set$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_status$EN) rg_status <= `BSV_ASSIGNMENT_DELAY rg_status$D_IN;
	if (rg_tohost_addr$EN)
	  rg_tohost_addr <= `BSV_ASSIGNMENT_DELAY rg_tohost_addr$D_IN;
	if (rg_watch_tohost$EN)
	  rg_watch_tohost <= `BSV_ASSIGNMENT_DELAY rg_watch_tohost$D_IN;
      end
    if (rg_addr_base$EN)
      rg_addr_base <= `BSV_ASSIGNMENT_DELAY rg_addr_base$D_IN;
    if (rg_addr_lim$EN) rg_addr_lim <= `BSV_ASSIGNMENT_DELAY rg_addr_lim$D_IN;
    if (rg_cached_clean$EN)
      rg_cached_clean <= `BSV_ASSIGNMENT_DELAY rg_cached_clean$D_IN;
    if (rg_cached_raw_mem_addr$EN)
      rg_cached_raw_mem_addr <= `BSV_ASSIGNMENT_DELAY
	  rg_cached_raw_mem_addr$D_IN;
    if (rg_cached_raw_mem_word$EN)
      rg_cached_raw_mem_word <= `BSV_ASSIGNMENT_DELAY
	  rg_cached_raw_mem_word$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    f_raw_mem_reqs_rv =
	354'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    f_raw_mem_rsps_rv =
	257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    f_reqs_rv = 174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_addr_base = 64'hAAAAAAAAAAAAAAAA;
    rg_addr_lim = 64'hAAAAAAAAAAAAAAAA;
    rg_cached_clean = 1'h0;
    rg_cached_raw_mem_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_cached_raw_mem_word =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mem_map_set = 1'h0;
    rg_state = 2'h2;
    rg_status = 8'hAA;
    rg_tohost_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_watch_tohost = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_reload_cache &&
	  NOT_cfg_verbosity_read_ULE_1___d5)
	begin
	  v__h2444 = $stime;
	  #0;
	end
    v__h2438 = v__h2444 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_reload_cache &&
	  NOT_cfg_verbosity_read_ULE_1___d5)
	$display("%0d: Mem_Controller.rl_reset_reload_cache => STATE_RELOADING",
		 v__h2438);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_dirty_idle &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	begin
	  v__h3455 = $stime;
	  #0;
	end
    v__h3449 = v__h3455 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_dirty_idle &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$display("%0d: Mem_Controller.rl_writeback_dirty_idle to raw addr 0x%0h",
		 v__h3449,
		 rg_cached_raw_mem_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_dirty &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	begin
	  v__h3973 = $stime;
	  #0;
	end
    v__h3967 = v__h3973 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_dirty &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$display("%0d: Mem_Controller.rl_writeback_dirty to raw addr 0x%0h",
		 v__h3967,
		 rg_cached_raw_mem_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_miss_clean_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	begin
	  v__h4469 = $stime;
	  #0;
	end
    v__h4463 = v__h4469 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_miss_clean_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$display("%0d: Mem_Controller.rl_miss_clean_req: read raw addr 0x%0h",
		 v__h4463,
		 req_raw_mem_addr__h3280);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && NOT_cfg_verbosity_read_ULE_2_4___d35)
	begin
	  v__h4758 = $stime;
	  #0;
	end
    v__h4752 = v__h4758 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && NOT_cfg_verbosity_read_ULE_2_4___d35)
	$display("%0d: Mem_Controller.rl_reload: raw addr 0x%0h",
		 v__h4752,
		 rg_cached_raw_mem_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", f_raw_mem_rsps_rv[255:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	begin
	  v__h5473 = $stime;
	  #0;
	end
    v__h5467 = v__h5473 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$display("%0d: Mem_Controller.rl_process_rd_req: ", v__h5467);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("Req { ", "req_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("REQ_OP_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[171:165]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[164:101]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "len: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[100:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[92:90], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "burst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1___d5 &&
	  f_reqs_rv[89:88] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1___d5 &&
	  f_reqs_rv[89:88] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1___d5 &&
	  f_reqs_rv[89:88] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1___d5 &&
	  f_reqs_rv[89:88] != 2'd0 &&
	  f_reqs_rv[89:88] != 2'd1 &&
	  f_reqs_rv[89:88] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "lock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1___d5 &&
	  f_reqs_rv[87])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1___d5 &&
	  !f_reqs_rv[87])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "cache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[86:83]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "prot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[82:80]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "qos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[79:76]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "region: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[75:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[71:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("     => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[171:165]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", rdata__h5144);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	begin
	  v__h7746 = $stime;
	  #0;
	end
    v__h7740 = v__h7746 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$display("%0d: Mem_Controller.rl_process_wr_req: ", v__h7740);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("Req { ", "req_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("REQ_OP_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[171:165]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[164:101]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "len: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[100:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[92:90], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "burst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1___d5 &&
	  f_reqs_rv[89:88] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1___d5 &&
	  f_reqs_rv[89:88] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1___d5 &&
	  f_reqs_rv[89:88] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1___d5 &&
	  f_reqs_rv[89:88] != 2'd0 &&
	  f_reqs_rv[89:88] != 2'd1 &&
	  f_reqs_rv[89:88] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "lock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1___d5 &&
	  f_reqs_rv[87])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1___d5 &&
	  !f_reqs_rv[87])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "cache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[86:83]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "prot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[82:80]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "qos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[79:76]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "region: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[75:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[71:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("     => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[171:165]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  rg_watch_tohost_89_AND_f_reqs_rv_port0__read___ETC___d295)
	begin
	  v__h7978 = $stime;
	  #0;
	end
    v__h7972 = v__h7978 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  rg_watch_tohost_89_AND_f_reqs_rv_port0__read___ETC___d295)
	$display("%0d: Mem_Controller.rl_process_wr_req: addr 0x%0h (<tohost>) data 0x%0h",
		 v__h7972,
		 f_reqs_rv[164:101],
		 f_reqs_rv[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  rg_watch_tohost_89_AND_f_reqs_rv_port0__read___ETC___d295 &&
	  f_reqs_rv[63:1] == 63'd0)
	$display("PASS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  rg_watch_tohost_89_AND_f_reqs_rv_port0__read___ETC___d295 &&
	  f_reqs_rv[63:1] != 63'd0)
	$display("FAIL %0d", exit_value__h8024);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	begin
	  v__h8503 = $stime;
	  #0;
	end
    v__h8497 = v__h8503 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("%0d: ERROR: Mem_Controller:", v__h8497);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address &&
	  NOT_f_reqs_rv_port0__read__08_BITS_92_TO_90_24_ETC___d331)
	$display(" read-addr is misaligned");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address &&
	  f_reqs_rv_port0__read__08_BITS_92_TO_90_24_EQ__ETC___d160)
	$display(" read-addr is out of bounds");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$display("        rg_addr_base 0x%0h  rg_addr_lim 0x%0h",
		 rg_addr_base,
		 rg_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("Req { ", "req_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("REQ_OP_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[171:165]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[164:101]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "len: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[100:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[92:90], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "burst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address && f_reqs_rv[89:88] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address && f_reqs_rv[89:88] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address && f_reqs_rv[89:88] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address && f_reqs_rv[89:88] != 2'd0 &&
	  f_reqs_rv[89:88] != 2'd1 &&
	  f_reqs_rv[89:88] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "lock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address && f_reqs_rv[87])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address && !f_reqs_rv[87])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "cache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[86:83]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "prot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[82:80]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "qos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[79:76]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "region: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[75:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[71:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("     => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[171:165]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[164:101]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("'h%h", 1'b0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	begin
	  v__h9354 = $stime;
	  #0;
	end
    v__h9348 = v__h9354 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("%0d: ERROR: Mem_Controller:", v__h9348);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address &&
	  NOT_f_reqs_rv_port0__read__08_BITS_92_TO_90_24_ETC___d331)
	$display(" write-addr is misaligned");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address &&
	  f_reqs_rv_port0__read__08_BITS_92_TO_90_24_EQ__ETC___d160)
	$display(" write-addr is out of bounds");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$display("        rg_addr_base 0x%0h  rg_addr_lim 0x%0h",
		 rg_addr_base,
		 rg_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("Req { ", "req_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("REQ_OP_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[171:165]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[164:101]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "len: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[100:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[92:90], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "burst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address && f_reqs_rv[89:88] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address && f_reqs_rv[89:88] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address && f_reqs_rv[89:88] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address && f_reqs_rv[89:88] != 2'd0 &&
	  f_reqs_rv[89:88] != 2'd1 &&
	  f_reqs_rv[89:88] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "lock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address && f_reqs_rv[87])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address && !f_reqs_rv[87])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "cache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[86:83]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "prot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[82:80]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "qos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[79:76]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "region: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[75:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[71:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("     => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[171:165]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("'h%h", 1'b0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map)
	begin
	  v__h10053 = $stime;
	  #0;
	end
    v__h10047 = v__h10053 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map)
	$display("%0d: Mem_Controller.set_addr_map: addr_base 0x%0h addr_lim 0x%0h",
		 v__h10047,
		 set_addr_map_addr_base,
		 set_addr_map_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	begin
	  v__h2760 = $stime;
	  #0;
	end
    v__h2754 = v__h2760 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$display("%0d: Mem_Controller.rl_merge_rd_req", v__h2754);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_arff$D_OUT[99:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_arff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_arff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_arff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  slavePortShim_arff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd0 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd1 &&
	  slavePortShim_arff$D_OUT[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  slavePortShim_arff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  !slavePortShim_arff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_arff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_arff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_arff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_arff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	begin
	  v__h3124 = $stime;
	  #0;
	end
    v__h3118 = v__h3124 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$display("%0d: Mem_Controller.rl_merge_wr_req", v__h3118);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_awff$D_OUT[99:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_awff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_awff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_awff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  slavePortShim_awff$D_OUT[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd0 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd1 &&
	  slavePortShim_awff$D_OUT[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  slavePortShim_awff$D_OUT[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  !slavePortShim_awff$D_OUT[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_awff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_awff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_awff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_awff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_wff$D_OUT[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", slavePortShim_wff$D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  slavePortShim_wff$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35 &&
	  !slavePortShim_wff$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_4___d35)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_power_on_reset && NOT_cfg_verbosity_read_ULE_1___d5)
	begin
	  v__h1703 = $stime;
	  #0;
	end
    v__h1697 = v__h1703 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_power_on_reset && NOT_cfg_verbosity_read_ULE_1___d5)
	$display("%0d: Mem_Controller.rl_power_on_reset", v__h1697);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_external_reset && NOT_cfg_verbosity_read_ULE_1___d5)
	begin
	  v__h2011 = $stime;
	  #0;
	end
    v__h2005 = v__h2011 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_external_reset && NOT_cfg_verbosity_read_ULE_1___d5)
	$display("%0d: Mem_Controller.rl_external_reset => STATE_RESET_RELOAD_CACHE",
		 v__h2005);
  end
  // synopsys translate_on
endmodule  // mkMem_Controller

