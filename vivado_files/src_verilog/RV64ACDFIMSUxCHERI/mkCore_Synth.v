//
// Generated by Bluespec Compiler, version untagged-gb2fda995 (build b2fda995)
//
//
// Ports:
// Name                         I/O  size props
// RDY_cpu_reset_server_request_put  O     1 reg
// cpu_reset_server_response_get  O     1 reg
// RDY_cpu_reset_server_response_get  O     1 reg
// cpu_imem_master_awid           O     5 reg
// cpu_imem_master_awaddr         O    64 reg
// cpu_imem_master_awlen          O     8 reg
// cpu_imem_master_awsize         O     3 reg
// cpu_imem_master_awburst        O     2 reg
// cpu_imem_master_awlock         O     1 reg
// cpu_imem_master_awcache        O     4 reg
// cpu_imem_master_awprot         O     3 reg
// cpu_imem_master_awqos          O     4 reg
// cpu_imem_master_awregion       O     4 reg
// cpu_imem_master_awvalid        O     1 reg
// cpu_imem_master_wdata          O    64 reg
// cpu_imem_master_wstrb          O     8 reg
// cpu_imem_master_wlast          O     1 reg
// cpu_imem_master_wvalid         O     1 reg
// cpu_imem_master_bready         O     1 reg
// cpu_imem_master_arid           O     5 reg
// cpu_imem_master_araddr         O    64 reg
// cpu_imem_master_arlen          O     8 reg
// cpu_imem_master_arsize         O     3 reg
// cpu_imem_master_arburst        O     2 reg
// cpu_imem_master_arlock         O     1 reg
// cpu_imem_master_arcache        O     4 reg
// cpu_imem_master_arprot         O     3 reg
// cpu_imem_master_arqos          O     4 reg
// cpu_imem_master_arregion       O     4 reg
// cpu_imem_master_arvalid        O     1 reg
// cpu_imem_master_rready         O     1 reg
// core_mem_master_awid           O     6
// core_mem_master_awaddr         O    64
// core_mem_master_awlen          O     8
// core_mem_master_awsize         O     3
// core_mem_master_awburst        O     2
// core_mem_master_awlock         O     1
// core_mem_master_awcache        O     4
// core_mem_master_awprot         O     3
// core_mem_master_awqos          O     4
// core_mem_master_awregion       O     4
// core_mem_master_awvalid        O     1
// core_mem_master_wdata          O    64
// core_mem_master_wstrb          O     8
// core_mem_master_wlast          O     1
// core_mem_master_wvalid         O     1
// core_mem_master_bready         O     1
// core_mem_master_arid           O     6
// core_mem_master_araddr         O    64
// core_mem_master_arlen          O     8
// core_mem_master_arsize         O     3
// core_mem_master_arburst        O     2
// core_mem_master_arlock         O     1
// core_mem_master_arcache        O     4
// core_mem_master_arprot         O     3
// core_mem_master_arqos          O     4
// core_mem_master_arregion       O     4
// core_mem_master_arvalid        O     1
// core_mem_master_rready         O     1
// dma_server_awready             O     1 const
// dma_server_wready              O     1 const
// dma_server_bid                 O     6 const
// dma_server_bresp               O     2 const
// dma_server_bvalid              O     1 const
// dma_server_arready             O     1 const
// dma_server_rid                 O     6 const
// dma_server_rdata               O   512 const
// dma_server_rresp               O     2 const
// dma_server_rlast               O     1 const
// dma_server_rvalid              O     1 const
// RDY_set_verbosity              O     1 const
// RDY_set_watch_tohost           O     1 const
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// cms                            O    97 const
// cms_ifc_pc                     O    64
// cms_ifc_instr                  O    32 reg
// cms_ifc_performance_events     O    39
// cms_ifc_gp_write_reg_name      O     5 reg
// cms_ifc_gp_write_reg           O   129
// cms_ifc_gp_write_valid         O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// cpu_reset_server_request_put   I     1 reg
// cpu_imem_master_awready        I     1
// cpu_imem_master_wready         I     1
// cpu_imem_master_bvalid         I     1
// cpu_imem_master_bid            I     5 reg
// cpu_imem_master_bresp          I     2 reg
// cpu_imem_master_arready        I     1
// cpu_imem_master_rvalid         I     1
// cpu_imem_master_rid            I     5 reg
// cpu_imem_master_rdata          I    64 reg
// cpu_imem_master_rresp          I     2 reg
// cpu_imem_master_rlast          I     1 reg
// core_mem_master_awready        I     1
// core_mem_master_wready         I     1
// core_mem_master_bvalid         I     1
// core_mem_master_bid            I     6
// core_mem_master_bresp          I     2
// core_mem_master_arready        I     1
// core_mem_master_rvalid         I     1
// core_mem_master_rid            I     6
// core_mem_master_rdata          I    64
// core_mem_master_rresp          I     2
// core_mem_master_rlast          I     1
// dma_server_awvalid             I     1
// dma_server_awid                I     6 unused
// dma_server_awaddr              I    64 unused
// dma_server_awlen               I     8 unused
// dma_server_awsize              I     3 unused
// dma_server_awburst             I     2 unused
// dma_server_awlock              I     1 unused
// dma_server_awcache             I     4 unused
// dma_server_awprot              I     3 unused
// dma_server_awqos               I     4 unused
// dma_server_awregion            I     4 unused
// dma_server_wvalid              I     1
// dma_server_wdata               I   512 unused
// dma_server_wstrb               I    64 unused
// dma_server_wlast               I     1 unused
// dma_server_bready              I     1
// dma_server_arvalid             I     1
// dma_server_arid                I     6 unused
// dma_server_araddr              I    64 unused
// dma_server_arlen               I     8 unused
// dma_server_arsize              I     3 unused
// dma_server_arburst             I     2 unused
// dma_server_arlock              I     1 unused
// dma_server_arcache             I     4 unused
// dma_server_arprot              I     3 unused
// dma_server_arqos               I     4 unused
// dma_server_arregion            I     4 unused
// dma_server_rready              I     1
// core_external_interrupt_sources_0_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_1_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_2_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_3_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_4_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_5_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_6_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_7_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_8_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_9_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_10_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_11_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_12_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_13_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_14_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_15_m_interrupt_req_set_not_clear  I     1
// nmi_req_set_not_clear          I     1
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// cms_ifc_halt_cpu_state         I     1 reg
// EN_cpu_reset_server_request_put  I     1
// EN_set_verbosity               I     1
// EN_set_watch_tohost            I     1
// EN_ma_ddr4_ready               I     1
// EN_cms_ifc_halt_cpu            I     1
// EN_cpu_reset_server_response_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCore_Synth(CLK,
		    RST_N,

		    cpu_reset_server_request_put,
		    EN_cpu_reset_server_request_put,
		    RDY_cpu_reset_server_request_put,

		    EN_cpu_reset_server_response_get,
		    cpu_reset_server_response_get,
		    RDY_cpu_reset_server_response_get,

		    cpu_imem_master_awid,

		    cpu_imem_master_awaddr,

		    cpu_imem_master_awlen,

		    cpu_imem_master_awsize,

		    cpu_imem_master_awburst,

		    cpu_imem_master_awlock,

		    cpu_imem_master_awcache,

		    cpu_imem_master_awprot,

		    cpu_imem_master_awqos,

		    cpu_imem_master_awregion,

		    cpu_imem_master_awvalid,

		    cpu_imem_master_awready,

		    cpu_imem_master_wdata,

		    cpu_imem_master_wstrb,

		    cpu_imem_master_wlast,

		    cpu_imem_master_wvalid,

		    cpu_imem_master_wready,

		    cpu_imem_master_bvalid,
		    cpu_imem_master_bid,
		    cpu_imem_master_bresp,

		    cpu_imem_master_bready,

		    cpu_imem_master_arid,

		    cpu_imem_master_araddr,

		    cpu_imem_master_arlen,

		    cpu_imem_master_arsize,

		    cpu_imem_master_arburst,

		    cpu_imem_master_arlock,

		    cpu_imem_master_arcache,

		    cpu_imem_master_arprot,

		    cpu_imem_master_arqos,

		    cpu_imem_master_arregion,

		    cpu_imem_master_arvalid,

		    cpu_imem_master_arready,

		    cpu_imem_master_rvalid,
		    cpu_imem_master_rid,
		    cpu_imem_master_rdata,
		    cpu_imem_master_rresp,
		    cpu_imem_master_rlast,

		    cpu_imem_master_rready,

		    core_mem_master_awid,

		    core_mem_master_awaddr,

		    core_mem_master_awlen,

		    core_mem_master_awsize,

		    core_mem_master_awburst,

		    core_mem_master_awlock,

		    core_mem_master_awcache,

		    core_mem_master_awprot,

		    core_mem_master_awqos,

		    core_mem_master_awregion,

		    core_mem_master_awvalid,

		    core_mem_master_awready,

		    core_mem_master_wdata,

		    core_mem_master_wstrb,

		    core_mem_master_wlast,

		    core_mem_master_wvalid,

		    core_mem_master_wready,

		    core_mem_master_bvalid,
		    core_mem_master_bid,
		    core_mem_master_bresp,

		    core_mem_master_bready,

		    core_mem_master_arid,

		    core_mem_master_araddr,

		    core_mem_master_arlen,

		    core_mem_master_arsize,

		    core_mem_master_arburst,

		    core_mem_master_arlock,

		    core_mem_master_arcache,

		    core_mem_master_arprot,

		    core_mem_master_arqos,

		    core_mem_master_arregion,

		    core_mem_master_arvalid,

		    core_mem_master_arready,

		    core_mem_master_rvalid,
		    core_mem_master_rid,
		    core_mem_master_rdata,
		    core_mem_master_rresp,
		    core_mem_master_rlast,

		    core_mem_master_rready,

		    dma_server_awvalid,
		    dma_server_awid,
		    dma_server_awaddr,
		    dma_server_awlen,
		    dma_server_awsize,
		    dma_server_awburst,
		    dma_server_awlock,
		    dma_server_awcache,
		    dma_server_awprot,
		    dma_server_awqos,
		    dma_server_awregion,

		    dma_server_awready,

		    dma_server_wvalid,
		    dma_server_wdata,
		    dma_server_wstrb,
		    dma_server_wlast,

		    dma_server_wready,

		    dma_server_bid,

		    dma_server_bresp,

		    dma_server_bvalid,

		    dma_server_bready,

		    dma_server_arvalid,
		    dma_server_arid,
		    dma_server_araddr,
		    dma_server_arlen,
		    dma_server_arsize,
		    dma_server_arburst,
		    dma_server_arlock,
		    dma_server_arcache,
		    dma_server_arprot,
		    dma_server_arqos,
		    dma_server_arregion,

		    dma_server_arready,

		    dma_server_rid,

		    dma_server_rdata,

		    dma_server_rresp,

		    dma_server_rlast,

		    dma_server_rvalid,

		    dma_server_rready,

		    core_external_interrupt_sources_0_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_1_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_2_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_3_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_4_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_5_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_6_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_7_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_8_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_9_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_10_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_11_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_12_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_13_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_14_m_interrupt_req_set_not_clear,

		    core_external_interrupt_sources_15_m_interrupt_req_set_not_clear,

		    nmi_req_set_not_clear,

		    set_verbosity_verbosity,
		    set_verbosity_logdelay,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    set_watch_tohost_watch_tohost,
		    set_watch_tohost_tohost_addr,
		    EN_set_watch_tohost,
		    RDY_set_watch_tohost,

		    EN_ma_ddr4_ready,
		    RDY_ma_ddr4_ready,

		    mv_status,

		    cms,

		    cms_ifc_pc,

		    cms_ifc_instr,

		    cms_ifc_performance_events,

		    cms_ifc_halt_cpu_state,
		    EN_cms_ifc_halt_cpu,

		    cms_ifc_gp_write_reg_name,

		    cms_ifc_gp_write_reg,

		    cms_ifc_gp_write_valid);
  input  CLK;
  input  RST_N;

  // action method cpu_reset_server_request_put
  input  cpu_reset_server_request_put;
  input  EN_cpu_reset_server_request_put;
  output RDY_cpu_reset_server_request_put;

  // actionvalue method cpu_reset_server_response_get
  input  EN_cpu_reset_server_response_get;
  output cpu_reset_server_response_get;
  output RDY_cpu_reset_server_response_get;

  // value method cpu_imem_master_aw_awid
  output [4 : 0] cpu_imem_master_awid;

  // value method cpu_imem_master_aw_awaddr
  output [63 : 0] cpu_imem_master_awaddr;

  // value method cpu_imem_master_aw_awlen
  output [7 : 0] cpu_imem_master_awlen;

  // value method cpu_imem_master_aw_awsize
  output [2 : 0] cpu_imem_master_awsize;

  // value method cpu_imem_master_aw_awburst
  output [1 : 0] cpu_imem_master_awburst;

  // value method cpu_imem_master_aw_awlock
  output cpu_imem_master_awlock;

  // value method cpu_imem_master_aw_awcache
  output [3 : 0] cpu_imem_master_awcache;

  // value method cpu_imem_master_aw_awprot
  output [2 : 0] cpu_imem_master_awprot;

  // value method cpu_imem_master_aw_awqos
  output [3 : 0] cpu_imem_master_awqos;

  // value method cpu_imem_master_aw_awregion
  output [3 : 0] cpu_imem_master_awregion;

  // value method cpu_imem_master_aw_awuser

  // value method cpu_imem_master_aw_awvalid
  output cpu_imem_master_awvalid;

  // action method cpu_imem_master_aw_awready
  input  cpu_imem_master_awready;

  // value method cpu_imem_master_w_wdata
  output [63 : 0] cpu_imem_master_wdata;

  // value method cpu_imem_master_w_wstrb
  output [7 : 0] cpu_imem_master_wstrb;

  // value method cpu_imem_master_w_wlast
  output cpu_imem_master_wlast;

  // value method cpu_imem_master_w_wuser

  // value method cpu_imem_master_w_wvalid
  output cpu_imem_master_wvalid;

  // action method cpu_imem_master_w_wready
  input  cpu_imem_master_wready;

  // action method cpu_imem_master_b_bflit
  input  cpu_imem_master_bvalid;
  input  [4 : 0] cpu_imem_master_bid;
  input  [1 : 0] cpu_imem_master_bresp;

  // value method cpu_imem_master_b_bready
  output cpu_imem_master_bready;

  // value method cpu_imem_master_ar_arid
  output [4 : 0] cpu_imem_master_arid;

  // value method cpu_imem_master_ar_araddr
  output [63 : 0] cpu_imem_master_araddr;

  // value method cpu_imem_master_ar_arlen
  output [7 : 0] cpu_imem_master_arlen;

  // value method cpu_imem_master_ar_arsize
  output [2 : 0] cpu_imem_master_arsize;

  // value method cpu_imem_master_ar_arburst
  output [1 : 0] cpu_imem_master_arburst;

  // value method cpu_imem_master_ar_arlock
  output cpu_imem_master_arlock;

  // value method cpu_imem_master_ar_arcache
  output [3 : 0] cpu_imem_master_arcache;

  // value method cpu_imem_master_ar_arprot
  output [2 : 0] cpu_imem_master_arprot;

  // value method cpu_imem_master_ar_arqos
  output [3 : 0] cpu_imem_master_arqos;

  // value method cpu_imem_master_ar_arregion
  output [3 : 0] cpu_imem_master_arregion;

  // value method cpu_imem_master_ar_aruser

  // value method cpu_imem_master_ar_arvalid
  output cpu_imem_master_arvalid;

  // action method cpu_imem_master_ar_arready
  input  cpu_imem_master_arready;

  // action method cpu_imem_master_r_rflit
  input  cpu_imem_master_rvalid;
  input  [4 : 0] cpu_imem_master_rid;
  input  [63 : 0] cpu_imem_master_rdata;
  input  [1 : 0] cpu_imem_master_rresp;
  input  cpu_imem_master_rlast;

  // value method cpu_imem_master_r_rready
  output cpu_imem_master_rready;

  // value method core_mem_master_aw_awid
  output [5 : 0] core_mem_master_awid;

  // value method core_mem_master_aw_awaddr
  output [63 : 0] core_mem_master_awaddr;

  // value method core_mem_master_aw_awlen
  output [7 : 0] core_mem_master_awlen;

  // value method core_mem_master_aw_awsize
  output [2 : 0] core_mem_master_awsize;

  // value method core_mem_master_aw_awburst
  output [1 : 0] core_mem_master_awburst;

  // value method core_mem_master_aw_awlock
  output core_mem_master_awlock;

  // value method core_mem_master_aw_awcache
  output [3 : 0] core_mem_master_awcache;

  // value method core_mem_master_aw_awprot
  output [2 : 0] core_mem_master_awprot;

  // value method core_mem_master_aw_awqos
  output [3 : 0] core_mem_master_awqos;

  // value method core_mem_master_aw_awregion
  output [3 : 0] core_mem_master_awregion;

  // value method core_mem_master_aw_awuser

  // value method core_mem_master_aw_awvalid
  output core_mem_master_awvalid;

  // action method core_mem_master_aw_awready
  input  core_mem_master_awready;

  // value method core_mem_master_w_wdata
  output [63 : 0] core_mem_master_wdata;

  // value method core_mem_master_w_wstrb
  output [7 : 0] core_mem_master_wstrb;

  // value method core_mem_master_w_wlast
  output core_mem_master_wlast;

  // value method core_mem_master_w_wuser

  // value method core_mem_master_w_wvalid
  output core_mem_master_wvalid;

  // action method core_mem_master_w_wready
  input  core_mem_master_wready;

  // action method core_mem_master_b_bflit
  input  core_mem_master_bvalid;
  input  [5 : 0] core_mem_master_bid;
  input  [1 : 0] core_mem_master_bresp;

  // value method core_mem_master_b_bready
  output core_mem_master_bready;

  // value method core_mem_master_ar_arid
  output [5 : 0] core_mem_master_arid;

  // value method core_mem_master_ar_araddr
  output [63 : 0] core_mem_master_araddr;

  // value method core_mem_master_ar_arlen
  output [7 : 0] core_mem_master_arlen;

  // value method core_mem_master_ar_arsize
  output [2 : 0] core_mem_master_arsize;

  // value method core_mem_master_ar_arburst
  output [1 : 0] core_mem_master_arburst;

  // value method core_mem_master_ar_arlock
  output core_mem_master_arlock;

  // value method core_mem_master_ar_arcache
  output [3 : 0] core_mem_master_arcache;

  // value method core_mem_master_ar_arprot
  output [2 : 0] core_mem_master_arprot;

  // value method core_mem_master_ar_arqos
  output [3 : 0] core_mem_master_arqos;

  // value method core_mem_master_ar_arregion
  output [3 : 0] core_mem_master_arregion;

  // value method core_mem_master_ar_aruser

  // value method core_mem_master_ar_arvalid
  output core_mem_master_arvalid;

  // action method core_mem_master_ar_arready
  input  core_mem_master_arready;

  // action method core_mem_master_r_rflit
  input  core_mem_master_rvalid;
  input  [5 : 0] core_mem_master_rid;
  input  [63 : 0] core_mem_master_rdata;
  input  [1 : 0] core_mem_master_rresp;
  input  core_mem_master_rlast;

  // value method core_mem_master_r_rready
  output core_mem_master_rready;

  // action method dma_server_aw_awflit
  input  dma_server_awvalid;
  input  [5 : 0] dma_server_awid;
  input  [63 : 0] dma_server_awaddr;
  input  [7 : 0] dma_server_awlen;
  input  [2 : 0] dma_server_awsize;
  input  [1 : 0] dma_server_awburst;
  input  dma_server_awlock;
  input  [3 : 0] dma_server_awcache;
  input  [2 : 0] dma_server_awprot;
  input  [3 : 0] dma_server_awqos;
  input  [3 : 0] dma_server_awregion;

  // value method dma_server_aw_awready
  output dma_server_awready;

  // action method dma_server_w_wflit
  input  dma_server_wvalid;
  input  [511 : 0] dma_server_wdata;
  input  [63 : 0] dma_server_wstrb;
  input  dma_server_wlast;

  // value method dma_server_w_wready
  output dma_server_wready;

  // value method dma_server_b_bid
  output [5 : 0] dma_server_bid;

  // value method dma_server_b_bresp
  output [1 : 0] dma_server_bresp;

  // value method dma_server_b_buser

  // value method dma_server_b_bvalid
  output dma_server_bvalid;

  // action method dma_server_b_bready
  input  dma_server_bready;

  // action method dma_server_ar_arflit
  input  dma_server_arvalid;
  input  [5 : 0] dma_server_arid;
  input  [63 : 0] dma_server_araddr;
  input  [7 : 0] dma_server_arlen;
  input  [2 : 0] dma_server_arsize;
  input  [1 : 0] dma_server_arburst;
  input  dma_server_arlock;
  input  [3 : 0] dma_server_arcache;
  input  [2 : 0] dma_server_arprot;
  input  [3 : 0] dma_server_arqos;
  input  [3 : 0] dma_server_arregion;

  // value method dma_server_ar_arready
  output dma_server_arready;

  // value method dma_server_r_rid
  output [5 : 0] dma_server_rid;

  // value method dma_server_r_rdata
  output [511 : 0] dma_server_rdata;

  // value method dma_server_r_rresp
  output [1 : 0] dma_server_rresp;

  // value method dma_server_r_rlast
  output dma_server_rlast;

  // value method dma_server_r_ruser

  // value method dma_server_r_rvalid
  output dma_server_rvalid;

  // action method dma_server_r_rready
  input  dma_server_rready;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  input  core_external_interrupt_sources_0_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  input  core_external_interrupt_sources_1_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  input  core_external_interrupt_sources_2_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  input  core_external_interrupt_sources_3_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  input  core_external_interrupt_sources_4_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  input  core_external_interrupt_sources_5_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  input  core_external_interrupt_sources_6_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  input  core_external_interrupt_sources_7_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  input  core_external_interrupt_sources_8_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  input  core_external_interrupt_sources_9_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  input  core_external_interrupt_sources_10_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  input  core_external_interrupt_sources_11_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  input  core_external_interrupt_sources_12_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  input  core_external_interrupt_sources_13_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  input  core_external_interrupt_sources_14_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  input  core_external_interrupt_sources_15_m_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // value method cms
  output [96 : 0] cms;

  // value method cms_ifc_pc
  output [63 : 0] cms_ifc_pc;

  // value method cms_ifc_instr
  output [31 : 0] cms_ifc_instr;

  // value method cms_ifc_performance_events
  output [38 : 0] cms_ifc_performance_events;

  // action method cms_ifc_halt_cpu
  input  cms_ifc_halt_cpu_state;
  input  EN_cms_ifc_halt_cpu;

  // value method cms_ifc_gp_write_reg_name
  output [4 : 0] cms_ifc_gp_write_reg_name;

  // value method cms_ifc_gp_write_reg
  output [128 : 0] cms_ifc_gp_write_reg;

  // value method cms_ifc_gp_write_valid
  output cms_ifc_gp_write_valid;

  // signals for module outputs
  wire [511 : 0] dma_server_rdata;
  wire [128 : 0] cms_ifc_gp_write_reg;
  wire [96 : 0] cms;
  wire [63 : 0] cms_ifc_pc,
		core_mem_master_araddr,
		core_mem_master_awaddr,
		core_mem_master_wdata,
		cpu_imem_master_araddr,
		cpu_imem_master_awaddr,
		cpu_imem_master_wdata;
  wire [38 : 0] cms_ifc_performance_events;
  wire [31 : 0] cms_ifc_instr;
  wire [7 : 0] core_mem_master_arlen,
	       core_mem_master_awlen,
	       core_mem_master_wstrb,
	       cpu_imem_master_arlen,
	       cpu_imem_master_awlen,
	       cpu_imem_master_wstrb,
	       mv_status;
  wire [5 : 0] core_mem_master_arid,
	       core_mem_master_awid,
	       dma_server_bid,
	       dma_server_rid;
  wire [4 : 0] cms_ifc_gp_write_reg_name,
	       cpu_imem_master_arid,
	       cpu_imem_master_awid;
  wire [3 : 0] core_mem_master_arcache,
	       core_mem_master_arqos,
	       core_mem_master_arregion,
	       core_mem_master_awcache,
	       core_mem_master_awqos,
	       core_mem_master_awregion,
	       cpu_imem_master_arcache,
	       cpu_imem_master_arqos,
	       cpu_imem_master_arregion,
	       cpu_imem_master_awcache,
	       cpu_imem_master_awqos,
	       cpu_imem_master_awregion;
  wire [2 : 0] core_mem_master_arprot,
	       core_mem_master_arsize,
	       core_mem_master_awprot,
	       core_mem_master_awsize,
	       cpu_imem_master_arprot,
	       cpu_imem_master_arsize,
	       cpu_imem_master_awprot,
	       cpu_imem_master_awsize;
  wire [1 : 0] core_mem_master_arburst,
	       core_mem_master_awburst,
	       cpu_imem_master_arburst,
	       cpu_imem_master_awburst,
	       dma_server_bresp,
	       dma_server_rresp;
  wire RDY_cpu_reset_server_request_put,
       RDY_cpu_reset_server_response_get,
       RDY_ma_ddr4_ready,
       RDY_set_verbosity,
       RDY_set_watch_tohost,
       cms_ifc_gp_write_valid,
       core_mem_master_arlock,
       core_mem_master_arvalid,
       core_mem_master_awlock,
       core_mem_master_awvalid,
       core_mem_master_bready,
       core_mem_master_rready,
       core_mem_master_wlast,
       core_mem_master_wvalid,
       cpu_imem_master_arlock,
       cpu_imem_master_arvalid,
       cpu_imem_master_awlock,
       cpu_imem_master_awvalid,
       cpu_imem_master_bready,
       cpu_imem_master_rready,
       cpu_imem_master_wlast,
       cpu_imem_master_wvalid,
       cpu_reset_server_response_get,
       dma_server_arready,
       dma_server_awready,
       dma_server_bvalid,
       dma_server_rlast,
       dma_server_rvalid,
       dma_server_wready;

  // inlined wires
  wire [576 : 0] dma_server_sig_wSig_snk_putWire$wget;
  wire [98 : 0] dma_server_sig_arSig_snk_putWire$wget,
		dma_server_sig_awSig_snk_putWire$wget;
  wire [72 : 0] core_mem_master_sig_rSig_snk_putWire$wget;
  wire [71 : 0] cpu_imem_master_sig_rSig_snk_putWire$wget;
  wire [7 : 0] core_mem_master_sig_bSig_snk_putWire$wget;
  wire [6 : 0] cpu_imem_master_sig_bSig_snk_putWire$wget;
  wire core_mem_master_sig_arSig_src_dropWire$whas,
       core_mem_master_sig_awSig_src_dropWire$whas,
       core_mem_master_sig_bSig_snk_putWire$whas,
       core_mem_master_sig_rSig_snk_putWire$whas,
       core_mem_master_sig_wSig_src_dropWire$whas,
       cpu_imem_master_sig_arSig_src_dropWire$whas,
       cpu_imem_master_sig_awSig_src_dropWire$whas,
       cpu_imem_master_sig_bSig_snk_putWire$whas,
       cpu_imem_master_sig_rSig_snk_putWire$whas,
       cpu_imem_master_sig_wSig_src_dropWire$whas,
       dma_server_sig_bSig_src_dropWire$whas,
       dma_server_sig_rSig_src_dropWire$whas;

  // ports of submodule core
  wire [576 : 0] core$dma_server_w_put_val;
  wire [520 : 0] core$dma_server_r_peek;
  wire [128 : 0] core$cms_ifc_gp_write_reg;
  wire [98 : 0] core$core_mem_master_ar_peek,
		core$core_mem_master_aw_peek,
		core$dma_server_ar_put_val,
		core$dma_server_aw_put_val;
  wire [97 : 0] core$cpu_imem_master_ar_peek, core$cpu_imem_master_aw_peek;
  wire [72 : 0] core$core_mem_master_r_put_val,
		core$core_mem_master_w_peek,
		core$cpu_imem_master_w_peek;
  wire [71 : 0] core$cpu_imem_master_r_put_val;
  wire [63 : 0] core$cms_ifc_pc,
		core$set_verbosity_logdelay,
		core$set_watch_tohost_tohost_addr;
  wire [38 : 0] core$cms_ifc_performance_events;
  wire [31 : 0] core$cms_ifc_instr;
  wire [7 : 0] core$core_mem_master_b_put_val,
	       core$dma_server_b_peek,
	       core$mv_status;
  wire [6 : 0] core$cpu_imem_master_b_put_val;
  wire [4 : 0] core$cms_ifc_gp_write_reg_name;
  wire [3 : 0] core$set_verbosity_verbosity;
  wire core$EN_cms_ifc_halt_cpu,
       core$EN_core_mem_master_ar_drop,
       core$EN_core_mem_master_aw_drop,
       core$EN_core_mem_master_b_put,
       core$EN_core_mem_master_r_put,
       core$EN_core_mem_master_w_drop,
       core$EN_cpu_imem_master_ar_drop,
       core$EN_cpu_imem_master_aw_drop,
       core$EN_cpu_imem_master_b_put,
       core$EN_cpu_imem_master_r_put,
       core$EN_cpu_imem_master_w_drop,
       core$EN_cpu_reset_server_request_put,
       core$EN_cpu_reset_server_response_get,
       core$EN_dma_server_ar_put,
       core$EN_dma_server_aw_put,
       core$EN_dma_server_b_drop,
       core$EN_dma_server_r_drop,
       core$EN_dma_server_w_put,
       core$EN_ma_ddr4_ready,
       core$EN_set_verbosity,
       core$EN_set_watch_tohost,
       core$RDY_core_mem_master_ar_drop,
       core$RDY_core_mem_master_ar_peek,
       core$RDY_core_mem_master_aw_drop,
       core$RDY_core_mem_master_aw_peek,
       core$RDY_core_mem_master_b_put,
       core$RDY_core_mem_master_r_put,
       core$RDY_core_mem_master_w_drop,
       core$RDY_core_mem_master_w_peek,
       core$RDY_cpu_imem_master_ar_drop,
       core$RDY_cpu_imem_master_ar_peek,
       core$RDY_cpu_imem_master_aw_drop,
       core$RDY_cpu_imem_master_aw_peek,
       core$RDY_cpu_imem_master_b_put,
       core$RDY_cpu_imem_master_r_put,
       core$RDY_cpu_imem_master_w_drop,
       core$RDY_cpu_imem_master_w_peek,
       core$RDY_cpu_reset_server_request_put,
       core$RDY_cpu_reset_server_response_get,
       core$RDY_dma_server_b_drop,
       core$RDY_dma_server_b_peek,
       core$RDY_dma_server_r_drop,
       core$RDY_dma_server_r_peek,
       core$cms_ifc_gp_write_valid,
       core$cms_ifc_halt_cpu_state,
       core$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear,
       core$core_mem_master_ar_canPeek,
       core$core_mem_master_aw_canPeek,
       core$core_mem_master_b_canPut,
       core$core_mem_master_r_canPut,
       core$core_mem_master_w_canPeek,
       core$cpu_imem_master_ar_canPeek,
       core$cpu_imem_master_aw_canPeek,
       core$cpu_imem_master_b_canPut,
       core$cpu_imem_master_r_canPut,
       core$cpu_imem_master_w_canPeek,
       core$cpu_reset_server_request_put,
       core$cpu_reset_server_response_get,
       core$dma_server_ar_canPut,
       core$dma_server_aw_canPut,
       core$dma_server_b_canPeek,
       core$dma_server_r_canPeek,
       core$dma_server_w_canPut,
       core$nmi_req_set_not_clear,
       core$set_watch_tohost_watch_tohost;

  // rule scheduling signals
  wire CAN_FIRE_RL_core_mem_master_sig_arSig_src_doDrop,
       CAN_FIRE_RL_core_mem_master_sig_arSig_src_setCanPeek,
       CAN_FIRE_RL_core_mem_master_sig_arSig_src_setPeek,
       CAN_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop,
       CAN_FIRE_RL_core_mem_master_sig_awSig_src_doDrop,
       CAN_FIRE_RL_core_mem_master_sig_awSig_src_setCanPeek,
       CAN_FIRE_RL_core_mem_master_sig_awSig_src_setPeek,
       CAN_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop,
       CAN_FIRE_RL_core_mem_master_sig_bSig_snk_doPut,
       CAN_FIRE_RL_core_mem_master_sig_bSig_snk_setCanPut,
       CAN_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut,
       CAN_FIRE_RL_core_mem_master_sig_rSig_snk_doPut,
       CAN_FIRE_RL_core_mem_master_sig_rSig_snk_setCanPut,
       CAN_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut,
       CAN_FIRE_RL_core_mem_master_sig_wSig_src_doDrop,
       CAN_FIRE_RL_core_mem_master_sig_wSig_src_setCanPeek,
       CAN_FIRE_RL_core_mem_master_sig_wSig_src_setPeek,
       CAN_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop,
       CAN_FIRE_RL_cpu_imem_master_sig_arSig_src_doDrop,
       CAN_FIRE_RL_cpu_imem_master_sig_arSig_src_setCanPeek,
       CAN_FIRE_RL_cpu_imem_master_sig_arSig_src_setPeek,
       CAN_FIRE_RL_cpu_imem_master_sig_arSig_src_warnDoDrop,
       CAN_FIRE_RL_cpu_imem_master_sig_awSig_src_doDrop,
       CAN_FIRE_RL_cpu_imem_master_sig_awSig_src_setCanPeek,
       CAN_FIRE_RL_cpu_imem_master_sig_awSig_src_setPeek,
       CAN_FIRE_RL_cpu_imem_master_sig_awSig_src_warnDoDrop,
       CAN_FIRE_RL_cpu_imem_master_sig_bSig_snk_doPut,
       CAN_FIRE_RL_cpu_imem_master_sig_bSig_snk_setCanPut,
       CAN_FIRE_RL_cpu_imem_master_sig_bSig_snk_warnDoPut,
       CAN_FIRE_RL_cpu_imem_master_sig_rSig_snk_doPut,
       CAN_FIRE_RL_cpu_imem_master_sig_rSig_snk_setCanPut,
       CAN_FIRE_RL_cpu_imem_master_sig_rSig_snk_warnDoPut,
       CAN_FIRE_RL_cpu_imem_master_sig_wSig_src_doDrop,
       CAN_FIRE_RL_cpu_imem_master_sig_wSig_src_setCanPeek,
       CAN_FIRE_RL_cpu_imem_master_sig_wSig_src_setPeek,
       CAN_FIRE_RL_cpu_imem_master_sig_wSig_src_warnDoDrop,
       CAN_FIRE_RL_dma_server_sig_arSig_snk_doPut,
       CAN_FIRE_RL_dma_server_sig_arSig_snk_setCanPut,
       CAN_FIRE_RL_dma_server_sig_arSig_snk_warnDoPut,
       CAN_FIRE_RL_dma_server_sig_awSig_snk_doPut,
       CAN_FIRE_RL_dma_server_sig_awSig_snk_setCanPut,
       CAN_FIRE_RL_dma_server_sig_awSig_snk_warnDoPut,
       CAN_FIRE_RL_dma_server_sig_bSig_src_doDrop,
       CAN_FIRE_RL_dma_server_sig_bSig_src_setCanPeek,
       CAN_FIRE_RL_dma_server_sig_bSig_src_setPeek,
       CAN_FIRE_RL_dma_server_sig_bSig_src_warnDoDrop,
       CAN_FIRE_RL_dma_server_sig_rSig_src_doDrop,
       CAN_FIRE_RL_dma_server_sig_rSig_src_setCanPeek,
       CAN_FIRE_RL_dma_server_sig_rSig_src_setPeek,
       CAN_FIRE_RL_dma_server_sig_rSig_src_warnDoDrop,
       CAN_FIRE_RL_dma_server_sig_wSig_snk_doPut,
       CAN_FIRE_RL_dma_server_sig_wSig_snk_setCanPut,
       CAN_FIRE_RL_dma_server_sig_wSig_snk_warnDoPut,
       CAN_FIRE_cms_ifc_halt_cpu,
       CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       CAN_FIRE_core_mem_master_ar_arready,
       CAN_FIRE_core_mem_master_aw_awready,
       CAN_FIRE_core_mem_master_b_bflit,
       CAN_FIRE_core_mem_master_r_rflit,
       CAN_FIRE_core_mem_master_w_wready,
       CAN_FIRE_cpu_imem_master_ar_arready,
       CAN_FIRE_cpu_imem_master_aw_awready,
       CAN_FIRE_cpu_imem_master_b_bflit,
       CAN_FIRE_cpu_imem_master_r_rflit,
       CAN_FIRE_cpu_imem_master_w_wready,
       CAN_FIRE_cpu_reset_server_request_put,
       CAN_FIRE_cpu_reset_server_response_get,
       CAN_FIRE_dma_server_ar_arflit,
       CAN_FIRE_dma_server_aw_awflit,
       CAN_FIRE_dma_server_b_bready,
       CAN_FIRE_dma_server_r_rready,
       CAN_FIRE_dma_server_w_wflit,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_nmi_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_set_watch_tohost,
       WILL_FIRE_RL_core_mem_master_sig_arSig_src_doDrop,
       WILL_FIRE_RL_core_mem_master_sig_arSig_src_setCanPeek,
       WILL_FIRE_RL_core_mem_master_sig_arSig_src_setPeek,
       WILL_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop,
       WILL_FIRE_RL_core_mem_master_sig_awSig_src_doDrop,
       WILL_FIRE_RL_core_mem_master_sig_awSig_src_setCanPeek,
       WILL_FIRE_RL_core_mem_master_sig_awSig_src_setPeek,
       WILL_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop,
       WILL_FIRE_RL_core_mem_master_sig_bSig_snk_doPut,
       WILL_FIRE_RL_core_mem_master_sig_bSig_snk_setCanPut,
       WILL_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut,
       WILL_FIRE_RL_core_mem_master_sig_rSig_snk_doPut,
       WILL_FIRE_RL_core_mem_master_sig_rSig_snk_setCanPut,
       WILL_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut,
       WILL_FIRE_RL_core_mem_master_sig_wSig_src_doDrop,
       WILL_FIRE_RL_core_mem_master_sig_wSig_src_setCanPeek,
       WILL_FIRE_RL_core_mem_master_sig_wSig_src_setPeek,
       WILL_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop,
       WILL_FIRE_RL_cpu_imem_master_sig_arSig_src_doDrop,
       WILL_FIRE_RL_cpu_imem_master_sig_arSig_src_setCanPeek,
       WILL_FIRE_RL_cpu_imem_master_sig_arSig_src_setPeek,
       WILL_FIRE_RL_cpu_imem_master_sig_arSig_src_warnDoDrop,
       WILL_FIRE_RL_cpu_imem_master_sig_awSig_src_doDrop,
       WILL_FIRE_RL_cpu_imem_master_sig_awSig_src_setCanPeek,
       WILL_FIRE_RL_cpu_imem_master_sig_awSig_src_setPeek,
       WILL_FIRE_RL_cpu_imem_master_sig_awSig_src_warnDoDrop,
       WILL_FIRE_RL_cpu_imem_master_sig_bSig_snk_doPut,
       WILL_FIRE_RL_cpu_imem_master_sig_bSig_snk_setCanPut,
       WILL_FIRE_RL_cpu_imem_master_sig_bSig_snk_warnDoPut,
       WILL_FIRE_RL_cpu_imem_master_sig_rSig_snk_doPut,
       WILL_FIRE_RL_cpu_imem_master_sig_rSig_snk_setCanPut,
       WILL_FIRE_RL_cpu_imem_master_sig_rSig_snk_warnDoPut,
       WILL_FIRE_RL_cpu_imem_master_sig_wSig_src_doDrop,
       WILL_FIRE_RL_cpu_imem_master_sig_wSig_src_setCanPeek,
       WILL_FIRE_RL_cpu_imem_master_sig_wSig_src_setPeek,
       WILL_FIRE_RL_cpu_imem_master_sig_wSig_src_warnDoDrop,
       WILL_FIRE_RL_dma_server_sig_arSig_snk_doPut,
       WILL_FIRE_RL_dma_server_sig_arSig_snk_setCanPut,
       WILL_FIRE_RL_dma_server_sig_arSig_snk_warnDoPut,
       WILL_FIRE_RL_dma_server_sig_awSig_snk_doPut,
       WILL_FIRE_RL_dma_server_sig_awSig_snk_setCanPut,
       WILL_FIRE_RL_dma_server_sig_awSig_snk_warnDoPut,
       WILL_FIRE_RL_dma_server_sig_bSig_src_doDrop,
       WILL_FIRE_RL_dma_server_sig_bSig_src_setCanPeek,
       WILL_FIRE_RL_dma_server_sig_bSig_src_setPeek,
       WILL_FIRE_RL_dma_server_sig_bSig_src_warnDoDrop,
       WILL_FIRE_RL_dma_server_sig_rSig_src_doDrop,
       WILL_FIRE_RL_dma_server_sig_rSig_src_setCanPeek,
       WILL_FIRE_RL_dma_server_sig_rSig_src_setPeek,
       WILL_FIRE_RL_dma_server_sig_rSig_src_warnDoDrop,
       WILL_FIRE_RL_dma_server_sig_wSig_snk_doPut,
       WILL_FIRE_RL_dma_server_sig_wSig_snk_setCanPut,
       WILL_FIRE_RL_dma_server_sig_wSig_snk_warnDoPut,
       WILL_FIRE_cms_ifc_halt_cpu,
       WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       WILL_FIRE_core_mem_master_ar_arready,
       WILL_FIRE_core_mem_master_aw_awready,
       WILL_FIRE_core_mem_master_b_bflit,
       WILL_FIRE_core_mem_master_r_rflit,
       WILL_FIRE_core_mem_master_w_wready,
       WILL_FIRE_cpu_imem_master_ar_arready,
       WILL_FIRE_cpu_imem_master_aw_awready,
       WILL_FIRE_cpu_imem_master_b_bflit,
       WILL_FIRE_cpu_imem_master_r_rflit,
       WILL_FIRE_cpu_imem_master_w_wready,
       WILL_FIRE_cpu_reset_server_request_put,
       WILL_FIRE_cpu_reset_server_response_get,
       WILL_FIRE_dma_server_ar_arflit,
       WILL_FIRE_dma_server_aw_awflit,
       WILL_FIRE_dma_server_b_bready,
       WILL_FIRE_dma_server_r_rready,
       WILL_FIRE_dma_server_w_wflit,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_nmi_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_set_watch_tohost;

  // action method cpu_reset_server_request_put
  assign RDY_cpu_reset_server_request_put =
	     core$RDY_cpu_reset_server_request_put ;
  assign CAN_FIRE_cpu_reset_server_request_put =
	     core$RDY_cpu_reset_server_request_put ;
  assign WILL_FIRE_cpu_reset_server_request_put =
	     EN_cpu_reset_server_request_put ;

  // actionvalue method cpu_reset_server_response_get
  assign cpu_reset_server_response_get = core$cpu_reset_server_response_get ;
  assign RDY_cpu_reset_server_response_get =
	     core$RDY_cpu_reset_server_response_get ;
  assign CAN_FIRE_cpu_reset_server_response_get =
	     core$RDY_cpu_reset_server_response_get ;
  assign WILL_FIRE_cpu_reset_server_response_get =
	     EN_cpu_reset_server_response_get ;

  // value method cpu_imem_master_aw_awid
  assign cpu_imem_master_awid = core$cpu_imem_master_aw_peek[97:93] ;

  // value method cpu_imem_master_aw_awaddr
  assign cpu_imem_master_awaddr = core$cpu_imem_master_aw_peek[92:29] ;

  // value method cpu_imem_master_aw_awlen
  assign cpu_imem_master_awlen = core$cpu_imem_master_aw_peek[28:21] ;

  // value method cpu_imem_master_aw_awsize
  assign cpu_imem_master_awsize = core$cpu_imem_master_aw_peek[20:18] ;

  // value method cpu_imem_master_aw_awburst
  assign cpu_imem_master_awburst = core$cpu_imem_master_aw_peek[17:16] ;

  // value method cpu_imem_master_aw_awlock
  assign cpu_imem_master_awlock = core$cpu_imem_master_aw_peek[15] ;

  // value method cpu_imem_master_aw_awcache
  assign cpu_imem_master_awcache = core$cpu_imem_master_aw_peek[14:11] ;

  // value method cpu_imem_master_aw_awprot
  assign cpu_imem_master_awprot = core$cpu_imem_master_aw_peek[10:8] ;

  // value method cpu_imem_master_aw_awqos
  assign cpu_imem_master_awqos = core$cpu_imem_master_aw_peek[7:4] ;

  // value method cpu_imem_master_aw_awregion
  assign cpu_imem_master_awregion = core$cpu_imem_master_aw_peek[3:0] ;

  // value method cpu_imem_master_aw_awvalid
  assign cpu_imem_master_awvalid = core$cpu_imem_master_aw_canPeek ;

  // action method cpu_imem_master_aw_awready
  assign CAN_FIRE_cpu_imem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_aw_awready = 1'd1 ;

  // value method cpu_imem_master_w_wdata
  assign cpu_imem_master_wdata = core$cpu_imem_master_w_peek[72:9] ;

  // value method cpu_imem_master_w_wstrb
  assign cpu_imem_master_wstrb = core$cpu_imem_master_w_peek[8:1] ;

  // value method cpu_imem_master_w_wlast
  assign cpu_imem_master_wlast = core$cpu_imem_master_w_peek[0] ;

  // value method cpu_imem_master_w_wvalid
  assign cpu_imem_master_wvalid = core$cpu_imem_master_w_canPeek ;

  // action method cpu_imem_master_w_wready
  assign CAN_FIRE_cpu_imem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_w_wready = 1'd1 ;

  // action method cpu_imem_master_b_bflit
  assign CAN_FIRE_cpu_imem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_b_bflit = 1'd1 ;

  // value method cpu_imem_master_b_bready
  assign cpu_imem_master_bready = core$cpu_imem_master_b_canPut ;

  // value method cpu_imem_master_ar_arid
  assign cpu_imem_master_arid = core$cpu_imem_master_ar_peek[97:93] ;

  // value method cpu_imem_master_ar_araddr
  assign cpu_imem_master_araddr = core$cpu_imem_master_ar_peek[92:29] ;

  // value method cpu_imem_master_ar_arlen
  assign cpu_imem_master_arlen = core$cpu_imem_master_ar_peek[28:21] ;

  // value method cpu_imem_master_ar_arsize
  assign cpu_imem_master_arsize = core$cpu_imem_master_ar_peek[20:18] ;

  // value method cpu_imem_master_ar_arburst
  assign cpu_imem_master_arburst = core$cpu_imem_master_ar_peek[17:16] ;

  // value method cpu_imem_master_ar_arlock
  assign cpu_imem_master_arlock = core$cpu_imem_master_ar_peek[15] ;

  // value method cpu_imem_master_ar_arcache
  assign cpu_imem_master_arcache = core$cpu_imem_master_ar_peek[14:11] ;

  // value method cpu_imem_master_ar_arprot
  assign cpu_imem_master_arprot = core$cpu_imem_master_ar_peek[10:8] ;

  // value method cpu_imem_master_ar_arqos
  assign cpu_imem_master_arqos = core$cpu_imem_master_ar_peek[7:4] ;

  // value method cpu_imem_master_ar_arregion
  assign cpu_imem_master_arregion = core$cpu_imem_master_ar_peek[3:0] ;

  // value method cpu_imem_master_ar_arvalid
  assign cpu_imem_master_arvalid = core$cpu_imem_master_ar_canPeek ;

  // action method cpu_imem_master_ar_arready
  assign CAN_FIRE_cpu_imem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_ar_arready = 1'd1 ;

  // action method cpu_imem_master_r_rflit
  assign CAN_FIRE_cpu_imem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_r_rflit = 1'd1 ;

  // value method cpu_imem_master_r_rready
  assign cpu_imem_master_rready = core$cpu_imem_master_r_canPut ;

  // value method core_mem_master_aw_awid
  assign core_mem_master_awid = core$core_mem_master_aw_peek[98:93] ;

  // value method core_mem_master_aw_awaddr
  assign core_mem_master_awaddr = core$core_mem_master_aw_peek[92:29] ;

  // value method core_mem_master_aw_awlen
  assign core_mem_master_awlen = core$core_mem_master_aw_peek[28:21] ;

  // value method core_mem_master_aw_awsize
  assign core_mem_master_awsize = core$core_mem_master_aw_peek[20:18] ;

  // value method core_mem_master_aw_awburst
  assign core_mem_master_awburst = core$core_mem_master_aw_peek[17:16] ;

  // value method core_mem_master_aw_awlock
  assign core_mem_master_awlock = core$core_mem_master_aw_peek[15] ;

  // value method core_mem_master_aw_awcache
  assign core_mem_master_awcache = core$core_mem_master_aw_peek[14:11] ;

  // value method core_mem_master_aw_awprot
  assign core_mem_master_awprot = core$core_mem_master_aw_peek[10:8] ;

  // value method core_mem_master_aw_awqos
  assign core_mem_master_awqos = core$core_mem_master_aw_peek[7:4] ;

  // value method core_mem_master_aw_awregion
  assign core_mem_master_awregion = core$core_mem_master_aw_peek[3:0] ;

  // value method core_mem_master_aw_awvalid
  assign core_mem_master_awvalid = core$core_mem_master_aw_canPeek ;

  // action method core_mem_master_aw_awready
  assign CAN_FIRE_core_mem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_core_mem_master_aw_awready = 1'd1 ;

  // value method core_mem_master_w_wdata
  assign core_mem_master_wdata = core$core_mem_master_w_peek[72:9] ;

  // value method core_mem_master_w_wstrb
  assign core_mem_master_wstrb = core$core_mem_master_w_peek[8:1] ;

  // value method core_mem_master_w_wlast
  assign core_mem_master_wlast = core$core_mem_master_w_peek[0] ;

  // value method core_mem_master_w_wvalid
  assign core_mem_master_wvalid = core$core_mem_master_w_canPeek ;

  // action method core_mem_master_w_wready
  assign CAN_FIRE_core_mem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_core_mem_master_w_wready = 1'd1 ;

  // action method core_mem_master_b_bflit
  assign CAN_FIRE_core_mem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_core_mem_master_b_bflit = 1'd1 ;

  // value method core_mem_master_b_bready
  assign core_mem_master_bready = core$core_mem_master_b_canPut ;

  // value method core_mem_master_ar_arid
  assign core_mem_master_arid = core$core_mem_master_ar_peek[98:93] ;

  // value method core_mem_master_ar_araddr
  assign core_mem_master_araddr = core$core_mem_master_ar_peek[92:29] ;

  // value method core_mem_master_ar_arlen
  assign core_mem_master_arlen = core$core_mem_master_ar_peek[28:21] ;

  // value method core_mem_master_ar_arsize
  assign core_mem_master_arsize = core$core_mem_master_ar_peek[20:18] ;

  // value method core_mem_master_ar_arburst
  assign core_mem_master_arburst = core$core_mem_master_ar_peek[17:16] ;

  // value method core_mem_master_ar_arlock
  assign core_mem_master_arlock = core$core_mem_master_ar_peek[15] ;

  // value method core_mem_master_ar_arcache
  assign core_mem_master_arcache = core$core_mem_master_ar_peek[14:11] ;

  // value method core_mem_master_ar_arprot
  assign core_mem_master_arprot = core$core_mem_master_ar_peek[10:8] ;

  // value method core_mem_master_ar_arqos
  assign core_mem_master_arqos = core$core_mem_master_ar_peek[7:4] ;

  // value method core_mem_master_ar_arregion
  assign core_mem_master_arregion = core$core_mem_master_ar_peek[3:0] ;

  // value method core_mem_master_ar_arvalid
  assign core_mem_master_arvalid = core$core_mem_master_ar_canPeek ;

  // action method core_mem_master_ar_arready
  assign CAN_FIRE_core_mem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_core_mem_master_ar_arready = 1'd1 ;

  // action method core_mem_master_r_rflit
  assign CAN_FIRE_core_mem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_core_mem_master_r_rflit = 1'd1 ;

  // value method core_mem_master_r_rready
  assign core_mem_master_rready = core$core_mem_master_r_canPut ;

  // action method dma_server_aw_awflit
  assign CAN_FIRE_dma_server_aw_awflit = 1'd1 ;
  assign WILL_FIRE_dma_server_aw_awflit = 1'd1 ;

  // value method dma_server_aw_awready
  assign dma_server_awready = core$dma_server_aw_canPut ;

  // action method dma_server_w_wflit
  assign CAN_FIRE_dma_server_w_wflit = 1'd1 ;
  assign WILL_FIRE_dma_server_w_wflit = 1'd1 ;

  // value method dma_server_w_wready
  assign dma_server_wready = core$dma_server_w_canPut ;

  // value method dma_server_b_bid
  assign dma_server_bid = core$dma_server_b_peek[7:2] ;

  // value method dma_server_b_bresp
  assign dma_server_bresp = core$dma_server_b_peek[1:0] ;

  // value method dma_server_b_bvalid
  assign dma_server_bvalid = core$dma_server_b_canPeek ;

  // action method dma_server_b_bready
  assign CAN_FIRE_dma_server_b_bready = 1'd1 ;
  assign WILL_FIRE_dma_server_b_bready = 1'd1 ;

  // action method dma_server_ar_arflit
  assign CAN_FIRE_dma_server_ar_arflit = 1'd1 ;
  assign WILL_FIRE_dma_server_ar_arflit = 1'd1 ;

  // value method dma_server_ar_arready
  assign dma_server_arready = core$dma_server_ar_canPut ;

  // value method dma_server_r_rid
  assign dma_server_rid = core$dma_server_r_peek[520:515] ;

  // value method dma_server_r_rdata
  assign dma_server_rdata = core$dma_server_r_peek[514:3] ;

  // value method dma_server_r_rresp
  assign dma_server_rresp = core$dma_server_r_peek[2:1] ;

  // value method dma_server_r_rlast
  assign dma_server_rlast = core$dma_server_r_peek[0] ;

  // value method dma_server_r_rvalid
  assign dma_server_rvalid = core$dma_server_r_canPeek ;

  // action method dma_server_r_rready
  assign CAN_FIRE_dma_server_r_rready = 1'd1 ;
  assign WILL_FIRE_dma_server_r_rready = 1'd1 ;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = core$mv_status ;

  // value method cms
  assign cms = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA ;

  // value method cms_ifc_pc
  assign cms_ifc_pc = core$cms_ifc_pc ;

  // value method cms_ifc_instr
  assign cms_ifc_instr = core$cms_ifc_instr ;

  // value method cms_ifc_performance_events
  assign cms_ifc_performance_events = core$cms_ifc_performance_events ;

  // action method cms_ifc_halt_cpu
  assign CAN_FIRE_cms_ifc_halt_cpu = 1'd1 ;
  assign WILL_FIRE_cms_ifc_halt_cpu = EN_cms_ifc_halt_cpu ;

  // value method cms_ifc_gp_write_reg_name
  assign cms_ifc_gp_write_reg_name = core$cms_ifc_gp_write_reg_name ;

  // value method cms_ifc_gp_write_reg
  assign cms_ifc_gp_write_reg = core$cms_ifc_gp_write_reg ;

  // value method cms_ifc_gp_write_valid
  assign cms_ifc_gp_write_valid = core$cms_ifc_gp_write_valid ;

  // submodule core
  mkCore core(.CLK(CLK),
	      .RST_N(RST_N),
	      .cms_ifc_halt_cpu_state(core$cms_ifc_halt_cpu_state),
	      .core_external_interrupt_sources_0_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_10_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_11_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_12_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_13_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_14_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_15_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_1_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_2_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_3_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_4_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_5_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_6_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_7_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_8_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_9_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear),
	      .core_mem_master_b_put_val(core$core_mem_master_b_put_val),
	      .core_mem_master_r_put_val(core$core_mem_master_r_put_val),
	      .cpu_imem_master_b_put_val(core$cpu_imem_master_b_put_val),
	      .cpu_imem_master_r_put_val(core$cpu_imem_master_r_put_val),
	      .cpu_reset_server_request_put(core$cpu_reset_server_request_put),
	      .dma_server_ar_put_val(core$dma_server_ar_put_val),
	      .dma_server_aw_put_val(core$dma_server_aw_put_val),
	      .dma_server_w_put_val(core$dma_server_w_put_val),
	      .nmi_req_set_not_clear(core$nmi_req_set_not_clear),
	      .set_verbosity_logdelay(core$set_verbosity_logdelay),
	      .set_verbosity_verbosity(core$set_verbosity_verbosity),
	      .set_watch_tohost_tohost_addr(core$set_watch_tohost_tohost_addr),
	      .set_watch_tohost_watch_tohost(core$set_watch_tohost_watch_tohost),
	      .EN_cpu_reset_server_request_put(core$EN_cpu_reset_server_request_put),
	      .EN_cpu_reset_server_response_get(core$EN_cpu_reset_server_response_get),
	      .EN_cpu_imem_master_aw_drop(core$EN_cpu_imem_master_aw_drop),
	      .EN_cpu_imem_master_w_drop(core$EN_cpu_imem_master_w_drop),
	      .EN_cpu_imem_master_b_put(core$EN_cpu_imem_master_b_put),
	      .EN_cpu_imem_master_ar_drop(core$EN_cpu_imem_master_ar_drop),
	      .EN_cpu_imem_master_r_put(core$EN_cpu_imem_master_r_put),
	      .EN_core_mem_master_aw_drop(core$EN_core_mem_master_aw_drop),
	      .EN_core_mem_master_w_drop(core$EN_core_mem_master_w_drop),
	      .EN_core_mem_master_b_put(core$EN_core_mem_master_b_put),
	      .EN_core_mem_master_ar_drop(core$EN_core_mem_master_ar_drop),
	      .EN_core_mem_master_r_put(core$EN_core_mem_master_r_put),
	      .EN_dma_server_aw_put(core$EN_dma_server_aw_put),
	      .EN_dma_server_w_put(core$EN_dma_server_w_put),
	      .EN_dma_server_b_drop(core$EN_dma_server_b_drop),
	      .EN_dma_server_ar_put(core$EN_dma_server_ar_put),
	      .EN_dma_server_r_drop(core$EN_dma_server_r_drop),
	      .EN_set_verbosity(core$EN_set_verbosity),
	      .EN_set_watch_tohost(core$EN_set_watch_tohost),
	      .EN_ma_ddr4_ready(core$EN_ma_ddr4_ready),
	      .EN_cms_ifc_halt_cpu(core$EN_cms_ifc_halt_cpu),
	      .RDY_cpu_reset_server_request_put(core$RDY_cpu_reset_server_request_put),
	      .cpu_reset_server_response_get(core$cpu_reset_server_response_get),
	      .RDY_cpu_reset_server_response_get(core$RDY_cpu_reset_server_response_get),
	      .cpu_imem_master_aw_canPeek(core$cpu_imem_master_aw_canPeek),
	      .cpu_imem_master_aw_peek(core$cpu_imem_master_aw_peek),
	      .RDY_cpu_imem_master_aw_peek(core$RDY_cpu_imem_master_aw_peek),
	      .RDY_cpu_imem_master_aw_drop(core$RDY_cpu_imem_master_aw_drop),
	      .cpu_imem_master_w_canPeek(core$cpu_imem_master_w_canPeek),
	      .cpu_imem_master_w_peek(core$cpu_imem_master_w_peek),
	      .RDY_cpu_imem_master_w_peek(core$RDY_cpu_imem_master_w_peek),
	      .RDY_cpu_imem_master_w_drop(core$RDY_cpu_imem_master_w_drop),
	      .cpu_imem_master_b_canPut(core$cpu_imem_master_b_canPut),
	      .RDY_cpu_imem_master_b_put(core$RDY_cpu_imem_master_b_put),
	      .cpu_imem_master_ar_canPeek(core$cpu_imem_master_ar_canPeek),
	      .cpu_imem_master_ar_peek(core$cpu_imem_master_ar_peek),
	      .RDY_cpu_imem_master_ar_peek(core$RDY_cpu_imem_master_ar_peek),
	      .RDY_cpu_imem_master_ar_drop(core$RDY_cpu_imem_master_ar_drop),
	      .cpu_imem_master_r_canPut(core$cpu_imem_master_r_canPut),
	      .RDY_cpu_imem_master_r_put(core$RDY_cpu_imem_master_r_put),
	      .core_mem_master_aw_canPeek(core$core_mem_master_aw_canPeek),
	      .core_mem_master_aw_peek(core$core_mem_master_aw_peek),
	      .RDY_core_mem_master_aw_peek(core$RDY_core_mem_master_aw_peek),
	      .RDY_core_mem_master_aw_drop(core$RDY_core_mem_master_aw_drop),
	      .core_mem_master_w_canPeek(core$core_mem_master_w_canPeek),
	      .core_mem_master_w_peek(core$core_mem_master_w_peek),
	      .RDY_core_mem_master_w_peek(core$RDY_core_mem_master_w_peek),
	      .RDY_core_mem_master_w_drop(core$RDY_core_mem_master_w_drop),
	      .core_mem_master_b_canPut(core$core_mem_master_b_canPut),
	      .RDY_core_mem_master_b_put(core$RDY_core_mem_master_b_put),
	      .core_mem_master_ar_canPeek(core$core_mem_master_ar_canPeek),
	      .core_mem_master_ar_peek(core$core_mem_master_ar_peek),
	      .RDY_core_mem_master_ar_peek(core$RDY_core_mem_master_ar_peek),
	      .RDY_core_mem_master_ar_drop(core$RDY_core_mem_master_ar_drop),
	      .core_mem_master_r_canPut(core$core_mem_master_r_canPut),
	      .RDY_core_mem_master_r_put(core$RDY_core_mem_master_r_put),
	      .dma_server_aw_canPut(core$dma_server_aw_canPut),
	      .RDY_dma_server_aw_put(),
	      .dma_server_w_canPut(core$dma_server_w_canPut),
	      .RDY_dma_server_w_put(),
	      .dma_server_b_canPeek(core$dma_server_b_canPeek),
	      .dma_server_b_peek(core$dma_server_b_peek),
	      .RDY_dma_server_b_peek(core$RDY_dma_server_b_peek),
	      .RDY_dma_server_b_drop(core$RDY_dma_server_b_drop),
	      .dma_server_ar_canPut(core$dma_server_ar_canPut),
	      .RDY_dma_server_ar_put(),
	      .dma_server_r_canPeek(core$dma_server_r_canPeek),
	      .dma_server_r_peek(core$dma_server_r_peek),
	      .RDY_dma_server_r_peek(core$RDY_dma_server_r_peek),
	      .RDY_dma_server_r_drop(core$RDY_dma_server_r_drop),
	      .RDY_set_verbosity(),
	      .RDY_set_watch_tohost(),
	      .mv_tohost_value(),
	      .RDY_mv_tohost_value(),
	      .RDY_ma_ddr4_ready(),
	      .mv_status(core$mv_status),
	      .cms(),
	      .cms_ifc_pc(core$cms_ifc_pc),
	      .cms_ifc_instr(core$cms_ifc_instr),
	      .cms_ifc_performance_events(core$cms_ifc_performance_events),
	      .cms_ifc_gp_write_reg_name(core$cms_ifc_gp_write_reg_name),
	      .cms_ifc_gp_write_reg(core$cms_ifc_gp_write_reg),
	      .cms_ifc_gp_write_valid(core$cms_ifc_gp_write_valid));

  // rule RL_cpu_imem_master_sig_awSig_src_setCanPeek
  assign CAN_FIRE_RL_cpu_imem_master_sig_awSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_awSig_src_setCanPeek = 1'd1 ;

  // rule RL_cpu_imem_master_sig_awSig_src_setPeek
  assign CAN_FIRE_RL_cpu_imem_master_sig_awSig_src_setPeek =
	     core$RDY_cpu_imem_master_aw_peek ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_awSig_src_setPeek =
	     core$RDY_cpu_imem_master_aw_peek ;

  // rule RL_cpu_imem_master_sig_awSig_src_warnDoDrop
  assign CAN_FIRE_RL_cpu_imem_master_sig_awSig_src_warnDoDrop =
	     cpu_imem_master_sig_awSig_src_dropWire$whas &&
	     !core$cpu_imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_awSig_src_warnDoDrop =
	     CAN_FIRE_RL_cpu_imem_master_sig_awSig_src_warnDoDrop ;

  // rule RL_cpu_imem_master_sig_awSig_src_doDrop
  assign CAN_FIRE_RL_cpu_imem_master_sig_awSig_src_doDrop =
	     core$RDY_cpu_imem_master_aw_drop &&
	     cpu_imem_master_sig_awSig_src_dropWire$whas &&
	     core$cpu_imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_awSig_src_doDrop =
	     CAN_FIRE_RL_cpu_imem_master_sig_awSig_src_doDrop ;

  // rule RL_cpu_imem_master_sig_wSig_src_setCanPeek
  assign CAN_FIRE_RL_cpu_imem_master_sig_wSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_wSig_src_setCanPeek = 1'd1 ;

  // rule RL_cpu_imem_master_sig_wSig_src_setPeek
  assign CAN_FIRE_RL_cpu_imem_master_sig_wSig_src_setPeek =
	     core$RDY_cpu_imem_master_w_peek ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_wSig_src_setPeek =
	     core$RDY_cpu_imem_master_w_peek ;

  // rule RL_cpu_imem_master_sig_wSig_src_warnDoDrop
  assign CAN_FIRE_RL_cpu_imem_master_sig_wSig_src_warnDoDrop =
	     cpu_imem_master_sig_wSig_src_dropWire$whas &&
	     !core$cpu_imem_master_w_canPeek ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_wSig_src_warnDoDrop =
	     CAN_FIRE_RL_cpu_imem_master_sig_wSig_src_warnDoDrop ;

  // rule RL_cpu_imem_master_sig_wSig_src_doDrop
  assign CAN_FIRE_RL_cpu_imem_master_sig_wSig_src_doDrop =
	     core$RDY_cpu_imem_master_w_drop &&
	     cpu_imem_master_sig_wSig_src_dropWire$whas &&
	     core$cpu_imem_master_w_canPeek ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_wSig_src_doDrop =
	     CAN_FIRE_RL_cpu_imem_master_sig_wSig_src_doDrop ;

  // rule RL_cpu_imem_master_sig_bSig_snk_setCanPut
  assign CAN_FIRE_RL_cpu_imem_master_sig_bSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_bSig_snk_setCanPut = 1'd1 ;

  // rule RL_cpu_imem_master_sig_bSig_snk_warnDoPut
  assign CAN_FIRE_RL_cpu_imem_master_sig_bSig_snk_warnDoPut =
	     cpu_imem_master_sig_bSig_snk_putWire$whas &&
	     !core$cpu_imem_master_b_canPut ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_bSig_snk_warnDoPut =
	     CAN_FIRE_RL_cpu_imem_master_sig_bSig_snk_warnDoPut ;

  // rule RL_cpu_imem_master_sig_bSig_snk_doPut
  assign CAN_FIRE_RL_cpu_imem_master_sig_bSig_snk_doPut =
	     core$RDY_cpu_imem_master_b_put &&
	     cpu_imem_master_sig_bSig_snk_putWire$whas ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_bSig_snk_doPut =
	     CAN_FIRE_RL_cpu_imem_master_sig_bSig_snk_doPut ;

  // rule RL_cpu_imem_master_sig_arSig_src_setCanPeek
  assign CAN_FIRE_RL_cpu_imem_master_sig_arSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_arSig_src_setCanPeek = 1'd1 ;

  // rule RL_cpu_imem_master_sig_arSig_src_setPeek
  assign CAN_FIRE_RL_cpu_imem_master_sig_arSig_src_setPeek =
	     core$RDY_cpu_imem_master_ar_peek ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_arSig_src_setPeek =
	     core$RDY_cpu_imem_master_ar_peek ;

  // rule RL_cpu_imem_master_sig_arSig_src_warnDoDrop
  assign CAN_FIRE_RL_cpu_imem_master_sig_arSig_src_warnDoDrop =
	     cpu_imem_master_sig_arSig_src_dropWire$whas &&
	     !core$cpu_imem_master_ar_canPeek ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_arSig_src_warnDoDrop =
	     CAN_FIRE_RL_cpu_imem_master_sig_arSig_src_warnDoDrop ;

  // rule RL_cpu_imem_master_sig_arSig_src_doDrop
  assign CAN_FIRE_RL_cpu_imem_master_sig_arSig_src_doDrop =
	     core$RDY_cpu_imem_master_ar_drop &&
	     cpu_imem_master_sig_arSig_src_dropWire$whas &&
	     core$cpu_imem_master_ar_canPeek ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_arSig_src_doDrop =
	     CAN_FIRE_RL_cpu_imem_master_sig_arSig_src_doDrop ;

  // rule RL_cpu_imem_master_sig_rSig_snk_setCanPut
  assign CAN_FIRE_RL_cpu_imem_master_sig_rSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_rSig_snk_setCanPut = 1'd1 ;

  // rule RL_cpu_imem_master_sig_rSig_snk_warnDoPut
  assign CAN_FIRE_RL_cpu_imem_master_sig_rSig_snk_warnDoPut =
	     cpu_imem_master_sig_rSig_snk_putWire$whas &&
	     !core$cpu_imem_master_r_canPut ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_rSig_snk_warnDoPut =
	     CAN_FIRE_RL_cpu_imem_master_sig_rSig_snk_warnDoPut ;

  // rule RL_cpu_imem_master_sig_rSig_snk_doPut
  assign CAN_FIRE_RL_cpu_imem_master_sig_rSig_snk_doPut =
	     core$RDY_cpu_imem_master_r_put &&
	     cpu_imem_master_sig_rSig_snk_putWire$whas ;
  assign WILL_FIRE_RL_cpu_imem_master_sig_rSig_snk_doPut =
	     CAN_FIRE_RL_cpu_imem_master_sig_rSig_snk_doPut ;

  // rule RL_core_mem_master_sig_awSig_src_setCanPeek
  assign CAN_FIRE_RL_core_mem_master_sig_awSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_awSig_src_setCanPeek = 1'd1 ;

  // rule RL_core_mem_master_sig_awSig_src_setPeek
  assign CAN_FIRE_RL_core_mem_master_sig_awSig_src_setPeek =
	     core$RDY_core_mem_master_aw_peek ;
  assign WILL_FIRE_RL_core_mem_master_sig_awSig_src_setPeek =
	     core$RDY_core_mem_master_aw_peek ;

  // rule RL_core_mem_master_sig_awSig_src_warnDoDrop
  assign CAN_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop =
	     core_mem_master_sig_awSig_src_dropWire$whas &&
	     !core$core_mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop =
	     CAN_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop ;

  // rule RL_core_mem_master_sig_awSig_src_doDrop
  assign CAN_FIRE_RL_core_mem_master_sig_awSig_src_doDrop =
	     core$RDY_core_mem_master_aw_drop &&
	     core_mem_master_sig_awSig_src_dropWire$whas &&
	     core$core_mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_awSig_src_doDrop =
	     CAN_FIRE_RL_core_mem_master_sig_awSig_src_doDrop ;

  // rule RL_core_mem_master_sig_wSig_src_setCanPeek
  assign CAN_FIRE_RL_core_mem_master_sig_wSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_wSig_src_setCanPeek = 1'd1 ;

  // rule RL_core_mem_master_sig_wSig_src_setPeek
  assign CAN_FIRE_RL_core_mem_master_sig_wSig_src_setPeek =
	     core$RDY_core_mem_master_w_peek ;
  assign WILL_FIRE_RL_core_mem_master_sig_wSig_src_setPeek =
	     core$RDY_core_mem_master_w_peek ;

  // rule RL_core_mem_master_sig_wSig_src_warnDoDrop
  assign CAN_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop =
	     core_mem_master_sig_wSig_src_dropWire$whas &&
	     !core$core_mem_master_w_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop =
	     CAN_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop ;

  // rule RL_core_mem_master_sig_wSig_src_doDrop
  assign CAN_FIRE_RL_core_mem_master_sig_wSig_src_doDrop =
	     core$RDY_core_mem_master_w_drop &&
	     core_mem_master_sig_wSig_src_dropWire$whas &&
	     core$core_mem_master_w_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_wSig_src_doDrop =
	     CAN_FIRE_RL_core_mem_master_sig_wSig_src_doDrop ;

  // rule RL_core_mem_master_sig_bSig_snk_setCanPut
  assign CAN_FIRE_RL_core_mem_master_sig_bSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_bSig_snk_setCanPut = 1'd1 ;

  // rule RL_core_mem_master_sig_bSig_snk_warnDoPut
  assign CAN_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut =
	     core_mem_master_sig_bSig_snk_putWire$whas &&
	     !core$core_mem_master_b_canPut ;
  assign WILL_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut =
	     CAN_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut ;

  // rule RL_core_mem_master_sig_bSig_snk_doPut
  assign CAN_FIRE_RL_core_mem_master_sig_bSig_snk_doPut =
	     core$RDY_core_mem_master_b_put &&
	     core_mem_master_sig_bSig_snk_putWire$whas ;
  assign WILL_FIRE_RL_core_mem_master_sig_bSig_snk_doPut =
	     CAN_FIRE_RL_core_mem_master_sig_bSig_snk_doPut ;

  // rule RL_core_mem_master_sig_arSig_src_setCanPeek
  assign CAN_FIRE_RL_core_mem_master_sig_arSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_arSig_src_setCanPeek = 1'd1 ;

  // rule RL_core_mem_master_sig_arSig_src_setPeek
  assign CAN_FIRE_RL_core_mem_master_sig_arSig_src_setPeek =
	     core$RDY_core_mem_master_ar_peek ;
  assign WILL_FIRE_RL_core_mem_master_sig_arSig_src_setPeek =
	     core$RDY_core_mem_master_ar_peek ;

  // rule RL_core_mem_master_sig_arSig_src_warnDoDrop
  assign CAN_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop =
	     core_mem_master_sig_arSig_src_dropWire$whas &&
	     !core$core_mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop =
	     CAN_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop ;

  // rule RL_core_mem_master_sig_arSig_src_doDrop
  assign CAN_FIRE_RL_core_mem_master_sig_arSig_src_doDrop =
	     core$RDY_core_mem_master_ar_drop &&
	     core_mem_master_sig_arSig_src_dropWire$whas &&
	     core$core_mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_arSig_src_doDrop =
	     CAN_FIRE_RL_core_mem_master_sig_arSig_src_doDrop ;

  // rule RL_core_mem_master_sig_rSig_snk_setCanPut
  assign CAN_FIRE_RL_core_mem_master_sig_rSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_rSig_snk_setCanPut = 1'd1 ;

  // rule RL_core_mem_master_sig_rSig_snk_warnDoPut
  assign CAN_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut =
	     core_mem_master_sig_rSig_snk_putWire$whas &&
	     !core$core_mem_master_r_canPut ;
  assign WILL_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut =
	     CAN_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut ;

  // rule RL_core_mem_master_sig_rSig_snk_doPut
  assign CAN_FIRE_RL_core_mem_master_sig_rSig_snk_doPut =
	     core$RDY_core_mem_master_r_put &&
	     core_mem_master_sig_rSig_snk_putWire$whas ;
  assign WILL_FIRE_RL_core_mem_master_sig_rSig_snk_doPut =
	     CAN_FIRE_RL_core_mem_master_sig_rSig_snk_doPut ;

  // rule RL_dma_server_sig_awSig_snk_setCanPut
  assign CAN_FIRE_RL_dma_server_sig_awSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_dma_server_sig_awSig_snk_setCanPut = 1'd1 ;

  // rule RL_dma_server_sig_awSig_snk_warnDoPut
  assign CAN_FIRE_RL_dma_server_sig_awSig_snk_warnDoPut =
	     CAN_FIRE_RL_dma_server_sig_awSig_snk_doPut &&
	     !core$dma_server_aw_canPut ;
  assign WILL_FIRE_RL_dma_server_sig_awSig_snk_warnDoPut =
	     CAN_FIRE_RL_dma_server_sig_awSig_snk_warnDoPut ;

  // rule RL_dma_server_sig_awSig_snk_doPut
  assign CAN_FIRE_RL_dma_server_sig_awSig_snk_doPut =
	     dma_server_awvalid && core$dma_server_aw_canPut ;
  assign WILL_FIRE_RL_dma_server_sig_awSig_snk_doPut =
	     CAN_FIRE_RL_dma_server_sig_awSig_snk_doPut ;

  // rule RL_dma_server_sig_wSig_snk_setCanPut
  assign CAN_FIRE_RL_dma_server_sig_wSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_dma_server_sig_wSig_snk_setCanPut = 1'd1 ;

  // rule RL_dma_server_sig_wSig_snk_warnDoPut
  assign CAN_FIRE_RL_dma_server_sig_wSig_snk_warnDoPut =
	     CAN_FIRE_RL_dma_server_sig_wSig_snk_doPut &&
	     !core$dma_server_w_canPut ;
  assign WILL_FIRE_RL_dma_server_sig_wSig_snk_warnDoPut =
	     CAN_FIRE_RL_dma_server_sig_wSig_snk_warnDoPut ;

  // rule RL_dma_server_sig_wSig_snk_doPut
  assign CAN_FIRE_RL_dma_server_sig_wSig_snk_doPut =
	     dma_server_wvalid && core$dma_server_w_canPut ;
  assign WILL_FIRE_RL_dma_server_sig_wSig_snk_doPut =
	     CAN_FIRE_RL_dma_server_sig_wSig_snk_doPut ;

  // rule RL_dma_server_sig_bSig_src_setCanPeek
  assign CAN_FIRE_RL_dma_server_sig_bSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_dma_server_sig_bSig_src_setCanPeek = 1'd1 ;

  // rule RL_dma_server_sig_bSig_src_setPeek
  assign CAN_FIRE_RL_dma_server_sig_bSig_src_setPeek =
	     core$RDY_dma_server_b_peek ;
  assign WILL_FIRE_RL_dma_server_sig_bSig_src_setPeek =
	     core$RDY_dma_server_b_peek ;

  // rule RL_dma_server_sig_bSig_src_warnDoDrop
  assign CAN_FIRE_RL_dma_server_sig_bSig_src_warnDoDrop =
	     dma_server_sig_bSig_src_dropWire$whas &&
	     !core$dma_server_b_canPeek ;
  assign WILL_FIRE_RL_dma_server_sig_bSig_src_warnDoDrop =
	     CAN_FIRE_RL_dma_server_sig_bSig_src_warnDoDrop ;

  // rule RL_dma_server_sig_bSig_src_doDrop
  assign CAN_FIRE_RL_dma_server_sig_bSig_src_doDrop =
	     core$RDY_dma_server_b_drop &&
	     dma_server_sig_bSig_src_dropWire$whas &&
	     core$dma_server_b_canPeek ;
  assign WILL_FIRE_RL_dma_server_sig_bSig_src_doDrop =
	     CAN_FIRE_RL_dma_server_sig_bSig_src_doDrop ;

  // rule RL_dma_server_sig_arSig_snk_setCanPut
  assign CAN_FIRE_RL_dma_server_sig_arSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_dma_server_sig_arSig_snk_setCanPut = 1'd1 ;

  // rule RL_dma_server_sig_arSig_snk_warnDoPut
  assign CAN_FIRE_RL_dma_server_sig_arSig_snk_warnDoPut =
	     CAN_FIRE_RL_dma_server_sig_arSig_snk_doPut &&
	     !core$dma_server_ar_canPut ;
  assign WILL_FIRE_RL_dma_server_sig_arSig_snk_warnDoPut =
	     CAN_FIRE_RL_dma_server_sig_arSig_snk_warnDoPut ;

  // rule RL_dma_server_sig_arSig_snk_doPut
  assign CAN_FIRE_RL_dma_server_sig_arSig_snk_doPut =
	     dma_server_arvalid && core$dma_server_ar_canPut ;
  assign WILL_FIRE_RL_dma_server_sig_arSig_snk_doPut =
	     CAN_FIRE_RL_dma_server_sig_arSig_snk_doPut ;

  // rule RL_dma_server_sig_rSig_src_setCanPeek
  assign CAN_FIRE_RL_dma_server_sig_rSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_dma_server_sig_rSig_src_setCanPeek = 1'd1 ;

  // rule RL_dma_server_sig_rSig_src_setPeek
  assign CAN_FIRE_RL_dma_server_sig_rSig_src_setPeek =
	     core$RDY_dma_server_r_peek ;
  assign WILL_FIRE_RL_dma_server_sig_rSig_src_setPeek =
	     core$RDY_dma_server_r_peek ;

  // rule RL_dma_server_sig_rSig_src_warnDoDrop
  assign CAN_FIRE_RL_dma_server_sig_rSig_src_warnDoDrop =
	     dma_server_sig_rSig_src_dropWire$whas &&
	     !core$dma_server_r_canPeek ;
  assign WILL_FIRE_RL_dma_server_sig_rSig_src_warnDoDrop =
	     CAN_FIRE_RL_dma_server_sig_rSig_src_warnDoDrop ;

  // rule RL_dma_server_sig_rSig_src_doDrop
  assign CAN_FIRE_RL_dma_server_sig_rSig_src_doDrop =
	     core$RDY_dma_server_r_drop &&
	     dma_server_sig_rSig_src_dropWire$whas &&
	     core$dma_server_r_canPeek ;
  assign WILL_FIRE_RL_dma_server_sig_rSig_src_doDrop =
	     CAN_FIRE_RL_dma_server_sig_rSig_src_doDrop ;

  // inlined wires
  assign cpu_imem_master_sig_bSig_snk_putWire$wget =
	     { cpu_imem_master_bid, cpu_imem_master_bresp } ;
  assign cpu_imem_master_sig_bSig_snk_putWire$whas =
	     cpu_imem_master_bvalid && core$cpu_imem_master_b_canPut ;
  assign cpu_imem_master_sig_rSig_snk_putWire$wget =
	     { cpu_imem_master_rid,
	       cpu_imem_master_rdata,
	       cpu_imem_master_rresp,
	       cpu_imem_master_rlast } ;
  assign cpu_imem_master_sig_rSig_snk_putWire$whas =
	     cpu_imem_master_rvalid && core$cpu_imem_master_r_canPut ;
  assign core_mem_master_sig_bSig_snk_putWire$wget =
	     { core_mem_master_bid, core_mem_master_bresp } ;
  assign core_mem_master_sig_bSig_snk_putWire$whas =
	     core_mem_master_bvalid && core$core_mem_master_b_canPut ;
  assign core_mem_master_sig_rSig_snk_putWire$wget =
	     { core_mem_master_rid,
	       core_mem_master_rdata,
	       core_mem_master_rresp,
	       core_mem_master_rlast } ;
  assign core_mem_master_sig_rSig_snk_putWire$whas =
	     core_mem_master_rvalid && core$core_mem_master_r_canPut ;
  assign dma_server_sig_awSig_snk_putWire$wget =
	     { dma_server_awid,
	       dma_server_awaddr,
	       dma_server_awlen,
	       dma_server_awsize,
	       dma_server_awburst,
	       dma_server_awlock,
	       dma_server_awcache,
	       dma_server_awprot,
	       dma_server_awqos,
	       dma_server_awregion } ;
  assign dma_server_sig_wSig_snk_putWire$wget =
	     { dma_server_wdata, dma_server_wstrb, dma_server_wlast } ;
  assign dma_server_sig_arSig_snk_putWire$wget =
	     { dma_server_arid,
	       dma_server_araddr,
	       dma_server_arlen,
	       dma_server_arsize,
	       dma_server_arburst,
	       dma_server_arlock,
	       dma_server_arcache,
	       dma_server_arprot,
	       dma_server_arqos,
	       dma_server_arregion } ;
  assign cpu_imem_master_sig_awSig_src_dropWire$whas =
	     core$cpu_imem_master_aw_canPeek && cpu_imem_master_awready ;
  assign cpu_imem_master_sig_wSig_src_dropWire$whas =
	     core$cpu_imem_master_w_canPeek && cpu_imem_master_wready ;
  assign cpu_imem_master_sig_arSig_src_dropWire$whas =
	     core$cpu_imem_master_ar_canPeek && cpu_imem_master_arready ;
  assign core_mem_master_sig_awSig_src_dropWire$whas =
	     core$core_mem_master_aw_canPeek && core_mem_master_awready ;
  assign core_mem_master_sig_wSig_src_dropWire$whas =
	     core$core_mem_master_w_canPeek && core_mem_master_wready ;
  assign core_mem_master_sig_arSig_src_dropWire$whas =
	     core$core_mem_master_ar_canPeek && core_mem_master_arready ;
  assign dma_server_sig_bSig_src_dropWire$whas =
	     core$dma_server_b_canPeek && dma_server_bready ;
  assign dma_server_sig_rSig_src_dropWire$whas =
	     core$dma_server_r_canPeek && dma_server_rready ;

  // submodule core
  assign core$cms_ifc_halt_cpu_state = cms_ifc_halt_cpu_state ;
  assign core$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_0_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_10_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_11_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_12_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_13_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_14_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_15_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_1_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_2_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_3_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_4_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_5_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_6_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_7_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_8_m_interrupt_req_set_not_clear ;
  assign core$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_9_m_interrupt_req_set_not_clear ;
  assign core$core_mem_master_b_put_val =
	     core_mem_master_sig_bSig_snk_putWire$wget ;
  assign core$core_mem_master_r_put_val =
	     core_mem_master_sig_rSig_snk_putWire$wget ;
  assign core$cpu_imem_master_b_put_val =
	     cpu_imem_master_sig_bSig_snk_putWire$wget ;
  assign core$cpu_imem_master_r_put_val =
	     cpu_imem_master_sig_rSig_snk_putWire$wget ;
  assign core$cpu_reset_server_request_put = cpu_reset_server_request_put ;
  assign core$dma_server_ar_put_val = dma_server_sig_arSig_snk_putWire$wget ;
  assign core$dma_server_aw_put_val = dma_server_sig_awSig_snk_putWire$wget ;
  assign core$dma_server_w_put_val = dma_server_sig_wSig_snk_putWire$wget ;
  assign core$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign core$set_verbosity_logdelay = set_verbosity_logdelay ;
  assign core$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign core$set_watch_tohost_tohost_addr = set_watch_tohost_tohost_addr ;
  assign core$set_watch_tohost_watch_tohost = set_watch_tohost_watch_tohost ;
  assign core$EN_cpu_reset_server_request_put =
	     EN_cpu_reset_server_request_put ;
  assign core$EN_cpu_reset_server_response_get =
	     EN_cpu_reset_server_response_get ;
  assign core$EN_cpu_imem_master_aw_drop =
	     CAN_FIRE_RL_cpu_imem_master_sig_awSig_src_doDrop ;
  assign core$EN_cpu_imem_master_w_drop =
	     CAN_FIRE_RL_cpu_imem_master_sig_wSig_src_doDrop ;
  assign core$EN_cpu_imem_master_b_put =
	     CAN_FIRE_RL_cpu_imem_master_sig_bSig_snk_doPut ;
  assign core$EN_cpu_imem_master_ar_drop =
	     CAN_FIRE_RL_cpu_imem_master_sig_arSig_src_doDrop ;
  assign core$EN_cpu_imem_master_r_put =
	     CAN_FIRE_RL_cpu_imem_master_sig_rSig_snk_doPut ;
  assign core$EN_core_mem_master_aw_drop =
	     CAN_FIRE_RL_core_mem_master_sig_awSig_src_doDrop ;
  assign core$EN_core_mem_master_w_drop =
	     CAN_FIRE_RL_core_mem_master_sig_wSig_src_doDrop ;
  assign core$EN_core_mem_master_b_put =
	     CAN_FIRE_RL_core_mem_master_sig_bSig_snk_doPut ;
  assign core$EN_core_mem_master_ar_drop =
	     CAN_FIRE_RL_core_mem_master_sig_arSig_src_doDrop ;
  assign core$EN_core_mem_master_r_put =
	     CAN_FIRE_RL_core_mem_master_sig_rSig_snk_doPut ;
  assign core$EN_dma_server_aw_put =
	     CAN_FIRE_RL_dma_server_sig_awSig_snk_doPut ;
  assign core$EN_dma_server_w_put =
	     CAN_FIRE_RL_dma_server_sig_wSig_snk_doPut ;
  assign core$EN_dma_server_b_drop =
	     CAN_FIRE_RL_dma_server_sig_bSig_src_doDrop ;
  assign core$EN_dma_server_ar_put =
	     CAN_FIRE_RL_dma_server_sig_arSig_snk_doPut ;
  assign core$EN_dma_server_r_drop =
	     CAN_FIRE_RL_dma_server_sig_rSig_src_doDrop ;
  assign core$EN_set_verbosity = EN_set_verbosity ;
  assign core$EN_set_watch_tohost = EN_set_watch_tohost ;
  assign core$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;
  assign core$EN_cms_ifc_halt_cpu = EN_cms_ifc_halt_cpu ;

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_master_sig_awSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_master_sig_wSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_master_sig_bSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_master_sig_arSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_master_sig_rSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_server_sig_awSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_server_sig_wSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_server_sig_bSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_server_sig_arSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_server_sig_rSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkCore_Synth

