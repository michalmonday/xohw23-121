//
// Generated by Bluespec Compiler, version untagged-gb2fda995 (build b2fda995)
//
//
// Ports:
// Name                         I/O  size props
// to_raw_mem_request_get         O   353
// RDY_to_raw_mem_request_get     O     1
// RDY_to_raw_mem_response_put    O     1
// get_to_console_get             O     8 reg
// RDY_get_to_console_get         O     1 reg
// RDY_put_from_console_put       O     1 reg
// status                         O     8 const
// RDY_set_verbosity              O     1 const
// RDY_set_watch_tohost           O     1 const
// mv_tohost_value                O    64 reg
// RDY_mv_tohost_value            O     1 const
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// cms_ifc_pc                     O    64
// cms_ifc_instr                  O    32 reg
// cms_ifc_performance_events     O    39
// cms_ifc_gp_write_reg_name      O     5 reg
// cms_ifc_gp_write_reg           O   129
// cms_ifc_gp_write_valid         O     1
// core_dmem_pre_fabric_awid      O     6
// core_dmem_pre_fabric_awaddr    O    64
// core_dmem_pre_fabric_awlen     O     8
// core_dmem_pre_fabric_awsize    O     3
// core_dmem_pre_fabric_awburst   O     2
// core_dmem_pre_fabric_awlock    O     1
// core_dmem_pre_fabric_awcache   O     4
// core_dmem_pre_fabric_awprot    O     3
// core_dmem_pre_fabric_awqos     O     4
// core_dmem_pre_fabric_awregion  O     4
// core_dmem_pre_fabric_awvalid   O     1
// core_dmem_pre_fabric_wdata     O    64
// core_dmem_pre_fabric_wstrb     O     8
// core_dmem_pre_fabric_wlast     O     1
// core_dmem_pre_fabric_wvalid    O     1
// core_dmem_pre_fabric_bready    O     1
// core_dmem_pre_fabric_arid      O     6
// core_dmem_pre_fabric_araddr    O    64
// core_dmem_pre_fabric_arlen     O     8
// core_dmem_pre_fabric_arsize    O     3
// core_dmem_pre_fabric_arburst   O     2
// core_dmem_pre_fabric_arlock    O     1
// core_dmem_pre_fabric_arcache   O     4
// core_dmem_pre_fabric_arprot    O     3
// core_dmem_pre_fabric_arqos     O     4
// core_dmem_pre_fabric_arregion  O     4
// core_dmem_pre_fabric_arvalid   O     1
// core_dmem_pre_fabric_rready    O     1
// core_dmem_post_fabric_awid     O     7 reg
// core_dmem_post_fabric_awaddr   O    64 reg
// core_dmem_post_fabric_awlen    O     8 reg
// core_dmem_post_fabric_awsize   O     3 reg
// core_dmem_post_fabric_awburst  O     2 reg
// core_dmem_post_fabric_awlock   O     1 reg
// core_dmem_post_fabric_awcache  O     4 reg
// core_dmem_post_fabric_awprot   O     3 reg
// core_dmem_post_fabric_awqos    O     4 reg
// core_dmem_post_fabric_awregion  O     4 reg
// core_dmem_post_fabric_awvalid  O     1 reg
// core_dmem_post_fabric_wdata    O    64 reg
// core_dmem_post_fabric_wstrb    O     8 reg
// core_dmem_post_fabric_wlast    O     1 reg
// core_dmem_post_fabric_wvalid   O     1 reg
// core_dmem_post_fabric_bready   O     1 reg
// core_dmem_post_fabric_arid     O     7 reg
// core_dmem_post_fabric_araddr   O    64 reg
// core_dmem_post_fabric_arlen    O     8 reg
// core_dmem_post_fabric_arsize   O     3 reg
// core_dmem_post_fabric_arburst  O     2 reg
// core_dmem_post_fabric_arlock   O     1 reg
// core_dmem_post_fabric_arcache  O     4 reg
// core_dmem_post_fabric_arprot   O     3 reg
// core_dmem_post_fabric_arqos    O     4 reg
// core_dmem_post_fabric_arregion  O     4 reg
// core_dmem_post_fabric_arvalid  O     1 reg
// core_dmem_post_fabric_rready   O     1 reg
// cpu_reset_completed            O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// to_raw_mem_response_put        I   256
// put_from_console_put           I     8 reg
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// cms_ifc_halt_cpu_state         I     1 reg
// core_dmem_pre_fabric_awready   I     1
// core_dmem_pre_fabric_wready    I     1
// core_dmem_pre_fabric_bvalid    I     1
// core_dmem_pre_fabric_bid       I     6
// core_dmem_pre_fabric_bresp     I     2
// core_dmem_pre_fabric_arready   I     1
// core_dmem_pre_fabric_rvalid    I     1
// core_dmem_pre_fabric_rid       I     6
// core_dmem_pre_fabric_rdata     I    64
// core_dmem_pre_fabric_rresp     I     2
// core_dmem_pre_fabric_rlast     I     1
// core_dmem_post_fabric_awready  I     1
// core_dmem_post_fabric_wready   I     1
// core_dmem_post_fabric_bvalid   I     1
// core_dmem_post_fabric_bid      I     7 reg
// core_dmem_post_fabric_bresp    I     2 reg
// core_dmem_post_fabric_arready  I     1
// core_dmem_post_fabric_rvalid   I     1
// core_dmem_post_fabric_rid      I     7 reg
// core_dmem_post_fabric_rdata    I    64 reg
// core_dmem_post_fabric_rresp    I     2 reg
// core_dmem_post_fabric_rlast    I     1 reg
// EN_to_raw_mem_response_put     I     1
// EN_put_from_console_put        I     1
// EN_set_verbosity               I     1
// EN_set_watch_tohost            I     1
// EN_ma_ddr4_ready               I     1
// EN_cms_ifc_halt_cpu            I     1
// EN_to_raw_mem_request_get      I     1
// EN_get_to_console_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSoC_Top(CLK,
		 RST_N,

		 EN_to_raw_mem_request_get,
		 to_raw_mem_request_get,
		 RDY_to_raw_mem_request_get,

		 to_raw_mem_response_put,
		 EN_to_raw_mem_response_put,
		 RDY_to_raw_mem_response_put,

		 EN_get_to_console_get,
		 get_to_console_get,
		 RDY_get_to_console_get,

		 put_from_console_put,
		 EN_put_from_console_put,
		 RDY_put_from_console_put,

		 status,

		 set_verbosity_verbosity,
		 set_verbosity_logdelay,
		 EN_set_verbosity,
		 RDY_set_verbosity,

		 set_watch_tohost_watch_tohost,
		 set_watch_tohost_tohost_addr,
		 EN_set_watch_tohost,
		 RDY_set_watch_tohost,

		 mv_tohost_value,
		 RDY_mv_tohost_value,

		 EN_ma_ddr4_ready,
		 RDY_ma_ddr4_ready,

		 mv_status,

		 cms_ifc_pc,

		 cms_ifc_instr,

		 cms_ifc_performance_events,

		 cms_ifc_halt_cpu_state,
		 EN_cms_ifc_halt_cpu,

		 cms_ifc_gp_write_reg_name,

		 cms_ifc_gp_write_reg,

		 cms_ifc_gp_write_valid,

		 core_dmem_pre_fabric_awid,

		 core_dmem_pre_fabric_awaddr,

		 core_dmem_pre_fabric_awlen,

		 core_dmem_pre_fabric_awsize,

		 core_dmem_pre_fabric_awburst,

		 core_dmem_pre_fabric_awlock,

		 core_dmem_pre_fabric_awcache,

		 core_dmem_pre_fabric_awprot,

		 core_dmem_pre_fabric_awqos,

		 core_dmem_pre_fabric_awregion,

		 core_dmem_pre_fabric_awvalid,

		 core_dmem_pre_fabric_awready,

		 core_dmem_pre_fabric_wdata,

		 core_dmem_pre_fabric_wstrb,

		 core_dmem_pre_fabric_wlast,

		 core_dmem_pre_fabric_wvalid,

		 core_dmem_pre_fabric_wready,

		 core_dmem_pre_fabric_bvalid,
		 core_dmem_pre_fabric_bid,
		 core_dmem_pre_fabric_bresp,

		 core_dmem_pre_fabric_bready,

		 core_dmem_pre_fabric_arid,

		 core_dmem_pre_fabric_araddr,

		 core_dmem_pre_fabric_arlen,

		 core_dmem_pre_fabric_arsize,

		 core_dmem_pre_fabric_arburst,

		 core_dmem_pre_fabric_arlock,

		 core_dmem_pre_fabric_arcache,

		 core_dmem_pre_fabric_arprot,

		 core_dmem_pre_fabric_arqos,

		 core_dmem_pre_fabric_arregion,

		 core_dmem_pre_fabric_arvalid,

		 core_dmem_pre_fabric_arready,

		 core_dmem_pre_fabric_rvalid,
		 core_dmem_pre_fabric_rid,
		 core_dmem_pre_fabric_rdata,
		 core_dmem_pre_fabric_rresp,
		 core_dmem_pre_fabric_rlast,

		 core_dmem_pre_fabric_rready,

		 core_dmem_post_fabric_awid,

		 core_dmem_post_fabric_awaddr,

		 core_dmem_post_fabric_awlen,

		 core_dmem_post_fabric_awsize,

		 core_dmem_post_fabric_awburst,

		 core_dmem_post_fabric_awlock,

		 core_dmem_post_fabric_awcache,

		 core_dmem_post_fabric_awprot,

		 core_dmem_post_fabric_awqos,

		 core_dmem_post_fabric_awregion,

		 core_dmem_post_fabric_awvalid,

		 core_dmem_post_fabric_awready,

		 core_dmem_post_fabric_wdata,

		 core_dmem_post_fabric_wstrb,

		 core_dmem_post_fabric_wlast,

		 core_dmem_post_fabric_wvalid,

		 core_dmem_post_fabric_wready,

		 core_dmem_post_fabric_bvalid,
		 core_dmem_post_fabric_bid,
		 core_dmem_post_fabric_bresp,

		 core_dmem_post_fabric_bready,

		 core_dmem_post_fabric_arid,

		 core_dmem_post_fabric_araddr,

		 core_dmem_post_fabric_arlen,

		 core_dmem_post_fabric_arsize,

		 core_dmem_post_fabric_arburst,

		 core_dmem_post_fabric_arlock,

		 core_dmem_post_fabric_arcache,

		 core_dmem_post_fabric_arprot,

		 core_dmem_post_fabric_arqos,

		 core_dmem_post_fabric_arregion,

		 core_dmem_post_fabric_arvalid,

		 core_dmem_post_fabric_arready,

		 core_dmem_post_fabric_rvalid,
		 core_dmem_post_fabric_rid,
		 core_dmem_post_fabric_rdata,
		 core_dmem_post_fabric_rresp,
		 core_dmem_post_fabric_rlast,

		 core_dmem_post_fabric_rready,

		 cpu_reset_completed);
  input  CLK;
  input  RST_N;

  // actionvalue method to_raw_mem_request_get
  input  EN_to_raw_mem_request_get;
  output [352 : 0] to_raw_mem_request_get;
  output RDY_to_raw_mem_request_get;

  // action method to_raw_mem_response_put
  input  [255 : 0] to_raw_mem_response_put;
  input  EN_to_raw_mem_response_put;
  output RDY_to_raw_mem_response_put;

  // actionvalue method get_to_console_get
  input  EN_get_to_console_get;
  output [7 : 0] get_to_console_get;
  output RDY_get_to_console_get;

  // action method put_from_console_put
  input  [7 : 0] put_from_console_put;
  input  EN_put_from_console_put;
  output RDY_put_from_console_put;

  // value method status
  output [7 : 0] status;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [63 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // value method cms_ifc_pc
  output [63 : 0] cms_ifc_pc;

  // value method cms_ifc_instr
  output [31 : 0] cms_ifc_instr;

  // value method cms_ifc_performance_events
  output [38 : 0] cms_ifc_performance_events;

  // action method cms_ifc_halt_cpu
  input  cms_ifc_halt_cpu_state;
  input  EN_cms_ifc_halt_cpu;

  // value method cms_ifc_gp_write_reg_name
  output [4 : 0] cms_ifc_gp_write_reg_name;

  // value method cms_ifc_gp_write_reg
  output [128 : 0] cms_ifc_gp_write_reg;

  // value method cms_ifc_gp_write_valid
  output cms_ifc_gp_write_valid;

  // value method core_dmem_pre_fabric_aw_awid
  output [5 : 0] core_dmem_pre_fabric_awid;

  // value method core_dmem_pre_fabric_aw_awaddr
  output [63 : 0] core_dmem_pre_fabric_awaddr;

  // value method core_dmem_pre_fabric_aw_awlen
  output [7 : 0] core_dmem_pre_fabric_awlen;

  // value method core_dmem_pre_fabric_aw_awsize
  output [2 : 0] core_dmem_pre_fabric_awsize;

  // value method core_dmem_pre_fabric_aw_awburst
  output [1 : 0] core_dmem_pre_fabric_awburst;

  // value method core_dmem_pre_fabric_aw_awlock
  output core_dmem_pre_fabric_awlock;

  // value method core_dmem_pre_fabric_aw_awcache
  output [3 : 0] core_dmem_pre_fabric_awcache;

  // value method core_dmem_pre_fabric_aw_awprot
  output [2 : 0] core_dmem_pre_fabric_awprot;

  // value method core_dmem_pre_fabric_aw_awqos
  output [3 : 0] core_dmem_pre_fabric_awqos;

  // value method core_dmem_pre_fabric_aw_awregion
  output [3 : 0] core_dmem_pre_fabric_awregion;

  // value method core_dmem_pre_fabric_aw_awuser

  // value method core_dmem_pre_fabric_aw_awvalid
  output core_dmem_pre_fabric_awvalid;

  // action method core_dmem_pre_fabric_aw_awready
  input  core_dmem_pre_fabric_awready;

  // value method core_dmem_pre_fabric_w_wdata
  output [63 : 0] core_dmem_pre_fabric_wdata;

  // value method core_dmem_pre_fabric_w_wstrb
  output [7 : 0] core_dmem_pre_fabric_wstrb;

  // value method core_dmem_pre_fabric_w_wlast
  output core_dmem_pre_fabric_wlast;

  // value method core_dmem_pre_fabric_w_wuser

  // value method core_dmem_pre_fabric_w_wvalid
  output core_dmem_pre_fabric_wvalid;

  // action method core_dmem_pre_fabric_w_wready
  input  core_dmem_pre_fabric_wready;

  // action method core_dmem_pre_fabric_b_bflit
  input  core_dmem_pre_fabric_bvalid;
  input  [5 : 0] core_dmem_pre_fabric_bid;
  input  [1 : 0] core_dmem_pre_fabric_bresp;

  // value method core_dmem_pre_fabric_b_bready
  output core_dmem_pre_fabric_bready;

  // value method core_dmem_pre_fabric_ar_arid
  output [5 : 0] core_dmem_pre_fabric_arid;

  // value method core_dmem_pre_fabric_ar_araddr
  output [63 : 0] core_dmem_pre_fabric_araddr;

  // value method core_dmem_pre_fabric_ar_arlen
  output [7 : 0] core_dmem_pre_fabric_arlen;

  // value method core_dmem_pre_fabric_ar_arsize
  output [2 : 0] core_dmem_pre_fabric_arsize;

  // value method core_dmem_pre_fabric_ar_arburst
  output [1 : 0] core_dmem_pre_fabric_arburst;

  // value method core_dmem_pre_fabric_ar_arlock
  output core_dmem_pre_fabric_arlock;

  // value method core_dmem_pre_fabric_ar_arcache
  output [3 : 0] core_dmem_pre_fabric_arcache;

  // value method core_dmem_pre_fabric_ar_arprot
  output [2 : 0] core_dmem_pre_fabric_arprot;

  // value method core_dmem_pre_fabric_ar_arqos
  output [3 : 0] core_dmem_pre_fabric_arqos;

  // value method core_dmem_pre_fabric_ar_arregion
  output [3 : 0] core_dmem_pre_fabric_arregion;

  // value method core_dmem_pre_fabric_ar_aruser

  // value method core_dmem_pre_fabric_ar_arvalid
  output core_dmem_pre_fabric_arvalid;

  // action method core_dmem_pre_fabric_ar_arready
  input  core_dmem_pre_fabric_arready;

  // action method core_dmem_pre_fabric_r_rflit
  input  core_dmem_pre_fabric_rvalid;
  input  [5 : 0] core_dmem_pre_fabric_rid;
  input  [63 : 0] core_dmem_pre_fabric_rdata;
  input  [1 : 0] core_dmem_pre_fabric_rresp;
  input  core_dmem_pre_fabric_rlast;

  // value method core_dmem_pre_fabric_r_rready
  output core_dmem_pre_fabric_rready;

  // value method core_dmem_post_fabric_aw_awid
  output [6 : 0] core_dmem_post_fabric_awid;

  // value method core_dmem_post_fabric_aw_awaddr
  output [63 : 0] core_dmem_post_fabric_awaddr;

  // value method core_dmem_post_fabric_aw_awlen
  output [7 : 0] core_dmem_post_fabric_awlen;

  // value method core_dmem_post_fabric_aw_awsize
  output [2 : 0] core_dmem_post_fabric_awsize;

  // value method core_dmem_post_fabric_aw_awburst
  output [1 : 0] core_dmem_post_fabric_awburst;

  // value method core_dmem_post_fabric_aw_awlock
  output core_dmem_post_fabric_awlock;

  // value method core_dmem_post_fabric_aw_awcache
  output [3 : 0] core_dmem_post_fabric_awcache;

  // value method core_dmem_post_fabric_aw_awprot
  output [2 : 0] core_dmem_post_fabric_awprot;

  // value method core_dmem_post_fabric_aw_awqos
  output [3 : 0] core_dmem_post_fabric_awqos;

  // value method core_dmem_post_fabric_aw_awregion
  output [3 : 0] core_dmem_post_fabric_awregion;

  // value method core_dmem_post_fabric_aw_awuser

  // value method core_dmem_post_fabric_aw_awvalid
  output core_dmem_post_fabric_awvalid;

  // action method core_dmem_post_fabric_aw_awready
  input  core_dmem_post_fabric_awready;

  // value method core_dmem_post_fabric_w_wdata
  output [63 : 0] core_dmem_post_fabric_wdata;

  // value method core_dmem_post_fabric_w_wstrb
  output [7 : 0] core_dmem_post_fabric_wstrb;

  // value method core_dmem_post_fabric_w_wlast
  output core_dmem_post_fabric_wlast;

  // value method core_dmem_post_fabric_w_wuser

  // value method core_dmem_post_fabric_w_wvalid
  output core_dmem_post_fabric_wvalid;

  // action method core_dmem_post_fabric_w_wready
  input  core_dmem_post_fabric_wready;

  // action method core_dmem_post_fabric_b_bflit
  input  core_dmem_post_fabric_bvalid;
  input  [6 : 0] core_dmem_post_fabric_bid;
  input  [1 : 0] core_dmem_post_fabric_bresp;

  // value method core_dmem_post_fabric_b_bready
  output core_dmem_post_fabric_bready;

  // value method core_dmem_post_fabric_ar_arid
  output [6 : 0] core_dmem_post_fabric_arid;

  // value method core_dmem_post_fabric_ar_araddr
  output [63 : 0] core_dmem_post_fabric_araddr;

  // value method core_dmem_post_fabric_ar_arlen
  output [7 : 0] core_dmem_post_fabric_arlen;

  // value method core_dmem_post_fabric_ar_arsize
  output [2 : 0] core_dmem_post_fabric_arsize;

  // value method core_dmem_post_fabric_ar_arburst
  output [1 : 0] core_dmem_post_fabric_arburst;

  // value method core_dmem_post_fabric_ar_arlock
  output core_dmem_post_fabric_arlock;

  // value method core_dmem_post_fabric_ar_arcache
  output [3 : 0] core_dmem_post_fabric_arcache;

  // value method core_dmem_post_fabric_ar_arprot
  output [2 : 0] core_dmem_post_fabric_arprot;

  // value method core_dmem_post_fabric_ar_arqos
  output [3 : 0] core_dmem_post_fabric_arqos;

  // value method core_dmem_post_fabric_ar_arregion
  output [3 : 0] core_dmem_post_fabric_arregion;

  // value method core_dmem_post_fabric_ar_aruser

  // value method core_dmem_post_fabric_ar_arvalid
  output core_dmem_post_fabric_arvalid;

  // action method core_dmem_post_fabric_ar_arready
  input  core_dmem_post_fabric_arready;

  // action method core_dmem_post_fabric_r_rflit
  input  core_dmem_post_fabric_rvalid;
  input  [6 : 0] core_dmem_post_fabric_rid;
  input  [63 : 0] core_dmem_post_fabric_rdata;
  input  [1 : 0] core_dmem_post_fabric_rresp;
  input  core_dmem_post_fabric_rlast;

  // value method core_dmem_post_fabric_r_rready
  output core_dmem_post_fabric_rready;

  // value method cpu_reset_completed
  output cpu_reset_completed;

  // signals for module outputs
  wire [352 : 0] to_raw_mem_request_get;
  wire [128 : 0] cms_ifc_gp_write_reg;
  wire [63 : 0] cms_ifc_pc,
		core_dmem_post_fabric_araddr,
		core_dmem_post_fabric_awaddr,
		core_dmem_post_fabric_wdata,
		core_dmem_pre_fabric_araddr,
		core_dmem_pre_fabric_awaddr,
		core_dmem_pre_fabric_wdata,
		mv_tohost_value;
  wire [38 : 0] cms_ifc_performance_events;
  wire [31 : 0] cms_ifc_instr;
  wire [7 : 0] core_dmem_post_fabric_arlen,
	       core_dmem_post_fabric_awlen,
	       core_dmem_post_fabric_wstrb,
	       core_dmem_pre_fabric_arlen,
	       core_dmem_pre_fabric_awlen,
	       core_dmem_pre_fabric_wstrb,
	       get_to_console_get,
	       mv_status,
	       status;
  wire [6 : 0] core_dmem_post_fabric_arid, core_dmem_post_fabric_awid;
  wire [5 : 0] core_dmem_pre_fabric_arid, core_dmem_pre_fabric_awid;
  wire [4 : 0] cms_ifc_gp_write_reg_name;
  wire [3 : 0] core_dmem_post_fabric_arcache,
	       core_dmem_post_fabric_arqos,
	       core_dmem_post_fabric_arregion,
	       core_dmem_post_fabric_awcache,
	       core_dmem_post_fabric_awqos,
	       core_dmem_post_fabric_awregion,
	       core_dmem_pre_fabric_arcache,
	       core_dmem_pre_fabric_arqos,
	       core_dmem_pre_fabric_arregion,
	       core_dmem_pre_fabric_awcache,
	       core_dmem_pre_fabric_awqos,
	       core_dmem_pre_fabric_awregion;
  wire [2 : 0] core_dmem_post_fabric_arprot,
	       core_dmem_post_fabric_arsize,
	       core_dmem_post_fabric_awprot,
	       core_dmem_post_fabric_awsize,
	       core_dmem_pre_fabric_arprot,
	       core_dmem_pre_fabric_arsize,
	       core_dmem_pre_fabric_awprot,
	       core_dmem_pre_fabric_awsize;
  wire [1 : 0] core_dmem_post_fabric_arburst,
	       core_dmem_post_fabric_awburst,
	       core_dmem_pre_fabric_arburst,
	       core_dmem_pre_fabric_awburst;
  wire RDY_get_to_console_get,
       RDY_ma_ddr4_ready,
       RDY_mv_tohost_value,
       RDY_put_from_console_put,
       RDY_set_verbosity,
       RDY_set_watch_tohost,
       RDY_to_raw_mem_request_get,
       RDY_to_raw_mem_response_put,
       cms_ifc_gp_write_valid,
       core_dmem_post_fabric_arlock,
       core_dmem_post_fabric_arvalid,
       core_dmem_post_fabric_awlock,
       core_dmem_post_fabric_awvalid,
       core_dmem_post_fabric_bready,
       core_dmem_post_fabric_rready,
       core_dmem_post_fabric_wlast,
       core_dmem_post_fabric_wvalid,
       core_dmem_pre_fabric_arlock,
       core_dmem_pre_fabric_arvalid,
       core_dmem_pre_fabric_awlock,
       core_dmem_pre_fabric_awvalid,
       core_dmem_pre_fabric_bready,
       core_dmem_pre_fabric_rready,
       core_dmem_pre_fabric_wlast,
       core_dmem_pre_fabric_wvalid,
       cpu_reset_completed;

  // inlined wires
  reg [173 : 0] bus_toDfltOutput$wget,
		bus_toOutput_0$wget,
		bus_toOutput_1$wget,
		bus_toOutput_2$wget,
		bus_toOutput_3$wget;
  reg [99 : 0] bus_1_toDfltOutput$wget,
	       bus_1_toOutput_0$wget,
	       bus_1_toOutput_1$wget,
	       bus_1_toOutput_2$wget,
	       bus_1_toOutput_3$wget;
  reg [73 : 0] bus_1_toOutput_0_1$wget, bus_1_toOutput_1_1$wget;
  reg [8 : 0] bus_toOutput_0_1$wget, bus_toOutput_1_1$wget;
  wire [173 : 0] bus_split_0_doPut$wget,
		 bus_split_1_doPut$wget,
		 bus_split_2_doPut$wget,
		 bus_split_3_doPut$wget;
  wire [172 : 0] bus_merged_0_outflit$wget, bus_merged_1_outflit$wget;
  wire [100 : 0] boot_rom_axi4_deburster_inSerial_shim_arff_rv$port0__write_1,
		 boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read,
		 boot_rom_axi4_deburster_inSerial_shim_arff_rv$port2__read,
		 boot_rom_axi4_deburster_inSerial_shim_awff_rv$port0__write_1,
		 boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read,
		 boot_rom_axi4_deburster_inSerial_shim_awff_rv$port2__read,
		 mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port0__write_1,
		 mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read,
		 mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port2__read,
		 mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port0__write_1,
		 mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read,
		 mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port2__read;
  wire [98 : 0] bus_merged_0_awug_peekWire$wget;
  wire [74 : 0] boot_rom_axi4_deburster_inSerial_shim_rff_rv$port0__write_1,
		boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read,
		boot_rom_axi4_deburster_inSerial_shim_rff_rv$port2__read,
		mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port0__write_1,
		mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read,
		mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port2__read;
  wire [73 : 0] boot_rom_axi4_deburster_inSerial_shim_wff_rv$port0__write_1,
		boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read,
		boot_rom_axi4_deburster_inSerial_shim_wff_rv$port2__read,
		mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port0__write_1,
		mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read,
		mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port2__read,
		s_otherPeripheralsPort_master_sig_rSig_snk_putWire$wget;
  wire [72 : 0] core_mem_master_sig_rSig_snk_putWire$wget;
  wire [17 : 0] boot_rom_axi4_deburster_flitReceived$port0__write_1,
		boot_rom_axi4_deburster_flitReceived$port1__read,
		boot_rom_axi4_deburster_flitReceived$port2__read,
		boot_rom_axi4_deburster_flitReceived$port3__read,
		mem0_controller_axi4_deburster_flitReceived$port0__write_1,
		mem0_controller_axi4_deburster_flitReceived$port1__read,
		mem0_controller_axi4_deburster_flitReceived$port2__read,
		mem0_controller_axi4_deburster_flitReceived$port3__read;
  wire [9 : 0] boot_rom_axi4_deburster_inSerial_shim_bff_rv$port0__write_1,
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read,
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port2__read,
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port0__write_1,
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read,
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port2__read;
  wire [8 : 0] s_otherPeripheralsPort_master_sig_bSig_snk_putWire$wget;
  wire [7 : 0] boot_rom_axi4_deburster_readsSent$port0__write_1,
	       boot_rom_axi4_deburster_readsSent$port1__read,
	       boot_rom_axi4_deburster_readsSent$port2__read,
	       boot_rom_axi4_deburster_writesSent$port0__write_1,
	       boot_rom_axi4_deburster_writesSent$port1__read,
	       boot_rom_axi4_deburster_writesSent$port2__read,
	       core_mem_master_sig_bSig_snk_putWire$wget,
	       mem0_controller_axi4_deburster_readsSent$port0__write_1,
	       mem0_controller_axi4_deburster_readsSent$port1__read,
	       mem0_controller_axi4_deburster_readsSent$port2__read,
	       mem0_controller_axi4_deburster_writesSent$port0__write_1,
	       mem0_controller_axi4_deburster_writesSent$port1__read,
	       mem0_controller_axi4_deburster_writesSent$port2__read;
  wire [3 : 0] bus_1_inputDest_0$wget,
	       bus_1_inputDest_1$wget,
	       bus_inputDest_0$wget,
	       bus_inputDest_1$wget;
  wire [1 : 0] boot_rom_axi4_deburster_inSerial_state$port0__write_1,
	       boot_rom_axi4_deburster_inSerial_state$port1__read,
	       boot_rom_axi4_deburster_inSerial_state$port1__write_1,
	       boot_rom_axi4_deburster_inSerial_state$port2__read,
	       bus_1_inputDest_0_1$wget,
	       bus_1_inputDest_1_1$wget,
	       bus_1_inputDest_2$wget,
	       bus_1_inputDest_3$wget,
	       bus_1_inputDest_4$wget,
	       bus_inputDest_0_1$wget,
	       bus_inputDest_1_1$wget,
	       bus_inputDest_2$wget,
	       bus_inputDest_3$wget,
	       bus_inputDest_4$wget,
	       mem0_controller_axi4_deburster_inSerial_state$port0__write_1,
	       mem0_controller_axi4_deburster_inSerial_state$port1__read,
	       mem0_controller_axi4_deburster_inSerial_state$port1__write_1,
	       mem0_controller_axi4_deburster_inSerial_state$port2__read;
  wire boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write,
       boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write,
       boot_rom_axi4_deburster_inSerial_state$EN_port0__write,
       boot_rom_axi4_deburster_inSerial_state$EN_port1__write,
       bus_1_selectInput_0$wget,
       bus_1_selectInput_0_1$wget,
       bus_1_selectInput_1$wget,
       bus_1_selectInput_1_1$wget,
       bus_1_selectInput_2$wget,
       bus_1_selectInput_3$wget,
       bus_1_selectInput_4$wget,
       bus_1_toDfltOutput$whas,
       bus_1_toOutput_0$whas,
       bus_1_toOutput_0_1$whas,
       bus_1_toOutput_1$whas,
       bus_1_toOutput_1_1$whas,
       bus_1_toOutput_2$whas,
       bus_1_toOutput_3$whas,
       bus_merged_0_doDrop$whas,
       bus_merged_1_doDrop$whas,
       bus_selectInput_0$wget,
       bus_selectInput_0_1$wget,
       bus_selectInput_1$wget,
       bus_selectInput_1_1$wget,
       bus_selectInput_2$wget,
       bus_selectInput_3$wget,
       bus_selectInput_4$wget,
       bus_split_0_wug_putWire$whas,
       bus_split_1_wug_putWire$whas,
       bus_split_2_wug_putWire$whas,
       bus_split_3_wug_putWire$whas,
       bus_toDfltOutput$whas,
       bus_toOutput_0$whas,
       bus_toOutput_0_1$whas,
       bus_toOutput_1$whas,
       bus_toOutput_1_1$whas,
       bus_toOutput_2$whas,
       bus_toOutput_3$whas,
       core_mem_master_sig_arSig_src_dropWire$whas,
       core_mem_master_sig_awSig_src_dropWire$whas,
       core_mem_master_sig_bSig_snk_putWire$whas,
       core_mem_master_sig_rSig_snk_putWire$whas,
       core_mem_master_sig_wSig_src_dropWire$whas,
       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write,
       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write,
       mem0_controller_axi4_deburster_inSerial_state$EN_port0__write,
       mem0_controller_axi4_deburster_inSerial_state$EN_port1__write,
       s_otherPeripheralsPort_master_sig_arSig_src_dropWire$whas,
       s_otherPeripheralsPort_master_sig_awSig_src_dropWire$whas,
       s_otherPeripheralsPort_master_sig_bSig_snk_putWire$whas,
       s_otherPeripheralsPort_master_sig_rSig_snk_putWire$whas,
       s_otherPeripheralsPort_master_sig_wSig_src_dropWire$whas;

  // register boot_rom_axi4_deburster_flitReceived
  reg [17 : 0] boot_rom_axi4_deburster_flitReceived;
  wire [17 : 0] boot_rom_axi4_deburster_flitReceived$D_IN;
  wire boot_rom_axi4_deburster_flitReceived$EN;

  // register boot_rom_axi4_deburster_inSerial_lastWasRead
  reg boot_rom_axi4_deburster_inSerial_lastWasRead;
  wire boot_rom_axi4_deburster_inSerial_lastWasRead$D_IN,
       boot_rom_axi4_deburster_inSerial_lastWasRead$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_arff_rv
  reg [100 : 0] boot_rom_axi4_deburster_inSerial_shim_arff_rv;
  wire [100 : 0] boot_rom_axi4_deburster_inSerial_shim_arff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_awff_rv
  reg [100 : 0] boot_rom_axi4_deburster_inSerial_shim_awff_rv;
  wire [100 : 0] boot_rom_axi4_deburster_inSerial_shim_awff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_bff_rv
  reg [9 : 0] boot_rom_axi4_deburster_inSerial_shim_bff_rv;
  wire [9 : 0] boot_rom_axi4_deburster_inSerial_shim_bff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_rff_rv
  reg [74 : 0] boot_rom_axi4_deburster_inSerial_shim_rff_rv;
  wire [74 : 0] boot_rom_axi4_deburster_inSerial_shim_rff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_rff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_wff_rv
  reg [73 : 0] boot_rom_axi4_deburster_inSerial_shim_wff_rv;
  wire [73 : 0] boot_rom_axi4_deburster_inSerial_shim_wff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_wff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_state
  reg [1 : 0] boot_rom_axi4_deburster_inSerial_state;
  wire [1 : 0] boot_rom_axi4_deburster_inSerial_state$D_IN;
  wire boot_rom_axi4_deburster_inSerial_state$EN;

  // register boot_rom_axi4_deburster_readsSent
  reg [7 : 0] boot_rom_axi4_deburster_readsSent;
  wire [7 : 0] boot_rom_axi4_deburster_readsSent$D_IN;
  wire boot_rom_axi4_deburster_readsSent$EN;

  // register boot_rom_axi4_deburster_writesSent
  reg [7 : 0] boot_rom_axi4_deburster_writesSent;
  wire [7 : 0] boot_rom_axi4_deburster_writesSent$D_IN;
  wire boot_rom_axi4_deburster_writesSent$EN;

  // register bus_1_arbiter_firstHot
  reg bus_1_arbiter_firstHot;
  wire bus_1_arbiter_firstHot$D_IN, bus_1_arbiter_firstHot$EN;

  // register bus_1_arbiter_firstHot_1
  reg bus_1_arbiter_firstHot_1;
  wire bus_1_arbiter_firstHot_1$D_IN, bus_1_arbiter_firstHot_1$EN;

  // register bus_1_arbiter_lastSelect
  reg bus_1_arbiter_lastSelect;
  wire bus_1_arbiter_lastSelect$D_IN, bus_1_arbiter_lastSelect$EN;

  // register bus_1_arbiter_lastSelect_1
  reg bus_1_arbiter_lastSelect_1;
  wire bus_1_arbiter_lastSelect_1$D_IN, bus_1_arbiter_lastSelect_1$EN;

  // register bus_1_arbiter_lastSelect_1_1
  reg bus_1_arbiter_lastSelect_1_1;
  wire bus_1_arbiter_lastSelect_1_1$D_IN, bus_1_arbiter_lastSelect_1_1$EN;

  // register bus_1_arbiter_lastSelect_2
  reg bus_1_arbiter_lastSelect_2;
  wire bus_1_arbiter_lastSelect_2$D_IN, bus_1_arbiter_lastSelect_2$EN;

  // register bus_1_arbiter_lastSelect_3
  reg bus_1_arbiter_lastSelect_3;
  wire bus_1_arbiter_lastSelect_3$D_IN, bus_1_arbiter_lastSelect_3$EN;

  // register bus_1_moreFlits
  reg [6 : 0] bus_1_moreFlits;
  wire [6 : 0] bus_1_moreFlits$D_IN;
  wire bus_1_moreFlits$EN;

  // register bus_1_moreFlits_1
  reg [7 : 0] bus_1_moreFlits_1;
  reg [7 : 0] bus_1_moreFlits_1$D_IN;
  wire bus_1_moreFlits_1$EN;

  // register bus_1_noRouteSlv_currentReq
  reg [99 : 0] bus_1_noRouteSlv_currentReq;
  wire [99 : 0] bus_1_noRouteSlv_currentReq$D_IN;
  wire bus_1_noRouteSlv_currentReq$EN;

  // register bus_1_noRouteSlv_flitCount
  reg [8 : 0] bus_1_noRouteSlv_flitCount;
  wire [8 : 0] bus_1_noRouteSlv_flitCount$D_IN;
  wire bus_1_noRouteSlv_flitCount$EN;

  // register bus_arbiter_firstHot
  reg bus_arbiter_firstHot;
  wire bus_arbiter_firstHot$D_IN, bus_arbiter_firstHot$EN;

  // register bus_arbiter_firstHot_1
  reg bus_arbiter_firstHot_1;
  wire bus_arbiter_firstHot_1$D_IN, bus_arbiter_firstHot_1$EN;

  // register bus_arbiter_lastSelect
  reg bus_arbiter_lastSelect;
  wire bus_arbiter_lastSelect$D_IN, bus_arbiter_lastSelect$EN;

  // register bus_arbiter_lastSelect_1
  reg bus_arbiter_lastSelect_1;
  wire bus_arbiter_lastSelect_1$D_IN, bus_arbiter_lastSelect_1$EN;

  // register bus_arbiter_lastSelect_1_1
  reg bus_arbiter_lastSelect_1_1;
  wire bus_arbiter_lastSelect_1_1$D_IN, bus_arbiter_lastSelect_1_1$EN;

  // register bus_arbiter_lastSelect_2
  reg bus_arbiter_lastSelect_2;
  wire bus_arbiter_lastSelect_2$D_IN, bus_arbiter_lastSelect_2$EN;

  // register bus_arbiter_lastSelect_3
  reg bus_arbiter_lastSelect_3;
  wire bus_arbiter_lastSelect_3$D_IN, bus_arbiter_lastSelect_3$EN;

  // register bus_merged_0_flitLeft
  reg [7 : 0] bus_merged_0_flitLeft;
  wire [7 : 0] bus_merged_0_flitLeft$D_IN;
  wire bus_merged_0_flitLeft$EN;

  // register bus_merged_1_flitLeft
  reg [7 : 0] bus_merged_1_flitLeft;
  wire [7 : 0] bus_merged_1_flitLeft$D_IN;
  wire bus_merged_1_flitLeft$EN;

  // register bus_moreFlits
  reg [6 : 0] bus_moreFlits;
  reg [6 : 0] bus_moreFlits$D_IN;
  wire bus_moreFlits$EN;

  // register bus_moreFlits_1
  reg [7 : 0] bus_moreFlits_1;
  wire [7 : 0] bus_moreFlits_1$D_IN;
  wire bus_moreFlits_1$EN;

  // register bus_noRouteSlv_awidReg
  reg [6 : 0] bus_noRouteSlv_awidReg;
  wire [6 : 0] bus_noRouteSlv_awidReg$D_IN;
  wire bus_noRouteSlv_awidReg$EN;

  // register bus_split_0_flitLeft
  reg [7 : 0] bus_split_0_flitLeft;
  wire [7 : 0] bus_split_0_flitLeft$D_IN;
  wire bus_split_0_flitLeft$EN;

  // register bus_split_1_flitLeft
  reg [7 : 0] bus_split_1_flitLeft;
  wire [7 : 0] bus_split_1_flitLeft$D_IN;
  wire bus_split_1_flitLeft$EN;

  // register bus_split_2_flitLeft
  reg [7 : 0] bus_split_2_flitLeft;
  wire [7 : 0] bus_split_2_flitLeft$D_IN;
  wire bus_split_2_flitLeft$EN;

  // register bus_split_3_flitLeft
  reg [7 : 0] bus_split_3_flitLeft;
  wire [7 : 0] bus_split_3_flitLeft$D_IN;
  wire bus_split_3_flitLeft$EN;

  // register mem0_controller_axi4_deburster_flitReceived
  reg [17 : 0] mem0_controller_axi4_deburster_flitReceived;
  wire [17 : 0] mem0_controller_axi4_deburster_flitReceived$D_IN;
  wire mem0_controller_axi4_deburster_flitReceived$EN;

  // register mem0_controller_axi4_deburster_inSerial_lastWasRead
  reg mem0_controller_axi4_deburster_inSerial_lastWasRead;
  wire mem0_controller_axi4_deburster_inSerial_lastWasRead$D_IN,
       mem0_controller_axi4_deburster_inSerial_lastWasRead$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_arff_rv
  reg [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_arff_rv;
  wire [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_arff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_awff_rv
  reg [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_awff_rv;
  wire [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_awff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_bff_rv
  reg [9 : 0] mem0_controller_axi4_deburster_inSerial_shim_bff_rv;
  wire [9 : 0] mem0_controller_axi4_deburster_inSerial_shim_bff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_rff_rv
  reg [74 : 0] mem0_controller_axi4_deburster_inSerial_shim_rff_rv;
  wire [74 : 0] mem0_controller_axi4_deburster_inSerial_shim_rff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_rff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_wff_rv
  reg [73 : 0] mem0_controller_axi4_deburster_inSerial_shim_wff_rv;
  wire [73 : 0] mem0_controller_axi4_deburster_inSerial_shim_wff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_wff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_state
  reg [1 : 0] mem0_controller_axi4_deburster_inSerial_state;
  wire [1 : 0] mem0_controller_axi4_deburster_inSerial_state$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_state$EN;

  // register mem0_controller_axi4_deburster_readsSent
  reg [7 : 0] mem0_controller_axi4_deburster_readsSent;
  wire [7 : 0] mem0_controller_axi4_deburster_readsSent$D_IN;
  wire mem0_controller_axi4_deburster_readsSent$EN;

  // register mem0_controller_axi4_deburster_writesSent
  reg [7 : 0] mem0_controller_axi4_deburster_writesSent;
  wire [7 : 0] mem0_controller_axi4_deburster_writesSent$D_IN;
  wire mem0_controller_axi4_deburster_writesSent$EN;

  // register rg_cpu_reset_completed
  reg rg_cpu_reset_completed;
  wire rg_cpu_reset_completed$D_IN, rg_cpu_reset_completed$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  wire [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule boot_rom
  wire [99 : 0] boot_rom$slave_ar_put_val, boot_rom$slave_aw_put_val;
  wire [73 : 0] boot_rom$slave_r_peek;
  wire [72 : 0] boot_rom$slave_w_put_val;
  wire [63 : 0] boot_rom$set_addr_map_addr_base,
		boot_rom$set_addr_map_addr_lim;
  wire [8 : 0] boot_rom$slave_b_peek;
  wire boot_rom$EN_set_addr_map,
       boot_rom$EN_slave_ar_put,
       boot_rom$EN_slave_aw_put,
       boot_rom$EN_slave_b_drop,
       boot_rom$EN_slave_r_drop,
       boot_rom$EN_slave_w_put,
       boot_rom$RDY_slave_ar_put,
       boot_rom$RDY_slave_aw_put,
       boot_rom$RDY_slave_b_drop,
       boot_rom$RDY_slave_b_peek,
       boot_rom$RDY_slave_r_drop,
       boot_rom$RDY_slave_r_peek,
       boot_rom$RDY_slave_w_put,
       boot_rom$slave_ar_canPut,
       boot_rom$slave_aw_canPut,
       boot_rom$slave_b_canPeek,
       boot_rom$slave_r_canPeek,
       boot_rom$slave_w_canPut;

  // ports of submodule boot_rom_axi4_deburster_countWriteRspFF
  wire [7 : 0] boot_rom_axi4_deburster_countWriteRspFF$D_IN,
	       boot_rom_axi4_deburster_countWriteRspFF$D_OUT;
  wire boot_rom_axi4_deburster_countWriteRspFF$CLR,
       boot_rom_axi4_deburster_countWriteRspFF$DEQ,
       boot_rom_axi4_deburster_countWriteRspFF$EMPTY_N,
       boot_rom_axi4_deburster_countWriteRspFF$ENQ,
       boot_rom_axi4_deburster_countWriteRspFF$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_arff
  wire [99 : 0] boot_rom_axi4_deburster_inShim_arff$D_IN,
		boot_rom_axi4_deburster_inShim_arff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_arff$CLR,
       boot_rom_axi4_deburster_inShim_arff$DEQ,
       boot_rom_axi4_deburster_inShim_arff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_arff$ENQ,
       boot_rom_axi4_deburster_inShim_arff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_awff
  wire [99 : 0] boot_rom_axi4_deburster_inShim_awff$D_IN,
		boot_rom_axi4_deburster_inShim_awff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_awff$CLR,
       boot_rom_axi4_deburster_inShim_awff$DEQ,
       boot_rom_axi4_deburster_inShim_awff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_awff$ENQ,
       boot_rom_axi4_deburster_inShim_awff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_bff
  wire [8 : 0] boot_rom_axi4_deburster_inShim_bff$D_IN,
	       boot_rom_axi4_deburster_inShim_bff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_bff$CLR,
       boot_rom_axi4_deburster_inShim_bff$DEQ,
       boot_rom_axi4_deburster_inShim_bff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_bff$ENQ,
       boot_rom_axi4_deburster_inShim_bff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_rff
  wire [73 : 0] boot_rom_axi4_deburster_inShim_rff$D_IN,
		boot_rom_axi4_deburster_inShim_rff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_rff$CLR,
       boot_rom_axi4_deburster_inShim_rff$DEQ,
       boot_rom_axi4_deburster_inShim_rff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_rff$ENQ,
       boot_rom_axi4_deburster_inShim_rff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_wff
  wire [72 : 0] boot_rom_axi4_deburster_inShim_wff$D_IN,
		boot_rom_axi4_deburster_inShim_wff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_wff$CLR,
       boot_rom_axi4_deburster_inShim_wff$DEQ,
       boot_rom_axi4_deburster_inShim_wff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_wff$ENQ,
       boot_rom_axi4_deburster_inShim_wff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_lastReadRspFF
  wire boot_rom_axi4_deburster_lastReadRspFF$CLR,
       boot_rom_axi4_deburster_lastReadRspFF$DEQ,
       boot_rom_axi4_deburster_lastReadRspFF$D_IN,
       boot_rom_axi4_deburster_lastReadRspFF$D_OUT,
       boot_rom_axi4_deburster_lastReadRspFF$EMPTY_N,
       boot_rom_axi4_deburster_lastReadRspFF$ENQ,
       boot_rom_axi4_deburster_lastReadRspFF$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_arff
  wire [99 : 0] boot_rom_axi4_deburster_outShim_arff$D_IN,
		boot_rom_axi4_deburster_outShim_arff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_arff$CLR,
       boot_rom_axi4_deburster_outShim_arff$DEQ,
       boot_rom_axi4_deburster_outShim_arff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_arff$ENQ,
       boot_rom_axi4_deburster_outShim_arff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_awff
  wire [99 : 0] boot_rom_axi4_deburster_outShim_awff$D_IN,
		boot_rom_axi4_deburster_outShim_awff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_awff$CLR,
       boot_rom_axi4_deburster_outShim_awff$DEQ,
       boot_rom_axi4_deburster_outShim_awff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_awff$ENQ,
       boot_rom_axi4_deburster_outShim_awff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_bff
  wire [8 : 0] boot_rom_axi4_deburster_outShim_bff$D_IN,
	       boot_rom_axi4_deburster_outShim_bff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_bff$CLR,
       boot_rom_axi4_deburster_outShim_bff$DEQ,
       boot_rom_axi4_deburster_outShim_bff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_bff$ENQ,
       boot_rom_axi4_deburster_outShim_bff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_rff
  wire [73 : 0] boot_rom_axi4_deburster_outShim_rff$D_IN,
		boot_rom_axi4_deburster_outShim_rff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_rff$CLR,
       boot_rom_axi4_deburster_outShim_rff$DEQ,
       boot_rom_axi4_deburster_outShim_rff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_rff$ENQ,
       boot_rom_axi4_deburster_outShim_rff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_wff
  wire [72 : 0] boot_rom_axi4_deburster_outShim_wff$D_IN,
		boot_rom_axi4_deburster_outShim_wff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_wff$CLR,
       boot_rom_axi4_deburster_outShim_wff$DEQ,
       boot_rom_axi4_deburster_outShim_wff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_wff$ENQ,
       boot_rom_axi4_deburster_outShim_wff$FULL_N;

  // ports of submodule bus_merged_0_awff
  wire [98 : 0] bus_merged_0_awff$D_IN, bus_merged_0_awff$D_OUT;
  wire bus_merged_0_awff$CLR,
       bus_merged_0_awff$DEQ,
       bus_merged_0_awff$EMPTY_N,
       bus_merged_0_awff$ENQ,
       bus_merged_0_awff$FULL_N;

  // ports of submodule bus_merged_0_wff
  wire [72 : 0] bus_merged_0_wff$D_IN, bus_merged_0_wff$D_OUT;
  wire bus_merged_0_wff$CLR,
       bus_merged_0_wff$DEQ,
       bus_merged_0_wff$EMPTY_N,
       bus_merged_0_wff$ENQ,
       bus_merged_0_wff$FULL_N;

  // ports of submodule bus_merged_1_awff
  wire [98 : 0] bus_merged_1_awff$D_IN, bus_merged_1_awff$D_OUT;
  wire bus_merged_1_awff$CLR,
       bus_merged_1_awff$DEQ,
       bus_merged_1_awff$EMPTY_N,
       bus_merged_1_awff$ENQ,
       bus_merged_1_awff$FULL_N;

  // ports of submodule bus_merged_1_wff
  wire [72 : 0] bus_merged_1_wff$D_IN, bus_merged_1_wff$D_OUT;
  wire bus_merged_1_wff$CLR,
       bus_merged_1_wff$DEQ,
       bus_merged_1_wff$EMPTY_N,
       bus_merged_1_wff$ENQ,
       bus_merged_1_wff$FULL_N;

  // ports of submodule bus_noRouteSlv_rspFF
  wire [8 : 0] bus_noRouteSlv_rspFF$D_IN, bus_noRouteSlv_rspFF$D_OUT;
  wire bus_noRouteSlv_rspFF$CLR,
       bus_noRouteSlv_rspFF$DEQ,
       bus_noRouteSlv_rspFF$EMPTY_N,
       bus_noRouteSlv_rspFF$ENQ,
       bus_noRouteSlv_rspFF$FULL_N;

  // ports of submodule core
  wire [576 : 0] core$dma_server_w_put_val;
  wire [128 : 0] core$cms_ifc_gp_write_reg;
  wire [98 : 0] core$core_mem_master_ar_peek,
		core$core_mem_master_aw_peek,
		core$dma_server_ar_put_val,
		core$dma_server_aw_put_val;
  wire [97 : 0] core$cpu_imem_master_ar_peek, core$cpu_imem_master_aw_peek;
  wire [72 : 0] core$core_mem_master_r_put_val,
		core$core_mem_master_w_peek,
		core$cpu_imem_master_w_peek;
  wire [71 : 0] core$cpu_imem_master_r_put_val;
  wire [63 : 0] core$cms_ifc_pc,
		core$mv_tohost_value,
		core$set_verbosity_logdelay,
		core$set_watch_tohost_tohost_addr;
  wire [38 : 0] core$cms_ifc_performance_events;
  wire [31 : 0] core$cms_ifc_instr;
  wire [7 : 0] core$core_mem_master_b_put_val, core$mv_status;
  wire [6 : 0] core$cpu_imem_master_b_put_val;
  wire [4 : 0] core$cms_ifc_gp_write_reg_name;
  wire [3 : 0] core$set_verbosity_verbosity;
  wire core$EN_cms_ifc_halt_cpu,
       core$EN_core_mem_master_ar_drop,
       core$EN_core_mem_master_aw_drop,
       core$EN_core_mem_master_b_put,
       core$EN_core_mem_master_r_put,
       core$EN_core_mem_master_w_drop,
       core$EN_cpu_imem_master_ar_drop,
       core$EN_cpu_imem_master_aw_drop,
       core$EN_cpu_imem_master_b_put,
       core$EN_cpu_imem_master_r_put,
       core$EN_cpu_imem_master_w_drop,
       core$EN_cpu_reset_server_request_put,
       core$EN_cpu_reset_server_response_get,
       core$EN_dma_server_ar_put,
       core$EN_dma_server_aw_put,
       core$EN_dma_server_b_drop,
       core$EN_dma_server_r_drop,
       core$EN_dma_server_w_put,
       core$EN_ma_ddr4_ready,
       core$EN_set_verbosity,
       core$EN_set_watch_tohost,
       core$RDY_core_mem_master_ar_drop,
       core$RDY_core_mem_master_ar_peek,
       core$RDY_core_mem_master_aw_drop,
       core$RDY_core_mem_master_aw_peek,
       core$RDY_core_mem_master_b_put,
       core$RDY_core_mem_master_r_put,
       core$RDY_core_mem_master_w_drop,
       core$RDY_core_mem_master_w_peek,
       core$RDY_cpu_imem_master_ar_drop,
       core$RDY_cpu_imem_master_ar_peek,
       core$RDY_cpu_imem_master_aw_drop,
       core$RDY_cpu_imem_master_aw_peek,
       core$RDY_cpu_imem_master_b_put,
       core$RDY_cpu_imem_master_r_put,
       core$RDY_cpu_imem_master_w_drop,
       core$RDY_cpu_imem_master_w_peek,
       core$RDY_cpu_reset_server_request_put,
       core$RDY_cpu_reset_server_response_get,
       core$RDY_dma_server_b_drop,
       core$RDY_dma_server_b_peek,
       core$RDY_dma_server_r_drop,
       core$RDY_dma_server_r_peek,
       core$cms_ifc_gp_write_valid,
       core$cms_ifc_halt_cpu_state,
       core$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear,
       core$core_mem_master_ar_canPeek,
       core$core_mem_master_aw_canPeek,
       core$core_mem_master_b_canPut,
       core$core_mem_master_r_canPut,
       core$core_mem_master_w_canPeek,
       core$cpu_imem_master_ar_canPeek,
       core$cpu_imem_master_aw_canPeek,
       core$cpu_imem_master_b_canPut,
       core$cpu_imem_master_r_canPut,
       core$cpu_imem_master_w_canPeek,
       core$cpu_reset_server_request_put,
       core$dma_server_b_canPeek,
       core$dma_server_r_canPeek,
       core$nmi_req_set_not_clear,
       core$set_watch_tohost_watch_tohost;

  // ports of submodule mem0_controller
  wire [352 : 0] mem0_controller$to_raw_mem_request_get;
  wire [255 : 0] mem0_controller$to_raw_mem_response_put;
  wire [99 : 0] mem0_controller$slave_ar_put_val,
		mem0_controller$slave_aw_put_val;
  wire [73 : 0] mem0_controller$slave_r_peek;
  wire [72 : 0] mem0_controller$slave_w_put_val;
  wire [63 : 0] mem0_controller$set_addr_map_addr_base,
		mem0_controller$set_addr_map_addr_lim,
		mem0_controller$set_watch_tohost_tohost_addr;
  wire [8 : 0] mem0_controller$slave_b_peek;
  wire mem0_controller$EN_server_reset_request_put,
       mem0_controller$EN_server_reset_response_get,
       mem0_controller$EN_set_addr_map,
       mem0_controller$EN_set_watch_tohost,
       mem0_controller$EN_slave_ar_put,
       mem0_controller$EN_slave_aw_put,
       mem0_controller$EN_slave_b_drop,
       mem0_controller$EN_slave_r_drop,
       mem0_controller$EN_slave_w_put,
       mem0_controller$EN_to_raw_mem_request_get,
       mem0_controller$EN_to_raw_mem_response_put,
       mem0_controller$RDY_server_reset_request_put,
       mem0_controller$RDY_server_reset_response_get,
       mem0_controller$RDY_set_addr_map,
       mem0_controller$RDY_slave_ar_put,
       mem0_controller$RDY_slave_aw_put,
       mem0_controller$RDY_slave_b_drop,
       mem0_controller$RDY_slave_b_peek,
       mem0_controller$RDY_slave_r_drop,
       mem0_controller$RDY_slave_r_peek,
       mem0_controller$RDY_slave_w_put,
       mem0_controller$RDY_to_raw_mem_request_get,
       mem0_controller$RDY_to_raw_mem_response_put,
       mem0_controller$set_watch_tohost_watch_tohost,
       mem0_controller$slave_ar_canPut,
       mem0_controller$slave_aw_canPut,
       mem0_controller$slave_b_canPeek,
       mem0_controller$slave_r_canPeek,
       mem0_controller$slave_w_canPut;

  // ports of submodule mem0_controller_axi4_deburster_countWriteRspFF
  wire [7 : 0] mem0_controller_axi4_deburster_countWriteRspFF$D_IN,
	       mem0_controller_axi4_deburster_countWriteRspFF$D_OUT;
  wire mem0_controller_axi4_deburster_countWriteRspFF$CLR,
       mem0_controller_axi4_deburster_countWriteRspFF$DEQ,
       mem0_controller_axi4_deburster_countWriteRspFF$EMPTY_N,
       mem0_controller_axi4_deburster_countWriteRspFF$ENQ,
       mem0_controller_axi4_deburster_countWriteRspFF$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_arff
  wire [99 : 0] mem0_controller_axi4_deburster_inShim_arff$D_IN,
		mem0_controller_axi4_deburster_inShim_arff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_arff$CLR,
       mem0_controller_axi4_deburster_inShim_arff$DEQ,
       mem0_controller_axi4_deburster_inShim_arff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_arff$ENQ,
       mem0_controller_axi4_deburster_inShim_arff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_awff
  wire [99 : 0] mem0_controller_axi4_deburster_inShim_awff$D_IN,
		mem0_controller_axi4_deburster_inShim_awff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_awff$CLR,
       mem0_controller_axi4_deburster_inShim_awff$DEQ,
       mem0_controller_axi4_deburster_inShim_awff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_awff$ENQ,
       mem0_controller_axi4_deburster_inShim_awff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_bff
  wire [8 : 0] mem0_controller_axi4_deburster_inShim_bff$D_IN,
	       mem0_controller_axi4_deburster_inShim_bff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_bff$CLR,
       mem0_controller_axi4_deburster_inShim_bff$DEQ,
       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_bff$ENQ,
       mem0_controller_axi4_deburster_inShim_bff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_rff
  wire [73 : 0] mem0_controller_axi4_deburster_inShim_rff$D_IN,
		mem0_controller_axi4_deburster_inShim_rff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_rff$CLR,
       mem0_controller_axi4_deburster_inShim_rff$DEQ,
       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_rff$ENQ,
       mem0_controller_axi4_deburster_inShim_rff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_wff
  wire [72 : 0] mem0_controller_axi4_deburster_inShim_wff$D_IN,
		mem0_controller_axi4_deburster_inShim_wff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_wff$CLR,
       mem0_controller_axi4_deburster_inShim_wff$DEQ,
       mem0_controller_axi4_deburster_inShim_wff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_wff$ENQ,
       mem0_controller_axi4_deburster_inShim_wff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_lastReadRspFF
  wire mem0_controller_axi4_deburster_lastReadRspFF$CLR,
       mem0_controller_axi4_deburster_lastReadRspFF$DEQ,
       mem0_controller_axi4_deburster_lastReadRspFF$D_IN,
       mem0_controller_axi4_deburster_lastReadRspFF$D_OUT,
       mem0_controller_axi4_deburster_lastReadRspFF$EMPTY_N,
       mem0_controller_axi4_deburster_lastReadRspFF$ENQ,
       mem0_controller_axi4_deburster_lastReadRspFF$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_arff
  wire [99 : 0] mem0_controller_axi4_deburster_outShim_arff$D_IN,
		mem0_controller_axi4_deburster_outShim_arff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_arff$CLR,
       mem0_controller_axi4_deburster_outShim_arff$DEQ,
       mem0_controller_axi4_deburster_outShim_arff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_arff$ENQ,
       mem0_controller_axi4_deburster_outShim_arff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_awff
  wire [99 : 0] mem0_controller_axi4_deburster_outShim_awff$D_IN,
		mem0_controller_axi4_deburster_outShim_awff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_awff$CLR,
       mem0_controller_axi4_deburster_outShim_awff$DEQ,
       mem0_controller_axi4_deburster_outShim_awff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_awff$ENQ,
       mem0_controller_axi4_deburster_outShim_awff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_bff
  wire [8 : 0] mem0_controller_axi4_deburster_outShim_bff$D_IN,
	       mem0_controller_axi4_deburster_outShim_bff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_bff$CLR,
       mem0_controller_axi4_deburster_outShim_bff$DEQ,
       mem0_controller_axi4_deburster_outShim_bff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_bff$ENQ,
       mem0_controller_axi4_deburster_outShim_bff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_rff
  wire [73 : 0] mem0_controller_axi4_deburster_outShim_rff$D_IN,
		mem0_controller_axi4_deburster_outShim_rff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_rff$CLR,
       mem0_controller_axi4_deburster_outShim_rff$DEQ,
       mem0_controller_axi4_deburster_outShim_rff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_rff$ENQ,
       mem0_controller_axi4_deburster_outShim_rff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_wff
  wire [72 : 0] mem0_controller_axi4_deburster_outShim_wff$D_IN,
		mem0_controller_axi4_deburster_outShim_wff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_wff$CLR,
       mem0_controller_axi4_deburster_outShim_wff$DEQ,
       mem0_controller_axi4_deburster_outShim_wff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_wff$ENQ,
       mem0_controller_axi4_deburster_outShim_wff$FULL_N;

  // ports of submodule s_otherPeripheralsPortShim_arff
  wire [99 : 0] s_otherPeripheralsPortShim_arff$D_IN,
		s_otherPeripheralsPortShim_arff$D_OUT;
  wire s_otherPeripheralsPortShim_arff$CLR,
       s_otherPeripheralsPortShim_arff$DEQ,
       s_otherPeripheralsPortShim_arff$EMPTY_N,
       s_otherPeripheralsPortShim_arff$ENQ,
       s_otherPeripheralsPortShim_arff$FULL_N;

  // ports of submodule s_otherPeripheralsPortShim_awff
  wire [99 : 0] s_otherPeripheralsPortShim_awff$D_IN,
		s_otherPeripheralsPortShim_awff$D_OUT;
  wire s_otherPeripheralsPortShim_awff$CLR,
       s_otherPeripheralsPortShim_awff$DEQ,
       s_otherPeripheralsPortShim_awff$EMPTY_N,
       s_otherPeripheralsPortShim_awff$ENQ,
       s_otherPeripheralsPortShim_awff$FULL_N;

  // ports of submodule s_otherPeripheralsPortShim_bff
  wire [8 : 0] s_otherPeripheralsPortShim_bff$D_IN,
	       s_otherPeripheralsPortShim_bff$D_OUT;
  wire s_otherPeripheralsPortShim_bff$CLR,
       s_otherPeripheralsPortShim_bff$DEQ,
       s_otherPeripheralsPortShim_bff$EMPTY_N,
       s_otherPeripheralsPortShim_bff$ENQ,
       s_otherPeripheralsPortShim_bff$FULL_N;

  // ports of submodule s_otherPeripheralsPortShim_rff
  wire [73 : 0] s_otherPeripheralsPortShim_rff$D_IN,
		s_otherPeripheralsPortShim_rff$D_OUT;
  wire s_otherPeripheralsPortShim_rff$CLR,
       s_otherPeripheralsPortShim_rff$DEQ,
       s_otherPeripheralsPortShim_rff$EMPTY_N,
       s_otherPeripheralsPortShim_rff$ENQ,
       s_otherPeripheralsPortShim_rff$FULL_N;

  // ports of submodule s_otherPeripheralsPortShim_wff
  wire [72 : 0] s_otherPeripheralsPortShim_wff$D_IN,
		s_otherPeripheralsPortShim_wff$D_OUT;
  wire s_otherPeripheralsPortShim_wff$CLR,
       s_otherPeripheralsPortShim_wff$DEQ,
       s_otherPeripheralsPortShim_wff$EMPTY_N,
       s_otherPeripheralsPortShim_wff$ENQ,
       s_otherPeripheralsPortShim_wff$FULL_N;

  // ports of submodule soc_map
  wire [127 : 0] soc_map$m_boot_rom_addr_range,
		 soc_map$m_mem0_controller_addr_range,
		 soc_map$m_other_peripherals_addr_range,
		 soc_map$m_uart0_addr_range;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // ports of submodule uart0
  wire [99 : 0] uart0$slave_ar_put_val, uart0$slave_aw_put_val;
  wire [73 : 0] uart0$slave_r_peek;
  wire [72 : 0] uart0$slave_w_put_val;
  wire [63 : 0] uart0$set_addr_map_addr_base, uart0$set_addr_map_addr_lim;
  wire [8 : 0] uart0$slave_b_peek;
  wire [7 : 0] uart0$get_to_console_get, uart0$put_from_console_put;
  wire uart0$EN_get_to_console_get,
       uart0$EN_put_from_console_put,
       uart0$EN_server_reset_request_put,
       uart0$EN_server_reset_response_get,
       uart0$EN_set_addr_map,
       uart0$EN_slave_ar_put,
       uart0$EN_slave_aw_put,
       uart0$EN_slave_b_drop,
       uart0$EN_slave_r_drop,
       uart0$EN_slave_w_put,
       uart0$RDY_get_to_console_get,
       uart0$RDY_put_from_console_put,
       uart0$RDY_server_reset_request_put,
       uart0$RDY_server_reset_response_get,
       uart0$RDY_slave_ar_put,
       uart0$RDY_slave_aw_put,
       uart0$RDY_slave_b_drop,
       uart0$RDY_slave_b_peek,
       uart0$RDY_slave_r_drop,
       uart0$RDY_slave_r_peek,
       uart0$RDY_slave_w_put,
       uart0$intr,
       uart0$slave_ar_canPut,
       uart0$slave_aw_canPut,
       uart0$slave_b_canPeek,
       uart0$slave_r_canPeek,
       uart0$slave_w_canPut;

  // rule scheduling signals
  wire CAN_FIRE_RL_boot_rom_axi4_deburster_consume_bresp,
       CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req,
       CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp,
       CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW,
       CAN_FIRE_RL_boot_rom_axi4_deburster_produce_bresp,
       CAN_FIRE_RL_bus_1_arbitrate,
       CAN_FIRE_RL_bus_1_arbitrate_1,
       CAN_FIRE_RL_bus_1_arbitration_fail,
       CAN_FIRE_RL_bus_1_arbitration_fail_1,
       CAN_FIRE_RL_bus_1_arbitration_fail_2,
       CAN_FIRE_RL_bus_1_arbitration_fail_3,
       CAN_FIRE_RL_bus_1_arbitration_fail_4,
       CAN_FIRE_RL_bus_1_arbitration_fail_5,
       CAN_FIRE_RL_bus_1_arbitration_fail_6,
       CAN_FIRE_RL_bus_1_dflt_output_selected,
       CAN_FIRE_RL_bus_1_input_first_flit,
       CAN_FIRE_RL_bus_1_input_first_flit_1,
       CAN_FIRE_RL_bus_1_input_first_flit_2,
       CAN_FIRE_RL_bus_1_input_first_flit_3,
       CAN_FIRE_RL_bus_1_input_first_flit_4,
       CAN_FIRE_RL_bus_1_input_first_flit_5,
       CAN_FIRE_RL_bus_1_input_first_flit_6,
       CAN_FIRE_RL_bus_1_input_follow_flit,
       CAN_FIRE_RL_bus_1_input_follow_flit_1,
       CAN_FIRE_RL_bus_1_input_follow_flit_2,
       CAN_FIRE_RL_bus_1_input_follow_flit_3,
       CAN_FIRE_RL_bus_1_input_follow_flit_4,
       CAN_FIRE_RL_bus_1_input_follow_flit_5,
       CAN_FIRE_RL_bus_1_input_follow_flit_6,
       CAN_FIRE_RL_bus_1_legal_destination_fail_2,
       CAN_FIRE_RL_bus_1_legal_destination_fail_3,
       CAN_FIRE_RL_bus_1_legal_destination_fail_4,
       CAN_FIRE_RL_bus_1_legal_destination_fail_5,
       CAN_FIRE_RL_bus_1_legal_destination_fail_6,
       CAN_FIRE_RL_bus_1_output_selected,
       CAN_FIRE_RL_bus_1_output_selected_1,
       CAN_FIRE_RL_bus_1_output_selected_2,
       CAN_FIRE_RL_bus_1_output_selected_3,
       CAN_FIRE_RL_bus_1_output_selected_4,
       CAN_FIRE_RL_bus_1_output_selected_5,
       CAN_FIRE_RL_bus_1_set_dflt_output_canPut_wire,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire_1,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire_2,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire_3,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire_4,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire_5,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire_6,
       CAN_FIRE_RL_bus_1_set_input_peek_wires,
       CAN_FIRE_RL_bus_1_set_input_peek_wires_1,
       CAN_FIRE_RL_bus_1_set_input_peek_wires_2,
       CAN_FIRE_RL_bus_1_set_input_peek_wires_3,
       CAN_FIRE_RL_bus_1_set_input_peek_wires_4,
       CAN_FIRE_RL_bus_1_set_input_peek_wires_5,
       CAN_FIRE_RL_bus_1_set_input_peek_wires_6,
       CAN_FIRE_RL_bus_1_set_output_canPut_wire,
       CAN_FIRE_RL_bus_1_set_output_canPut_wire_1,
       CAN_FIRE_RL_bus_1_set_output_canPut_wire_2,
       CAN_FIRE_RL_bus_1_set_output_canPut_wire_3,
       CAN_FIRE_RL_bus_1_set_output_canPut_wire_4,
       CAN_FIRE_RL_bus_1_set_output_canPut_wire_5,
       CAN_FIRE_RL_bus_arbitrate,
       CAN_FIRE_RL_bus_arbitrate_1,
       CAN_FIRE_RL_bus_arbitration_fail,
       CAN_FIRE_RL_bus_arbitration_fail_1,
       CAN_FIRE_RL_bus_arbitration_fail_2,
       CAN_FIRE_RL_bus_arbitration_fail_3,
       CAN_FIRE_RL_bus_arbitration_fail_4,
       CAN_FIRE_RL_bus_arbitration_fail_5,
       CAN_FIRE_RL_bus_arbitration_fail_6,
       CAN_FIRE_RL_bus_dflt_output_selected,
       CAN_FIRE_RL_bus_input_first_flit,
       CAN_FIRE_RL_bus_input_first_flit_1,
       CAN_FIRE_RL_bus_input_first_flit_2,
       CAN_FIRE_RL_bus_input_first_flit_3,
       CAN_FIRE_RL_bus_input_first_flit_4,
       CAN_FIRE_RL_bus_input_first_flit_5,
       CAN_FIRE_RL_bus_input_first_flit_6,
       CAN_FIRE_RL_bus_input_follow_flit,
       CAN_FIRE_RL_bus_input_follow_flit_1,
       CAN_FIRE_RL_bus_input_follow_flit_2,
       CAN_FIRE_RL_bus_input_follow_flit_3,
       CAN_FIRE_RL_bus_input_follow_flit_4,
       CAN_FIRE_RL_bus_input_follow_flit_5,
       CAN_FIRE_RL_bus_input_follow_flit_6,
       CAN_FIRE_RL_bus_legal_destination_fail_2,
       CAN_FIRE_RL_bus_legal_destination_fail_3,
       CAN_FIRE_RL_bus_legal_destination_fail_4,
       CAN_FIRE_RL_bus_legal_destination_fail_5,
       CAN_FIRE_RL_bus_legal_destination_fail_6,
       CAN_FIRE_RL_bus_merged_0_awFlit,
       CAN_FIRE_RL_bus_merged_0_awug_doDrop,
       CAN_FIRE_RL_bus_merged_0_awug_setCanPeek,
       CAN_FIRE_RL_bus_merged_0_awug_setPeek,
       CAN_FIRE_RL_bus_merged_0_awug_warnDoDrop,
       CAN_FIRE_RL_bus_merged_0_genFirst,
       CAN_FIRE_RL_bus_merged_0_genOther,
       CAN_FIRE_RL_bus_merged_0_passFlit,
       CAN_FIRE_RL_bus_merged_0_wFlit,
       CAN_FIRE_RL_bus_merged_0_wug_doDrop,
       CAN_FIRE_RL_bus_merged_0_wug_setCanPeek,
       CAN_FIRE_RL_bus_merged_0_wug_setPeek,
       CAN_FIRE_RL_bus_merged_0_wug_warnDoDrop,
       CAN_FIRE_RL_bus_merged_1_awFlit,
       CAN_FIRE_RL_bus_merged_1_awug_doDrop,
       CAN_FIRE_RL_bus_merged_1_awug_setCanPeek,
       CAN_FIRE_RL_bus_merged_1_awug_setPeek,
       CAN_FIRE_RL_bus_merged_1_awug_warnDoDrop,
       CAN_FIRE_RL_bus_merged_1_genFirst,
       CAN_FIRE_RL_bus_merged_1_genOther,
       CAN_FIRE_RL_bus_merged_1_passFlit,
       CAN_FIRE_RL_bus_merged_1_wFlit,
       CAN_FIRE_RL_bus_merged_1_wug_doDrop,
       CAN_FIRE_RL_bus_merged_1_wug_setCanPeek,
       CAN_FIRE_RL_bus_merged_1_wug_setPeek,
       CAN_FIRE_RL_bus_merged_1_wug_warnDoDrop,
       CAN_FIRE_RL_bus_output_selected,
       CAN_FIRE_RL_bus_output_selected_1,
       CAN_FIRE_RL_bus_output_selected_2,
       CAN_FIRE_RL_bus_output_selected_3,
       CAN_FIRE_RL_bus_output_selected_4,
       CAN_FIRE_RL_bus_output_selected_5,
       CAN_FIRE_RL_bus_set_dflt_output_canPut_wire,
       CAN_FIRE_RL_bus_set_input_canPeek_wire,
       CAN_FIRE_RL_bus_set_input_canPeek_wire_1,
       CAN_FIRE_RL_bus_set_input_canPeek_wire_2,
       CAN_FIRE_RL_bus_set_input_canPeek_wire_3,
       CAN_FIRE_RL_bus_set_input_canPeek_wire_4,
       CAN_FIRE_RL_bus_set_input_canPeek_wire_5,
       CAN_FIRE_RL_bus_set_input_canPeek_wire_6,
       CAN_FIRE_RL_bus_set_input_peek_wires,
       CAN_FIRE_RL_bus_set_input_peek_wires_1,
       CAN_FIRE_RL_bus_set_input_peek_wires_2,
       CAN_FIRE_RL_bus_set_input_peek_wires_3,
       CAN_FIRE_RL_bus_set_input_peek_wires_4,
       CAN_FIRE_RL_bus_set_input_peek_wires_5,
       CAN_FIRE_RL_bus_set_input_peek_wires_6,
       CAN_FIRE_RL_bus_set_output_canPut_wire,
       CAN_FIRE_RL_bus_set_output_canPut_wire_1,
       CAN_FIRE_RL_bus_set_output_canPut_wire_2,
       CAN_FIRE_RL_bus_set_output_canPut_wire_3,
       CAN_FIRE_RL_bus_set_output_canPut_wire_4,
       CAN_FIRE_RL_bus_set_output_canPut_wire_5,
       CAN_FIRE_RL_bus_split_0_awug_doPut,
       CAN_FIRE_RL_bus_split_0_awug_setCanPut,
       CAN_FIRE_RL_bus_split_0_awug_warnDoPut,
       CAN_FIRE_RL_bus_split_0_putFirst,
       CAN_FIRE_RL_bus_split_0_putOther,
       CAN_FIRE_RL_bus_split_0_wug_doPut,
       CAN_FIRE_RL_bus_split_0_wug_setCanPut,
       CAN_FIRE_RL_bus_split_0_wug_warnDoPut,
       CAN_FIRE_RL_bus_split_1_awug_doPut,
       CAN_FIRE_RL_bus_split_1_awug_setCanPut,
       CAN_FIRE_RL_bus_split_1_awug_warnDoPut,
       CAN_FIRE_RL_bus_split_1_putFirst,
       CAN_FIRE_RL_bus_split_1_putOther,
       CAN_FIRE_RL_bus_split_1_wug_doPut,
       CAN_FIRE_RL_bus_split_1_wug_setCanPut,
       CAN_FIRE_RL_bus_split_1_wug_warnDoPut,
       CAN_FIRE_RL_bus_split_2_awug_doPut,
       CAN_FIRE_RL_bus_split_2_awug_setCanPut,
       CAN_FIRE_RL_bus_split_2_awug_warnDoPut,
       CAN_FIRE_RL_bus_split_2_putFirst,
       CAN_FIRE_RL_bus_split_2_putOther,
       CAN_FIRE_RL_bus_split_2_wug_doPut,
       CAN_FIRE_RL_bus_split_2_wug_setCanPut,
       CAN_FIRE_RL_bus_split_2_wug_warnDoPut,
       CAN_FIRE_RL_bus_split_3_awug_doPut,
       CAN_FIRE_RL_bus_split_3_awug_setCanPut,
       CAN_FIRE_RL_bus_split_3_awug_warnDoPut,
       CAN_FIRE_RL_bus_split_3_putFirst,
       CAN_FIRE_RL_bus_split_3_putOther,
       CAN_FIRE_RL_bus_split_3_wug_doPut,
       CAN_FIRE_RL_bus_split_3_wug_setCanPut,
       CAN_FIRE_RL_bus_split_3_wug_warnDoPut,
       CAN_FIRE_RL_connect,
       CAN_FIRE_RL_connect_1,
       CAN_FIRE_RL_connect_10,
       CAN_FIRE_RL_connect_11,
       CAN_FIRE_RL_connect_12,
       CAN_FIRE_RL_connect_13,
       CAN_FIRE_RL_connect_14,
       CAN_FIRE_RL_connect_2,
       CAN_FIRE_RL_connect_3,
       CAN_FIRE_RL_connect_4,
       CAN_FIRE_RL_connect_5,
       CAN_FIRE_RL_connect_6,
       CAN_FIRE_RL_connect_7,
       CAN_FIRE_RL_connect_8,
       CAN_FIRE_RL_connect_9,
       CAN_FIRE_RL_core_mem_master_sig_arSig_src_doDrop,
       CAN_FIRE_RL_core_mem_master_sig_arSig_src_setCanPeek,
       CAN_FIRE_RL_core_mem_master_sig_arSig_src_setPeek,
       CAN_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop,
       CAN_FIRE_RL_core_mem_master_sig_awSig_src_doDrop,
       CAN_FIRE_RL_core_mem_master_sig_awSig_src_setCanPeek,
       CAN_FIRE_RL_core_mem_master_sig_awSig_src_setPeek,
       CAN_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop,
       CAN_FIRE_RL_core_mem_master_sig_bSig_snk_doPut,
       CAN_FIRE_RL_core_mem_master_sig_bSig_snk_setCanPut,
       CAN_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut,
       CAN_FIRE_RL_core_mem_master_sig_rSig_snk_doPut,
       CAN_FIRE_RL_core_mem_master_sig_rSig_snk_setCanPut,
       CAN_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut,
       CAN_FIRE_RL_core_mem_master_sig_wSig_src_doDrop,
       CAN_FIRE_RL_core_mem_master_sig_wSig_src_setCanPeek,
       CAN_FIRE_RL_core_mem_master_sig_wSig_src_setPeek,
       CAN_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_consume_bresp,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp,
       CAN_FIRE_RL_rl_connect_external_interrupt_requests,
       CAN_FIRE_RL_rl_reset_complete_initial,
       CAN_FIRE_RL_rl_reset_start_initial,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_doDrop,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_setCanPeek,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_setPeek,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_warnDoDrop,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_doDrop,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_setCanPeek,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_setPeek,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_warnDoDrop,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_doPut,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_setCanPut,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_warnDoPut,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_doPut,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_setCanPut,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_warnDoPut,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_doDrop,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_setCanPeek,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_setPeek,
       CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_warnDoDrop,
       CAN_FIRE_RL_ug_snk_1_1_doPut,
       CAN_FIRE_RL_ug_snk_1_1_setCanPut,
       CAN_FIRE_RL_ug_snk_1_1_warnDoPut,
       CAN_FIRE_RL_ug_snk_1_2_doPut,
       CAN_FIRE_RL_ug_snk_1_2_setCanPut,
       CAN_FIRE_RL_ug_snk_1_2_warnDoPut,
       CAN_FIRE_RL_ug_snk_1_3_doPut,
       CAN_FIRE_RL_ug_snk_1_3_setCanPut,
       CAN_FIRE_RL_ug_snk_1_3_warnDoPut,
       CAN_FIRE_RL_ug_snk_1_4_doPut,
       CAN_FIRE_RL_ug_snk_1_4_setCanPut,
       CAN_FIRE_RL_ug_snk_1_4_warnDoPut,
       CAN_FIRE_RL_ug_snk_1_doPut,
       CAN_FIRE_RL_ug_snk_1_doPut_1,
       CAN_FIRE_RL_ug_snk_1_setCanPut,
       CAN_FIRE_RL_ug_snk_1_setCanPut_1,
       CAN_FIRE_RL_ug_snk_1_warnDoPut,
       CAN_FIRE_RL_ug_snk_1_warnDoPut_1,
       CAN_FIRE_RL_ug_snk_2_1_doPut,
       CAN_FIRE_RL_ug_snk_2_1_setCanPut,
       CAN_FIRE_RL_ug_snk_2_1_warnDoPut,
       CAN_FIRE_RL_ug_snk_2_2_doPut,
       CAN_FIRE_RL_ug_snk_2_2_setCanPut,
       CAN_FIRE_RL_ug_snk_2_2_warnDoPut,
       CAN_FIRE_RL_ug_snk_2_3_doPut,
       CAN_FIRE_RL_ug_snk_2_3_setCanPut,
       CAN_FIRE_RL_ug_snk_2_3_warnDoPut,
       CAN_FIRE_RL_ug_snk_2_4_doPut,
       CAN_FIRE_RL_ug_snk_2_4_setCanPut,
       CAN_FIRE_RL_ug_snk_2_4_warnDoPut,
       CAN_FIRE_RL_ug_snk_2_doPut_1,
       CAN_FIRE_RL_ug_snk_2_setCanPut,
       CAN_FIRE_RL_ug_snk_2_setCanPut_1,
       CAN_FIRE_RL_ug_snk_2_warnDoPut_1,
       CAN_FIRE_RL_ug_snk_3_doPut,
       CAN_FIRE_RL_ug_snk_3_setCanPut,
       CAN_FIRE_RL_ug_snk_3_warnDoPut,
       CAN_FIRE_RL_ug_snk_4_setCanPut,
       CAN_FIRE_RL_ug_snk_doPut,
       CAN_FIRE_RL_ug_snk_setCanPut,
       CAN_FIRE_RL_ug_snk_warnDoPut,
       CAN_FIRE_RL_ug_src_1_1_doDrop,
       CAN_FIRE_RL_ug_src_1_1_setCanPeek,
       CAN_FIRE_RL_ug_src_1_1_setPeek,
       CAN_FIRE_RL_ug_src_1_1_warnDoDrop,
       CAN_FIRE_RL_ug_src_1_2_doDrop,
       CAN_FIRE_RL_ug_src_1_2_setCanPeek,
       CAN_FIRE_RL_ug_src_1_2_setPeek,
       CAN_FIRE_RL_ug_src_1_2_warnDoDrop,
       CAN_FIRE_RL_ug_src_1_3_doDrop,
       CAN_FIRE_RL_ug_src_1_3_setCanPeek,
       CAN_FIRE_RL_ug_src_1_3_setPeek,
       CAN_FIRE_RL_ug_src_1_3_warnDoDrop,
       CAN_FIRE_RL_ug_src_1_4_doDrop,
       CAN_FIRE_RL_ug_src_1_4_setCanPeek,
       CAN_FIRE_RL_ug_src_1_4_setPeek,
       CAN_FIRE_RL_ug_src_1_4_warnDoDrop,
       CAN_FIRE_RL_ug_src_1_doDrop_1,
       CAN_FIRE_RL_ug_src_1_setCanPeek,
       CAN_FIRE_RL_ug_src_1_setCanPeek_1,
       CAN_FIRE_RL_ug_src_1_setPeek_1,
       CAN_FIRE_RL_ug_src_1_warnDoDrop,
       CAN_FIRE_RL_ug_src_1_warnDoDrop_1,
       CAN_FIRE_RL_ug_src_2_1_doDrop,
       CAN_FIRE_RL_ug_src_2_1_setCanPeek,
       CAN_FIRE_RL_ug_src_2_1_setPeek,
       CAN_FIRE_RL_ug_src_2_1_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_2_doDrop,
       CAN_FIRE_RL_ug_src_2_2_setCanPeek,
       CAN_FIRE_RL_ug_src_2_2_setPeek,
       CAN_FIRE_RL_ug_src_2_2_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_3_doDrop,
       CAN_FIRE_RL_ug_src_2_3_setCanPeek,
       CAN_FIRE_RL_ug_src_2_3_setPeek,
       CAN_FIRE_RL_ug_src_2_3_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_4_doDrop,
       CAN_FIRE_RL_ug_src_2_4_setCanPeek,
       CAN_FIRE_RL_ug_src_2_4_setPeek,
       CAN_FIRE_RL_ug_src_2_4_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_doDrop,
       CAN_FIRE_RL_ug_src_2_doDrop_1,
       CAN_FIRE_RL_ug_src_2_setCanPeek,
       CAN_FIRE_RL_ug_src_2_setCanPeek_1,
       CAN_FIRE_RL_ug_src_2_setPeek,
       CAN_FIRE_RL_ug_src_2_setPeek_1,
       CAN_FIRE_RL_ug_src_2_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_warnDoDrop_1,
       CAN_FIRE_RL_ug_src_3_setCanPeek,
       CAN_FIRE_RL_ug_src_3_warnDoDrop,
       CAN_FIRE_RL_ug_src_4_doDrop,
       CAN_FIRE_RL_ug_src_4_setCanPeek,
       CAN_FIRE_RL_ug_src_4_setPeek,
       CAN_FIRE_RL_ug_src_4_warnDoDrop,
       CAN_FIRE_RL_ug_src_setCanPeek,
       CAN_FIRE_RL_ug_src_warnDoDrop,
       CAN_FIRE___me_check_14,
       CAN_FIRE___me_check_236,
       CAN_FIRE___me_check_238,
       CAN_FIRE___me_check_240,
       CAN_FIRE___me_check_268,
       CAN_FIRE___me_check_270,
       CAN_FIRE___me_check_272,
       CAN_FIRE___me_check_274,
       CAN_FIRE___me_check_276,
       CAN_FIRE___me_check_278,
       CAN_FIRE___me_check_292,
       CAN_FIRE___me_check_294,
       CAN_FIRE___me_check_296,
       CAN_FIRE___me_check_324,
       CAN_FIRE___me_check_326,
       CAN_FIRE___me_check_328,
       CAN_FIRE___me_check_330,
       CAN_FIRE___me_check_332,
       CAN_FIRE___me_check_334,
       CAN_FIRE___me_check_4,
       CAN_FIRE_cms_ifc_halt_cpu,
       CAN_FIRE_core_dmem_post_fabric_ar_arready,
       CAN_FIRE_core_dmem_post_fabric_aw_awready,
       CAN_FIRE_core_dmem_post_fabric_b_bflit,
       CAN_FIRE_core_dmem_post_fabric_r_rflit,
       CAN_FIRE_core_dmem_post_fabric_w_wready,
       CAN_FIRE_core_dmem_pre_fabric_ar_arready,
       CAN_FIRE_core_dmem_pre_fabric_aw_awready,
       CAN_FIRE_core_dmem_pre_fabric_b_bflit,
       CAN_FIRE_core_dmem_pre_fabric_r_rflit,
       CAN_FIRE_core_dmem_pre_fabric_w_wready,
       CAN_FIRE_get_to_console_get,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_put_from_console_put,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_set_watch_tohost,
       CAN_FIRE_to_raw_mem_request_get,
       CAN_FIRE_to_raw_mem_response_put,
       WILL_FIRE_RL_boot_rom_axi4_deburster_consume_bresp,
       WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req,
       WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp,
       WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW,
       WILL_FIRE_RL_boot_rom_axi4_deburster_produce_bresp,
       WILL_FIRE_RL_bus_1_arbitrate,
       WILL_FIRE_RL_bus_1_arbitrate_1,
       WILL_FIRE_RL_bus_1_arbitration_fail,
       WILL_FIRE_RL_bus_1_arbitration_fail_1,
       WILL_FIRE_RL_bus_1_arbitration_fail_2,
       WILL_FIRE_RL_bus_1_arbitration_fail_3,
       WILL_FIRE_RL_bus_1_arbitration_fail_4,
       WILL_FIRE_RL_bus_1_arbitration_fail_5,
       WILL_FIRE_RL_bus_1_arbitration_fail_6,
       WILL_FIRE_RL_bus_1_dflt_output_selected,
       WILL_FIRE_RL_bus_1_input_first_flit,
       WILL_FIRE_RL_bus_1_input_first_flit_1,
       WILL_FIRE_RL_bus_1_input_first_flit_2,
       WILL_FIRE_RL_bus_1_input_first_flit_3,
       WILL_FIRE_RL_bus_1_input_first_flit_4,
       WILL_FIRE_RL_bus_1_input_first_flit_5,
       WILL_FIRE_RL_bus_1_input_first_flit_6,
       WILL_FIRE_RL_bus_1_input_follow_flit,
       WILL_FIRE_RL_bus_1_input_follow_flit_1,
       WILL_FIRE_RL_bus_1_input_follow_flit_2,
       WILL_FIRE_RL_bus_1_input_follow_flit_3,
       WILL_FIRE_RL_bus_1_input_follow_flit_4,
       WILL_FIRE_RL_bus_1_input_follow_flit_5,
       WILL_FIRE_RL_bus_1_input_follow_flit_6,
       WILL_FIRE_RL_bus_1_legal_destination_fail_2,
       WILL_FIRE_RL_bus_1_legal_destination_fail_3,
       WILL_FIRE_RL_bus_1_legal_destination_fail_4,
       WILL_FIRE_RL_bus_1_legal_destination_fail_5,
       WILL_FIRE_RL_bus_1_legal_destination_fail_6,
       WILL_FIRE_RL_bus_1_output_selected,
       WILL_FIRE_RL_bus_1_output_selected_1,
       WILL_FIRE_RL_bus_1_output_selected_2,
       WILL_FIRE_RL_bus_1_output_selected_3,
       WILL_FIRE_RL_bus_1_output_selected_4,
       WILL_FIRE_RL_bus_1_output_selected_5,
       WILL_FIRE_RL_bus_1_set_dflt_output_canPut_wire,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire_1,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire_2,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire_3,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire_4,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire_5,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire_6,
       WILL_FIRE_RL_bus_1_set_input_peek_wires,
       WILL_FIRE_RL_bus_1_set_input_peek_wires_1,
       WILL_FIRE_RL_bus_1_set_input_peek_wires_2,
       WILL_FIRE_RL_bus_1_set_input_peek_wires_3,
       WILL_FIRE_RL_bus_1_set_input_peek_wires_4,
       WILL_FIRE_RL_bus_1_set_input_peek_wires_5,
       WILL_FIRE_RL_bus_1_set_input_peek_wires_6,
       WILL_FIRE_RL_bus_1_set_output_canPut_wire,
       WILL_FIRE_RL_bus_1_set_output_canPut_wire_1,
       WILL_FIRE_RL_bus_1_set_output_canPut_wire_2,
       WILL_FIRE_RL_bus_1_set_output_canPut_wire_3,
       WILL_FIRE_RL_bus_1_set_output_canPut_wire_4,
       WILL_FIRE_RL_bus_1_set_output_canPut_wire_5,
       WILL_FIRE_RL_bus_arbitrate,
       WILL_FIRE_RL_bus_arbitrate_1,
       WILL_FIRE_RL_bus_arbitration_fail,
       WILL_FIRE_RL_bus_arbitration_fail_1,
       WILL_FIRE_RL_bus_arbitration_fail_2,
       WILL_FIRE_RL_bus_arbitration_fail_3,
       WILL_FIRE_RL_bus_arbitration_fail_4,
       WILL_FIRE_RL_bus_arbitration_fail_5,
       WILL_FIRE_RL_bus_arbitration_fail_6,
       WILL_FIRE_RL_bus_dflt_output_selected,
       WILL_FIRE_RL_bus_input_first_flit,
       WILL_FIRE_RL_bus_input_first_flit_1,
       WILL_FIRE_RL_bus_input_first_flit_2,
       WILL_FIRE_RL_bus_input_first_flit_3,
       WILL_FIRE_RL_bus_input_first_flit_4,
       WILL_FIRE_RL_bus_input_first_flit_5,
       WILL_FIRE_RL_bus_input_first_flit_6,
       WILL_FIRE_RL_bus_input_follow_flit,
       WILL_FIRE_RL_bus_input_follow_flit_1,
       WILL_FIRE_RL_bus_input_follow_flit_2,
       WILL_FIRE_RL_bus_input_follow_flit_3,
       WILL_FIRE_RL_bus_input_follow_flit_4,
       WILL_FIRE_RL_bus_input_follow_flit_5,
       WILL_FIRE_RL_bus_input_follow_flit_6,
       WILL_FIRE_RL_bus_legal_destination_fail_2,
       WILL_FIRE_RL_bus_legal_destination_fail_3,
       WILL_FIRE_RL_bus_legal_destination_fail_4,
       WILL_FIRE_RL_bus_legal_destination_fail_5,
       WILL_FIRE_RL_bus_legal_destination_fail_6,
       WILL_FIRE_RL_bus_merged_0_awFlit,
       WILL_FIRE_RL_bus_merged_0_awug_doDrop,
       WILL_FIRE_RL_bus_merged_0_awug_setCanPeek,
       WILL_FIRE_RL_bus_merged_0_awug_setPeek,
       WILL_FIRE_RL_bus_merged_0_awug_warnDoDrop,
       WILL_FIRE_RL_bus_merged_0_genFirst,
       WILL_FIRE_RL_bus_merged_0_genOther,
       WILL_FIRE_RL_bus_merged_0_passFlit,
       WILL_FIRE_RL_bus_merged_0_wFlit,
       WILL_FIRE_RL_bus_merged_0_wug_doDrop,
       WILL_FIRE_RL_bus_merged_0_wug_setCanPeek,
       WILL_FIRE_RL_bus_merged_0_wug_setPeek,
       WILL_FIRE_RL_bus_merged_0_wug_warnDoDrop,
       WILL_FIRE_RL_bus_merged_1_awFlit,
       WILL_FIRE_RL_bus_merged_1_awug_doDrop,
       WILL_FIRE_RL_bus_merged_1_awug_setCanPeek,
       WILL_FIRE_RL_bus_merged_1_awug_setPeek,
       WILL_FIRE_RL_bus_merged_1_awug_warnDoDrop,
       WILL_FIRE_RL_bus_merged_1_genFirst,
       WILL_FIRE_RL_bus_merged_1_genOther,
       WILL_FIRE_RL_bus_merged_1_passFlit,
       WILL_FIRE_RL_bus_merged_1_wFlit,
       WILL_FIRE_RL_bus_merged_1_wug_doDrop,
       WILL_FIRE_RL_bus_merged_1_wug_setCanPeek,
       WILL_FIRE_RL_bus_merged_1_wug_setPeek,
       WILL_FIRE_RL_bus_merged_1_wug_warnDoDrop,
       WILL_FIRE_RL_bus_output_selected,
       WILL_FIRE_RL_bus_output_selected_1,
       WILL_FIRE_RL_bus_output_selected_2,
       WILL_FIRE_RL_bus_output_selected_3,
       WILL_FIRE_RL_bus_output_selected_4,
       WILL_FIRE_RL_bus_output_selected_5,
       WILL_FIRE_RL_bus_set_dflt_output_canPut_wire,
       WILL_FIRE_RL_bus_set_input_canPeek_wire,
       WILL_FIRE_RL_bus_set_input_canPeek_wire_1,
       WILL_FIRE_RL_bus_set_input_canPeek_wire_2,
       WILL_FIRE_RL_bus_set_input_canPeek_wire_3,
       WILL_FIRE_RL_bus_set_input_canPeek_wire_4,
       WILL_FIRE_RL_bus_set_input_canPeek_wire_5,
       WILL_FIRE_RL_bus_set_input_canPeek_wire_6,
       WILL_FIRE_RL_bus_set_input_peek_wires,
       WILL_FIRE_RL_bus_set_input_peek_wires_1,
       WILL_FIRE_RL_bus_set_input_peek_wires_2,
       WILL_FIRE_RL_bus_set_input_peek_wires_3,
       WILL_FIRE_RL_bus_set_input_peek_wires_4,
       WILL_FIRE_RL_bus_set_input_peek_wires_5,
       WILL_FIRE_RL_bus_set_input_peek_wires_6,
       WILL_FIRE_RL_bus_set_output_canPut_wire,
       WILL_FIRE_RL_bus_set_output_canPut_wire_1,
       WILL_FIRE_RL_bus_set_output_canPut_wire_2,
       WILL_FIRE_RL_bus_set_output_canPut_wire_3,
       WILL_FIRE_RL_bus_set_output_canPut_wire_4,
       WILL_FIRE_RL_bus_set_output_canPut_wire_5,
       WILL_FIRE_RL_bus_split_0_awug_doPut,
       WILL_FIRE_RL_bus_split_0_awug_setCanPut,
       WILL_FIRE_RL_bus_split_0_awug_warnDoPut,
       WILL_FIRE_RL_bus_split_0_putFirst,
       WILL_FIRE_RL_bus_split_0_putOther,
       WILL_FIRE_RL_bus_split_0_wug_doPut,
       WILL_FIRE_RL_bus_split_0_wug_setCanPut,
       WILL_FIRE_RL_bus_split_0_wug_warnDoPut,
       WILL_FIRE_RL_bus_split_1_awug_doPut,
       WILL_FIRE_RL_bus_split_1_awug_setCanPut,
       WILL_FIRE_RL_bus_split_1_awug_warnDoPut,
       WILL_FIRE_RL_bus_split_1_putFirst,
       WILL_FIRE_RL_bus_split_1_putOther,
       WILL_FIRE_RL_bus_split_1_wug_doPut,
       WILL_FIRE_RL_bus_split_1_wug_setCanPut,
       WILL_FIRE_RL_bus_split_1_wug_warnDoPut,
       WILL_FIRE_RL_bus_split_2_awug_doPut,
       WILL_FIRE_RL_bus_split_2_awug_setCanPut,
       WILL_FIRE_RL_bus_split_2_awug_warnDoPut,
       WILL_FIRE_RL_bus_split_2_putFirst,
       WILL_FIRE_RL_bus_split_2_putOther,
       WILL_FIRE_RL_bus_split_2_wug_doPut,
       WILL_FIRE_RL_bus_split_2_wug_setCanPut,
       WILL_FIRE_RL_bus_split_2_wug_warnDoPut,
       WILL_FIRE_RL_bus_split_3_awug_doPut,
       WILL_FIRE_RL_bus_split_3_awug_setCanPut,
       WILL_FIRE_RL_bus_split_3_awug_warnDoPut,
       WILL_FIRE_RL_bus_split_3_putFirst,
       WILL_FIRE_RL_bus_split_3_putOther,
       WILL_FIRE_RL_bus_split_3_wug_doPut,
       WILL_FIRE_RL_bus_split_3_wug_setCanPut,
       WILL_FIRE_RL_bus_split_3_wug_warnDoPut,
       WILL_FIRE_RL_connect,
       WILL_FIRE_RL_connect_1,
       WILL_FIRE_RL_connect_10,
       WILL_FIRE_RL_connect_11,
       WILL_FIRE_RL_connect_12,
       WILL_FIRE_RL_connect_13,
       WILL_FIRE_RL_connect_14,
       WILL_FIRE_RL_connect_2,
       WILL_FIRE_RL_connect_3,
       WILL_FIRE_RL_connect_4,
       WILL_FIRE_RL_connect_5,
       WILL_FIRE_RL_connect_6,
       WILL_FIRE_RL_connect_7,
       WILL_FIRE_RL_connect_8,
       WILL_FIRE_RL_connect_9,
       WILL_FIRE_RL_core_mem_master_sig_arSig_src_doDrop,
       WILL_FIRE_RL_core_mem_master_sig_arSig_src_setCanPeek,
       WILL_FIRE_RL_core_mem_master_sig_arSig_src_setPeek,
       WILL_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop,
       WILL_FIRE_RL_core_mem_master_sig_awSig_src_doDrop,
       WILL_FIRE_RL_core_mem_master_sig_awSig_src_setCanPeek,
       WILL_FIRE_RL_core_mem_master_sig_awSig_src_setPeek,
       WILL_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop,
       WILL_FIRE_RL_core_mem_master_sig_bSig_snk_doPut,
       WILL_FIRE_RL_core_mem_master_sig_bSig_snk_setCanPut,
       WILL_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut,
       WILL_FIRE_RL_core_mem_master_sig_rSig_snk_doPut,
       WILL_FIRE_RL_core_mem_master_sig_rSig_snk_setCanPut,
       WILL_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut,
       WILL_FIRE_RL_core_mem_master_sig_wSig_src_doDrop,
       WILL_FIRE_RL_core_mem_master_sig_wSig_src_setCanPeek,
       WILL_FIRE_RL_core_mem_master_sig_wSig_src_setPeek,
       WILL_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_consume_bresp,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp,
       WILL_FIRE_RL_rl_connect_external_interrupt_requests,
       WILL_FIRE_RL_rl_reset_complete_initial,
       WILL_FIRE_RL_rl_reset_start_initial,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_doDrop,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_setCanPeek,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_setPeek,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_warnDoDrop,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_doDrop,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_setCanPeek,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_setPeek,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_warnDoDrop,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_doPut,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_setCanPut,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_warnDoPut,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_doPut,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_setCanPut,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_warnDoPut,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_doDrop,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_setCanPeek,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_setPeek,
       WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_warnDoDrop,
       WILL_FIRE_RL_ug_snk_1_1_doPut,
       WILL_FIRE_RL_ug_snk_1_1_setCanPut,
       WILL_FIRE_RL_ug_snk_1_1_warnDoPut,
       WILL_FIRE_RL_ug_snk_1_2_doPut,
       WILL_FIRE_RL_ug_snk_1_2_setCanPut,
       WILL_FIRE_RL_ug_snk_1_2_warnDoPut,
       WILL_FIRE_RL_ug_snk_1_3_doPut,
       WILL_FIRE_RL_ug_snk_1_3_setCanPut,
       WILL_FIRE_RL_ug_snk_1_3_warnDoPut,
       WILL_FIRE_RL_ug_snk_1_4_doPut,
       WILL_FIRE_RL_ug_snk_1_4_setCanPut,
       WILL_FIRE_RL_ug_snk_1_4_warnDoPut,
       WILL_FIRE_RL_ug_snk_1_doPut,
       WILL_FIRE_RL_ug_snk_1_doPut_1,
       WILL_FIRE_RL_ug_snk_1_setCanPut,
       WILL_FIRE_RL_ug_snk_1_setCanPut_1,
       WILL_FIRE_RL_ug_snk_1_warnDoPut,
       WILL_FIRE_RL_ug_snk_1_warnDoPut_1,
       WILL_FIRE_RL_ug_snk_2_1_doPut,
       WILL_FIRE_RL_ug_snk_2_1_setCanPut,
       WILL_FIRE_RL_ug_snk_2_1_warnDoPut,
       WILL_FIRE_RL_ug_snk_2_2_doPut,
       WILL_FIRE_RL_ug_snk_2_2_setCanPut,
       WILL_FIRE_RL_ug_snk_2_2_warnDoPut,
       WILL_FIRE_RL_ug_snk_2_3_doPut,
       WILL_FIRE_RL_ug_snk_2_3_setCanPut,
       WILL_FIRE_RL_ug_snk_2_3_warnDoPut,
       WILL_FIRE_RL_ug_snk_2_4_doPut,
       WILL_FIRE_RL_ug_snk_2_4_setCanPut,
       WILL_FIRE_RL_ug_snk_2_4_warnDoPut,
       WILL_FIRE_RL_ug_snk_2_doPut_1,
       WILL_FIRE_RL_ug_snk_2_setCanPut,
       WILL_FIRE_RL_ug_snk_2_setCanPut_1,
       WILL_FIRE_RL_ug_snk_2_warnDoPut_1,
       WILL_FIRE_RL_ug_snk_3_doPut,
       WILL_FIRE_RL_ug_snk_3_setCanPut,
       WILL_FIRE_RL_ug_snk_3_warnDoPut,
       WILL_FIRE_RL_ug_snk_4_setCanPut,
       WILL_FIRE_RL_ug_snk_doPut,
       WILL_FIRE_RL_ug_snk_setCanPut,
       WILL_FIRE_RL_ug_snk_warnDoPut,
       WILL_FIRE_RL_ug_src_1_1_doDrop,
       WILL_FIRE_RL_ug_src_1_1_setCanPeek,
       WILL_FIRE_RL_ug_src_1_1_setPeek,
       WILL_FIRE_RL_ug_src_1_1_warnDoDrop,
       WILL_FIRE_RL_ug_src_1_2_doDrop,
       WILL_FIRE_RL_ug_src_1_2_setCanPeek,
       WILL_FIRE_RL_ug_src_1_2_setPeek,
       WILL_FIRE_RL_ug_src_1_2_warnDoDrop,
       WILL_FIRE_RL_ug_src_1_3_doDrop,
       WILL_FIRE_RL_ug_src_1_3_setCanPeek,
       WILL_FIRE_RL_ug_src_1_3_setPeek,
       WILL_FIRE_RL_ug_src_1_3_warnDoDrop,
       WILL_FIRE_RL_ug_src_1_4_doDrop,
       WILL_FIRE_RL_ug_src_1_4_setCanPeek,
       WILL_FIRE_RL_ug_src_1_4_setPeek,
       WILL_FIRE_RL_ug_src_1_4_warnDoDrop,
       WILL_FIRE_RL_ug_src_1_doDrop_1,
       WILL_FIRE_RL_ug_src_1_setCanPeek,
       WILL_FIRE_RL_ug_src_1_setCanPeek_1,
       WILL_FIRE_RL_ug_src_1_setPeek_1,
       WILL_FIRE_RL_ug_src_1_warnDoDrop,
       WILL_FIRE_RL_ug_src_1_warnDoDrop_1,
       WILL_FIRE_RL_ug_src_2_1_doDrop,
       WILL_FIRE_RL_ug_src_2_1_setCanPeek,
       WILL_FIRE_RL_ug_src_2_1_setPeek,
       WILL_FIRE_RL_ug_src_2_1_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_2_doDrop,
       WILL_FIRE_RL_ug_src_2_2_setCanPeek,
       WILL_FIRE_RL_ug_src_2_2_setPeek,
       WILL_FIRE_RL_ug_src_2_2_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_3_doDrop,
       WILL_FIRE_RL_ug_src_2_3_setCanPeek,
       WILL_FIRE_RL_ug_src_2_3_setPeek,
       WILL_FIRE_RL_ug_src_2_3_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_4_doDrop,
       WILL_FIRE_RL_ug_src_2_4_setCanPeek,
       WILL_FIRE_RL_ug_src_2_4_setPeek,
       WILL_FIRE_RL_ug_src_2_4_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_doDrop,
       WILL_FIRE_RL_ug_src_2_doDrop_1,
       WILL_FIRE_RL_ug_src_2_setCanPeek,
       WILL_FIRE_RL_ug_src_2_setCanPeek_1,
       WILL_FIRE_RL_ug_src_2_setPeek,
       WILL_FIRE_RL_ug_src_2_setPeek_1,
       WILL_FIRE_RL_ug_src_2_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_warnDoDrop_1,
       WILL_FIRE_RL_ug_src_3_setCanPeek,
       WILL_FIRE_RL_ug_src_3_warnDoDrop,
       WILL_FIRE_RL_ug_src_4_doDrop,
       WILL_FIRE_RL_ug_src_4_setCanPeek,
       WILL_FIRE_RL_ug_src_4_setPeek,
       WILL_FIRE_RL_ug_src_4_warnDoDrop,
       WILL_FIRE_RL_ug_src_setCanPeek,
       WILL_FIRE_RL_ug_src_warnDoDrop,
       WILL_FIRE___me_check_14,
       WILL_FIRE___me_check_236,
       WILL_FIRE___me_check_238,
       WILL_FIRE___me_check_240,
       WILL_FIRE___me_check_268,
       WILL_FIRE___me_check_270,
       WILL_FIRE___me_check_272,
       WILL_FIRE___me_check_274,
       WILL_FIRE___me_check_276,
       WILL_FIRE___me_check_278,
       WILL_FIRE___me_check_292,
       WILL_FIRE___me_check_294,
       WILL_FIRE___me_check_296,
       WILL_FIRE___me_check_324,
       WILL_FIRE___me_check_326,
       WILL_FIRE___me_check_328,
       WILL_FIRE___me_check_330,
       WILL_FIRE___me_check_332,
       WILL_FIRE___me_check_334,
       WILL_FIRE___me_check_4,
       WILL_FIRE_cms_ifc_halt_cpu,
       WILL_FIRE_core_dmem_post_fabric_ar_arready,
       WILL_FIRE_core_dmem_post_fabric_aw_awready,
       WILL_FIRE_core_dmem_post_fabric_b_bflit,
       WILL_FIRE_core_dmem_post_fabric_r_rflit,
       WILL_FIRE_core_dmem_post_fabric_w_wready,
       WILL_FIRE_core_dmem_pre_fabric_ar_arready,
       WILL_FIRE_core_dmem_pre_fabric_aw_awready,
       WILL_FIRE_core_dmem_pre_fabric_b_bflit,
       WILL_FIRE_core_dmem_pre_fabric_r_rflit,
       WILL_FIRE_core_dmem_pre_fabric_w_wready,
       WILL_FIRE_get_to_console_get,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_put_from_console_put,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_set_watch_tohost,
       WILL_FIRE_to_raw_mem_request_get,
       WILL_FIRE_to_raw_mem_response_put;

  // inputs to muxes for submodule ports
  wire [173 : 0] MUX_bus_toDfltOutput$wset_1__VAL_1,
		 MUX_bus_toDfltOutput$wset_1__VAL_2;
  wire [99 : 0] MUX_bus_1_toDfltOutput$wset_1__VAL_1,
		MUX_bus_1_toDfltOutput$wset_1__VAL_2;
  wire [73 : 0] MUX_bus_1_toDfltOutput_1$wset_1__VAL_1,
		MUX_bus_1_toDfltOutput_1$wset_1__VAL_2,
		MUX_bus_1_toDfltOutput_1$wset_1__VAL_3,
		MUX_bus_1_toDfltOutput_1$wset_1__VAL_4,
		MUX_bus_1_toDfltOutput_1$wset_1__VAL_5;
  wire [8 : 0] MUX_bus_1_noRouteSlv_flitCount$write_1__VAL_1,
	       MUX_bus_1_noRouteSlv_flitCount$write_1__VAL_2,
	       MUX_bus_toDfltOutput_1$wset_1__VAL_1,
	       MUX_bus_toDfltOutput_1$wset_1__VAL_2,
	       MUX_bus_toDfltOutput_1$wset_1__VAL_3,
	       MUX_bus_toDfltOutput_1$wset_1__VAL_4,
	       MUX_bus_toDfltOutput_1$wset_1__VAL_5;
  wire [7 : 0] MUX_bus_1_moreFlits_1$write_1__VAL_1,
	       MUX_bus_1_moreFlits_1$write_1__VAL_3,
	       MUX_bus_1_moreFlits_1$write_1__VAL_5,
	       MUX_bus_1_moreFlits_1$write_1__VAL_7,
	       MUX_bus_1_moreFlits_1$write_1__VAL_9,
	       MUX_bus_merged_0_flitLeft$write_1__VAL_2,
	       MUX_bus_merged_1_flitLeft$write_1__VAL_2,
	       MUX_bus_split_0_flitLeft$write_1__VAL_1,
	       MUX_bus_split_1_flitLeft$write_1__VAL_1,
	       MUX_bus_split_2_flitLeft$write_1__VAL_1,
	       MUX_bus_split_3_flitLeft$write_1__VAL_1;
  wire [6 : 0] MUX_bus_moreFlits$write_1__VAL_1,
	       MUX_bus_moreFlits$write_1__VAL_3;
  wire MUX_boot_rom_axi4_deburster_inSerial_state$port1__write_1__SEL_2,
       MUX_bus_1_moreFlits_1$write_1__SEL_1,
       MUX_bus_1_moreFlits_1$write_1__SEL_10,
       MUX_bus_1_moreFlits_1$write_1__SEL_2,
       MUX_bus_1_moreFlits_1$write_1__SEL_3,
       MUX_bus_1_moreFlits_1$write_1__SEL_4,
       MUX_bus_1_moreFlits_1$write_1__SEL_5,
       MUX_bus_1_moreFlits_1$write_1__SEL_6,
       MUX_bus_1_moreFlits_1$write_1__SEL_7,
       MUX_bus_1_moreFlits_1$write_1__SEL_8,
       MUX_bus_1_moreFlits_1$write_1__SEL_9,
       MUX_bus_1_toDfltOutput$wset_1__SEL_1,
       MUX_bus_1_toDfltOutput$wset_1__SEL_2,
       MUX_bus_1_toDfltOutput$wset_1__SEL_3,
       MUX_bus_1_toDfltOutput$wset_1__SEL_4,
       MUX_bus_1_toOutput_0$wset_1__SEL_1,
       MUX_bus_1_toOutput_0$wset_1__SEL_2,
       MUX_bus_1_toOutput_0$wset_1__SEL_3,
       MUX_bus_1_toOutput_0$wset_1__SEL_4,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_1,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_10,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_2,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_3,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_4,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_5,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_6,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_7,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_8,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_9,
       MUX_bus_1_toOutput_1$wset_1__SEL_1,
       MUX_bus_1_toOutput_1$wset_1__SEL_2,
       MUX_bus_1_toOutput_1$wset_1__SEL_3,
       MUX_bus_1_toOutput_1$wset_1__SEL_4,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_1,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_10,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_2,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_3,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_4,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_5,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_6,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_7,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_8,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_9,
       MUX_bus_1_toOutput_2$wset_1__SEL_1,
       MUX_bus_1_toOutput_2$wset_1__SEL_2,
       MUX_bus_1_toOutput_2$wset_1__SEL_3,
       MUX_bus_1_toOutput_2$wset_1__SEL_4,
       MUX_bus_1_toOutput_3$wset_1__SEL_1,
       MUX_bus_1_toOutput_3$wset_1__SEL_2,
       MUX_bus_1_toOutput_3$wset_1__SEL_3,
       MUX_bus_1_toOutput_3$wset_1__SEL_4,
       MUX_bus_moreFlits$write_1__SEL_1,
       MUX_bus_moreFlits$write_1__SEL_2,
       MUX_bus_moreFlits$write_1__SEL_3,
       MUX_bus_moreFlits$write_1__SEL_4,
       MUX_bus_split_0_flitLeft$write_1__SEL_1,
       MUX_bus_split_0_flitLeft$write_1__SEL_2,
       MUX_bus_split_1_flitLeft$write_1__SEL_1,
       MUX_bus_split_1_flitLeft$write_1__SEL_2,
       MUX_bus_split_2_flitLeft$write_1__SEL_1,
       MUX_bus_split_2_flitLeft$write_1__SEL_2,
       MUX_bus_split_3_flitLeft$write_1__SEL_1,
       MUX_bus_split_3_flitLeft$write_1__SEL_2,
       MUX_bus_toDfltOutput$wset_1__SEL_1,
       MUX_bus_toDfltOutput$wset_1__SEL_2,
       MUX_bus_toDfltOutput$wset_1__SEL_3,
       MUX_bus_toDfltOutput$wset_1__SEL_4,
       MUX_bus_toOutput_0$wset_1__SEL_1,
       MUX_bus_toOutput_0$wset_1__SEL_2,
       MUX_bus_toOutput_0$wset_1__SEL_3,
       MUX_bus_toOutput_0$wset_1__SEL_4,
       MUX_bus_toOutput_0_1$wset_1__SEL_1,
       MUX_bus_toOutput_0_1$wset_1__SEL_10,
       MUX_bus_toOutput_0_1$wset_1__SEL_2,
       MUX_bus_toOutput_0_1$wset_1__SEL_3,
       MUX_bus_toOutput_0_1$wset_1__SEL_4,
       MUX_bus_toOutput_0_1$wset_1__SEL_5,
       MUX_bus_toOutput_0_1$wset_1__SEL_6,
       MUX_bus_toOutput_0_1$wset_1__SEL_7,
       MUX_bus_toOutput_0_1$wset_1__SEL_8,
       MUX_bus_toOutput_0_1$wset_1__SEL_9,
       MUX_bus_toOutput_1$wset_1__SEL_1,
       MUX_bus_toOutput_1$wset_1__SEL_2,
       MUX_bus_toOutput_1$wset_1__SEL_3,
       MUX_bus_toOutput_1$wset_1__SEL_4,
       MUX_bus_toOutput_1_1$wset_1__SEL_1,
       MUX_bus_toOutput_1_1$wset_1__SEL_10,
       MUX_bus_toOutput_1_1$wset_1__SEL_2,
       MUX_bus_toOutput_1_1$wset_1__SEL_3,
       MUX_bus_toOutput_1_1$wset_1__SEL_4,
       MUX_bus_toOutput_1_1$wset_1__SEL_5,
       MUX_bus_toOutput_1_1$wset_1__SEL_6,
       MUX_bus_toOutput_1_1$wset_1__SEL_7,
       MUX_bus_toOutput_1_1$wset_1__SEL_8,
       MUX_bus_toOutput_1_1$wset_1__SEL_9,
       MUX_bus_toOutput_2$wset_1__SEL_1,
       MUX_bus_toOutput_2$wset_1__SEL_2,
       MUX_bus_toOutput_2$wset_1__SEL_3,
       MUX_bus_toOutput_2$wset_1__SEL_4,
       MUX_bus_toOutput_3$wset_1__SEL_1,
       MUX_bus_toOutput_3$wset_1__SEL_2,
       MUX_bus_toOutput_3$wset_1__SEL_3,
       MUX_bus_toOutput_3$wset_1__SEL_4,
       MUX_mem0_controller_axi4_deburster_inSerial_state$port1__write_1__SEL_2,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h90341;
  reg [63 : 0] v__h90603;
  reg [63 : 0] v__h90887;
  reg [63 : 0] v__h91149;
  reg [63 : 0] v__h91433;
  reg [63 : 0] v__h91695;
  reg [63 : 0] v__h91979;
  reg [63 : 0] v__h92241;
  reg [63 : 0] v__h92525;
  reg [63 : 0] v__h92787;
  reg [63 : 0] v__h55508;
  reg [63 : 0] v__h55972;
  reg [63 : 0] v__h115231;
  reg [63 : 0] v__h115693;
  reg [31 : 0] v__h158720;
  reg [63 : 0] v__h137573;
  reg [63 : 0] v__h137835;
  reg [63 : 0] v__h138119;
  reg [63 : 0] v__h138381;
  reg [63 : 0] v__h138665;
  reg [63 : 0] v__h138927;
  reg [63 : 0] v__h139211;
  reg [63 : 0] v__h139473;
  reg [63 : 0] v__h139757;
  reg [63 : 0] v__h140019;
  reg [31 : 0] v__h158334;
  reg [31 : 0] v__h158328;
  reg [31 : 0] v__h158714;
  // synopsys translate_on

  // remaining internal signals
  wire [171 : 0] IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1131,
		 IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1200;
  wire [63 : 0] addr__h46762,
		addr__h48548,
		addr_lim__h158488,
		addr_lim__h158516,
		addr_lim__h158542,
		x__h107054,
		x__h107117,
		x__h107191,
		x__h107254,
		x__h108601,
		x__h108664,
		x__h108738,
		x__h108801,
		x__h12561,
		x__h13314,
		x__h47229,
		x__h47302,
		x__h47386,
		x__h47459,
		x__h48944,
		x__h49007,
		x__h49081,
		x__h49144,
		x__h6095,
		x__h6853,
		x_araddr__h13194,
		x_araddr__h6733,
		x_awaddr__h12441,
		x_awaddr__h5971,
		y__h12549,
		y__h13302,
		y__h6083,
		y__h6841;
  wire [8 : 0] x__h12900, x__h6436;
  wire [7 : 0] x1__h12804, x1__h13520, x1__h6340, x1__h7059;
  wire [6 : 0] _theResult____h78560, currentAwid__h78745;
  wire [5 : 0] bus_1_toOutput_0_1wget_BITS_73_TO_68__q2,
	       bus_toOutput_0_1wget_BITS_8_TO_3__q1;
  wire IF_IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_b_ETC___d2398,
       IF_IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_ETC___d2133,
       IF_IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_ETC___d2134,
       IF_IF_bus_1_inputDest_0_whas__081_THEN_bus_1_i_ETC___d2190,
       IF_IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_b_ETC___d2413,
       IF_IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_ETC___d2171,
       IF_IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_ETC___d2172,
       IF_IF_bus_1_inputDest_1_whas__140_THEN_bus_1_i_ETC___d2205,
       IF_IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_ETC___d2429,
       IF_IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_ETC___d2444,
       IF_IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_ETC___d2461,
       IF_IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_ETC___d1598,
       IF_IF_bus_inputDest_0_whas__252_THEN_NOT_bus_i_ETC___d1304,
       IF_IF_bus_inputDest_0_whas__252_THEN_NOT_bus_i_ETC___d1305,
       IF_IF_bus_inputDest_0_whas__252_THEN_bus_input_ETC___d1361,
       IF_IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_ETC___d1613,
       IF_IF_bus_inputDest_1_whas__311_THEN_NOT_bus_i_ETC___d1342,
       IF_IF_bus_inputDest_1_whas__311_THEN_NOT_bus_i_ETC___d1343,
       IF_IF_bus_inputDest_1_whas__311_THEN_bus_input_ETC___d1376,
       IF_IF_bus_inputDest_2_whas__619_THEN_NOT_bus_i_ETC___d1629,
       IF_IF_bus_inputDest_3_whas__634_THEN_NOT_bus_i_ETC___d1644,
       IF_IF_bus_inputDest_4_whas__651_THEN_NOT_bus_i_ETC___d1661,
       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2214,
       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2215,
       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2217,
       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2218,
       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2221,
       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2223,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2530,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2534,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2538,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2542,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2549,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2554,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2558,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2562,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2566,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2570,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2573,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2578,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2582,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2587,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2592,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2597,
       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2602,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2503,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2531,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2535,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2539,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2543,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2551,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2555,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2559,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2563,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2567,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2577,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2584,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2589,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2594,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2599,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2512,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2532,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2536,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2540,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2544,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2552,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2556,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2560,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2564,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2568,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2579,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2585,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2590,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2595,
       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2600,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2521,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2533,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2537,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2541,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2545,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2553,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2557,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2561,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2565,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2569,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2581,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2591,
       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2596,
       IF_NOT_bus_1_moreFlits_176_BIT_0_249_263_OR_NO_ETC___d2272,
       IF_NOT_bus_1_moreFlits_176_BIT_1_251_265_OR_NO_ETC___d2271,
       IF_NOT_bus_1_moreFlits_1_464_BIT_0_710_711_OR__ETC___d2715,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1730,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1734,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1738,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1742,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1749,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1754,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1758,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1762,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1766,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1770,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1773,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1778,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1782,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1787,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1792,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1797,
       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1802,
       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1385,
       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1386,
       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1388,
       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1389,
       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1392,
       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1394,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1703,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1731,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1735,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1739,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1743,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1751,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1755,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1759,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1763,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1767,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1777,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1784,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1789,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1794,
       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1799,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1712,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1732,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1736,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1740,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1744,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1752,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1756,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1760,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1764,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1768,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1779,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1785,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1790,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1795,
       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1800,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1721,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1733,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1737,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1741,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1745,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1753,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1757,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1761,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1765,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1769,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1781,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1791,
       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1796,
       IF_NOT_bus_moreFlits_1_664_BIT_0_908_909_OR_NO_ETC___d1913,
       IF_NOT_bus_moreFlits_347_BIT_0_425_439_OR_NOT__ETC___d1448,
       IF_NOT_bus_moreFlits_347_BIT_1_427_441_OR_NOT__ETC___d1447,
       IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_bus__ETC___d2519,
       IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_1__ETC___d2198,
       IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_1__ETC___d2199,
       IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_bus__ETC___d2510,
       IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_1__ETC___d2210,
       IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_1__ETC___d2211,
       IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_1__ETC___d2501,
       IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_1__ETC___d2493,
       IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_1__ETC___d2528,
       IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_in_ETC___d1719,
       IF_bus_inputDest_0_whas__252_THEN_NOT_bus_inpu_ETC___d1369,
       IF_bus_inputDest_0_whas__252_THEN_NOT_bus_inpu_ETC___d1370,
       IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_in_ETC___d1710,
       IF_bus_inputDest_1_whas__311_THEN_NOT_bus_inpu_ETC___d1381,
       IF_bus_inputDest_1_whas__311_THEN_NOT_bus_inpu_ETC___d1382,
       IF_bus_inputDest_2_whas__619_THEN_NOT_bus_inpu_ETC___d1701,
       IF_bus_inputDest_3_whas__634_THEN_NOT_bus_inpu_ETC___d1693,
       IF_bus_inputDest_4_whas__651_THEN_NOT_bus_inpu_ETC___d1728,
       IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117,
       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1147,
       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1150,
       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1155,
       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1158,
       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1164,
       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1167,
       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1170,
       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1174,
       IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186,
       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1211,
       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1213,
       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1216,
       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1218,
       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1222,
       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1224,
       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1227,
       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1231,
       IF_bus_split_0_flitLeft_49_EQ_0_50_THEN_bus_sp_ETC___d1241,
       IF_bus_split_1_flitLeft_94_EQ_0_95_THEN_bus_sp_ETC___d1243,
       IF_bus_split_2_flitLeft_039_EQ_0_040_THEN_bus__ETC___d1245,
       IF_bus_split_3_flitLeft_084_EQ_0_085_THEN_bus__ETC___d1247,
       NOT_IF_IF_bus_1_inputDest_0_whas__081_THEN_bus_ETC___d2103,
       NOT_IF_IF_bus_1_inputDest_1_whas__140_THEN_bus_ETC___d2159,
       NOT_IF_IF_bus_inputDest_0_whas__252_THEN_bus_i_ETC___d1274,
       NOT_IF_IF_bus_inputDest_1_whas__311_THEN_bus_i_ETC___d1330,
       NOT_IF_bus_1_moreFlits_176_BIT_0_249_THEN_1_EL_ETC___d2262,
       NOT_IF_bus_moreFlits_347_BIT_0_425_THEN_1_ELSE_ETC___d1438,
       NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479,
       NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679,
       boot_rom_axi4_deburster_readsSent_port0__read__ETC___d155,
       bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476,
       bus_1_inputCanPeek_0_1_whas__377_AND_bus_1_inp_ETC___d2463,
       bus_1_inputCanPeek_0_whas__078_AND_bus_1_input_ETC___d2175,
       bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676,
       bus_inputCanPeek_0_1_whas__577_AND_bus_inputCa_ETC___d1663,
       bus_inputCanPeek_0_whas__249_AND_bus_inputCanP_ETC___d1346,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2043,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2045,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2048,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2050,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2054,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2056,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2059,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2063,
       core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2005,
       core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2007,
       core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2010,
       core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2012,
       core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2016,
       core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2018,
       core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2021,
       core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2025,
       mem0_controller_axi4_deburster_readsSent_port0_ETC___d318;

  // actionvalue method to_raw_mem_request_get
  assign to_raw_mem_request_get = mem0_controller$to_raw_mem_request_get ;
  assign RDY_to_raw_mem_request_get =
	     mem0_controller$RDY_to_raw_mem_request_get ;
  assign CAN_FIRE_to_raw_mem_request_get =
	     mem0_controller$RDY_to_raw_mem_request_get ;
  assign WILL_FIRE_to_raw_mem_request_get = EN_to_raw_mem_request_get ;

  // action method to_raw_mem_response_put
  assign RDY_to_raw_mem_response_put =
	     mem0_controller$RDY_to_raw_mem_response_put ;
  assign CAN_FIRE_to_raw_mem_response_put =
	     mem0_controller$RDY_to_raw_mem_response_put ;
  assign WILL_FIRE_to_raw_mem_response_put = EN_to_raw_mem_response_put ;

  // actionvalue method get_to_console_get
  assign get_to_console_get = uart0$get_to_console_get ;
  assign RDY_get_to_console_get = uart0$RDY_get_to_console_get ;
  assign CAN_FIRE_get_to_console_get = uart0$RDY_get_to_console_get ;
  assign WILL_FIRE_get_to_console_get = EN_get_to_console_get ;

  // action method put_from_console_put
  assign RDY_put_from_console_put = uart0$RDY_put_from_console_put ;
  assign CAN_FIRE_put_from_console_put = uart0$RDY_put_from_console_put ;
  assign WILL_FIRE_put_from_console_put = EN_put_from_console_put ;

  // value method status
  assign status = 8'd0 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = core$mv_tohost_value ;
  assign RDY_mv_tohost_value = 1'd1 ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = core$mv_status ;

  // value method cms_ifc_pc
  assign cms_ifc_pc = core$cms_ifc_pc ;

  // value method cms_ifc_instr
  assign cms_ifc_instr = core$cms_ifc_instr ;

  // value method cms_ifc_performance_events
  assign cms_ifc_performance_events = core$cms_ifc_performance_events ;

  // action method cms_ifc_halt_cpu
  assign CAN_FIRE_cms_ifc_halt_cpu = 1'd1 ;
  assign WILL_FIRE_cms_ifc_halt_cpu = EN_cms_ifc_halt_cpu ;

  // value method cms_ifc_gp_write_reg_name
  assign cms_ifc_gp_write_reg_name = core$cms_ifc_gp_write_reg_name ;

  // value method cms_ifc_gp_write_reg
  assign cms_ifc_gp_write_reg = core$cms_ifc_gp_write_reg ;

  // value method cms_ifc_gp_write_valid
  assign cms_ifc_gp_write_valid = core$cms_ifc_gp_write_valid ;

  // value method core_dmem_pre_fabric_aw_awid
  assign core_dmem_pre_fabric_awid = core$core_mem_master_aw_peek[98:93] ;

  // value method core_dmem_pre_fabric_aw_awaddr
  assign core_dmem_pre_fabric_awaddr = core$core_mem_master_aw_peek[92:29] ;

  // value method core_dmem_pre_fabric_aw_awlen
  assign core_dmem_pre_fabric_awlen = core$core_mem_master_aw_peek[28:21] ;

  // value method core_dmem_pre_fabric_aw_awsize
  assign core_dmem_pre_fabric_awsize = core$core_mem_master_aw_peek[20:18] ;

  // value method core_dmem_pre_fabric_aw_awburst
  assign core_dmem_pre_fabric_awburst = core$core_mem_master_aw_peek[17:16] ;

  // value method core_dmem_pre_fabric_aw_awlock
  assign core_dmem_pre_fabric_awlock = core$core_mem_master_aw_peek[15] ;

  // value method core_dmem_pre_fabric_aw_awcache
  assign core_dmem_pre_fabric_awcache = core$core_mem_master_aw_peek[14:11] ;

  // value method core_dmem_pre_fabric_aw_awprot
  assign core_dmem_pre_fabric_awprot = core$core_mem_master_aw_peek[10:8] ;

  // value method core_dmem_pre_fabric_aw_awqos
  assign core_dmem_pre_fabric_awqos = core$core_mem_master_aw_peek[7:4] ;

  // value method core_dmem_pre_fabric_aw_awregion
  assign core_dmem_pre_fabric_awregion = core$core_mem_master_aw_peek[3:0] ;

  // value method core_dmem_pre_fabric_aw_awvalid
  assign core_dmem_pre_fabric_awvalid = core$core_mem_master_aw_canPeek ;

  // action method core_dmem_pre_fabric_aw_awready
  assign CAN_FIRE_core_dmem_pre_fabric_aw_awready = 1'd1 ;
  assign WILL_FIRE_core_dmem_pre_fabric_aw_awready = 1'd1 ;

  // value method core_dmem_pre_fabric_w_wdata
  assign core_dmem_pre_fabric_wdata = core$core_mem_master_w_peek[72:9] ;

  // value method core_dmem_pre_fabric_w_wstrb
  assign core_dmem_pre_fabric_wstrb = core$core_mem_master_w_peek[8:1] ;

  // value method core_dmem_pre_fabric_w_wlast
  assign core_dmem_pre_fabric_wlast = core$core_mem_master_w_peek[0] ;

  // value method core_dmem_pre_fabric_w_wvalid
  assign core_dmem_pre_fabric_wvalid = core$core_mem_master_w_canPeek ;

  // action method core_dmem_pre_fabric_w_wready
  assign CAN_FIRE_core_dmem_pre_fabric_w_wready = 1'd1 ;
  assign WILL_FIRE_core_dmem_pre_fabric_w_wready = 1'd1 ;

  // action method core_dmem_pre_fabric_b_bflit
  assign CAN_FIRE_core_dmem_pre_fabric_b_bflit = 1'd1 ;
  assign WILL_FIRE_core_dmem_pre_fabric_b_bflit = 1'd1 ;

  // value method core_dmem_pre_fabric_b_bready
  assign core_dmem_pre_fabric_bready = core$core_mem_master_b_canPut ;

  // value method core_dmem_pre_fabric_ar_arid
  assign core_dmem_pre_fabric_arid = core$core_mem_master_ar_peek[98:93] ;

  // value method core_dmem_pre_fabric_ar_araddr
  assign core_dmem_pre_fabric_araddr = core$core_mem_master_ar_peek[92:29] ;

  // value method core_dmem_pre_fabric_ar_arlen
  assign core_dmem_pre_fabric_arlen = core$core_mem_master_ar_peek[28:21] ;

  // value method core_dmem_pre_fabric_ar_arsize
  assign core_dmem_pre_fabric_arsize = core$core_mem_master_ar_peek[20:18] ;

  // value method core_dmem_pre_fabric_ar_arburst
  assign core_dmem_pre_fabric_arburst = core$core_mem_master_ar_peek[17:16] ;

  // value method core_dmem_pre_fabric_ar_arlock
  assign core_dmem_pre_fabric_arlock = core$core_mem_master_ar_peek[15] ;

  // value method core_dmem_pre_fabric_ar_arcache
  assign core_dmem_pre_fabric_arcache = core$core_mem_master_ar_peek[14:11] ;

  // value method core_dmem_pre_fabric_ar_arprot
  assign core_dmem_pre_fabric_arprot = core$core_mem_master_ar_peek[10:8] ;

  // value method core_dmem_pre_fabric_ar_arqos
  assign core_dmem_pre_fabric_arqos = core$core_mem_master_ar_peek[7:4] ;

  // value method core_dmem_pre_fabric_ar_arregion
  assign core_dmem_pre_fabric_arregion = core$core_mem_master_ar_peek[3:0] ;

  // value method core_dmem_pre_fabric_ar_arvalid
  assign core_dmem_pre_fabric_arvalid = core$core_mem_master_ar_canPeek ;

  // action method core_dmem_pre_fabric_ar_arready
  assign CAN_FIRE_core_dmem_pre_fabric_ar_arready = 1'd1 ;
  assign WILL_FIRE_core_dmem_pre_fabric_ar_arready = 1'd1 ;

  // action method core_dmem_pre_fabric_r_rflit
  assign CAN_FIRE_core_dmem_pre_fabric_r_rflit = 1'd1 ;
  assign WILL_FIRE_core_dmem_pre_fabric_r_rflit = 1'd1 ;

  // value method core_dmem_pre_fabric_r_rready
  assign core_dmem_pre_fabric_rready = core$core_mem_master_r_canPut ;

  // value method core_dmem_post_fabric_aw_awid
  assign core_dmem_post_fabric_awid =
	     s_otherPeripheralsPortShim_awff$D_OUT[99:93] ;

  // value method core_dmem_post_fabric_aw_awaddr
  assign core_dmem_post_fabric_awaddr =
	     s_otherPeripheralsPortShim_awff$D_OUT[92:29] ;

  // value method core_dmem_post_fabric_aw_awlen
  assign core_dmem_post_fabric_awlen =
	     s_otherPeripheralsPortShim_awff$D_OUT[28:21] ;

  // value method core_dmem_post_fabric_aw_awsize
  assign core_dmem_post_fabric_awsize =
	     s_otherPeripheralsPortShim_awff$D_OUT[20:18] ;

  // value method core_dmem_post_fabric_aw_awburst
  assign core_dmem_post_fabric_awburst =
	     s_otherPeripheralsPortShim_awff$D_OUT[17:16] ;

  // value method core_dmem_post_fabric_aw_awlock
  assign core_dmem_post_fabric_awlock =
	     s_otherPeripheralsPortShim_awff$D_OUT[15] ;

  // value method core_dmem_post_fabric_aw_awcache
  assign core_dmem_post_fabric_awcache =
	     s_otherPeripheralsPortShim_awff$D_OUT[14:11] ;

  // value method core_dmem_post_fabric_aw_awprot
  assign core_dmem_post_fabric_awprot =
	     s_otherPeripheralsPortShim_awff$D_OUT[10:8] ;

  // value method core_dmem_post_fabric_aw_awqos
  assign core_dmem_post_fabric_awqos =
	     s_otherPeripheralsPortShim_awff$D_OUT[7:4] ;

  // value method core_dmem_post_fabric_aw_awregion
  assign core_dmem_post_fabric_awregion =
	     s_otherPeripheralsPortShim_awff$D_OUT[3:0] ;

  // value method core_dmem_post_fabric_aw_awvalid
  assign core_dmem_post_fabric_awvalid =
	     s_otherPeripheralsPortShim_awff$EMPTY_N ;

  // action method core_dmem_post_fabric_aw_awready
  assign CAN_FIRE_core_dmem_post_fabric_aw_awready = 1'd1 ;
  assign WILL_FIRE_core_dmem_post_fabric_aw_awready = 1'd1 ;

  // value method core_dmem_post_fabric_w_wdata
  assign core_dmem_post_fabric_wdata =
	     s_otherPeripheralsPortShim_wff$D_OUT[72:9] ;

  // value method core_dmem_post_fabric_w_wstrb
  assign core_dmem_post_fabric_wstrb =
	     s_otherPeripheralsPortShim_wff$D_OUT[8:1] ;

  // value method core_dmem_post_fabric_w_wlast
  assign core_dmem_post_fabric_wlast =
	     s_otherPeripheralsPortShim_wff$D_OUT[0] ;

  // value method core_dmem_post_fabric_w_wvalid
  assign core_dmem_post_fabric_wvalid =
	     s_otherPeripheralsPortShim_wff$EMPTY_N ;

  // action method core_dmem_post_fabric_w_wready
  assign CAN_FIRE_core_dmem_post_fabric_w_wready = 1'd1 ;
  assign WILL_FIRE_core_dmem_post_fabric_w_wready = 1'd1 ;

  // action method core_dmem_post_fabric_b_bflit
  assign CAN_FIRE_core_dmem_post_fabric_b_bflit = 1'd1 ;
  assign WILL_FIRE_core_dmem_post_fabric_b_bflit = 1'd1 ;

  // value method core_dmem_post_fabric_b_bready
  assign core_dmem_post_fabric_bready =
	     s_otherPeripheralsPortShim_bff$FULL_N ;

  // value method core_dmem_post_fabric_ar_arid
  assign core_dmem_post_fabric_arid =
	     s_otherPeripheralsPortShim_arff$D_OUT[99:93] ;

  // value method core_dmem_post_fabric_ar_araddr
  assign core_dmem_post_fabric_araddr =
	     s_otherPeripheralsPortShim_arff$D_OUT[92:29] ;

  // value method core_dmem_post_fabric_ar_arlen
  assign core_dmem_post_fabric_arlen =
	     s_otherPeripheralsPortShim_arff$D_OUT[28:21] ;

  // value method core_dmem_post_fabric_ar_arsize
  assign core_dmem_post_fabric_arsize =
	     s_otherPeripheralsPortShim_arff$D_OUT[20:18] ;

  // value method core_dmem_post_fabric_ar_arburst
  assign core_dmem_post_fabric_arburst =
	     s_otherPeripheralsPortShim_arff$D_OUT[17:16] ;

  // value method core_dmem_post_fabric_ar_arlock
  assign core_dmem_post_fabric_arlock =
	     s_otherPeripheralsPortShim_arff$D_OUT[15] ;

  // value method core_dmem_post_fabric_ar_arcache
  assign core_dmem_post_fabric_arcache =
	     s_otherPeripheralsPortShim_arff$D_OUT[14:11] ;

  // value method core_dmem_post_fabric_ar_arprot
  assign core_dmem_post_fabric_arprot =
	     s_otherPeripheralsPortShim_arff$D_OUT[10:8] ;

  // value method core_dmem_post_fabric_ar_arqos
  assign core_dmem_post_fabric_arqos =
	     s_otherPeripheralsPortShim_arff$D_OUT[7:4] ;

  // value method core_dmem_post_fabric_ar_arregion
  assign core_dmem_post_fabric_arregion =
	     s_otherPeripheralsPortShim_arff$D_OUT[3:0] ;

  // value method core_dmem_post_fabric_ar_arvalid
  assign core_dmem_post_fabric_arvalid =
	     s_otherPeripheralsPortShim_arff$EMPTY_N ;

  // action method core_dmem_post_fabric_ar_arready
  assign CAN_FIRE_core_dmem_post_fabric_ar_arready = 1'd1 ;
  assign WILL_FIRE_core_dmem_post_fabric_ar_arready = 1'd1 ;

  // action method core_dmem_post_fabric_r_rflit
  assign CAN_FIRE_core_dmem_post_fabric_r_rflit = 1'd1 ;
  assign WILL_FIRE_core_dmem_post_fabric_r_rflit = 1'd1 ;

  // value method core_dmem_post_fabric_r_rready
  assign core_dmem_post_fabric_rready =
	     s_otherPeripheralsPortShim_rff$FULL_N ;

  // value method cpu_reset_completed
  assign cpu_reset_completed = rg_cpu_reset_completed ;

  // submodule boot_rom
  mkBoot_ROM boot_rom(.CLK(CLK),
		      .RST_N(RST_N),
		      .set_addr_map_addr_base(boot_rom$set_addr_map_addr_base),
		      .set_addr_map_addr_lim(boot_rom$set_addr_map_addr_lim),
		      .slave_ar_put_val(boot_rom$slave_ar_put_val),
		      .slave_aw_put_val(boot_rom$slave_aw_put_val),
		      .slave_w_put_val(boot_rom$slave_w_put_val),
		      .EN_set_addr_map(boot_rom$EN_set_addr_map),
		      .EN_slave_aw_put(boot_rom$EN_slave_aw_put),
		      .EN_slave_w_put(boot_rom$EN_slave_w_put),
		      .EN_slave_b_drop(boot_rom$EN_slave_b_drop),
		      .EN_slave_ar_put(boot_rom$EN_slave_ar_put),
		      .EN_slave_r_drop(boot_rom$EN_slave_r_drop),
		      .RDY_set_addr_map(),
		      .slave_aw_canPut(boot_rom$slave_aw_canPut),
		      .RDY_slave_aw_put(boot_rom$RDY_slave_aw_put),
		      .slave_w_canPut(boot_rom$slave_w_canPut),
		      .RDY_slave_w_put(boot_rom$RDY_slave_w_put),
		      .slave_b_canPeek(boot_rom$slave_b_canPeek),
		      .slave_b_peek(boot_rom$slave_b_peek),
		      .RDY_slave_b_peek(boot_rom$RDY_slave_b_peek),
		      .RDY_slave_b_drop(boot_rom$RDY_slave_b_drop),
		      .slave_ar_canPut(boot_rom$slave_ar_canPut),
		      .RDY_slave_ar_put(boot_rom$RDY_slave_ar_put),
		      .slave_r_canPeek(boot_rom$slave_r_canPeek),
		      .slave_r_peek(boot_rom$slave_r_peek),
		      .RDY_slave_r_peek(boot_rom$RDY_slave_r_peek),
		      .RDY_slave_r_drop(boot_rom$RDY_slave_r_drop));

  // submodule boot_rom_axi4_deburster_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) boot_rom_axi4_deburster_countWriteRspFF(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(boot_rom_axi4_deburster_countWriteRspFF$D_IN),
								      .ENQ(boot_rom_axi4_deburster_countWriteRspFF$ENQ),
								      .DEQ(boot_rom_axi4_deburster_countWriteRspFF$DEQ),
								      .CLR(boot_rom_axi4_deburster_countWriteRspFF$CLR),
								      .D_OUT(boot_rom_axi4_deburster_countWriteRspFF$D_OUT),
								      .FULL_N(boot_rom_axi4_deburster_countWriteRspFF$FULL_N),
								      .EMPTY_N(boot_rom_axi4_deburster_countWriteRspFF$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) boot_rom_axi4_deburster_inShim_arff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_inShim_arff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_inShim_arff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_inShim_arff$DEQ),
							      .CLR(boot_rom_axi4_deburster_inShim_arff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_inShim_arff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_inShim_arff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_inShim_arff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) boot_rom_axi4_deburster_inShim_awff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_inShim_awff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_inShim_awff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_inShim_awff$DEQ),
							      .CLR(boot_rom_axi4_deburster_inShim_awff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_inShim_awff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_inShim_awff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_inShim_awff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(1'd1)) boot_rom_axi4_deburster_inShim_bff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(boot_rom_axi4_deburster_inShim_bff$D_IN),
							     .ENQ(boot_rom_axi4_deburster_inShim_bff$ENQ),
							     .DEQ(boot_rom_axi4_deburster_inShim_bff$DEQ),
							     .CLR(boot_rom_axi4_deburster_inShim_bff$CLR),
							     .D_OUT(boot_rom_axi4_deburster_inShim_bff$D_OUT),
							     .FULL_N(boot_rom_axi4_deburster_inShim_bff$FULL_N),
							     .EMPTY_N(boot_rom_axi4_deburster_inShim_bff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) boot_rom_axi4_deburster_inShim_rff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(boot_rom_axi4_deburster_inShim_rff$D_IN),
							     .ENQ(boot_rom_axi4_deburster_inShim_rff$ENQ),
							     .DEQ(boot_rom_axi4_deburster_inShim_rff$DEQ),
							     .CLR(boot_rom_axi4_deburster_inShim_rff$CLR),
							     .D_OUT(boot_rom_axi4_deburster_inShim_rff$D_OUT),
							     .FULL_N(boot_rom_axi4_deburster_inShim_rff$FULL_N),
							     .EMPTY_N(boot_rom_axi4_deburster_inShim_rff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) boot_rom_axi4_deburster_inShim_wff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(boot_rom_axi4_deburster_inShim_wff$D_IN),
							     .ENQ(boot_rom_axi4_deburster_inShim_wff$ENQ),
							     .DEQ(boot_rom_axi4_deburster_inShim_wff$DEQ),
							     .CLR(boot_rom_axi4_deburster_inShim_wff$CLR),
							     .D_OUT(boot_rom_axi4_deburster_inShim_wff$D_OUT),
							     .FULL_N(boot_rom_axi4_deburster_inShim_wff$FULL_N),
							     .EMPTY_N(boot_rom_axi4_deburster_inShim_wff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) boot_rom_axi4_deburster_lastReadRspFF(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(boot_rom_axi4_deburster_lastReadRspFF$D_IN),
								    .ENQ(boot_rom_axi4_deburster_lastReadRspFF$ENQ),
								    .DEQ(boot_rom_axi4_deburster_lastReadRspFF$DEQ),
								    .CLR(boot_rom_axi4_deburster_lastReadRspFF$CLR),
								    .D_OUT(boot_rom_axi4_deburster_lastReadRspFF$D_OUT),
								    .FULL_N(boot_rom_axi4_deburster_lastReadRspFF$FULL_N),
								    .EMPTY_N(boot_rom_axi4_deburster_lastReadRspFF$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) boot_rom_axi4_deburster_outShim_arff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_outShim_arff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_outShim_arff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_outShim_arff$DEQ),
							       .CLR(boot_rom_axi4_deburster_outShim_arff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_outShim_arff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_outShim_arff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_outShim_arff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) boot_rom_axi4_deburster_outShim_awff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_outShim_awff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_outShim_awff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_outShim_awff$DEQ),
							       .CLR(boot_rom_axi4_deburster_outShim_awff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_outShim_awff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_outShim_awff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_outShim_awff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(1'd1)) boot_rom_axi4_deburster_outShim_bff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_outShim_bff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_outShim_bff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_outShim_bff$DEQ),
							      .CLR(boot_rom_axi4_deburster_outShim_bff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_outShim_bff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_outShim_bff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_outShim_bff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) boot_rom_axi4_deburster_outShim_rff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_outShim_rff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_outShim_rff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_outShim_rff$DEQ),
							      .CLR(boot_rom_axi4_deburster_outShim_rff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_outShim_rff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_outShim_rff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_outShim_rff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) boot_rom_axi4_deburster_outShim_wff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_outShim_wff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_outShim_wff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_outShim_wff$DEQ),
							      .CLR(boot_rom_axi4_deburster_outShim_wff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_outShim_wff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_outShim_wff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_outShim_wff$EMPTY_N));

  // submodule bus_merged_0_awff
  FIFO2 #(.width(32'd99), .guarded(1'd1)) bus_merged_0_awff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(bus_merged_0_awff$D_IN),
							    .ENQ(bus_merged_0_awff$ENQ),
							    .DEQ(bus_merged_0_awff$DEQ),
							    .CLR(bus_merged_0_awff$CLR),
							    .D_OUT(bus_merged_0_awff$D_OUT),
							    .FULL_N(bus_merged_0_awff$FULL_N),
							    .EMPTY_N(bus_merged_0_awff$EMPTY_N));

  // submodule bus_merged_0_wff
  FIFO2 #(.width(32'd73), .guarded(1'd1)) bus_merged_0_wff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(bus_merged_0_wff$D_IN),
							   .ENQ(bus_merged_0_wff$ENQ),
							   .DEQ(bus_merged_0_wff$DEQ),
							   .CLR(bus_merged_0_wff$CLR),
							   .D_OUT(bus_merged_0_wff$D_OUT),
							   .FULL_N(bus_merged_0_wff$FULL_N),
							   .EMPTY_N(bus_merged_0_wff$EMPTY_N));

  // submodule bus_merged_1_awff
  FIFO2 #(.width(32'd99), .guarded(1'd1)) bus_merged_1_awff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(bus_merged_1_awff$D_IN),
							    .ENQ(bus_merged_1_awff$ENQ),
							    .DEQ(bus_merged_1_awff$DEQ),
							    .CLR(bus_merged_1_awff$CLR),
							    .D_OUT(bus_merged_1_awff$D_OUT),
							    .FULL_N(bus_merged_1_awff$FULL_N),
							    .EMPTY_N(bus_merged_1_awff$EMPTY_N));

  // submodule bus_merged_1_wff
  FIFO2 #(.width(32'd73), .guarded(1'd1)) bus_merged_1_wff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(bus_merged_1_wff$D_IN),
							   .ENQ(bus_merged_1_wff$ENQ),
							   .DEQ(bus_merged_1_wff$DEQ),
							   .CLR(bus_merged_1_wff$CLR),
							   .D_OUT(bus_merged_1_wff$D_OUT),
							   .FULL_N(bus_merged_1_wff$FULL_N),
							   .EMPTY_N(bus_merged_1_wff$EMPTY_N));

  // submodule bus_noRouteSlv_rspFF
  FIFO2 #(.width(32'd9), .guarded(1'd1)) bus_noRouteSlv_rspFF(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(bus_noRouteSlv_rspFF$D_IN),
							      .ENQ(bus_noRouteSlv_rspFF$ENQ),
							      .DEQ(bus_noRouteSlv_rspFF$DEQ),
							      .CLR(bus_noRouteSlv_rspFF$CLR),
							      .D_OUT(bus_noRouteSlv_rspFF$D_OUT),
							      .FULL_N(bus_noRouteSlv_rspFF$FULL_N),
							      .EMPTY_N(bus_noRouteSlv_rspFF$EMPTY_N));

  // submodule core
  mkCore core(.CLK(CLK),
	      .RST_N(RST_N),
	      .cms_ifc_halt_cpu_state(core$cms_ifc_halt_cpu_state),
	      .core_external_interrupt_sources_0_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_10_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_11_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_12_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_13_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_14_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_15_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_1_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_2_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_3_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_4_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_5_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_6_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_7_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_8_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_9_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear),
	      .core_mem_master_b_put_val(core$core_mem_master_b_put_val),
	      .core_mem_master_r_put_val(core$core_mem_master_r_put_val),
	      .cpu_imem_master_b_put_val(core$cpu_imem_master_b_put_val),
	      .cpu_imem_master_r_put_val(core$cpu_imem_master_r_put_val),
	      .cpu_reset_server_request_put(core$cpu_reset_server_request_put),
	      .dma_server_ar_put_val(core$dma_server_ar_put_val),
	      .dma_server_aw_put_val(core$dma_server_aw_put_val),
	      .dma_server_w_put_val(core$dma_server_w_put_val),
	      .nmi_req_set_not_clear(core$nmi_req_set_not_clear),
	      .set_verbosity_logdelay(core$set_verbosity_logdelay),
	      .set_verbosity_verbosity(core$set_verbosity_verbosity),
	      .set_watch_tohost_tohost_addr(core$set_watch_tohost_tohost_addr),
	      .set_watch_tohost_watch_tohost(core$set_watch_tohost_watch_tohost),
	      .EN_cpu_reset_server_request_put(core$EN_cpu_reset_server_request_put),
	      .EN_cpu_reset_server_response_get(core$EN_cpu_reset_server_response_get),
	      .EN_cpu_imem_master_aw_drop(core$EN_cpu_imem_master_aw_drop),
	      .EN_cpu_imem_master_w_drop(core$EN_cpu_imem_master_w_drop),
	      .EN_cpu_imem_master_b_put(core$EN_cpu_imem_master_b_put),
	      .EN_cpu_imem_master_ar_drop(core$EN_cpu_imem_master_ar_drop),
	      .EN_cpu_imem_master_r_put(core$EN_cpu_imem_master_r_put),
	      .EN_core_mem_master_aw_drop(core$EN_core_mem_master_aw_drop),
	      .EN_core_mem_master_w_drop(core$EN_core_mem_master_w_drop),
	      .EN_core_mem_master_b_put(core$EN_core_mem_master_b_put),
	      .EN_core_mem_master_ar_drop(core$EN_core_mem_master_ar_drop),
	      .EN_core_mem_master_r_put(core$EN_core_mem_master_r_put),
	      .EN_dma_server_aw_put(core$EN_dma_server_aw_put),
	      .EN_dma_server_w_put(core$EN_dma_server_w_put),
	      .EN_dma_server_b_drop(core$EN_dma_server_b_drop),
	      .EN_dma_server_ar_put(core$EN_dma_server_ar_put),
	      .EN_dma_server_r_drop(core$EN_dma_server_r_drop),
	      .EN_set_verbosity(core$EN_set_verbosity),
	      .EN_set_watch_tohost(core$EN_set_watch_tohost),
	      .EN_ma_ddr4_ready(core$EN_ma_ddr4_ready),
	      .EN_cms_ifc_halt_cpu(core$EN_cms_ifc_halt_cpu),
	      .RDY_cpu_reset_server_request_put(core$RDY_cpu_reset_server_request_put),
	      .cpu_reset_server_response_get(),
	      .RDY_cpu_reset_server_response_get(core$RDY_cpu_reset_server_response_get),
	      .cpu_imem_master_aw_canPeek(core$cpu_imem_master_aw_canPeek),
	      .cpu_imem_master_aw_peek(core$cpu_imem_master_aw_peek),
	      .RDY_cpu_imem_master_aw_peek(core$RDY_cpu_imem_master_aw_peek),
	      .RDY_cpu_imem_master_aw_drop(core$RDY_cpu_imem_master_aw_drop),
	      .cpu_imem_master_w_canPeek(core$cpu_imem_master_w_canPeek),
	      .cpu_imem_master_w_peek(core$cpu_imem_master_w_peek),
	      .RDY_cpu_imem_master_w_peek(core$RDY_cpu_imem_master_w_peek),
	      .RDY_cpu_imem_master_w_drop(core$RDY_cpu_imem_master_w_drop),
	      .cpu_imem_master_b_canPut(core$cpu_imem_master_b_canPut),
	      .RDY_cpu_imem_master_b_put(core$RDY_cpu_imem_master_b_put),
	      .cpu_imem_master_ar_canPeek(core$cpu_imem_master_ar_canPeek),
	      .cpu_imem_master_ar_peek(core$cpu_imem_master_ar_peek),
	      .RDY_cpu_imem_master_ar_peek(core$RDY_cpu_imem_master_ar_peek),
	      .RDY_cpu_imem_master_ar_drop(core$RDY_cpu_imem_master_ar_drop),
	      .cpu_imem_master_r_canPut(core$cpu_imem_master_r_canPut),
	      .RDY_cpu_imem_master_r_put(core$RDY_cpu_imem_master_r_put),
	      .core_mem_master_aw_canPeek(core$core_mem_master_aw_canPeek),
	      .core_mem_master_aw_peek(core$core_mem_master_aw_peek),
	      .RDY_core_mem_master_aw_peek(core$RDY_core_mem_master_aw_peek),
	      .RDY_core_mem_master_aw_drop(core$RDY_core_mem_master_aw_drop),
	      .core_mem_master_w_canPeek(core$core_mem_master_w_canPeek),
	      .core_mem_master_w_peek(core$core_mem_master_w_peek),
	      .RDY_core_mem_master_w_peek(core$RDY_core_mem_master_w_peek),
	      .RDY_core_mem_master_w_drop(core$RDY_core_mem_master_w_drop),
	      .core_mem_master_b_canPut(core$core_mem_master_b_canPut),
	      .RDY_core_mem_master_b_put(core$RDY_core_mem_master_b_put),
	      .core_mem_master_ar_canPeek(core$core_mem_master_ar_canPeek),
	      .core_mem_master_ar_peek(core$core_mem_master_ar_peek),
	      .RDY_core_mem_master_ar_peek(core$RDY_core_mem_master_ar_peek),
	      .RDY_core_mem_master_ar_drop(core$RDY_core_mem_master_ar_drop),
	      .core_mem_master_r_canPut(core$core_mem_master_r_canPut),
	      .RDY_core_mem_master_r_put(core$RDY_core_mem_master_r_put),
	      .dma_server_aw_canPut(),
	      .RDY_dma_server_aw_put(),
	      .dma_server_w_canPut(),
	      .RDY_dma_server_w_put(),
	      .dma_server_b_canPeek(core$dma_server_b_canPeek),
	      .dma_server_b_peek(),
	      .RDY_dma_server_b_peek(core$RDY_dma_server_b_peek),
	      .RDY_dma_server_b_drop(core$RDY_dma_server_b_drop),
	      .dma_server_ar_canPut(),
	      .RDY_dma_server_ar_put(),
	      .dma_server_r_canPeek(core$dma_server_r_canPeek),
	      .dma_server_r_peek(),
	      .RDY_dma_server_r_peek(core$RDY_dma_server_r_peek),
	      .RDY_dma_server_r_drop(core$RDY_dma_server_r_drop),
	      .RDY_set_verbosity(),
	      .RDY_set_watch_tohost(),
	      .mv_tohost_value(core$mv_tohost_value),
	      .RDY_mv_tohost_value(),
	      .RDY_ma_ddr4_ready(),
	      .mv_status(core$mv_status),
	      .cms(),
	      .cms_ifc_pc(core$cms_ifc_pc),
	      .cms_ifc_instr(core$cms_ifc_instr),
	      .cms_ifc_performance_events(core$cms_ifc_performance_events),
	      .cms_ifc_gp_write_reg_name(core$cms_ifc_gp_write_reg_name),
	      .cms_ifc_gp_write_reg(core$cms_ifc_gp_write_reg),
	      .cms_ifc_gp_write_valid(core$cms_ifc_gp_write_valid));

  // submodule mem0_controller
  mkMem_Controller mem0_controller(.CLK(CLK),
				   .RST_N(RST_N),
				   .set_addr_map_addr_base(mem0_controller$set_addr_map_addr_base),
				   .set_addr_map_addr_lim(mem0_controller$set_addr_map_addr_lim),
				   .set_watch_tohost_tohost_addr(mem0_controller$set_watch_tohost_tohost_addr),
				   .set_watch_tohost_watch_tohost(mem0_controller$set_watch_tohost_watch_tohost),
				   .slave_ar_put_val(mem0_controller$slave_ar_put_val),
				   .slave_aw_put_val(mem0_controller$slave_aw_put_val),
				   .slave_w_put_val(mem0_controller$slave_w_put_val),
				   .to_raw_mem_response_put(mem0_controller$to_raw_mem_response_put),
				   .EN_server_reset_request_put(mem0_controller$EN_server_reset_request_put),
				   .EN_server_reset_response_get(mem0_controller$EN_server_reset_response_get),
				   .EN_set_addr_map(mem0_controller$EN_set_addr_map),
				   .EN_slave_aw_put(mem0_controller$EN_slave_aw_put),
				   .EN_slave_w_put(mem0_controller$EN_slave_w_put),
				   .EN_slave_b_drop(mem0_controller$EN_slave_b_drop),
				   .EN_slave_ar_put(mem0_controller$EN_slave_ar_put),
				   .EN_slave_r_drop(mem0_controller$EN_slave_r_drop),
				   .EN_to_raw_mem_request_get(mem0_controller$EN_to_raw_mem_request_get),
				   .EN_to_raw_mem_response_put(mem0_controller$EN_to_raw_mem_response_put),
				   .EN_set_watch_tohost(mem0_controller$EN_set_watch_tohost),
				   .RDY_server_reset_request_put(mem0_controller$RDY_server_reset_request_put),
				   .RDY_server_reset_response_get(mem0_controller$RDY_server_reset_response_get),
				   .RDY_set_addr_map(mem0_controller$RDY_set_addr_map),
				   .slave_aw_canPut(mem0_controller$slave_aw_canPut),
				   .RDY_slave_aw_put(mem0_controller$RDY_slave_aw_put),
				   .slave_w_canPut(mem0_controller$slave_w_canPut),
				   .RDY_slave_w_put(mem0_controller$RDY_slave_w_put),
				   .slave_b_canPeek(mem0_controller$slave_b_canPeek),
				   .slave_b_peek(mem0_controller$slave_b_peek),
				   .RDY_slave_b_peek(mem0_controller$RDY_slave_b_peek),
				   .RDY_slave_b_drop(mem0_controller$RDY_slave_b_drop),
				   .slave_ar_canPut(mem0_controller$slave_ar_canPut),
				   .RDY_slave_ar_put(mem0_controller$RDY_slave_ar_put),
				   .slave_r_canPeek(mem0_controller$slave_r_canPeek),
				   .slave_r_peek(mem0_controller$slave_r_peek),
				   .RDY_slave_r_peek(mem0_controller$RDY_slave_r_peek),
				   .RDY_slave_r_drop(mem0_controller$RDY_slave_r_drop),
				   .to_raw_mem_request_get(mem0_controller$to_raw_mem_request_get),
				   .RDY_to_raw_mem_request_get(mem0_controller$RDY_to_raw_mem_request_get),
				   .RDY_to_raw_mem_response_put(mem0_controller$RDY_to_raw_mem_response_put),
				   .status(),
				   .RDY_set_watch_tohost());

  // submodule mem0_controller_axi4_deburster_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) mem0_controller_axi4_deburster_countWriteRspFF(.RST(RST_N),
									     .CLK(CLK),
									     .D_IN(mem0_controller_axi4_deburster_countWriteRspFF$D_IN),
									     .ENQ(mem0_controller_axi4_deburster_countWriteRspFF$ENQ),
									     .DEQ(mem0_controller_axi4_deburster_countWriteRspFF$DEQ),
									     .CLR(mem0_controller_axi4_deburster_countWriteRspFF$CLR),
									     .D_OUT(mem0_controller_axi4_deburster_countWriteRspFF$D_OUT),
									     .FULL_N(mem0_controller_axi4_deburster_countWriteRspFF$FULL_N),
									     .EMPTY_N(mem0_controller_axi4_deburster_countWriteRspFF$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_inShim_arff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_inShim_arff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_inShim_arff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_inShim_arff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_inShim_arff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_inShim_arff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_inShim_arff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_inShim_arff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_inShim_awff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_inShim_awff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_inShim_awff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_inShim_awff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_inShim_awff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_inShim_awff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_inShim_awff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_inShim_awff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_inShim_bff(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(mem0_controller_axi4_deburster_inShim_bff$D_IN),
								    .ENQ(mem0_controller_axi4_deburster_inShim_bff$ENQ),
								    .DEQ(mem0_controller_axi4_deburster_inShim_bff$DEQ),
								    .CLR(mem0_controller_axi4_deburster_inShim_bff$CLR),
								    .D_OUT(mem0_controller_axi4_deburster_inShim_bff$D_OUT),
								    .FULL_N(mem0_controller_axi4_deburster_inShim_bff$FULL_N),
								    .EMPTY_N(mem0_controller_axi4_deburster_inShim_bff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_inShim_rff(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(mem0_controller_axi4_deburster_inShim_rff$D_IN),
								    .ENQ(mem0_controller_axi4_deburster_inShim_rff$ENQ),
								    .DEQ(mem0_controller_axi4_deburster_inShim_rff$DEQ),
								    .CLR(mem0_controller_axi4_deburster_inShim_rff$CLR),
								    .D_OUT(mem0_controller_axi4_deburster_inShim_rff$D_OUT),
								    .FULL_N(mem0_controller_axi4_deburster_inShim_rff$FULL_N),
								    .EMPTY_N(mem0_controller_axi4_deburster_inShim_rff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_inShim_wff(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(mem0_controller_axi4_deburster_inShim_wff$D_IN),
								    .ENQ(mem0_controller_axi4_deburster_inShim_wff$ENQ),
								    .DEQ(mem0_controller_axi4_deburster_inShim_wff$DEQ),
								    .CLR(mem0_controller_axi4_deburster_inShim_wff$CLR),
								    .D_OUT(mem0_controller_axi4_deburster_inShim_wff$D_OUT),
								    .FULL_N(mem0_controller_axi4_deburster_inShim_wff$FULL_N),
								    .EMPTY_N(mem0_controller_axi4_deburster_inShim_wff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) mem0_controller_axi4_deburster_lastReadRspFF(.RST(RST_N),
									   .CLK(CLK),
									   .D_IN(mem0_controller_axi4_deburster_lastReadRspFF$D_IN),
									   .ENQ(mem0_controller_axi4_deburster_lastReadRspFF$ENQ),
									   .DEQ(mem0_controller_axi4_deburster_lastReadRspFF$DEQ),
									   .CLR(mem0_controller_axi4_deburster_lastReadRspFF$CLR),
									   .D_OUT(mem0_controller_axi4_deburster_lastReadRspFF$D_OUT),
									   .FULL_N(mem0_controller_axi4_deburster_lastReadRspFF$FULL_N),
									   .EMPTY_N(mem0_controller_axi4_deburster_lastReadRspFF$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_outShim_arff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_outShim_arff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_outShim_arff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_outShim_arff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_outShim_arff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_outShim_arff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_outShim_arff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_outShim_arff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_outShim_awff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_outShim_awff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_outShim_awff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_outShim_awff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_outShim_awff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_outShim_awff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_outShim_awff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_outShim_awff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_outShim_bff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_outShim_bff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_outShim_bff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_outShim_bff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_outShim_bff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_outShim_bff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_outShim_bff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_outShim_bff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_outShim_rff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_outShim_rff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_outShim_rff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_outShim_rff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_outShim_rff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_outShim_rff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_outShim_rff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_outShim_rff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_outShim_wff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_outShim_wff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_outShim_wff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_outShim_wff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_outShim_wff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_outShim_wff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_outShim_wff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_outShim_wff$EMPTY_N));

  // submodule s_otherPeripheralsPortShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) s_otherPeripheralsPortShim_arff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(s_otherPeripheralsPortShim_arff$D_IN),
							  .ENQ(s_otherPeripheralsPortShim_arff$ENQ),
							  .DEQ(s_otherPeripheralsPortShim_arff$DEQ),
							  .CLR(s_otherPeripheralsPortShim_arff$CLR),
							  .D_OUT(s_otherPeripheralsPortShim_arff$D_OUT),
							  .FULL_N(s_otherPeripheralsPortShim_arff$FULL_N),
							  .EMPTY_N(s_otherPeripheralsPortShim_arff$EMPTY_N));

  // submodule s_otherPeripheralsPortShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) s_otherPeripheralsPortShim_awff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(s_otherPeripheralsPortShim_awff$D_IN),
							  .ENQ(s_otherPeripheralsPortShim_awff$ENQ),
							  .DEQ(s_otherPeripheralsPortShim_awff$DEQ),
							  .CLR(s_otherPeripheralsPortShim_awff$CLR),
							  .D_OUT(s_otherPeripheralsPortShim_awff$D_OUT),
							  .FULL_N(s_otherPeripheralsPortShim_awff$FULL_N),
							  .EMPTY_N(s_otherPeripheralsPortShim_awff$EMPTY_N));

  // submodule s_otherPeripheralsPortShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(1'd1)) s_otherPeripheralsPortShim_bff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(s_otherPeripheralsPortShim_bff$D_IN),
							 .ENQ(s_otherPeripheralsPortShim_bff$ENQ),
							 .DEQ(s_otherPeripheralsPortShim_bff$DEQ),
							 .CLR(s_otherPeripheralsPortShim_bff$CLR),
							 .D_OUT(s_otherPeripheralsPortShim_bff$D_OUT),
							 .FULL_N(s_otherPeripheralsPortShim_bff$FULL_N),
							 .EMPTY_N(s_otherPeripheralsPortShim_bff$EMPTY_N));

  // submodule s_otherPeripheralsPortShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) s_otherPeripheralsPortShim_rff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(s_otherPeripheralsPortShim_rff$D_IN),
							 .ENQ(s_otherPeripheralsPortShim_rff$ENQ),
							 .DEQ(s_otherPeripheralsPortShim_rff$DEQ),
							 .CLR(s_otherPeripheralsPortShim_rff$CLR),
							 .D_OUT(s_otherPeripheralsPortShim_rff$D_OUT),
							 .FULL_N(s_otherPeripheralsPortShim_rff$FULL_N),
							 .EMPTY_N(s_otherPeripheralsPortShim_rff$EMPTY_N));

  // submodule s_otherPeripheralsPortShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) s_otherPeripheralsPortShim_wff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(s_otherPeripheralsPortShim_wff$D_IN),
							 .ENQ(s_otherPeripheralsPortShim_wff$ENQ),
							 .DEQ(s_otherPeripheralsPortShim_wff$DEQ),
							 .CLR(s_otherPeripheralsPortShim_wff$CLR),
							 .D_OUT(s_otherPeripheralsPortShim_wff$D_OUT),
							 .FULL_N(s_otherPeripheralsPortShim_wff$FULL_N),
							 .EMPTY_N(s_otherPeripheralsPortShim_wff$EMPTY_N));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_range(),
		    .m_plic_addr_range(),
		    .m_uart0_addr_range(soc_map$m_uart0_addr_range),
		    .m_other_peripherals_addr_range(soc_map$m_other_peripherals_addr_range),
		    .m_boot_rom_addr_range(soc_map$m_boot_rom_addr_range),
		    .m_mem0_controller_addr_range(soc_map$m_mem0_controller_addr_range),
		    .m_tcm_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value(),
		    .m_pcc_reset_value(),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(),
		    .m_mepcc_reset_value());

  // submodule uart0
  mkUART uart0(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_from_console_put(uart0$put_from_console_put),
	       .set_addr_map_addr_base(uart0$set_addr_map_addr_base),
	       .set_addr_map_addr_lim(uart0$set_addr_map_addr_lim),
	       .slave_ar_put_val(uart0$slave_ar_put_val),
	       .slave_aw_put_val(uart0$slave_aw_put_val),
	       .slave_w_put_val(uart0$slave_w_put_val),
	       .EN_server_reset_request_put(uart0$EN_server_reset_request_put),
	       .EN_server_reset_response_get(uart0$EN_server_reset_response_get),
	       .EN_set_addr_map(uart0$EN_set_addr_map),
	       .EN_slave_aw_put(uart0$EN_slave_aw_put),
	       .EN_slave_w_put(uart0$EN_slave_w_put),
	       .EN_slave_b_drop(uart0$EN_slave_b_drop),
	       .EN_slave_ar_put(uart0$EN_slave_ar_put),
	       .EN_slave_r_drop(uart0$EN_slave_r_drop),
	       .EN_get_to_console_get(uart0$EN_get_to_console_get),
	       .EN_put_from_console_put(uart0$EN_put_from_console_put),
	       .RDY_server_reset_request_put(uart0$RDY_server_reset_request_put),
	       .RDY_server_reset_response_get(uart0$RDY_server_reset_response_get),
	       .RDY_set_addr_map(),
	       .slave_aw_canPut(uart0$slave_aw_canPut),
	       .RDY_slave_aw_put(uart0$RDY_slave_aw_put),
	       .slave_w_canPut(uart0$slave_w_canPut),
	       .RDY_slave_w_put(uart0$RDY_slave_w_put),
	       .slave_b_canPeek(uart0$slave_b_canPeek),
	       .slave_b_peek(uart0$slave_b_peek),
	       .RDY_slave_b_peek(uart0$RDY_slave_b_peek),
	       .RDY_slave_b_drop(uart0$RDY_slave_b_drop),
	       .slave_ar_canPut(uart0$slave_ar_canPut),
	       .RDY_slave_ar_put(uart0$RDY_slave_ar_put),
	       .slave_r_canPeek(uart0$slave_r_canPeek),
	       .slave_r_peek(uart0$slave_r_peek),
	       .RDY_slave_r_peek(uart0$RDY_slave_r_peek),
	       .RDY_slave_r_drop(uart0$RDY_slave_r_drop),
	       .get_to_console_get(uart0$get_to_console_get),
	       .RDY_get_to_console_get(uart0$RDY_get_to_console_get),
	       .RDY_put_from_console_put(uart0$RDY_put_from_console_put),
	       .intr(uart0$intr));

  // rule RL_rl_connect_external_interrupt_requests
  assign CAN_FIRE_RL_rl_connect_external_interrupt_requests = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_external_interrupt_requests = 1'd1 ;

  // rule RL_core_mem_master_sig_awSig_src_setCanPeek
  assign CAN_FIRE_RL_core_mem_master_sig_awSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_awSig_src_setCanPeek = 1'd1 ;

  // rule RL_core_mem_master_sig_awSig_src_setPeek
  assign CAN_FIRE_RL_core_mem_master_sig_awSig_src_setPeek =
	     core$RDY_core_mem_master_aw_peek ;
  assign WILL_FIRE_RL_core_mem_master_sig_awSig_src_setPeek =
	     core$RDY_core_mem_master_aw_peek ;

  // rule RL_core_mem_master_sig_awSig_src_warnDoDrop
  assign CAN_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop =
	     core_mem_master_sig_awSig_src_dropWire$whas &&
	     !core$core_mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop =
	     CAN_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop ;

  // rule RL_core_mem_master_sig_wSig_src_setCanPeek
  assign CAN_FIRE_RL_core_mem_master_sig_wSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_wSig_src_setCanPeek = 1'd1 ;

  // rule RL_core_mem_master_sig_wSig_src_setPeek
  assign CAN_FIRE_RL_core_mem_master_sig_wSig_src_setPeek =
	     core$RDY_core_mem_master_w_peek ;
  assign WILL_FIRE_RL_core_mem_master_sig_wSig_src_setPeek =
	     core$RDY_core_mem_master_w_peek ;

  // rule RL_core_mem_master_sig_wSig_src_warnDoDrop
  assign CAN_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop =
	     core_mem_master_sig_wSig_src_dropWire$whas &&
	     !core$core_mem_master_w_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop =
	     CAN_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop ;

  // rule RL_core_mem_master_sig_bSig_snk_setCanPut
  assign CAN_FIRE_RL_core_mem_master_sig_bSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_bSig_snk_setCanPut = 1'd1 ;

  // rule RL_core_mem_master_sig_bSig_snk_warnDoPut
  assign CAN_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut =
	     core_mem_master_sig_bSig_snk_putWire$whas &&
	     !core$core_mem_master_b_canPut ;
  assign WILL_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut =
	     CAN_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut ;

  // rule RL_core_mem_master_sig_arSig_src_setCanPeek
  assign CAN_FIRE_RL_core_mem_master_sig_arSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_arSig_src_setCanPeek = 1'd1 ;

  // rule RL_core_mem_master_sig_arSig_src_setPeek
  assign CAN_FIRE_RL_core_mem_master_sig_arSig_src_setPeek =
	     core$RDY_core_mem_master_ar_peek ;
  assign WILL_FIRE_RL_core_mem_master_sig_arSig_src_setPeek =
	     core$RDY_core_mem_master_ar_peek ;

  // rule RL_core_mem_master_sig_arSig_src_warnDoDrop
  assign CAN_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop =
	     core_mem_master_sig_arSig_src_dropWire$whas &&
	     !core$core_mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop =
	     CAN_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop ;

  // rule RL_core_mem_master_sig_rSig_snk_setCanPut
  assign CAN_FIRE_RL_core_mem_master_sig_rSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_rSig_snk_setCanPut = 1'd1 ;

  // rule RL_core_mem_master_sig_rSig_snk_warnDoPut
  assign CAN_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut =
	     core_mem_master_sig_rSig_snk_putWire$whas &&
	     !core$core_mem_master_r_canPut ;
  assign WILL_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut =
	     CAN_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut ;

  // rule RL_s_otherPeripheralsPort_master_sig_awSig_src_setCanPeek
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_setCanPeek =
	     1'd1 ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_setCanPeek =
	     1'd1 ;

  // rule RL_s_otherPeripheralsPort_master_sig_awSig_src_setPeek
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_setPeek =
	     s_otherPeripheralsPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_setPeek =
	     s_otherPeripheralsPortShim_awff$EMPTY_N ;

  // rule RL_s_otherPeripheralsPort_master_sig_awSig_src_warnDoDrop
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_warnDoDrop =
	     s_otherPeripheralsPort_master_sig_awSig_src_dropWire$whas &&
	     !s_otherPeripheralsPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_warnDoDrop =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_warnDoDrop ;

  // rule RL_s_otherPeripheralsPort_master_sig_wSig_src_setCanPeek
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_setCanPeek =
	     1'd1 ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_setCanPeek =
	     1'd1 ;

  // rule RL_s_otherPeripheralsPort_master_sig_wSig_src_setPeek
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_setPeek =
	     s_otherPeripheralsPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_setPeek =
	     s_otherPeripheralsPortShim_wff$EMPTY_N ;

  // rule RL_s_otherPeripheralsPort_master_sig_wSig_src_warnDoDrop
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_warnDoDrop =
	     s_otherPeripheralsPort_master_sig_wSig_src_dropWire$whas &&
	     !s_otherPeripheralsPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_warnDoDrop =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_warnDoDrop ;

  // rule RL_s_otherPeripheralsPort_master_sig_bSig_snk_setCanPut
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_setCanPut =
	     1'd1 ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_setCanPut =
	     1'd1 ;

  // rule RL_s_otherPeripheralsPort_master_sig_bSig_snk_warnDoPut
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_warnDoPut =
	     s_otherPeripheralsPort_master_sig_bSig_snk_putWire$whas &&
	     !s_otherPeripheralsPortShim_bff$FULL_N ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_warnDoPut =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_warnDoPut ;

  // rule RL_s_otherPeripheralsPort_master_sig_arSig_src_setCanPeek
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_setCanPeek =
	     1'd1 ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_setCanPeek =
	     1'd1 ;

  // rule RL_s_otherPeripheralsPort_master_sig_arSig_src_setPeek
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_setPeek =
	     s_otherPeripheralsPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_setPeek =
	     s_otherPeripheralsPortShim_arff$EMPTY_N ;

  // rule RL_s_otherPeripheralsPort_master_sig_arSig_src_warnDoDrop
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_warnDoDrop =
	     s_otherPeripheralsPort_master_sig_arSig_src_dropWire$whas &&
	     !s_otherPeripheralsPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_warnDoDrop =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_warnDoDrop ;

  // rule RL_s_otherPeripheralsPort_master_sig_rSig_snk_setCanPut
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_setCanPut =
	     1'd1 ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_setCanPut =
	     1'd1 ;

  // rule RL_s_otherPeripheralsPort_master_sig_rSig_snk_warnDoPut
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_warnDoPut =
	     s_otherPeripheralsPort_master_sig_rSig_snk_putWire$whas &&
	     !s_otherPeripheralsPortShim_rff$FULL_N ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_warnDoPut =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_warnDoPut ;

  // rule RL_ug_src_setCanPeek
  assign CAN_FIRE_RL_ug_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_setCanPeek = 1'd1 ;

  // rule RL_ug_snk_setCanPut
  assign CAN_FIRE_RL_ug_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_setCanPut = 1'd1 ;

  // rule RL_connect
  assign CAN_FIRE_RL_connect = 1'b0 ;
  assign WILL_FIRE_RL_connect = 1'b0 ;

  // rule RL_ug_src_warnDoDrop
  assign CAN_FIRE_RL_ug_src_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_ug_src_warnDoDrop = 1'b0 ;

  // rule RL_ug_snk_warnDoPut
  assign CAN_FIRE_RL_ug_snk_warnDoPut = 1'b0 ;
  assign WILL_FIRE_RL_ug_snk_warnDoPut = 1'b0 ;

  // rule RL_ug_snk_doPut
  assign CAN_FIRE_RL_ug_snk_doPut = 1'b0 ;
  assign WILL_FIRE_RL_ug_snk_doPut = 1'b0 ;

  // rule RL_ug_src_1_setCanPeek
  assign CAN_FIRE_RL_ug_src_1_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_setCanPeek = 1'd1 ;

  // rule RL_ug_snk_1_setCanPut
  assign CAN_FIRE_RL_ug_snk_1_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_setCanPut = 1'd1 ;

  // rule RL_connect_1
  assign CAN_FIRE_RL_connect_1 = 1'b0 ;
  assign WILL_FIRE_RL_connect_1 = 1'b0 ;

  // rule RL_ug_src_1_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_ug_src_1_warnDoDrop = 1'b0 ;

  // rule RL_ug_snk_1_warnDoPut
  assign CAN_FIRE_RL_ug_snk_1_warnDoPut = 1'b0 ;
  assign WILL_FIRE_RL_ug_snk_1_warnDoPut = 1'b0 ;

  // rule RL_ug_snk_1_doPut
  assign CAN_FIRE_RL_ug_snk_1_doPut = 1'b0 ;
  assign WILL_FIRE_RL_ug_snk_1_doPut = 1'b0 ;

  // rule RL_ug_src_2_setCanPeek
  assign CAN_FIRE_RL_ug_src_2_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_setCanPeek = 1'd1 ;

  // rule RL_ug_src_2_setPeek
  assign CAN_FIRE_RL_ug_src_2_setPeek = core$RDY_dma_server_b_peek ;
  assign WILL_FIRE_RL_ug_src_2_setPeek = core$RDY_dma_server_b_peek ;

  // rule RL_ug_snk_2_setCanPut
  assign CAN_FIRE_RL_ug_snk_2_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_setCanPut = 1'd1 ;

  // rule RL_connect_2
  assign CAN_FIRE_RL_connect_2 = core$dma_server_b_canPeek ;
  assign WILL_FIRE_RL_connect_2 = core$dma_server_b_canPeek ;

  // rule RL_ug_src_2_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_ug_src_2_warnDoDrop = 1'b0 ;

  // rule RL_ug_src_2_doDrop
  assign CAN_FIRE_RL_ug_src_2_doDrop =
	     core$RDY_dma_server_b_drop && core$dma_server_b_canPeek ;
  assign WILL_FIRE_RL_ug_src_2_doDrop = CAN_FIRE_RL_ug_src_2_doDrop ;

  // rule RL_ug_src_3_setCanPeek
  assign CAN_FIRE_RL_ug_src_3_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_3_setCanPeek = 1'd1 ;

  // rule RL_ug_snk_3_setCanPut
  assign CAN_FIRE_RL_ug_snk_3_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_3_setCanPut = 1'd1 ;

  // rule RL_connect_3
  assign CAN_FIRE_RL_connect_3 = 1'b0 ;
  assign WILL_FIRE_RL_connect_3 = 1'b0 ;

  // rule RL_ug_src_3_warnDoDrop
  assign CAN_FIRE_RL_ug_src_3_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_ug_src_3_warnDoDrop = 1'b0 ;

  // rule RL_ug_snk_3_warnDoPut
  assign CAN_FIRE_RL_ug_snk_3_warnDoPut = 1'b0 ;
  assign WILL_FIRE_RL_ug_snk_3_warnDoPut = 1'b0 ;

  // rule RL_ug_snk_3_doPut
  assign CAN_FIRE_RL_ug_snk_3_doPut = 1'b0 ;
  assign WILL_FIRE_RL_ug_snk_3_doPut = 1'b0 ;

  // rule RL_ug_src_4_setCanPeek
  assign CAN_FIRE_RL_ug_src_4_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_4_setCanPeek = 1'd1 ;

  // rule RL_ug_src_4_setPeek
  assign CAN_FIRE_RL_ug_src_4_setPeek = core$RDY_dma_server_r_peek ;
  assign WILL_FIRE_RL_ug_src_4_setPeek = core$RDY_dma_server_r_peek ;

  // rule RL_ug_snk_4_setCanPut
  assign CAN_FIRE_RL_ug_snk_4_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_4_setCanPut = 1'd1 ;

  // rule RL_connect_4
  assign CAN_FIRE_RL_connect_4 = core$dma_server_r_canPeek ;
  assign WILL_FIRE_RL_connect_4 = core$dma_server_r_canPeek ;

  // rule RL_ug_src_4_warnDoDrop
  assign CAN_FIRE_RL_ug_src_4_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_ug_src_4_warnDoDrop = 1'b0 ;

  // rule RL_ug_src_4_doDrop
  assign CAN_FIRE_RL_ug_src_4_doDrop =
	     core$RDY_dma_server_r_drop && core$dma_server_r_canPeek ;
  assign WILL_FIRE_RL_ug_src_4_doDrop = CAN_FIRE_RL_ug_src_4_doDrop ;

  // rule RL_ug_src_1_setCanPeek_1
  assign CAN_FIRE_RL_ug_src_1_setCanPeek_1 = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_setCanPeek_1 = 1'd1 ;

  // rule RL_ug_src_1_setPeek_1
  assign CAN_FIRE_RL_ug_src_1_setPeek_1 =
	     boot_rom_axi4_deburster_outShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_1_setPeek_1 =
	     boot_rom_axi4_deburster_outShim_awff$EMPTY_N ;

  // rule RL_ug_snk_1_setCanPut_1
  assign CAN_FIRE_RL_ug_snk_1_setCanPut_1 = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_setCanPut_1 = 1'd1 ;

  // rule RL_connect_5
  assign CAN_FIRE_RL_connect_5 =
	     boot_rom_axi4_deburster_outShim_awff$EMPTY_N &&
	     boot_rom$slave_aw_canPut ;
  assign WILL_FIRE_RL_connect_5 = CAN_FIRE_RL_connect_5 ;

  // rule RL_ug_src_1_warnDoDrop_1
  assign CAN_FIRE_RL_ug_src_1_warnDoDrop_1 =
	     CAN_FIRE_RL_connect_5 &&
	     !boot_rom_axi4_deburster_outShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_1_warnDoDrop_1 =
	     CAN_FIRE_RL_ug_src_1_warnDoDrop_1 ;

  // rule RL_ug_src_1_doDrop_1
  assign CAN_FIRE_RL_ug_src_1_doDrop_1 =
	     boot_rom_axi4_deburster_outShim_awff$EMPTY_N &&
	     CAN_FIRE_RL_connect_5 ;
  assign WILL_FIRE_RL_ug_src_1_doDrop_1 = CAN_FIRE_RL_ug_src_1_doDrop_1 ;

  // rule RL_ug_snk_1_warnDoPut_1
  assign CAN_FIRE_RL_ug_snk_1_warnDoPut_1 =
	     CAN_FIRE_RL_connect_5 && !boot_rom$slave_aw_canPut ;
  assign WILL_FIRE_RL_ug_snk_1_warnDoPut_1 =
	     CAN_FIRE_RL_ug_snk_1_warnDoPut_1 ;

  // rule RL_ug_src_1_1_setCanPeek
  assign CAN_FIRE_RL_ug_src_1_1_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_1_setCanPeek = 1'd1 ;

  // rule RL_ug_src_1_1_setPeek
  assign CAN_FIRE_RL_ug_src_1_1_setPeek =
	     boot_rom_axi4_deburster_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_1_1_setPeek =
	     boot_rom_axi4_deburster_outShim_wff$EMPTY_N ;

  // rule RL_ug_snk_1_1_setCanPut
  assign CAN_FIRE_RL_ug_snk_1_1_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_1_setCanPut = 1'd1 ;

  // rule RL_connect_6
  assign CAN_FIRE_RL_connect_6 =
	     boot_rom_axi4_deburster_outShim_wff$EMPTY_N &&
	     boot_rom$slave_w_canPut ;
  assign WILL_FIRE_RL_connect_6 = CAN_FIRE_RL_connect_6 ;

  // rule RL_ug_src_1_1_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_1_warnDoDrop =
	     CAN_FIRE_RL_connect_6 &&
	     !boot_rom_axi4_deburster_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_1_1_warnDoDrop =
	     CAN_FIRE_RL_ug_src_1_1_warnDoDrop ;

  // rule RL_ug_src_1_1_doDrop
  assign CAN_FIRE_RL_ug_src_1_1_doDrop =
	     boot_rom_axi4_deburster_outShim_wff$EMPTY_N &&
	     CAN_FIRE_RL_connect_6 ;
  assign WILL_FIRE_RL_ug_src_1_1_doDrop = CAN_FIRE_RL_ug_src_1_1_doDrop ;

  // rule RL_ug_snk_1_1_warnDoPut
  assign CAN_FIRE_RL_ug_snk_1_1_warnDoPut =
	     CAN_FIRE_RL_connect_6 && !boot_rom$slave_w_canPut ;
  assign WILL_FIRE_RL_ug_snk_1_1_warnDoPut =
	     CAN_FIRE_RL_ug_snk_1_1_warnDoPut ;

  // rule RL_ug_src_1_2_setCanPeek
  assign CAN_FIRE_RL_ug_src_1_2_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_2_setCanPeek = 1'd1 ;

  // rule RL_ug_snk_1_doPut_1
  assign CAN_FIRE_RL_ug_snk_1_doPut_1 =
	     boot_rom$RDY_slave_aw_put && CAN_FIRE_RL_connect_5 ;
  assign WILL_FIRE_RL_ug_snk_1_doPut_1 = CAN_FIRE_RL_ug_snk_1_doPut_1 ;

  // rule RL_ug_snk_1_1_doPut
  assign CAN_FIRE_RL_ug_snk_1_1_doPut =
	     boot_rom$RDY_slave_w_put && CAN_FIRE_RL_connect_6 ;
  assign WILL_FIRE_RL_ug_snk_1_1_doPut = CAN_FIRE_RL_ug_snk_1_1_doPut ;

  // rule RL_ug_src_1_2_setPeek
  assign CAN_FIRE_RL_ug_src_1_2_setPeek = boot_rom$RDY_slave_b_peek ;
  assign WILL_FIRE_RL_ug_src_1_2_setPeek = boot_rom$RDY_slave_b_peek ;

  // rule RL_ug_snk_1_2_setCanPut
  assign CAN_FIRE_RL_ug_snk_1_2_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_2_setCanPut = 1'd1 ;

  // rule RL_connect_7
  assign CAN_FIRE_RL_connect_7 =
	     boot_rom$slave_b_canPeek &&
	     boot_rom_axi4_deburster_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_connect_7 = CAN_FIRE_RL_connect_7 ;

  // rule RL_ug_src_1_2_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_2_warnDoDrop =
	     CAN_FIRE_RL_connect_7 && !boot_rom$slave_b_canPeek ;
  assign WILL_FIRE_RL_ug_src_1_2_warnDoDrop =
	     CAN_FIRE_RL_ug_src_1_2_warnDoDrop ;

  // rule RL_ug_src_1_2_doDrop
  assign CAN_FIRE_RL_ug_src_1_2_doDrop =
	     boot_rom$RDY_slave_b_drop && CAN_FIRE_RL_connect_7 &&
	     boot_rom$slave_b_canPeek ;
  assign WILL_FIRE_RL_ug_src_1_2_doDrop = CAN_FIRE_RL_ug_src_1_2_doDrop ;

  // rule RL_ug_snk_1_2_warnDoPut
  assign CAN_FIRE_RL_ug_snk_1_2_warnDoPut =
	     CAN_FIRE_RL_connect_7 &&
	     !boot_rom_axi4_deburster_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_1_2_warnDoPut =
	     CAN_FIRE_RL_ug_snk_1_2_warnDoPut ;

  // rule RL_boot_rom_axi4_deburster_consume_bresp
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_consume_bresp =
	     boot_rom_axi4_deburster_outShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_consume_bresp =
	     boot_rom_axi4_deburster_outShim_bff$EMPTY_N ;

  // rule RL_boot_rom_axi4_deburster_produce_bresp
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_produce_bresp =
	     !boot_rom_axi4_deburster_inSerial_shim_bff_rv[9] &&
	     boot_rom_axi4_deburster_countWriteRspFF$EMPTY_N &&
	     boot_rom_axi4_deburster_flitReceived$port1__read[17:9] >
	     { 1'd0, boot_rom_axi4_deburster_countWriteRspFF$D_OUT } ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_produce_bresp =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_produce_bresp ;

  // rule RL_ug_snk_1_2_doPut
  assign CAN_FIRE_RL_ug_snk_1_2_doPut =
	     boot_rom_axi4_deburster_outShim_bff$FULL_N &&
	     CAN_FIRE_RL_connect_7 ;
  assign WILL_FIRE_RL_ug_snk_1_2_doPut = CAN_FIRE_RL_ug_snk_1_2_doPut ;

  // rule RL_ug_src_1_3_setCanPeek
  assign CAN_FIRE_RL_ug_src_1_3_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_3_setCanPeek = 1'd1 ;

  // rule RL_ug_src_1_3_setPeek
  assign CAN_FIRE_RL_ug_src_1_3_setPeek =
	     boot_rom_axi4_deburster_outShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_1_3_setPeek =
	     boot_rom_axi4_deburster_outShim_arff$EMPTY_N ;

  // rule RL_ug_snk_1_3_setCanPut
  assign CAN_FIRE_RL_ug_snk_1_3_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_3_setCanPut = 1'd1 ;

  // rule RL_connect_8
  assign CAN_FIRE_RL_connect_8 =
	     boot_rom_axi4_deburster_outShim_arff$EMPTY_N &&
	     boot_rom$slave_ar_canPut ;
  assign WILL_FIRE_RL_connect_8 = CAN_FIRE_RL_connect_8 ;

  // rule RL_ug_src_1_3_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_3_warnDoDrop =
	     CAN_FIRE_RL_connect_8 &&
	     !boot_rom_axi4_deburster_outShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_1_3_warnDoDrop =
	     CAN_FIRE_RL_ug_src_1_3_warnDoDrop ;

  // rule RL_ug_src_1_3_doDrop
  assign CAN_FIRE_RL_ug_src_1_3_doDrop =
	     boot_rom_axi4_deburster_outShim_arff$EMPTY_N &&
	     CAN_FIRE_RL_connect_8 ;
  assign WILL_FIRE_RL_ug_src_1_3_doDrop = CAN_FIRE_RL_ug_src_1_3_doDrop ;

  // rule RL_ug_snk_1_3_warnDoPut
  assign CAN_FIRE_RL_ug_snk_1_3_warnDoPut =
	     CAN_FIRE_RL_connect_8 && !boot_rom$slave_ar_canPut ;
  assign WILL_FIRE_RL_ug_snk_1_3_warnDoPut =
	     CAN_FIRE_RL_ug_snk_1_3_warnDoPut ;

  // rule RL_ug_src_1_4_setCanPeek
  assign CAN_FIRE_RL_ug_src_1_4_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_4_setCanPeek = 1'd1 ;

  // rule RL_ug_snk_1_3_doPut
  assign CAN_FIRE_RL_ug_snk_1_3_doPut =
	     boot_rom$RDY_slave_ar_put && CAN_FIRE_RL_connect_8 ;
  assign WILL_FIRE_RL_ug_snk_1_3_doPut = CAN_FIRE_RL_ug_snk_1_3_doPut ;

  // rule RL_ug_src_1_4_setPeek
  assign CAN_FIRE_RL_ug_src_1_4_setPeek = boot_rom$RDY_slave_r_peek ;
  assign WILL_FIRE_RL_ug_src_1_4_setPeek = boot_rom$RDY_slave_r_peek ;

  // rule RL_ug_snk_1_4_setCanPut
  assign CAN_FIRE_RL_ug_snk_1_4_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_4_setCanPut = 1'd1 ;

  // rule RL_connect_9
  assign CAN_FIRE_RL_connect_9 =
	     boot_rom$slave_r_canPeek &&
	     boot_rom_axi4_deburster_outShim_rff$FULL_N ;
  assign WILL_FIRE_RL_connect_9 = CAN_FIRE_RL_connect_9 ;

  // rule RL_ug_src_1_4_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_4_warnDoDrop =
	     CAN_FIRE_RL_connect_9 && !boot_rom$slave_r_canPeek ;
  assign WILL_FIRE_RL_ug_src_1_4_warnDoDrop =
	     CAN_FIRE_RL_ug_src_1_4_warnDoDrop ;

  // rule RL_ug_src_1_4_doDrop
  assign CAN_FIRE_RL_ug_src_1_4_doDrop =
	     boot_rom$RDY_slave_r_drop && CAN_FIRE_RL_connect_9 &&
	     boot_rom$slave_r_canPeek ;
  assign WILL_FIRE_RL_ug_src_1_4_doDrop = CAN_FIRE_RL_ug_src_1_4_doDrop ;

  // rule RL_ug_snk_1_4_warnDoPut
  assign CAN_FIRE_RL_ug_snk_1_4_warnDoPut =
	     CAN_FIRE_RL_connect_9 &&
	     !boot_rom_axi4_deburster_outShim_rff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_1_4_warnDoPut =
	     CAN_FIRE_RL_ug_snk_1_4_warnDoPut ;

  // rule RL_boot_rom_axi4_deburster_forward_read_rsp
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp =
	     !boot_rom_axi4_deburster_inSerial_shim_rff_rv[74] &&
	     boot_rom_axi4_deburster_lastReadRspFF$EMPTY_N &&
	     boot_rom_axi4_deburster_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ;

  // rule RL_ug_snk_1_4_doPut
  assign CAN_FIRE_RL_ug_snk_1_4_doPut =
	     boot_rom_axi4_deburster_outShim_rff$FULL_N &&
	     CAN_FIRE_RL_connect_9 ;
  assign WILL_FIRE_RL_ug_snk_1_4_doPut = CAN_FIRE_RL_ug_snk_1_4_doPut ;

  // rule RL_ug_src_2_setCanPeek_1
  assign CAN_FIRE_RL_ug_src_2_setCanPeek_1 = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_setCanPeek_1 = 1'd1 ;

  // rule RL_ug_src_2_setPeek_1
  assign CAN_FIRE_RL_ug_src_2_setPeek_1 =
	     mem0_controller_axi4_deburster_outShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_setPeek_1 =
	     mem0_controller_axi4_deburster_outShim_awff$EMPTY_N ;

  // rule RL_ug_snk_2_setCanPut_1
  assign CAN_FIRE_RL_ug_snk_2_setCanPut_1 = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_setCanPut_1 = 1'd1 ;

  // rule RL_connect_10
  assign CAN_FIRE_RL_connect_10 =
	     mem0_controller_axi4_deburster_outShim_awff$EMPTY_N &&
	     mem0_controller$slave_aw_canPut ;
  assign WILL_FIRE_RL_connect_10 = CAN_FIRE_RL_connect_10 ;

  // rule RL_ug_src_2_warnDoDrop_1
  assign CAN_FIRE_RL_ug_src_2_warnDoDrop_1 =
	     CAN_FIRE_RL_connect_10 &&
	     !mem0_controller_axi4_deburster_outShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_warnDoDrop_1 =
	     CAN_FIRE_RL_ug_src_2_warnDoDrop_1 ;

  // rule RL_ug_src_2_doDrop_1
  assign CAN_FIRE_RL_ug_src_2_doDrop_1 =
	     mem0_controller_axi4_deburster_outShim_awff$EMPTY_N &&
	     CAN_FIRE_RL_connect_10 ;
  assign WILL_FIRE_RL_ug_src_2_doDrop_1 = CAN_FIRE_RL_ug_src_2_doDrop_1 ;

  // rule RL_ug_snk_2_warnDoPut_1
  assign CAN_FIRE_RL_ug_snk_2_warnDoPut_1 =
	     CAN_FIRE_RL_connect_10 && !mem0_controller$slave_aw_canPut ;
  assign WILL_FIRE_RL_ug_snk_2_warnDoPut_1 =
	     CAN_FIRE_RL_ug_snk_2_warnDoPut_1 ;

  // rule RL_ug_src_2_1_setCanPeek
  assign CAN_FIRE_RL_ug_src_2_1_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_1_setCanPeek = 1'd1 ;

  // rule RL_ug_src_2_1_setPeek
  assign CAN_FIRE_RL_ug_src_2_1_setPeek =
	     mem0_controller_axi4_deburster_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_1_setPeek =
	     mem0_controller_axi4_deburster_outShim_wff$EMPTY_N ;

  // rule RL_ug_snk_2_1_setCanPut
  assign CAN_FIRE_RL_ug_snk_2_1_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_1_setCanPut = 1'd1 ;

  // rule RL_connect_11
  assign CAN_FIRE_RL_connect_11 =
	     mem0_controller_axi4_deburster_outShim_wff$EMPTY_N &&
	     mem0_controller$slave_w_canPut ;
  assign WILL_FIRE_RL_connect_11 = CAN_FIRE_RL_connect_11 ;

  // rule RL_ug_src_2_1_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_1_warnDoDrop =
	     CAN_FIRE_RL_connect_11 &&
	     !mem0_controller_axi4_deburster_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_1_warnDoDrop =
	     CAN_FIRE_RL_ug_src_2_1_warnDoDrop ;

  // rule RL_ug_src_2_1_doDrop
  assign CAN_FIRE_RL_ug_src_2_1_doDrop =
	     mem0_controller_axi4_deburster_outShim_wff$EMPTY_N &&
	     CAN_FIRE_RL_connect_11 ;
  assign WILL_FIRE_RL_ug_src_2_1_doDrop = CAN_FIRE_RL_ug_src_2_1_doDrop ;

  // rule RL_ug_snk_2_1_warnDoPut
  assign CAN_FIRE_RL_ug_snk_2_1_warnDoPut =
	     CAN_FIRE_RL_connect_11 && !mem0_controller$slave_w_canPut ;
  assign WILL_FIRE_RL_ug_snk_2_1_warnDoPut =
	     CAN_FIRE_RL_ug_snk_2_1_warnDoPut ;

  // rule RL_ug_src_2_2_setCanPeek
  assign CAN_FIRE_RL_ug_src_2_2_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_2_setCanPeek = 1'd1 ;

  // rule RL_ug_src_2_2_setPeek
  assign CAN_FIRE_RL_ug_src_2_2_setPeek = mem0_controller$RDY_slave_b_peek ;
  assign WILL_FIRE_RL_ug_src_2_2_setPeek = mem0_controller$RDY_slave_b_peek ;

  // rule RL_ug_snk_2_2_setCanPut
  assign CAN_FIRE_RL_ug_snk_2_2_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_2_setCanPut = 1'd1 ;

  // rule RL_connect_12
  assign CAN_FIRE_RL_connect_12 =
	     mem0_controller$slave_b_canPeek &&
	     mem0_controller_axi4_deburster_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_connect_12 = CAN_FIRE_RL_connect_12 ;

  // rule RL_ug_src_2_2_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_2_warnDoDrop =
	     CAN_FIRE_RL_connect_12 && !mem0_controller$slave_b_canPeek ;
  assign WILL_FIRE_RL_ug_src_2_2_warnDoDrop =
	     CAN_FIRE_RL_ug_src_2_2_warnDoDrop ;

  // rule RL_ug_src_2_2_doDrop
  assign CAN_FIRE_RL_ug_src_2_2_doDrop =
	     mem0_controller$RDY_slave_b_drop && CAN_FIRE_RL_connect_12 &&
	     mem0_controller$slave_b_canPeek ;
  assign WILL_FIRE_RL_ug_src_2_2_doDrop = CAN_FIRE_RL_ug_src_2_2_doDrop ;

  // rule RL_ug_snk_2_2_warnDoPut
  assign CAN_FIRE_RL_ug_snk_2_2_warnDoPut =
	     CAN_FIRE_RL_connect_12 &&
	     !mem0_controller_axi4_deburster_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_2_2_warnDoPut =
	     CAN_FIRE_RL_ug_snk_2_2_warnDoPut ;

  // rule RL_mem0_controller_axi4_deburster_consume_bresp
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_consume_bresp =
	     mem0_controller_axi4_deburster_outShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_consume_bresp =
	     mem0_controller_axi4_deburster_outShim_bff$EMPTY_N ;

  // rule RL_mem0_controller_axi4_deburster_produce_bresp
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp =
	     !mem0_controller_axi4_deburster_inSerial_shim_bff_rv[9] &&
	     mem0_controller_axi4_deburster_countWriteRspFF$EMPTY_N &&
	     mem0_controller_axi4_deburster_flitReceived$port1__read[17:9] >
	     { 1'd0, mem0_controller_axi4_deburster_countWriteRspFF$D_OUT } ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp ;

  // rule RL_ug_snk_2_2_doPut
  assign CAN_FIRE_RL_ug_snk_2_2_doPut =
	     mem0_controller_axi4_deburster_outShim_bff$FULL_N &&
	     CAN_FIRE_RL_connect_12 ;
  assign WILL_FIRE_RL_ug_snk_2_2_doPut = CAN_FIRE_RL_ug_snk_2_2_doPut ;

  // rule RL_ug_src_2_3_setCanPeek
  assign CAN_FIRE_RL_ug_src_2_3_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_3_setCanPeek = 1'd1 ;

  // rule RL_ug_src_2_3_setPeek
  assign CAN_FIRE_RL_ug_src_2_3_setPeek =
	     mem0_controller_axi4_deburster_outShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_3_setPeek =
	     mem0_controller_axi4_deburster_outShim_arff$EMPTY_N ;

  // rule RL_ug_snk_2_3_setCanPut
  assign CAN_FIRE_RL_ug_snk_2_3_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_3_setCanPut = 1'd1 ;

  // rule RL_connect_13
  assign CAN_FIRE_RL_connect_13 =
	     mem0_controller_axi4_deburster_outShim_arff$EMPTY_N &&
	     mem0_controller$slave_ar_canPut ;
  assign WILL_FIRE_RL_connect_13 = CAN_FIRE_RL_connect_13 ;

  // rule RL_ug_src_2_3_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_3_warnDoDrop =
	     CAN_FIRE_RL_connect_13 &&
	     !mem0_controller_axi4_deburster_outShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_3_warnDoDrop =
	     CAN_FIRE_RL_ug_src_2_3_warnDoDrop ;

  // rule RL_ug_src_2_3_doDrop
  assign CAN_FIRE_RL_ug_src_2_3_doDrop =
	     mem0_controller_axi4_deburster_outShim_arff$EMPTY_N &&
	     CAN_FIRE_RL_connect_13 ;
  assign WILL_FIRE_RL_ug_src_2_3_doDrop = CAN_FIRE_RL_ug_src_2_3_doDrop ;

  // rule RL_ug_snk_2_3_warnDoPut
  assign CAN_FIRE_RL_ug_snk_2_3_warnDoPut =
	     CAN_FIRE_RL_connect_13 && !mem0_controller$slave_ar_canPut ;
  assign WILL_FIRE_RL_ug_snk_2_3_warnDoPut =
	     CAN_FIRE_RL_ug_snk_2_3_warnDoPut ;

  // rule RL_ug_src_2_4_setCanPeek
  assign CAN_FIRE_RL_ug_src_2_4_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_4_setCanPeek = 1'd1 ;

  // rule RL_ug_snk_2_doPut_1
  assign CAN_FIRE_RL_ug_snk_2_doPut_1 =
	     mem0_controller$RDY_slave_aw_put && CAN_FIRE_RL_connect_10 ;
  assign WILL_FIRE_RL_ug_snk_2_doPut_1 = CAN_FIRE_RL_ug_snk_2_doPut_1 ;

  // rule RL_ug_snk_2_1_doPut
  assign CAN_FIRE_RL_ug_snk_2_1_doPut =
	     mem0_controller$RDY_slave_w_put && CAN_FIRE_RL_connect_11 ;
  assign WILL_FIRE_RL_ug_snk_2_1_doPut = CAN_FIRE_RL_ug_snk_2_1_doPut ;

  // rule RL_ug_snk_2_3_doPut
  assign CAN_FIRE_RL_ug_snk_2_3_doPut =
	     mem0_controller$RDY_slave_ar_put && CAN_FIRE_RL_connect_13 ;
  assign WILL_FIRE_RL_ug_snk_2_3_doPut = CAN_FIRE_RL_ug_snk_2_3_doPut ;

  // rule RL_ug_src_2_4_setPeek
  assign CAN_FIRE_RL_ug_src_2_4_setPeek = mem0_controller$RDY_slave_r_peek ;
  assign WILL_FIRE_RL_ug_src_2_4_setPeek = mem0_controller$RDY_slave_r_peek ;

  // rule RL_ug_snk_2_4_setCanPut
  assign CAN_FIRE_RL_ug_snk_2_4_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_4_setCanPut = 1'd1 ;

  // rule RL_connect_14
  assign CAN_FIRE_RL_connect_14 =
	     mem0_controller$slave_r_canPeek &&
	     mem0_controller_axi4_deburster_outShim_rff$FULL_N ;
  assign WILL_FIRE_RL_connect_14 = CAN_FIRE_RL_connect_14 ;

  // rule RL_ug_src_2_4_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_4_warnDoDrop =
	     CAN_FIRE_RL_connect_14 && !mem0_controller$slave_r_canPeek ;
  assign WILL_FIRE_RL_ug_src_2_4_warnDoDrop =
	     CAN_FIRE_RL_ug_src_2_4_warnDoDrop ;

  // rule RL_ug_src_2_4_doDrop
  assign CAN_FIRE_RL_ug_src_2_4_doDrop =
	     mem0_controller$RDY_slave_r_drop && CAN_FIRE_RL_connect_14 &&
	     mem0_controller$slave_r_canPeek ;
  assign WILL_FIRE_RL_ug_src_2_4_doDrop = CAN_FIRE_RL_ug_src_2_4_doDrop ;

  // rule RL_ug_snk_2_4_warnDoPut
  assign CAN_FIRE_RL_ug_snk_2_4_warnDoPut =
	     CAN_FIRE_RL_connect_14 &&
	     !mem0_controller_axi4_deburster_outShim_rff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_2_4_warnDoPut =
	     CAN_FIRE_RL_ug_snk_2_4_warnDoPut ;

  // rule RL_mem0_controller_axi4_deburster_forward_read_rsp
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp =
	     !mem0_controller_axi4_deburster_inSerial_shim_rff_rv[74] &&
	     mem0_controller_axi4_deburster_lastReadRspFF$EMPTY_N &&
	     mem0_controller_axi4_deburster_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ;

  // rule RL_ug_snk_2_4_doPut
  assign CAN_FIRE_RL_ug_snk_2_4_doPut =
	     mem0_controller_axi4_deburster_outShim_rff$FULL_N &&
	     CAN_FIRE_RL_connect_14 ;
  assign WILL_FIRE_RL_ug_snk_2_4_doPut = CAN_FIRE_RL_ug_snk_2_4_doPut ;

  // rule RL_bus_set_input_canPeek_wire
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire = 1'd1 ;

  // rule RL_bus_set_input_canPeek_wire_1
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire_1 = 1'd1 ;

  // rule RL_bus_set_dflt_output_canPut_wire
  assign CAN_FIRE_RL_bus_set_dflt_output_canPut_wire = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_dflt_output_canPut_wire = 1'd1 ;

  // rule RL_bus_set_input_canPeek_wire_2
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire_2 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire_2 = 1'd1 ;

  // rule RL_bus_set_input_peek_wires_2
  assign CAN_FIRE_RL_bus_set_input_peek_wires_2 =
	     bus_noRouteSlv_rspFF$EMPTY_N ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires_2 =
	     bus_noRouteSlv_rspFF$EMPTY_N ;

  // rule RL_bus_set_input_canPeek_wire_3
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire_3 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire_3 = 1'd1 ;

  // rule RL_bus_set_input_peek_wires_3
  assign CAN_FIRE_RL_bus_set_input_peek_wires_3 =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires_3 =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;

  // rule RL_bus_set_input_canPeek_wire_4
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire_4 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire_4 = 1'd1 ;

  // rule RL_bus_set_input_peek_wires_4
  assign CAN_FIRE_RL_bus_set_input_peek_wires_4 =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires_4 =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;

  // rule RL_bus_set_input_canPeek_wire_5
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire_5 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire_5 = 1'd1 ;

  // rule RL_bus_set_input_peek_wires_5
  assign CAN_FIRE_RL_bus_set_input_peek_wires_5 = uart0$RDY_slave_b_peek ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires_5 = uart0$RDY_slave_b_peek ;

  // rule RL_bus_set_input_canPeek_wire_6
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire_6 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire_6 = 1'd1 ;

  // rule RL_s_otherPeripheralsPort_master_sig_bSig_snk_doPut
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_doPut =
	     s_otherPeripheralsPortShim_bff$FULL_N &&
	     s_otherPeripheralsPort_master_sig_bSig_snk_putWire$whas ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_doPut =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_doPut ;

  // rule RL_bus_set_input_peek_wires_6
  assign CAN_FIRE_RL_bus_set_input_peek_wires_6 =
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires_6 =
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;

  // rule RL_bus_set_output_canPut_wire_4
  assign CAN_FIRE_RL_bus_set_output_canPut_wire_4 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_output_canPut_wire_4 = 1'd1 ;

  // rule RL_bus_set_output_canPut_wire_5
  assign CAN_FIRE_RL_bus_set_output_canPut_wire_5 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_output_canPut_wire_5 = 1'd1 ;

  // rule RL_core_mem_master_sig_bSig_snk_doPut
  assign CAN_FIRE_RL_core_mem_master_sig_bSig_snk_doPut =
	     core$RDY_core_mem_master_b_put &&
	     core_mem_master_sig_bSig_snk_putWire$whas ;
  assign WILL_FIRE_RL_core_mem_master_sig_bSig_snk_doPut =
	     CAN_FIRE_RL_core_mem_master_sig_bSig_snk_doPut ;

  // rule RL_bus_arbitrate_1
  assign CAN_FIRE_RL_bus_arbitrate_1 =
	     bus_inputCanPeek_0_1_whas__577_AND_bus_inputCa_ETC___d1663 &&
	     !bus_moreFlits_1[7] ;
  assign WILL_FIRE_RL_bus_arbitrate_1 = CAN_FIRE_RL_bus_arbitrate_1 ;

  // rule RL_bus_arbitration_fail_2
  assign CAN_FIRE_RL_bus_arbitration_fail_2 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_0_1$wget &&
	     !bus_noRouteSlv_rspFF$EMPTY_N ;
  assign WILL_FIRE_RL_bus_arbitration_fail_2 =
	     CAN_FIRE_RL_bus_arbitration_fail_2 ;

  // rule RL_bus_legal_destination_fail_2
  assign CAN_FIRE_RL_bus_legal_destination_fail_2 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_0_1$wget &&
	     bus_noRouteSlv_rspFF$EMPTY_N &&
	     (bus_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_legal_destination_fail_2 =
	     CAN_FIRE_RL_bus_legal_destination_fail_2 ;

  // rule RL_bus_arbitration_fail_3
  assign CAN_FIRE_RL_bus_arbitration_fail_3 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_1_1$wget &&
	     !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_arbitration_fail_3 =
	     CAN_FIRE_RL_bus_arbitration_fail_3 ;

  // rule RL_bus_legal_destination_fail_3
  assign CAN_FIRE_RL_bus_legal_destination_fail_3 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_1_1$wget &&
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     (bus_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_legal_destination_fail_3 =
	     CAN_FIRE_RL_bus_legal_destination_fail_3 ;

  // rule RL_bus_arbitration_fail_4
  assign CAN_FIRE_RL_bus_arbitration_fail_4 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_2$wget &&
	     !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_arbitration_fail_4 =
	     CAN_FIRE_RL_bus_arbitration_fail_4 ;

  // rule RL_bus_legal_destination_fail_4
  assign CAN_FIRE_RL_bus_legal_destination_fail_4 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_2$wget &&
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     (bus_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_2$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_legal_destination_fail_4 =
	     CAN_FIRE_RL_bus_legal_destination_fail_4 ;

  // rule RL_bus_arbitration_fail_5
  assign CAN_FIRE_RL_bus_arbitration_fail_5 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_3$wget &&
	     !uart0$slave_b_canPeek ;
  assign WILL_FIRE_RL_bus_arbitration_fail_5 =
	     CAN_FIRE_RL_bus_arbitration_fail_5 ;

  // rule RL_bus_legal_destination_fail_5
  assign CAN_FIRE_RL_bus_legal_destination_fail_5 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_3$wget &&
	     uart0$slave_b_canPeek &&
	     (bus_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_3$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_legal_destination_fail_5 =
	     CAN_FIRE_RL_bus_legal_destination_fail_5 ;

  // rule RL_bus_arbitration_fail_6
  assign CAN_FIRE_RL_bus_arbitration_fail_6 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_4$wget &&
	     !s_otherPeripheralsPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_arbitration_fail_6 =
	     CAN_FIRE_RL_bus_arbitration_fail_6 ;

  // rule RL_bus_legal_destination_fail_6
  assign CAN_FIRE_RL_bus_legal_destination_fail_6 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_4$wget &&
	     s_otherPeripheralsPortShim_bff$EMPTY_N &&
	     (bus_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_4$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_legal_destination_fail_6 =
	     CAN_FIRE_RL_bus_legal_destination_fail_6 ;

  // rule RL_bus_input_first_flit_3
  assign CAN_FIRE_RL_bus_input_first_flit_3 =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     !bus_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_arbitrate_1 &&
	     bus_selectInput_1_1$wget &&
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_input_first_flit_3 =
	     CAN_FIRE_RL_bus_input_first_flit_3 ;

  // rule RL_bus_input_follow_flit_3
  assign CAN_FIRE_RL_bus_input_follow_flit_3 =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_moreFlits_1[7] &&
	     bus_moreFlits_1[3] &&
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     IF_NOT_bus_moreFlits_1_664_BIT_0_908_909_OR_NO_ETC___d1913 ;
  assign WILL_FIRE_RL_bus_input_follow_flit_3 =
	     CAN_FIRE_RL_bus_input_follow_flit_3 ;

  // rule __me_check_270
  assign CAN_FIRE___me_check_270 = 1'b1 ;
  assign WILL_FIRE___me_check_270 = 1'b1 ;

  // rule RL_bus_input_first_flit_4
  assign CAN_FIRE_RL_bus_input_first_flit_4 =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     !bus_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_arbitrate_1 &&
	     bus_selectInput_2$wget &&
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_input_first_flit_4 =
	     CAN_FIRE_RL_bus_input_first_flit_4 ;

  // rule RL_bus_input_follow_flit_4
  assign CAN_FIRE_RL_bus_input_follow_flit_4 =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_moreFlits_1[7] &&
	     bus_moreFlits_1[4] &&
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     IF_NOT_bus_moreFlits_1_664_BIT_0_908_909_OR_NO_ETC___d1913 ;
  assign WILL_FIRE_RL_bus_input_follow_flit_4 =
	     CAN_FIRE_RL_bus_input_follow_flit_4 ;

  // rule __me_check_272
  assign CAN_FIRE___me_check_272 = 1'b1 ;
  assign WILL_FIRE___me_check_272 = 1'b1 ;

  // rule RL_bus_input_first_flit_5
  assign CAN_FIRE_RL_bus_input_first_flit_5 =
	     uart0$RDY_slave_b_drop && !bus_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_arbitrate_1 &&
	     bus_selectInput_3$wget &&
	     uart0$slave_b_canPeek ;
  assign WILL_FIRE_RL_bus_input_first_flit_5 =
	     CAN_FIRE_RL_bus_input_first_flit_5 ;

  // rule RL_bus_input_follow_flit_5
  assign CAN_FIRE_RL_bus_input_follow_flit_5 =
	     uart0$RDY_slave_b_drop && bus_moreFlits_1[7] &&
	     bus_moreFlits_1[5] &&
	     uart0$slave_b_canPeek &&
	     IF_NOT_bus_moreFlits_1_664_BIT_0_908_909_OR_NO_ETC___d1913 ;
  assign WILL_FIRE_RL_bus_input_follow_flit_5 =
	     CAN_FIRE_RL_bus_input_follow_flit_5 ;

  // rule __me_check_274
  assign CAN_FIRE___me_check_274 = 1'b1 ;
  assign WILL_FIRE___me_check_274 = 1'b1 ;

  // rule RL_bus_input_first_flit_6
  assign CAN_FIRE_RL_bus_input_first_flit_6 =
	     s_otherPeripheralsPortShim_bff$EMPTY_N && !bus_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_arbitrate_1 &&
	     bus_selectInput_4$wget &&
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_input_first_flit_6 =
	     CAN_FIRE_RL_bus_input_first_flit_6 ;

  // rule RL_bus_input_follow_flit_6
  assign CAN_FIRE_RL_bus_input_follow_flit_6 =
	     s_otherPeripheralsPortShim_bff$EMPTY_N && bus_moreFlits_1[7] &&
	     bus_moreFlits_1[6] &&
	     s_otherPeripheralsPortShim_bff$EMPTY_N &&
	     IF_NOT_bus_moreFlits_1_664_BIT_0_908_909_OR_NO_ETC___d1913 ;
  assign WILL_FIRE_RL_bus_input_follow_flit_6 =
	     CAN_FIRE_RL_bus_input_follow_flit_6 ;

  // rule __me_check_276
  assign CAN_FIRE___me_check_276 = 1'b1 ;
  assign WILL_FIRE___me_check_276 = 1'b1 ;

  // rule RL_bus_merged_0_passFlit
  assign CAN_FIRE_RL_bus_merged_0_passFlit =
	     bus_merged_0_awff$EMPTY_N && bus_merged_0_wff$EMPTY_N &&
	     bus_merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_0_passFlit =
	     CAN_FIRE_RL_bus_merged_0_passFlit ;

  // rule RL_bus_set_input_peek_wires
  assign CAN_FIRE_RL_bus_set_input_peek_wires =
	     IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117 &&
	     (CAN_FIRE_RL_bus_merged_0_passFlit || bus_merged_0_wff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires =
	     CAN_FIRE_RL_bus_set_input_peek_wires ;

  // rule RL_bus_merged_0_awug_setCanPeek
  assign CAN_FIRE_RL_bus_merged_0_awug_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_bus_merged_0_awug_setCanPeek = 1'd1 ;

  // rule RL_bus_merged_0_awug_setPeek
  assign CAN_FIRE_RL_bus_merged_0_awug_setPeek =
	     core$RDY_cpu_imem_master_aw_peek ;
  assign WILL_FIRE_RL_bus_merged_0_awug_setPeek =
	     core$RDY_cpu_imem_master_aw_peek ;

  // rule RL_bus_merged_0_wug_setCanPeek
  assign CAN_FIRE_RL_bus_merged_0_wug_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_bus_merged_0_wug_setCanPeek = 1'd1 ;

  // rule RL_bus_merged_0_wug_setPeek
  assign CAN_FIRE_RL_bus_merged_0_wug_setPeek =
	     core$RDY_cpu_imem_master_w_peek ;
  assign WILL_FIRE_RL_bus_merged_0_wug_setPeek =
	     core$RDY_cpu_imem_master_w_peek ;

  // rule RL_bus_merged_1_passFlit
  assign CAN_FIRE_RL_bus_merged_1_passFlit =
	     bus_merged_1_awff$EMPTY_N && bus_merged_1_wff$EMPTY_N &&
	     bus_merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_1_passFlit =
	     CAN_FIRE_RL_bus_merged_1_passFlit ;

  // rule RL_bus_set_input_peek_wires_1
  assign CAN_FIRE_RL_bus_set_input_peek_wires_1 =
	     IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186 &&
	     (CAN_FIRE_RL_bus_merged_1_passFlit || bus_merged_1_wff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires_1 =
	     CAN_FIRE_RL_bus_set_input_peek_wires_1 ;

  // rule RL_bus_merged_1_awug_setCanPeek
  assign CAN_FIRE_RL_bus_merged_1_awug_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_bus_merged_1_awug_setCanPeek = 1'd1 ;

  // rule RL_bus_merged_1_awug_setPeek
  assign CAN_FIRE_RL_bus_merged_1_awug_setPeek =
	     core$RDY_core_mem_master_aw_peek ;
  assign WILL_FIRE_RL_bus_merged_1_awug_setPeek =
	     core$RDY_core_mem_master_aw_peek ;

  // rule RL_core_mem_master_sig_awSig_src_doDrop
  assign CAN_FIRE_RL_core_mem_master_sig_awSig_src_doDrop =
	     core$RDY_core_mem_master_aw_drop &&
	     core_mem_master_sig_awSig_src_dropWire$whas &&
	     core$core_mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_awSig_src_doDrop =
	     CAN_FIRE_RL_core_mem_master_sig_awSig_src_doDrop ;

  // rule RL_bus_merged_1_wug_setCanPeek
  assign CAN_FIRE_RL_bus_merged_1_wug_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_bus_merged_1_wug_setCanPeek = 1'd1 ;

  // rule RL_bus_merged_1_wug_setPeek
  assign CAN_FIRE_RL_bus_merged_1_wug_setPeek =
	     core$RDY_core_mem_master_w_peek ;
  assign WILL_FIRE_RL_bus_merged_1_wug_setPeek =
	     core$RDY_core_mem_master_w_peek ;

  // rule RL_core_mem_master_sig_wSig_src_doDrop
  assign CAN_FIRE_RL_core_mem_master_sig_wSig_src_doDrop =
	     core$RDY_core_mem_master_w_drop &&
	     core_mem_master_sig_wSig_src_dropWire$whas &&
	     core$core_mem_master_w_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_wSig_src_doDrop =
	     CAN_FIRE_RL_core_mem_master_sig_wSig_src_doDrop ;

  // rule RL_bus_split_0_awug_setCanPut
  assign CAN_FIRE_RL_bus_split_0_awug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_0_awug_setCanPut = 1'd1 ;

  // rule RL_bus_split_0_wug_setCanPut
  assign CAN_FIRE_RL_bus_split_0_wug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_0_wug_setCanPut = 1'd1 ;

  // rule RL_bus_set_output_canPut_wire
  assign CAN_FIRE_RL_bus_set_output_canPut_wire = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_output_canPut_wire = 1'd1 ;

  // rule RL_bus_split_1_awug_setCanPut
  assign CAN_FIRE_RL_bus_split_1_awug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_1_awug_setCanPut = 1'd1 ;

  // rule RL_bus_split_1_wug_setCanPut
  assign CAN_FIRE_RL_bus_split_1_wug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_1_wug_setCanPut = 1'd1 ;

  // rule RL_bus_set_output_canPut_wire_1
  assign CAN_FIRE_RL_bus_set_output_canPut_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_output_canPut_wire_1 = 1'd1 ;

  // rule RL_bus_split_2_awug_setCanPut
  assign CAN_FIRE_RL_bus_split_2_awug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_2_awug_setCanPut = 1'd1 ;

  // rule RL_bus_split_2_wug_setCanPut
  assign CAN_FIRE_RL_bus_split_2_wug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_2_wug_setCanPut = 1'd1 ;

  // rule RL_bus_set_output_canPut_wire_2
  assign CAN_FIRE_RL_bus_set_output_canPut_wire_2 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_output_canPut_wire_2 = 1'd1 ;

  // rule RL_bus_split_3_awug_setCanPut
  assign CAN_FIRE_RL_bus_split_3_awug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_3_awug_setCanPut = 1'd1 ;

  // rule RL_bus_split_3_wug_setCanPut
  assign CAN_FIRE_RL_bus_split_3_wug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_3_wug_setCanPut = 1'd1 ;

  // rule RL_bus_set_output_canPut_wire_3
  assign CAN_FIRE_RL_bus_set_output_canPut_wire_3 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_output_canPut_wire_3 = 1'd1 ;

  // rule RL_bus_arbitrate
  assign CAN_FIRE_RL_bus_arbitrate =
	     bus_inputCanPeek_0_whas__249_AND_bus_inputCanP_ETC___d1346 &&
	     !bus_moreFlits[6] ;
  assign WILL_FIRE_RL_bus_arbitrate = CAN_FIRE_RL_bus_arbitrate ;

  // rule RL_bus_arbitration_fail
  assign CAN_FIRE_RL_bus_arbitration_fail =
	     CAN_FIRE_RL_bus_arbitrate && bus_selectInput_0$wget &&
	     !IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117 ;
  assign WILL_FIRE_RL_bus_arbitration_fail =
	     CAN_FIRE_RL_bus_arbitration_fail ;

  // rule RL_bus_arbitration_fail_1
  assign CAN_FIRE_RL_bus_arbitration_fail_1 =
	     CAN_FIRE_RL_bus_arbitrate && bus_selectInput_1$wget &&
	     !IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186 ;
  assign WILL_FIRE_RL_bus_arbitration_fail_1 =
	     CAN_FIRE_RL_bus_arbitration_fail_1 ;

  // rule RL_bus_input_first_flit
  assign CAN_FIRE_RL_bus_input_first_flit =
	     IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117 &&
	     !bus_moreFlits[6] &&
	     CAN_FIRE_RL_bus_arbitrate &&
	     bus_selectInput_0$wget &&
	     IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117 ;
  assign WILL_FIRE_RL_bus_input_first_flit =
	     CAN_FIRE_RL_bus_input_first_flit ;

  // rule RL_bus_input_follow_flit
  assign CAN_FIRE_RL_bus_input_follow_flit =
	     IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117 &&
	     bus_moreFlits[6] &&
	     bus_moreFlits[4] &&
	     IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117 &&
	     (NOT_IF_bus_moreFlits_347_BIT_0_425_THEN_1_ELSE_ETC___d1438 ||
	      IF_NOT_bus_moreFlits_347_BIT_0_425_439_OR_NOT__ETC___d1448) ;
  assign WILL_FIRE_RL_bus_input_follow_flit =
	     CAN_FIRE_RL_bus_input_follow_flit ;

  // rule RL_bus_input_first_flit_1
  assign CAN_FIRE_RL_bus_input_first_flit_1 =
	     IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186 &&
	     !bus_moreFlits[6] &&
	     CAN_FIRE_RL_bus_arbitrate &&
	     bus_selectInput_1$wget &&
	     IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186 ;
  assign WILL_FIRE_RL_bus_input_first_flit_1 =
	     CAN_FIRE_RL_bus_input_first_flit_1 ;

  // rule RL_bus_input_follow_flit_1
  assign CAN_FIRE_RL_bus_input_follow_flit_1 =
	     IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186 &&
	     bus_moreFlits[6] &&
	     bus_moreFlits[5] &&
	     IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186 &&
	     (NOT_IF_bus_moreFlits_347_BIT_0_425_THEN_1_ELSE_ETC___d1438 ||
	      IF_NOT_bus_moreFlits_347_BIT_0_425_439_OR_NOT__ETC___d1448) ;
  assign WILL_FIRE_RL_bus_input_follow_flit_1 =
	     CAN_FIRE_RL_bus_input_follow_flit_1 ;

  // rule __me_check_236
  assign CAN_FIRE___me_check_236 = 1'b1 ;
  assign WILL_FIRE___me_check_236 = 1'b1 ;

  // rule __me_check_238
  assign CAN_FIRE___me_check_238 = 1'b1 ;
  assign WILL_FIRE___me_check_238 = 1'b1 ;

  // rule RL_bus_output_selected
  assign CAN_FIRE_RL_bus_output_selected =
	     IF_bus_split_0_flitLeft_49_EQ_0_50_THEN_bus_sp_ETC___d1241 &&
	     bus_toOutput_0$whas &&
	     IF_bus_split_0_flitLeft_49_EQ_0_50_THEN_bus_sp_ETC___d1241 ;
  assign WILL_FIRE_RL_bus_output_selected = CAN_FIRE_RL_bus_output_selected ;

  // rule RL_bus_output_selected_1
  assign CAN_FIRE_RL_bus_output_selected_1 =
	     IF_bus_split_1_flitLeft_94_EQ_0_95_THEN_bus_sp_ETC___d1243 &&
	     bus_toOutput_1$whas &&
	     IF_bus_split_1_flitLeft_94_EQ_0_95_THEN_bus_sp_ETC___d1243 ;
  assign WILL_FIRE_RL_bus_output_selected_1 =
	     CAN_FIRE_RL_bus_output_selected_1 ;

  // rule RL_bus_output_selected_2
  assign CAN_FIRE_RL_bus_output_selected_2 =
	     IF_bus_split_2_flitLeft_039_EQ_0_040_THEN_bus__ETC___d1245 &&
	     bus_toOutput_2$whas &&
	     IF_bus_split_2_flitLeft_039_EQ_0_040_THEN_bus__ETC___d1245 ;
  assign WILL_FIRE_RL_bus_output_selected_2 =
	     CAN_FIRE_RL_bus_output_selected_2 ;

  // rule RL_bus_output_selected_3
  assign CAN_FIRE_RL_bus_output_selected_3 =
	     IF_bus_split_3_flitLeft_084_EQ_0_085_THEN_bus__ETC___d1247 &&
	     bus_toOutput_3$whas &&
	     IF_bus_split_3_flitLeft_084_EQ_0_085_THEN_bus__ETC___d1247 ;
  assign WILL_FIRE_RL_bus_output_selected_3 =
	     CAN_FIRE_RL_bus_output_selected_3 ;

  // rule RL_bus_dflt_output_selected
  assign CAN_FIRE_RL_bus_dflt_output_selected =
	     bus_noRouteSlv_rspFF$FULL_N &&
	     (!bus_toDfltOutput$wget[1] || bus_noRouteSlv_rspFF$FULL_N) &&
	     bus_toDfltOutput$whas ;
  assign WILL_FIRE_RL_bus_dflt_output_selected =
	     CAN_FIRE_RL_bus_dflt_output_selected ;

  // rule __me_check_240
  assign CAN_FIRE___me_check_240 = 1'b1 ;
  assign WILL_FIRE___me_check_240 = 1'b1 ;

  // rule RL_bus_input_first_flit_2
  assign CAN_FIRE_RL_bus_input_first_flit_2 =
	     bus_noRouteSlv_rspFF$EMPTY_N && !bus_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_arbitrate_1 &&
	     bus_selectInput_0_1$wget &&
	     bus_noRouteSlv_rspFF$EMPTY_N ;
  assign WILL_FIRE_RL_bus_input_first_flit_2 =
	     CAN_FIRE_RL_bus_input_first_flit_2 ;

  // rule RL_bus_input_follow_flit_2
  assign CAN_FIRE_RL_bus_input_follow_flit_2 =
	     bus_noRouteSlv_rspFF$EMPTY_N && bus_moreFlits_1[7] &&
	     bus_moreFlits_1[2] &&
	     bus_noRouteSlv_rspFF$EMPTY_N &&
	     IF_NOT_bus_moreFlits_1_664_BIT_0_908_909_OR_NO_ETC___d1913 ;
  assign WILL_FIRE_RL_bus_input_follow_flit_2 =
	     CAN_FIRE_RL_bus_input_follow_flit_2 ;

  // rule __me_check_268
  assign CAN_FIRE___me_check_268 = 1'b1 ;
  assign WILL_FIRE___me_check_268 = 1'b1 ;

  // rule RL_bus_output_selected_4
  assign CAN_FIRE_RL_bus_output_selected_4 =
	     core$RDY_cpu_imem_master_b_put && bus_toOutput_0_1$whas &&
	     core$cpu_imem_master_b_canPut ;
  assign WILL_FIRE_RL_bus_output_selected_4 =
	     CAN_FIRE_RL_bus_output_selected_4 ;

  // rule RL_bus_output_selected_5
  assign CAN_FIRE_RL_bus_output_selected_5 =
	     core$RDY_core_mem_master_b_put && bus_toOutput_1_1$whas &&
	     core$core_mem_master_b_canPut ;
  assign WILL_FIRE_RL_bus_output_selected_5 =
	     CAN_FIRE_RL_bus_output_selected_5 &&
	     !WILL_FIRE_RL_core_mem_master_sig_bSig_snk_doPut ;

  // rule __me_check_278
  assign CAN_FIRE___me_check_278 = 1'b1 ;
  assign WILL_FIRE___me_check_278 = 1'b1 ;

  // rule RL_bus_merged_0_awFlit
  assign CAN_FIRE_RL_bus_merged_0_awFlit =
	     bus_merged_0_awff$FULL_N && core$cpu_imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_bus_merged_0_awFlit = CAN_FIRE_RL_bus_merged_0_awFlit ;

  // rule RL_bus_merged_0_wFlit
  assign CAN_FIRE_RL_bus_merged_0_wFlit =
	     bus_merged_0_wff$FULL_N && core$cpu_imem_master_w_canPeek ;
  assign WILL_FIRE_RL_bus_merged_0_wFlit = CAN_FIRE_RL_bus_merged_0_wFlit ;

  // rule RL_bus_merged_0_genFirst
  assign CAN_FIRE_RL_bus_merged_0_genFirst =
	     bus_merged_0_awff$EMPTY_N && bus_merged_0_wff$EMPTY_N &&
	     bus_merged_0_doDrop$whas &&
	     bus_merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_0_genFirst =
	     CAN_FIRE_RL_bus_merged_0_genFirst ;

  // rule RL_bus_merged_0_genOther
  assign CAN_FIRE_RL_bus_merged_0_genOther =
	     bus_merged_0_wff$EMPTY_N && bus_merged_0_doDrop$whas &&
	     bus_merged_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_0_genOther =
	     CAN_FIRE_RL_bus_merged_0_genOther ;

  // rule RL_bus_merged_0_awug_warnDoDrop
  assign CAN_FIRE_RL_bus_merged_0_awug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_0_awFlit &&
	     !core$cpu_imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_bus_merged_0_awug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_0_awug_warnDoDrop ;

  // rule RL_bus_merged_0_awug_doDrop
  assign CAN_FIRE_RL_bus_merged_0_awug_doDrop =
	     core$RDY_cpu_imem_master_aw_drop &&
	     CAN_FIRE_RL_bus_merged_0_awFlit &&
	     core$cpu_imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_bus_merged_0_awug_doDrop =
	     CAN_FIRE_RL_bus_merged_0_awug_doDrop ;

  // rule RL_bus_merged_0_wug_warnDoDrop
  assign CAN_FIRE_RL_bus_merged_0_wug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_0_wFlit &&
	     !core$cpu_imem_master_w_canPeek ;
  assign WILL_FIRE_RL_bus_merged_0_wug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_0_wug_warnDoDrop ;

  // rule RL_bus_merged_0_wug_doDrop
  assign CAN_FIRE_RL_bus_merged_0_wug_doDrop =
	     core$RDY_cpu_imem_master_w_drop &&
	     CAN_FIRE_RL_bus_merged_0_wFlit &&
	     core$cpu_imem_master_w_canPeek ;
  assign WILL_FIRE_RL_bus_merged_0_wug_doDrop =
	     CAN_FIRE_RL_bus_merged_0_wug_doDrop ;

  // rule RL_bus_merged_1_awFlit
  assign CAN_FIRE_RL_bus_merged_1_awFlit =
	     bus_merged_1_awff$FULL_N && core$core_mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_bus_merged_1_awFlit = CAN_FIRE_RL_bus_merged_1_awFlit ;

  // rule RL_bus_merged_1_wFlit
  assign CAN_FIRE_RL_bus_merged_1_wFlit =
	     bus_merged_1_wff$FULL_N && core$core_mem_master_w_canPeek ;
  assign WILL_FIRE_RL_bus_merged_1_wFlit = CAN_FIRE_RL_bus_merged_1_wFlit ;

  // rule RL_bus_merged_1_genFirst
  assign CAN_FIRE_RL_bus_merged_1_genFirst =
	     bus_merged_1_awff$EMPTY_N && bus_merged_1_wff$EMPTY_N &&
	     bus_merged_1_doDrop$whas &&
	     bus_merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_1_genFirst =
	     CAN_FIRE_RL_bus_merged_1_genFirst ;

  // rule RL_bus_merged_1_genOther
  assign CAN_FIRE_RL_bus_merged_1_genOther =
	     bus_merged_1_wff$EMPTY_N && bus_merged_1_doDrop$whas &&
	     bus_merged_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_1_genOther =
	     CAN_FIRE_RL_bus_merged_1_genOther ;

  // rule RL_bus_merged_1_awug_warnDoDrop
  assign CAN_FIRE_RL_bus_merged_1_awug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_1_awFlit &&
	     !core$core_mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_bus_merged_1_awug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_1_awug_warnDoDrop ;

  // rule RL_bus_merged_1_awug_doDrop
  assign CAN_FIRE_RL_bus_merged_1_awug_doDrop =
	     core$RDY_core_mem_master_aw_drop &&
	     CAN_FIRE_RL_bus_merged_1_awFlit &&
	     core$core_mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_bus_merged_1_awug_doDrop =
	     CAN_FIRE_RL_bus_merged_1_awug_doDrop &&
	     !WILL_FIRE_RL_core_mem_master_sig_awSig_src_doDrop ;

  // rule RL_bus_merged_1_wug_warnDoDrop
  assign CAN_FIRE_RL_bus_merged_1_wug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_1_wFlit &&
	     !core$core_mem_master_w_canPeek ;
  assign WILL_FIRE_RL_bus_merged_1_wug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_1_wug_warnDoDrop ;

  // rule RL_bus_merged_1_wug_doDrop
  assign CAN_FIRE_RL_bus_merged_1_wug_doDrop =
	     core$RDY_core_mem_master_w_drop &&
	     CAN_FIRE_RL_bus_merged_1_wFlit &&
	     core$core_mem_master_w_canPeek ;
  assign WILL_FIRE_RL_bus_merged_1_wug_doDrop =
	     CAN_FIRE_RL_bus_merged_1_wug_doDrop &&
	     !WILL_FIRE_RL_core_mem_master_sig_wSig_src_doDrop ;

  // rule RL_bus_split_0_putFirst
  assign CAN_FIRE_RL_bus_split_0_putFirst =
	     CAN_FIRE_RL_bus_output_selected &&
	     bus_split_0_flitLeft == 8'd0 &&
	     boot_rom_axi4_deburster_inShim_awff$FULL_N &&
	     boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_0_putFirst =
	     CAN_FIRE_RL_bus_split_0_putFirst ;

  // rule RL_bus_split_0_putOther
  assign CAN_FIRE_RL_bus_split_0_putOther =
	     CAN_FIRE_RL_bus_output_selected &&
	     bus_split_0_flitLeft != 8'd0 &&
	     boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_0_putOther =
	     CAN_FIRE_RL_bus_split_0_putOther ;

  // rule RL_bus_split_0_awug_warnDoPut
  assign CAN_FIRE_RL_bus_split_0_awug_warnDoPut =
	     MUX_bus_split_0_flitLeft$write_1__SEL_2 &&
	     !boot_rom_axi4_deburster_inShim_awff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_0_awug_warnDoPut =
	     CAN_FIRE_RL_bus_split_0_awug_warnDoPut ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeAW
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW =
	     boot_rom_axi4_deburster_inShim_awff$EMPTY_N &&
	     !boot_rom_axi4_deburster_inSerial_shim_awff_rv[100] &&
	     boot_rom_axi4_deburster_inSerial_state == 2'd0 &&
	     (boot_rom_axi4_deburster_inSerial_lastWasRead ||
	      !boot_rom_axi4_deburster_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ;

  // rule RL_bus_split_0_wug_warnDoPut
  assign CAN_FIRE_RL_bus_split_0_wug_warnDoPut =
	     bus_split_0_wug_putWire$whas &&
	     !boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_0_wug_warnDoPut =
	     CAN_FIRE_RL_bus_split_0_wug_warnDoPut ;

  // rule RL_bus_split_1_putFirst
  assign CAN_FIRE_RL_bus_split_1_putFirst =
	     CAN_FIRE_RL_bus_output_selected_1 &&
	     bus_split_1_flitLeft == 8'd0 &&
	     mem0_controller_axi4_deburster_inShim_awff$FULL_N &&
	     mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_1_putFirst =
	     CAN_FIRE_RL_bus_split_1_putFirst ;

  // rule RL_bus_split_1_putOther
  assign CAN_FIRE_RL_bus_split_1_putOther =
	     CAN_FIRE_RL_bus_output_selected_1 &&
	     bus_split_1_flitLeft != 8'd0 &&
	     mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_1_putOther =
	     CAN_FIRE_RL_bus_split_1_putOther ;

  // rule RL_bus_split_1_awug_warnDoPut
  assign CAN_FIRE_RL_bus_split_1_awug_warnDoPut =
	     MUX_bus_split_1_flitLeft$write_1__SEL_2 &&
	     !mem0_controller_axi4_deburster_inShim_awff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_1_awug_warnDoPut =
	     CAN_FIRE_RL_bus_split_1_awug_warnDoPut ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeAW
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW =
	     mem0_controller_axi4_deburster_inShim_awff$EMPTY_N &&
	     !mem0_controller_axi4_deburster_inSerial_shim_awff_rv[100] &&
	     mem0_controller_axi4_deburster_inSerial_state == 2'd0 &&
	     (mem0_controller_axi4_deburster_inSerial_lastWasRead ||
	      !mem0_controller_axi4_deburster_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ;

  // rule RL_bus_split_1_wug_warnDoPut
  assign CAN_FIRE_RL_bus_split_1_wug_warnDoPut =
	     bus_split_1_wug_putWire$whas &&
	     !mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_1_wug_warnDoPut =
	     CAN_FIRE_RL_bus_split_1_wug_warnDoPut ;

  // rule RL_bus_split_2_putFirst
  assign CAN_FIRE_RL_bus_split_2_putFirst =
	     CAN_FIRE_RL_bus_output_selected_2 &&
	     bus_split_2_flitLeft == 8'd0 &&
	     uart0$slave_aw_canPut &&
	     uart0$slave_w_canPut ;
  assign WILL_FIRE_RL_bus_split_2_putFirst =
	     CAN_FIRE_RL_bus_split_2_putFirst ;

  // rule RL_bus_split_2_putOther
  assign CAN_FIRE_RL_bus_split_2_putOther =
	     CAN_FIRE_RL_bus_output_selected_2 &&
	     bus_split_2_flitLeft != 8'd0 &&
	     uart0$slave_w_canPut ;
  assign WILL_FIRE_RL_bus_split_2_putOther =
	     CAN_FIRE_RL_bus_split_2_putOther ;

  // rule RL_bus_split_2_awug_warnDoPut
  assign CAN_FIRE_RL_bus_split_2_awug_warnDoPut =
	     MUX_bus_split_2_flitLeft$write_1__SEL_2 &&
	     !uart0$slave_aw_canPut ;
  assign WILL_FIRE_RL_bus_split_2_awug_warnDoPut =
	     CAN_FIRE_RL_bus_split_2_awug_warnDoPut ;

  // rule RL_bus_split_2_wug_warnDoPut
  assign CAN_FIRE_RL_bus_split_2_wug_warnDoPut =
	     bus_split_2_wug_putWire$whas && !uart0$slave_w_canPut ;
  assign WILL_FIRE_RL_bus_split_2_wug_warnDoPut =
	     CAN_FIRE_RL_bus_split_2_wug_warnDoPut ;

  // rule RL_bus_split_3_putFirst
  assign CAN_FIRE_RL_bus_split_3_putFirst =
	     CAN_FIRE_RL_bus_output_selected_3 &&
	     bus_split_3_flitLeft == 8'd0 &&
	     s_otherPeripheralsPortShim_awff$FULL_N &&
	     s_otherPeripheralsPortShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_3_putFirst =
	     CAN_FIRE_RL_bus_split_3_putFirst ;

  // rule RL_bus_split_3_putOther
  assign CAN_FIRE_RL_bus_split_3_putOther =
	     CAN_FIRE_RL_bus_output_selected_3 &&
	     bus_split_3_flitLeft != 8'd0 &&
	     s_otherPeripheralsPortShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_3_putOther =
	     CAN_FIRE_RL_bus_split_3_putOther ;

  // rule RL_bus_split_3_awug_warnDoPut
  assign CAN_FIRE_RL_bus_split_3_awug_warnDoPut =
	     MUX_bus_split_3_flitLeft$write_1__SEL_2 &&
	     !s_otherPeripheralsPortShim_awff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_3_awug_warnDoPut =
	     CAN_FIRE_RL_bus_split_3_awug_warnDoPut ;

  // rule RL_s_otherPeripheralsPort_master_sig_awSig_src_doDrop
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_doDrop =
	     s_otherPeripheralsPortShim_awff$EMPTY_N &&
	     s_otherPeripheralsPort_master_sig_awSig_src_dropWire$whas ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_doDrop =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_doDrop ;

  // rule RL_bus_split_3_awug_doPut
  assign CAN_FIRE_RL_bus_split_3_awug_doPut =
	     s_otherPeripheralsPortShim_awff$FULL_N &&
	     MUX_bus_split_3_flitLeft$write_1__SEL_2 ;
  assign WILL_FIRE_RL_bus_split_3_awug_doPut =
	     CAN_FIRE_RL_bus_split_3_awug_doPut ;

  // rule RL_bus_split_3_wug_warnDoPut
  assign CAN_FIRE_RL_bus_split_3_wug_warnDoPut =
	     bus_split_3_wug_putWire$whas &&
	     !s_otherPeripheralsPortShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_3_wug_warnDoPut =
	     CAN_FIRE_RL_bus_split_3_wug_warnDoPut ;

  // rule RL_s_otherPeripheralsPort_master_sig_wSig_src_doDrop
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_doDrop =
	     s_otherPeripheralsPortShim_wff$EMPTY_N &&
	     s_otherPeripheralsPort_master_sig_wSig_src_dropWire$whas ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_doDrop =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_doDrop ;

  // rule RL_bus_split_3_wug_doPut
  assign CAN_FIRE_RL_bus_split_3_wug_doPut =
	     s_otherPeripheralsPortShim_wff$FULL_N &&
	     bus_split_3_wug_putWire$whas ;
  assign WILL_FIRE_RL_bus_split_3_wug_doPut =
	     CAN_FIRE_RL_bus_split_3_wug_doPut ;

  // rule RL_bus_1_set_input_canPeek_wire
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire = 1'd1 ;

  // rule RL_bus_1_set_input_peek_wires
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires =
	     core$RDY_cpu_imem_master_ar_peek ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires =
	     core$RDY_cpu_imem_master_ar_peek ;

  // rule RL_bus_1_set_input_canPeek_wire_1
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire_1 = 1'd1 ;

  // rule RL_bus_1_set_input_peek_wires_1
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires_1 =
	     core$RDY_core_mem_master_ar_peek ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires_1 =
	     core$RDY_core_mem_master_ar_peek ;

  // rule RL_core_mem_master_sig_arSig_src_doDrop
  assign CAN_FIRE_RL_core_mem_master_sig_arSig_src_doDrop =
	     core$RDY_core_mem_master_ar_drop &&
	     core_mem_master_sig_arSig_src_dropWire$whas &&
	     core$core_mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_arSig_src_doDrop =
	     CAN_FIRE_RL_core_mem_master_sig_arSig_src_doDrop ;

  // rule RL_bus_1_set_output_canPut_wire
  assign CAN_FIRE_RL_bus_1_set_output_canPut_wire = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_output_canPut_wire = 1'd1 ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeAR
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR =
	     boot_rom_axi4_deburster_inShim_arff$EMPTY_N &&
	     !boot_rom_axi4_deburster_inSerial_shim_arff_rv[100] &&
	     boot_rom_axi4_deburster_inSerial_state == 2'd0 &&
	     (!boot_rom_axi4_deburster_inSerial_lastWasRead ||
	      !boot_rom_axi4_deburster_inShim_awff$EMPTY_N) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;

  // rule RL_boot_rom_axi4_deburster_forward_read_req
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req =
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[100] &&
	     boot_rom_axi4_deburster_outShim_arff$FULL_N &&
	     boot_rom_axi4_deburster_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeW
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW =
	     boot_rom_axi4_deburster_inShim_wff$EMPTY_N &&
	     !boot_rom_axi4_deburster_inSerial_shim_wff_rv[73] &&
	     boot_rom_axi4_deburster_inSerial_state$port1__read == 2'd1 ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW ;

  // rule RL_boot_rom_axi4_deburster_forward_write_req
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[100] &&
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[73] &&
	     boot_rom_axi4_deburster_outShim_awff$FULL_N &&
	     boot_rom_axi4_deburster_outShim_wff$FULL_N &&
	     (!boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ||
	      boot_rom_axi4_deburster_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeB
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read[9] &&
	     boot_rom_axi4_deburster_inShim_bff$FULL_N &&
	     boot_rom_axi4_deburster_inSerial_state$port1__read == 2'd2 ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ;

  // rule RL_bus_split_0_awug_doPut
  assign CAN_FIRE_RL_bus_split_0_awug_doPut =
	     boot_rom_axi4_deburster_inShim_awff$FULL_N &&
	     MUX_bus_split_0_flitLeft$write_1__SEL_2 ;
  assign WILL_FIRE_RL_bus_split_0_awug_doPut =
	     CAN_FIRE_RL_bus_split_0_awug_doPut ;

  // rule RL_bus_split_0_wug_doPut
  assign CAN_FIRE_RL_bus_split_0_wug_doPut =
	     boot_rom_axi4_deburster_inShim_wff$FULL_N &&
	     bus_split_0_wug_putWire$whas ;
  assign WILL_FIRE_RL_bus_split_0_wug_doPut =
	     CAN_FIRE_RL_bus_split_0_wug_doPut ;

  // rule RL_bus_1_set_output_canPut_wire_1
  assign CAN_FIRE_RL_bus_1_set_output_canPut_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_output_canPut_wire_1 = 1'd1 ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeAR
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR =
	     mem0_controller_axi4_deburster_inShim_arff$EMPTY_N &&
	     !mem0_controller_axi4_deburster_inSerial_shim_arff_rv[100] &&
	     mem0_controller_axi4_deburster_inSerial_state == 2'd0 &&
	     (!mem0_controller_axi4_deburster_inSerial_lastWasRead ||
	      !mem0_controller_axi4_deburster_inShim_awff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;

  // rule RL_mem0_controller_axi4_deburster_forward_read_req
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req =
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[100] &&
	     mem0_controller_axi4_deburster_outShim_arff$FULL_N &&
	     mem0_controller_axi4_deburster_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeW
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW =
	     mem0_controller_axi4_deburster_inShim_wff$EMPTY_N &&
	     !mem0_controller_axi4_deburster_inSerial_shim_wff_rv[73] &&
	     mem0_controller_axi4_deburster_inSerial_state$port1__read ==
	     2'd1 ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW ;

  // rule RL_mem0_controller_axi4_deburster_forward_write_req
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[100] &&
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[73] &&
	     mem0_controller_axi4_deburster_outShim_awff$FULL_N &&
	     mem0_controller_axi4_deburster_outShim_wff$FULL_N &&
	     (!mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ||
	      mem0_controller_axi4_deburster_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeB
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read[9] &&
	     mem0_controller_axi4_deburster_inShim_bff$FULL_N &&
	     mem0_controller_axi4_deburster_inSerial_state$port1__read ==
	     2'd2 ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ;

  // rule RL_bus_split_1_awug_doPut
  assign CAN_FIRE_RL_bus_split_1_awug_doPut =
	     mem0_controller_axi4_deburster_inShim_awff$FULL_N &&
	     MUX_bus_split_1_flitLeft$write_1__SEL_2 ;
  assign WILL_FIRE_RL_bus_split_1_awug_doPut =
	     CAN_FIRE_RL_bus_split_1_awug_doPut ;

  // rule RL_bus_split_1_wug_doPut
  assign CAN_FIRE_RL_bus_split_1_wug_doPut =
	     mem0_controller_axi4_deburster_inShim_wff$FULL_N &&
	     bus_split_1_wug_putWire$whas ;
  assign WILL_FIRE_RL_bus_split_1_wug_doPut =
	     CAN_FIRE_RL_bus_split_1_wug_doPut ;

  // rule RL_bus_1_set_output_canPut_wire_2
  assign CAN_FIRE_RL_bus_1_set_output_canPut_wire_2 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_output_canPut_wire_2 = 1'd1 ;

  // rule RL_bus_1_set_output_canPut_wire_3
  assign CAN_FIRE_RL_bus_1_set_output_canPut_wire_3 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_output_canPut_wire_3 = 1'd1 ;

  // rule RL_s_otherPeripheralsPort_master_sig_arSig_src_doDrop
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_doDrop =
	     s_otherPeripheralsPortShim_arff$EMPTY_N &&
	     s_otherPeripheralsPort_master_sig_arSig_src_dropWire$whas ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_doDrop =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_doDrop ;

  // rule RL_bus_1_set_dflt_output_canPut_wire
  assign CAN_FIRE_RL_bus_1_set_dflt_output_canPut_wire = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_dflt_output_canPut_wire = 1'd1 ;

  // rule RL_bus_1_arbitrate
  assign CAN_FIRE_RL_bus_1_arbitrate =
	     bus_1_inputCanPeek_0_whas__078_AND_bus_1_input_ETC___d2175 &&
	     !bus_1_moreFlits[6] ;
  assign WILL_FIRE_RL_bus_1_arbitrate = CAN_FIRE_RL_bus_1_arbitrate ;

  // rule RL_bus_1_arbitration_fail
  assign CAN_FIRE_RL_bus_1_arbitration_fail =
	     CAN_FIRE_RL_bus_1_arbitrate && bus_1_selectInput_0$wget &&
	     !core$cpu_imem_master_ar_canPeek ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail =
	     CAN_FIRE_RL_bus_1_arbitration_fail ;

  // rule RL_bus_1_arbitration_fail_1
  assign CAN_FIRE_RL_bus_1_arbitration_fail_1 =
	     CAN_FIRE_RL_bus_1_arbitrate && bus_1_selectInput_1$wget &&
	     !core$core_mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail_1 =
	     CAN_FIRE_RL_bus_1_arbitration_fail_1 ;

  // rule RL_bus_1_input_first_flit
  assign CAN_FIRE_RL_bus_1_input_first_flit =
	     core$RDY_cpu_imem_master_ar_drop && !bus_1_moreFlits[6] &&
	     CAN_FIRE_RL_bus_1_arbitrate &&
	     bus_1_selectInput_0$wget &&
	     core$cpu_imem_master_ar_canPeek ;
  assign WILL_FIRE_RL_bus_1_input_first_flit =
	     CAN_FIRE_RL_bus_1_input_first_flit ;

  // rule RL_bus_1_input_follow_flit
  assign CAN_FIRE_RL_bus_1_input_follow_flit =
	     core$RDY_cpu_imem_master_ar_drop && bus_1_moreFlits[6] &&
	     bus_1_moreFlits[4] &&
	     core$cpu_imem_master_ar_canPeek &&
	     (NOT_IF_bus_1_moreFlits_176_BIT_0_249_THEN_1_EL_ETC___d2262 ||
	      IF_NOT_bus_1_moreFlits_176_BIT_0_249_263_OR_NO_ETC___d2272) ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit =
	     CAN_FIRE_RL_bus_1_input_follow_flit ;

  // rule RL_bus_1_input_first_flit_1
  assign CAN_FIRE_RL_bus_1_input_first_flit_1 =
	     core$RDY_core_mem_master_ar_drop && !bus_1_moreFlits[6] &&
	     CAN_FIRE_RL_bus_1_arbitrate &&
	     bus_1_selectInput_1$wget &&
	     core$core_mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_bus_1_input_first_flit_1 =
	     CAN_FIRE_RL_bus_1_input_first_flit_1 &&
	     !WILL_FIRE_RL_core_mem_master_sig_arSig_src_doDrop ;

  // rule RL_bus_1_input_follow_flit_1
  assign CAN_FIRE_RL_bus_1_input_follow_flit_1 =
	     core$RDY_core_mem_master_ar_drop && bus_1_moreFlits[6] &&
	     bus_1_moreFlits[5] &&
	     core$core_mem_master_ar_canPeek &&
	     (NOT_IF_bus_1_moreFlits_176_BIT_0_249_THEN_1_EL_ETC___d2262 ||
	      IF_NOT_bus_1_moreFlits_176_BIT_0_249_263_OR_NO_ETC___d2272) ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit_1 =
	     CAN_FIRE_RL_bus_1_input_follow_flit_1 &&
	     !WILL_FIRE_RL_core_mem_master_sig_arSig_src_doDrop ;

  // rule __me_check_292
  assign CAN_FIRE___me_check_292 = 1'b1 ;
  assign WILL_FIRE___me_check_292 = 1'b1 ;

  // rule __me_check_294
  assign CAN_FIRE___me_check_294 = 1'b1 ;
  assign WILL_FIRE___me_check_294 = 1'b1 ;

  // rule RL_bus_1_output_selected
  assign CAN_FIRE_RL_bus_1_output_selected =
	     boot_rom_axi4_deburster_inShim_arff$FULL_N &&
	     bus_1_toOutput_0$whas ;
  assign WILL_FIRE_RL_bus_1_output_selected =
	     CAN_FIRE_RL_bus_1_output_selected ;

  // rule RL_bus_1_output_selected_1
  assign CAN_FIRE_RL_bus_1_output_selected_1 =
	     mem0_controller_axi4_deburster_inShim_arff$FULL_N &&
	     bus_1_toOutput_1$whas ;
  assign WILL_FIRE_RL_bus_1_output_selected_1 =
	     CAN_FIRE_RL_bus_1_output_selected_1 ;

  // rule RL_bus_1_output_selected_3
  assign CAN_FIRE_RL_bus_1_output_selected_3 =
	     s_otherPeripheralsPortShim_arff$FULL_N && bus_1_toOutput_3$whas ;
  assign WILL_FIRE_RL_bus_1_output_selected_3 =
	     CAN_FIRE_RL_bus_1_output_selected_3 ;

  // rule RL_bus_1_set_input_canPeek_wire_2
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire_2 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire_2 = 1'd1 ;

  // rule RL_bus_1_dflt_output_selected
  assign CAN_FIRE_RL_bus_1_dflt_output_selected =
	     bus_1_toDfltOutput$whas && bus_1_noRouteSlv_flitCount == 9'd0 ;
  assign WILL_FIRE_RL_bus_1_dflt_output_selected =
	     CAN_FIRE_RL_bus_1_dflt_output_selected ;

  // rule RL_bus_1_set_input_peek_wires_2
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires_2 =
	     bus_1_noRouteSlv_flitCount != 9'd0 ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires_2 =
	     CAN_FIRE_RL_bus_1_set_input_peek_wires_2 ;

  // rule RL_bus_1_set_input_canPeek_wire_3
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire_3 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire_3 = 1'd1 ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeR
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR =
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[74] &&
	     boot_rom_axi4_deburster_inShim_rff$FULL_N &&
	     boot_rom_axi4_deburster_inSerial_state$port1__read == 2'd2 ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR ;

  // rule __me_check_4
  assign CAN_FIRE___me_check_4 = 1'b1 ;
  assign WILL_FIRE___me_check_4 = 1'b1 ;

  // rule RL_bus_1_set_input_peek_wires_3
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires_3 =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires_3 =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;

  // rule RL_bus_1_set_input_canPeek_wire_4
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire_4 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire_4 = 1'd1 ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeR
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR =
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[74] &&
	     mem0_controller_axi4_deburster_inShim_rff$FULL_N &&
	     mem0_controller_axi4_deburster_inSerial_state$port1__read ==
	     2'd2 ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR ;

  // rule __me_check_14
  assign CAN_FIRE___me_check_14 = 1'b1 ;
  assign WILL_FIRE___me_check_14 = 1'b1 ;

  // rule RL_bus_1_set_input_peek_wires_4
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires_4 =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires_4 =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;

  // rule RL_bus_1_set_input_canPeek_wire_5
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire_5 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire_5 = 1'd1 ;

  // rule RL_rl_reset_complete_initial
  assign CAN_FIRE_RL_rl_reset_complete_initial = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_reset_complete_initial =
	     MUX_rg_state$write_1__SEL_2 ;

  // rule RL_bus_split_2_awug_doPut
  assign CAN_FIRE_RL_bus_split_2_awug_doPut =
	     uart0$RDY_slave_aw_put &&
	     MUX_bus_split_2_flitLeft$write_1__SEL_2 ;
  assign WILL_FIRE_RL_bus_split_2_awug_doPut =
	     CAN_FIRE_RL_bus_split_2_awug_doPut ;

  // rule RL_bus_split_2_wug_doPut
  assign CAN_FIRE_RL_bus_split_2_wug_doPut =
	     uart0$RDY_slave_w_put && bus_split_2_wug_putWire$whas ;
  assign WILL_FIRE_RL_bus_split_2_wug_doPut =
	     CAN_FIRE_RL_bus_split_2_wug_doPut ;

  // rule RL_bus_1_output_selected_2
  assign CAN_FIRE_RL_bus_1_output_selected_2 =
	     uart0$RDY_slave_ar_put && bus_1_toOutput_2$whas &&
	     uart0$slave_ar_canPut ;
  assign WILL_FIRE_RL_bus_1_output_selected_2 =
	     CAN_FIRE_RL_bus_1_output_selected_2 ;

  // rule __me_check_296
  assign CAN_FIRE___me_check_296 = 1'b1 ;
  assign WILL_FIRE___me_check_296 = 1'b1 ;

  // rule RL_bus_1_set_input_peek_wires_5
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires_5 = uart0$RDY_slave_r_peek ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires_5 = uart0$RDY_slave_r_peek ;

  // rule RL_bus_1_set_input_canPeek_wire_6
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire_6 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire_6 = 1'd1 ;

  // rule RL_s_otherPeripheralsPort_master_sig_rSig_snk_doPut
  assign CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_doPut =
	     s_otherPeripheralsPortShim_rff$FULL_N &&
	     s_otherPeripheralsPort_master_sig_rSig_snk_putWire$whas ;
  assign WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_doPut =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_doPut ;

  // rule RL_bus_1_set_input_peek_wires_6
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires_6 =
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires_6 =
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;

  // rule RL_bus_1_set_output_canPut_wire_4
  assign CAN_FIRE_RL_bus_1_set_output_canPut_wire_4 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_output_canPut_wire_4 = 1'd1 ;

  // rule RL_bus_1_set_output_canPut_wire_5
  assign CAN_FIRE_RL_bus_1_set_output_canPut_wire_5 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_output_canPut_wire_5 = 1'd1 ;

  // rule RL_core_mem_master_sig_rSig_snk_doPut
  assign CAN_FIRE_RL_core_mem_master_sig_rSig_snk_doPut =
	     core$RDY_core_mem_master_r_put &&
	     core_mem_master_sig_rSig_snk_putWire$whas ;
  assign WILL_FIRE_RL_core_mem_master_sig_rSig_snk_doPut =
	     CAN_FIRE_RL_core_mem_master_sig_rSig_snk_doPut ;

  // rule RL_bus_1_arbitrate_1
  assign CAN_FIRE_RL_bus_1_arbitrate_1 =
	     bus_1_inputCanPeek_0_1_whas__377_AND_bus_1_inp_ETC___d2463 &&
	     !bus_1_moreFlits_1[7] ;
  assign WILL_FIRE_RL_bus_1_arbitrate_1 = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // rule RL_bus_1_arbitration_fail_2
  assign CAN_FIRE_RL_bus_1_arbitration_fail_2 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_0_1$wget &&
	     !(bus_1_noRouteSlv_flitCount != 9'd0) ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail_2 =
	     CAN_FIRE_RL_bus_1_arbitration_fail_2 ;

  // rule RL_bus_1_legal_destination_fail_2
  assign CAN_FIRE_RL_bus_1_legal_destination_fail_2 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_0_1$wget &&
	     bus_1_noRouteSlv_flitCount != 9'd0 &&
	     (bus_1_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_1_legal_destination_fail_2 =
	     CAN_FIRE_RL_bus_1_legal_destination_fail_2 ;

  // rule RL_bus_1_arbitration_fail_3
  assign CAN_FIRE_RL_bus_1_arbitration_fail_3 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_1_1$wget &&
	     !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail_3 =
	     CAN_FIRE_RL_bus_1_arbitration_fail_3 ;

  // rule RL_bus_1_legal_destination_fail_3
  assign CAN_FIRE_RL_bus_1_legal_destination_fail_3 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_1_1$wget &&
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     (bus_1_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_1_legal_destination_fail_3 =
	     CAN_FIRE_RL_bus_1_legal_destination_fail_3 ;

  // rule RL_bus_1_arbitration_fail_4
  assign CAN_FIRE_RL_bus_1_arbitration_fail_4 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_2$wget &&
	     !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail_4 =
	     CAN_FIRE_RL_bus_1_arbitration_fail_4 ;

  // rule RL_bus_1_legal_destination_fail_4
  assign CAN_FIRE_RL_bus_1_legal_destination_fail_4 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_2$wget &&
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     (bus_1_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_2$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_1_legal_destination_fail_4 =
	     CAN_FIRE_RL_bus_1_legal_destination_fail_4 ;

  // rule RL_bus_1_arbitration_fail_5
  assign CAN_FIRE_RL_bus_1_arbitration_fail_5 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_3$wget &&
	     !uart0$slave_r_canPeek ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail_5 =
	     CAN_FIRE_RL_bus_1_arbitration_fail_5 ;

  // rule RL_bus_1_legal_destination_fail_5
  assign CAN_FIRE_RL_bus_1_legal_destination_fail_5 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_3$wget &&
	     uart0$slave_r_canPeek &&
	     (bus_1_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_3$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_1_legal_destination_fail_5 =
	     CAN_FIRE_RL_bus_1_legal_destination_fail_5 ;

  // rule RL_bus_1_arbitration_fail_6
  assign CAN_FIRE_RL_bus_1_arbitration_fail_6 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_4$wget &&
	     !s_otherPeripheralsPortShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail_6 =
	     CAN_FIRE_RL_bus_1_arbitration_fail_6 ;

  // rule RL_bus_1_legal_destination_fail_6
  assign CAN_FIRE_RL_bus_1_legal_destination_fail_6 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_4$wget &&
	     s_otherPeripheralsPortShim_rff$EMPTY_N &&
	     (bus_1_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_4$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_1_legal_destination_fail_6 =
	     CAN_FIRE_RL_bus_1_legal_destination_fail_6 ;

  // rule RL_bus_1_input_first_flit_2
  assign CAN_FIRE_RL_bus_1_input_first_flit_2 =
	     bus_1_noRouteSlv_flitCount != 9'd0 && !bus_1_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_1_arbitrate_1 &&
	     bus_1_selectInput_0_1$wget &&
	     bus_1_noRouteSlv_flitCount != 9'd0 ;
  assign WILL_FIRE_RL_bus_1_input_first_flit_2 =
	     CAN_FIRE_RL_bus_1_input_first_flit_2 ;

  // rule RL_bus_1_input_follow_flit_2
  assign CAN_FIRE_RL_bus_1_input_follow_flit_2 =
	     bus_1_noRouteSlv_flitCount != 9'd0 && bus_1_moreFlits_1[7] &&
	     bus_1_moreFlits_1[2] &&
	     bus_1_noRouteSlv_flitCount != 9'd0 &&
	     IF_NOT_bus_1_moreFlits_1_464_BIT_0_710_711_OR__ETC___d2715 ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit_2 =
	     CAN_FIRE_RL_bus_1_input_follow_flit_2 ;

  // rule RL_bus_1_input_first_flit_3
  assign CAN_FIRE_RL_bus_1_input_first_flit_3 =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     !bus_1_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_1_arbitrate_1 &&
	     bus_1_selectInput_1_1$wget &&
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_input_first_flit_3 =
	     CAN_FIRE_RL_bus_1_input_first_flit_3 ;

  // rule RL_bus_1_input_follow_flit_3
  assign CAN_FIRE_RL_bus_1_input_follow_flit_3 =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_1_moreFlits_1[7] &&
	     bus_1_moreFlits_1[3] &&
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     IF_NOT_bus_1_moreFlits_1_464_BIT_0_710_711_OR__ETC___d2715 ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit_3 =
	     CAN_FIRE_RL_bus_1_input_follow_flit_3 ;

  // rule __me_check_326
  assign CAN_FIRE___me_check_326 = 1'b1 ;
  assign WILL_FIRE___me_check_326 = 1'b1 ;

  // rule RL_bus_1_input_first_flit_4
  assign CAN_FIRE_RL_bus_1_input_first_flit_4 =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     !bus_1_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_1_arbitrate_1 &&
	     bus_1_selectInput_2$wget &&
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_input_first_flit_4 =
	     CAN_FIRE_RL_bus_1_input_first_flit_4 ;

  // rule RL_bus_1_input_follow_flit_4
  assign CAN_FIRE_RL_bus_1_input_follow_flit_4 =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_1_moreFlits_1[7] &&
	     bus_1_moreFlits_1[4] &&
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     IF_NOT_bus_1_moreFlits_1_464_BIT_0_710_711_OR__ETC___d2715 ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit_4 =
	     CAN_FIRE_RL_bus_1_input_follow_flit_4 ;

  // rule __me_check_328
  assign CAN_FIRE___me_check_328 = 1'b1 ;
  assign WILL_FIRE___me_check_328 = 1'b1 ;

  // rule RL_rl_reset_start_initial
  assign CAN_FIRE_RL_rl_reset_start_initial = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_reset_start_initial = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_bus_1_input_first_flit_5
  assign CAN_FIRE_RL_bus_1_input_first_flit_5 =
	     uart0$RDY_slave_r_drop && !bus_1_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_1_arbitrate_1 &&
	     bus_1_selectInput_3$wget &&
	     uart0$slave_r_canPeek ;
  assign WILL_FIRE_RL_bus_1_input_first_flit_5 =
	     CAN_FIRE_RL_bus_1_input_first_flit_5 ;

  // rule RL_bus_1_input_follow_flit_5
  assign CAN_FIRE_RL_bus_1_input_follow_flit_5 =
	     uart0$RDY_slave_r_drop && bus_1_moreFlits_1[7] &&
	     bus_1_moreFlits_1[5] &&
	     uart0$slave_r_canPeek &&
	     IF_NOT_bus_1_moreFlits_1_464_BIT_0_710_711_OR__ETC___d2715 ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit_5 =
	     CAN_FIRE_RL_bus_1_input_follow_flit_5 ;

  // rule __me_check_330
  assign CAN_FIRE___me_check_330 = 1'b1 ;
  assign WILL_FIRE___me_check_330 = 1'b1 ;

  // rule RL_bus_1_input_first_flit_6
  assign CAN_FIRE_RL_bus_1_input_first_flit_6 =
	     s_otherPeripheralsPortShim_rff$EMPTY_N &&
	     !bus_1_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_1_arbitrate_1 &&
	     bus_1_selectInput_4$wget &&
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_input_first_flit_6 =
	     CAN_FIRE_RL_bus_1_input_first_flit_6 ;

  // rule RL_bus_1_input_follow_flit_6
  assign CAN_FIRE_RL_bus_1_input_follow_flit_6 =
	     s_otherPeripheralsPortShim_rff$EMPTY_N && bus_1_moreFlits_1[7] &&
	     bus_1_moreFlits_1[6] &&
	     s_otherPeripheralsPortShim_rff$EMPTY_N &&
	     IF_NOT_bus_1_moreFlits_1_464_BIT_0_710_711_OR__ETC___d2715 ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit_6 =
	     CAN_FIRE_RL_bus_1_input_follow_flit_6 ;

  // rule __me_check_324
  assign CAN_FIRE___me_check_324 = 1'b1 ;
  assign WILL_FIRE___me_check_324 = 1'b1 ;

  // rule __me_check_332
  assign CAN_FIRE___me_check_332 = 1'b1 ;
  assign WILL_FIRE___me_check_332 = 1'b1 ;

  // rule RL_bus_1_output_selected_4
  assign CAN_FIRE_RL_bus_1_output_selected_4 =
	     core$RDY_cpu_imem_master_r_put && bus_1_toOutput_0_1$whas &&
	     core$cpu_imem_master_r_canPut ;
  assign WILL_FIRE_RL_bus_1_output_selected_4 =
	     CAN_FIRE_RL_bus_1_output_selected_4 ;

  // rule RL_bus_1_output_selected_5
  assign CAN_FIRE_RL_bus_1_output_selected_5 =
	     core$RDY_core_mem_master_r_put && bus_1_toOutput_1_1$whas &&
	     core$core_mem_master_r_canPut ;
  assign WILL_FIRE_RL_bus_1_output_selected_5 =
	     CAN_FIRE_RL_bus_1_output_selected_5 &&
	     !WILL_FIRE_RL_core_mem_master_sig_rSig_snk_doPut ;

  // rule __me_check_334
  assign CAN_FIRE___me_check_334 = 1'b1 ;
  assign WILL_FIRE___me_check_334 = 1'b1 ;

  // inputs to muxes for submodule ports
  assign MUX_boot_rom_axi4_deburster_inSerial_state$port1__write_1__SEL_2 =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR &&
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[0] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_1[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_1[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_2[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_2[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_3[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_3[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_7 =
	     WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_4[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_8 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_4[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_9 =
	     WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_5[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_10 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_5[1] ;
  assign MUX_bus_1_toDfltOutput$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_1_toDfltOutput$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_1_toDfltOutput$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_1_toDfltOutput$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_1_toOutput_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[0] ;
  assign MUX_bus_1_toOutput_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[0] ;
  assign MUX_bus_1_toOutput_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[0] ;
  assign MUX_bus_1_toOutput_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	     (bus_1_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_0_1$wget[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	     (bus_1_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_1_1$wget[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	     (bus_1_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_2$wget[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_9 =
	     WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	     (bus_1_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_3$wget[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_10 =
	     WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	     (bus_1_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_4$wget[0] ;
  assign MUX_bus_1_toOutput_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[1] ;
  assign MUX_bus_1_toOutput_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[1] ;
  assign MUX_bus_1_toOutput_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[1] ;
  assign MUX_bus_1_toOutput_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	     (bus_1_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_0_1$wget[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	     (bus_1_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_1_1$wget[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	     (bus_1_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_2$wget[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_9 =
	     WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	     (bus_1_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_3$wget[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_10 =
	     WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	     (bus_1_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_4$wget[1] ;
  assign MUX_bus_1_toOutput_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[2] ;
  assign MUX_bus_1_toOutput_2$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[2] ;
  assign MUX_bus_1_toOutput_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[2] ;
  assign MUX_bus_1_toOutput_2$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[2] ;
  assign MUX_bus_1_toOutput_3$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[3] ;
  assign MUX_bus_1_toOutput_3$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[3] ;
  assign MUX_bus_1_toOutput_3$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[3] ;
  assign MUX_bus_1_toOutput_3$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[3] ;
  assign MUX_bus_moreFlits$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     !MUX_bus_toDfltOutput$wset_1__VAL_1[1] ;
  assign MUX_bus_moreFlits$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     MUX_bus_toDfltOutput$wset_1__VAL_1[1] ;
  assign MUX_bus_moreFlits$write_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     !MUX_bus_toDfltOutput$wset_1__VAL_2[1] ;
  assign MUX_bus_moreFlits$write_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     MUX_bus_toDfltOutput$wset_1__VAL_2[1] ;
  assign MUX_bus_split_0_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_0_putOther &&
	     bus_split_0_doPut$wget[173] ;
  assign MUX_bus_split_0_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_0_putFirst &&
	     !bus_split_0_doPut$wget[173] ;
  assign MUX_bus_split_1_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_1_putOther &&
	     bus_split_1_doPut$wget[173] ;
  assign MUX_bus_split_1_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_1_putFirst &&
	     !bus_split_1_doPut$wget[173] ;
  assign MUX_bus_split_2_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_2_putOther &&
	     bus_split_2_doPut$wget[173] ;
  assign MUX_bus_split_2_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_2_putFirst &&
	     !bus_split_2_doPut$wget[173] ;
  assign MUX_bus_split_3_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_3_putOther &&
	     bus_split_3_doPut$wget[173] ;
  assign MUX_bus_split_3_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_3_putFirst &&
	     !bus_split_3_doPut$wget[173] ;
  assign MUX_bus_toDfltOutput$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_toDfltOutput$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_toDfltOutput$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_toDfltOutput$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_toOutput_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[0] ;
  assign MUX_bus_toOutput_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[0] ;
  assign MUX_bus_toOutput_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[0] ;
  assign MUX_bus_toOutput_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit_2 &&
	     (bus_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_0_1$wget[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit_2 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit_3 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_follow_flit_4 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_input_follow_flit_5 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_input_follow_flit_6 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_bus_input_first_flit_3 &&
	     (bus_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_1_1$wget[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_bus_input_first_flit_4 &&
	     (bus_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_2$wget[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_9 =
	     WILL_FIRE_RL_bus_input_first_flit_5 &&
	     (bus_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_3$wget[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_10 =
	     WILL_FIRE_RL_bus_input_first_flit_6 &&
	     (bus_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_4$wget[0] ;
  assign MUX_bus_toOutput_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[1] ;
  assign MUX_bus_toOutput_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[1] ;
  assign MUX_bus_toOutput_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[1] ;
  assign MUX_bus_toOutput_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit_2 &&
	     (bus_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_0_1$wget[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit_2 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit_3 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_follow_flit_4 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_input_follow_flit_5 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_input_follow_flit_6 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_bus_input_first_flit_3 &&
	     (bus_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_1_1$wget[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_bus_input_first_flit_4 &&
	     (bus_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_2$wget[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_9 =
	     WILL_FIRE_RL_bus_input_first_flit_5 &&
	     (bus_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_3$wget[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_10 =
	     WILL_FIRE_RL_bus_input_first_flit_6 &&
	     (bus_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_4$wget[1] ;
  assign MUX_bus_toOutput_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[2] ;
  assign MUX_bus_toOutput_2$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[2] ;
  assign MUX_bus_toOutput_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[2] ;
  assign MUX_bus_toOutput_2$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[2] ;
  assign MUX_bus_toOutput_3$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[3] ;
  assign MUX_bus_toOutput_3$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[3] ;
  assign MUX_bus_toOutput_3$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[3] ;
  assign MUX_bus_toOutput_3$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[3] ;
  assign MUX_mem0_controller_axi4_deburster_inSerial_state$port1__write_1__SEL_2 =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR &&
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[0] ;
  assign MUX_rg_state$write_1__SEL_1 =
	     mem0_controller$RDY_server_reset_request_put &&
	     uart0$RDY_server_reset_request_put &&
	     core$RDY_cpu_reset_server_request_put &&
	     rg_state == 2'd0 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     mem0_controller$RDY_set_addr_map &&
	     mem0_controller$RDY_server_reset_response_get &&
	     uart0$RDY_server_reset_response_get &&
	     core$RDY_cpu_reset_server_response_get &&
	     rg_state == 2'd1 ;
  assign MUX_bus_1_moreFlits_1$write_1__VAL_1 =
	     { 6'd33, bus_1_inputDest_0_1$wget } ;
  assign MUX_bus_1_moreFlits_1$write_1__VAL_3 =
	     { 6'd34, bus_1_inputDest_1_1$wget } ;
  assign MUX_bus_1_moreFlits_1$write_1__VAL_5 =
	     { 6'd36, bus_1_inputDest_2$wget } ;
  assign MUX_bus_1_moreFlits_1$write_1__VAL_7 =
	     { 6'd40, bus_1_inputDest_3$wget } ;
  assign MUX_bus_1_moreFlits_1$write_1__VAL_9 =
	     { 6'd48, bus_1_inputDest_4$wget } ;
  assign MUX_bus_1_noRouteSlv_flitCount$write_1__VAL_1 =
	     { 1'd0, bus_1_toDfltOutput$wget[29:22] } + 9'd1 ;
  assign MUX_bus_1_noRouteSlv_flitCount$write_1__VAL_2 =
	     bus_1_noRouteSlv_flitCount - 9'd1 ;
  assign MUX_bus_1_toDfltOutput$wset_1__VAL_1 =
	     { 1'd0, core$cpu_imem_master_ar_peek, 1'd0 } ;
  assign MUX_bus_1_toDfltOutput$wset_1__VAL_2 =
	     { core$core_mem_master_ar_peek, 1'd1 } ;
  assign MUX_bus_1_toDfltOutput_1$wset_1__VAL_1 =
	     { bus_1_noRouteSlv_currentReq[98:93],
	       66'h2AAAAAAAAAAAAAAAB,
	       bus_1_noRouteSlv_flitCount == 9'd1,
	       bus_1_noRouteSlv_currentReq[99] } ;
  assign MUX_bus_1_toDfltOutput_1$wset_1__VAL_2 =
	     { boot_rom_axi4_deburster_inShim_rff$D_OUT[72:0],
	       boot_rom_axi4_deburster_inShim_rff$D_OUT[73] } ;
  assign MUX_bus_1_toDfltOutput_1$wset_1__VAL_3 =
	     { mem0_controller_axi4_deburster_inShim_rff$D_OUT[72:0],
	       mem0_controller_axi4_deburster_inShim_rff$D_OUT[73] } ;
  assign MUX_bus_1_toDfltOutput_1$wset_1__VAL_4 =
	     { uart0$slave_r_peek[72:0], uart0$slave_r_peek[73] } ;
  assign MUX_bus_1_toDfltOutput_1$wset_1__VAL_5 =
	     { s_otherPeripheralsPortShim_rff$D_OUT[72:0],
	       s_otherPeripheralsPortShim_rff$D_OUT[73] } ;
  assign MUX_bus_merged_0_flitLeft$write_1__VAL_2 =
	     bus_merged_0_flitLeft - 8'd1 ;
  assign MUX_bus_merged_1_flitLeft$write_1__VAL_2 =
	     bus_merged_1_flitLeft - 8'd1 ;
  assign MUX_bus_moreFlits$write_1__VAL_1 = { 3'd5, bus_inputDest_0$wget } ;
  assign MUX_bus_moreFlits$write_1__VAL_3 = { 3'd6, bus_inputDest_1$wget } ;
  assign MUX_bus_split_0_flitLeft$write_1__VAL_1 =
	     bus_split_0_flitLeft - 8'd1 ;
  assign MUX_bus_split_1_flitLeft$write_1__VAL_1 =
	     bus_split_1_flitLeft - 8'd1 ;
  assign MUX_bus_split_2_flitLeft$write_1__VAL_1 =
	     bus_split_2_flitLeft - 8'd1 ;
  assign MUX_bus_split_3_flitLeft$write_1__VAL_1 =
	     bus_split_3_flitLeft - 8'd1 ;
  assign MUX_bus_toDfltOutput$wset_1__VAL_1 =
	     { !CAN_FIRE_RL_bus_merged_0_passFlit ||
	       bus_merged_0_outflit$wget[172],
	       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1131,
	       1'd0 } ;
  assign MUX_bus_toDfltOutput$wset_1__VAL_2 =
	     { !CAN_FIRE_RL_bus_merged_1_passFlit ||
	       bus_merged_1_outflit$wget[172],
	       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1200,
	       1'd1 } ;
  assign MUX_bus_toDfltOutput_1$wset_1__VAL_1 =
	     { bus_noRouteSlv_rspFF$D_OUT[7:0],
	       bus_noRouteSlv_rspFF$D_OUT[8] } ;
  assign MUX_bus_toDfltOutput_1$wset_1__VAL_2 =
	     { boot_rom_axi4_deburster_inShim_bff$D_OUT[7:0],
	       boot_rom_axi4_deburster_inShim_bff$D_OUT[8] } ;
  assign MUX_bus_toDfltOutput_1$wset_1__VAL_3 =
	     { mem0_controller_axi4_deburster_inShim_bff$D_OUT[7:0],
	       mem0_controller_axi4_deburster_inShim_bff$D_OUT[8] } ;
  assign MUX_bus_toDfltOutput_1$wset_1__VAL_4 =
	     { uart0$slave_b_peek[7:0], uart0$slave_b_peek[8] } ;
  assign MUX_bus_toDfltOutput_1$wset_1__VAL_5 =
	     { s_otherPeripheralsPortShim_bff$D_OUT[7:0],
	       s_otherPeripheralsPortShim_bff$D_OUT[8] } ;

  // inlined wires
  assign core_mem_master_sig_bSig_snk_putWire$wget =
	     { core_dmem_pre_fabric_bid, core_dmem_pre_fabric_bresp } ;
  assign core_mem_master_sig_bSig_snk_putWire$whas =
	     core_dmem_pre_fabric_bvalid && core$core_mem_master_b_canPut ;
  assign core_mem_master_sig_rSig_snk_putWire$wget =
	     { core_dmem_pre_fabric_rid,
	       core_dmem_pre_fabric_rdata,
	       core_dmem_pre_fabric_rresp,
	       core_dmem_pre_fabric_rlast } ;
  assign core_mem_master_sig_rSig_snk_putWire$whas =
	     core_dmem_pre_fabric_rvalid && core$core_mem_master_r_canPut ;
  assign s_otherPeripheralsPort_master_sig_bSig_snk_putWire$wget =
	     { core_dmem_post_fabric_bid, core_dmem_post_fabric_bresp } ;
  assign s_otherPeripheralsPort_master_sig_bSig_snk_putWire$whas =
	     core_dmem_post_fabric_bvalid &&
	     s_otherPeripheralsPortShim_bff$FULL_N ;
  assign s_otherPeripheralsPort_master_sig_rSig_snk_putWire$wget =
	     { core_dmem_post_fabric_rid,
	       core_dmem_post_fabric_rdata,
	       core_dmem_post_fabric_rresp,
	       core_dmem_post_fabric_rlast } ;
  assign s_otherPeripheralsPort_master_sig_rSig_snk_putWire$whas =
	     core_dmem_post_fabric_rvalid &&
	     s_otherPeripheralsPortShim_rff$FULL_N ;
  assign bus_merged_0_awug_peekWire$wget =
	     { 1'd0, core$cpu_imem_master_aw_peek } ;
  assign bus_merged_0_outflit$wget =
	     { 1'd0, bus_merged_0_awff$D_OUT, bus_merged_0_wff$D_OUT } ;
  assign bus_merged_1_outflit$wget =
	     { 1'd0, bus_merged_1_awff$D_OUT, bus_merged_1_wff$D_OUT } ;
  assign bus_split_0_wug_putWire$whas =
	     WILL_FIRE_RL_bus_split_0_putOther &&
	     bus_split_0_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_0_putFirst &&
	     !bus_split_0_doPut$wget[173] ;
  assign bus_split_0_doPut$wget =
	     { bus_toOutput_0$wget[173],
	       bus_toOutput_0$wget[173] ?
		 bus_toOutput_0$wget[173:1] :
		 { bus_toOutput_0$wget[0], bus_toOutput_0$wget[172:1] } } ;
  assign bus_split_1_wug_putWire$whas =
	     WILL_FIRE_RL_bus_split_1_putOther &&
	     bus_split_1_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_1_putFirst &&
	     !bus_split_1_doPut$wget[173] ;
  assign bus_split_1_doPut$wget =
	     { bus_toOutput_1$wget[173],
	       bus_toOutput_1$wget[173] ?
		 bus_toOutput_1$wget[173:1] :
		 { bus_toOutput_1$wget[0], bus_toOutput_1$wget[172:1] } } ;
  assign bus_split_2_wug_putWire$whas =
	     WILL_FIRE_RL_bus_split_2_putOther &&
	     bus_split_2_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_2_putFirst &&
	     !bus_split_2_doPut$wget[173] ;
  assign bus_split_2_doPut$wget =
	     { bus_toOutput_2$wget[173],
	       bus_toOutput_2$wget[173] ?
		 bus_toOutput_2$wget[173:1] :
		 { bus_toOutput_2$wget[0], bus_toOutput_2$wget[172:1] } } ;
  assign bus_split_3_wug_putWire$whas =
	     WILL_FIRE_RL_bus_split_3_putOther &&
	     bus_split_3_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_3_putFirst &&
	     !bus_split_3_doPut$wget[173] ;
  assign bus_split_3_doPut$wget =
	     { bus_toOutput_3$wget[173],
	       bus_toOutput_3$wget[173] ?
		 bus_toOutput_3$wget[173:1] :
		 { bus_toOutput_3$wget[0], bus_toOutput_3$wget[172:1] } } ;
  assign bus_inputDest_0$wget =
	     { addr__h46762 >=
	       soc_map$m_other_peripherals_addr_range[127:64] &&
	       x__h47459 < soc_map$m_other_peripherals_addr_range[63:0] &&
	       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1170,
	       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1174,
	       !IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1155 &&
	       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1158 &&
	       (IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1147 ||
		!IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1150),
	       !IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1147 &&
	       IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1150 } ;
  assign bus_inputDest_1$wget =
	     { addr__h48548 >=
	       soc_map$m_other_peripherals_addr_range[127:64] &&
	       x__h49144 < soc_map$m_other_peripherals_addr_range[63:0] &&
	       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1227,
	       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1231,
	       !IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1216 &&
	       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1218 &&
	       (IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1211 ||
		!IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1213),
	       !IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1211 &&
	       IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1213 } ;
  always@(MUX_bus_toOutput_0$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_toOutput_0$wset_1__SEL_2 or
	  MUX_bus_toOutput_0$wset_1__SEL_3 or
	  MUX_bus_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_toOutput_0$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toOutput_0$wset_1__SEL_1:
	  bus_toOutput_0$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_0$wset_1__SEL_2:
	  bus_toOutput_0$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_0$wset_1__SEL_3:
	  bus_toOutput_0$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      MUX_bus_toOutput_0$wset_1__SEL_4:
	  bus_toOutput_0$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      default: bus_toOutput_0$wget =
		   174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_toOutput_0$whas =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[0] ||
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[0] ;
  always@(MUX_bus_toOutput_1$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_toOutput_1$wset_1__SEL_2 or
	  MUX_bus_toOutput_1$wset_1__SEL_3 or
	  MUX_bus_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_toOutput_1$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toOutput_1$wset_1__SEL_1:
	  bus_toOutput_1$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_1$wset_1__SEL_2:
	  bus_toOutput_1$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_1$wset_1__SEL_3:
	  bus_toOutput_1$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      MUX_bus_toOutput_1$wset_1__SEL_4:
	  bus_toOutput_1$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      default: bus_toOutput_1$wget =
		   174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_toOutput_1$whas =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[1] ||
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[1] ;
  always@(MUX_bus_toOutput_2$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_toOutput_2$wset_1__SEL_2 or
	  MUX_bus_toOutput_2$wset_1__SEL_3 or
	  MUX_bus_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_toOutput_2$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toOutput_2$wset_1__SEL_1:
	  bus_toOutput_2$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_2$wset_1__SEL_2:
	  bus_toOutput_2$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_2$wset_1__SEL_3:
	  bus_toOutput_2$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      MUX_bus_toOutput_2$wset_1__SEL_4:
	  bus_toOutput_2$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      default: bus_toOutput_2$wget =
		   174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_toOutput_2$whas =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[2] ||
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[2] ||
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[2] ||
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[2] ;
  always@(MUX_bus_toOutput_3$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_toOutput_3$wset_1__SEL_2 or
	  MUX_bus_toOutput_3$wset_1__SEL_3 or
	  MUX_bus_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_toOutput_3$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toOutput_3$wset_1__SEL_1:
	  bus_toOutput_3$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_3$wset_1__SEL_2:
	  bus_toOutput_3$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_3$wset_1__SEL_3:
	  bus_toOutput_3$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      MUX_bus_toOutput_3$wset_1__SEL_4:
	  bus_toOutput_3$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      default: bus_toOutput_3$wget =
		   174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_toOutput_3$whas =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[3] ||
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[3] ||
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[3] ||
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[3] ;
  always@(MUX_bus_toDfltOutput$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_toDfltOutput$wset_1__SEL_2 or
	  MUX_bus_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_toDfltOutput$wset_1__SEL_3 or
	  MUX_bus_toDfltOutput$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toDfltOutput$wset_1__SEL_1:
	  bus_toDfltOutput$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toDfltOutput$wset_1__SEL_2:
	  bus_toDfltOutput$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      MUX_bus_toDfltOutput$wset_1__SEL_3:
	  bus_toDfltOutput$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toDfltOutput$wset_1__SEL_4:
	  bus_toDfltOutput$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      default: bus_toDfltOutput$wget =
		   174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_toDfltOutput$whas =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ||
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ||
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ||
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign bus_selectInput_0$wget =
	     (IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1388 ||
	      IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1389) ?
	       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1392 :
	       bus_arbiter_lastSelect ;
  assign bus_selectInput_1$wget =
	     (IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1388 ||
	      IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1389) ?
	       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1394 :
	       bus_arbiter_firstHot ;
  assign bus_inputDest_0_1$wget = 2'd1 << bus_noRouteSlv_rspFF$D_OUT[8] ;
  assign bus_inputDest_1_1$wget =
	     2'd1 << boot_rom_axi4_deburster_inShim_bff$D_OUT[8] ;
  assign bus_inputDest_2$wget =
	     2'd1 << mem0_controller_axi4_deburster_inShim_bff$D_OUT[8] ;
  assign bus_inputDest_3$wget = 2'd1 << uart0$slave_b_peek[8] ;
  assign bus_inputDest_4$wget =
	     2'd1 << s_otherPeripheralsPortShim_bff$D_OUT[8] ;
  always@(MUX_bus_toOutput_0_1$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_1 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_2 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_3 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_2 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_4 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_3 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_5 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_4 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_6 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_5 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_7 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_8 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_9 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toOutput_0_1$wset_1__SEL_1:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_toOutput_0_1$wset_1__SEL_2:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_toOutput_0_1$wset_1__SEL_3:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_toOutput_0_1$wset_1__SEL_4:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_toOutput_0_1$wset_1__SEL_5:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_toOutput_0_1$wset_1__SEL_6:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_5;
      MUX_bus_toOutput_0_1$wset_1__SEL_7:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_toOutput_0_1$wset_1__SEL_8:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_toOutput_0_1$wset_1__SEL_9:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_toOutput_0_1$wset_1__SEL_10:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_5;
      default: bus_toOutput_0_1$wget = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign bus_toOutput_0_1$whas =
	     WILL_FIRE_RL_bus_input_first_flit_2 &&
	     (bus_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_0_1$wget[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit_2 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit_3 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit_4 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit_5 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit_6 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_input_first_flit_3 &&
	     (bus_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_1_1$wget[0] ||
	     WILL_FIRE_RL_bus_input_first_flit_4 &&
	     (bus_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_2$wget[0] ||
	     WILL_FIRE_RL_bus_input_first_flit_5 &&
	     (bus_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_3$wget[0] ||
	     WILL_FIRE_RL_bus_input_first_flit_6 &&
	     (bus_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_4$wget[0] ;
  always@(MUX_bus_toOutput_1_1$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_1 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_2 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_3 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_2 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_4 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_3 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_5 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_4 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_6 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_5 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_7 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_8 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_9 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toOutput_1_1$wset_1__SEL_1:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_toOutput_1_1$wset_1__SEL_2:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_toOutput_1_1$wset_1__SEL_3:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_toOutput_1_1$wset_1__SEL_4:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_toOutput_1_1$wset_1__SEL_5:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_toOutput_1_1$wset_1__SEL_6:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_5;
      MUX_bus_toOutput_1_1$wset_1__SEL_7:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_toOutput_1_1$wset_1__SEL_8:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_toOutput_1_1$wset_1__SEL_9:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_toOutput_1_1$wset_1__SEL_10:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_5;
      default: bus_toOutput_1_1$wget = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign bus_toOutput_1_1$whas =
	     WILL_FIRE_RL_bus_input_first_flit_2 &&
	     (bus_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_0_1$wget[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_2 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_3 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_4 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_5 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_6 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_input_first_flit_3 &&
	     (bus_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_1_1$wget[1] ||
	     WILL_FIRE_RL_bus_input_first_flit_4 &&
	     (bus_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_2$wget[1] ||
	     WILL_FIRE_RL_bus_input_first_flit_5 &&
	     (bus_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_3$wget[1] ||
	     WILL_FIRE_RL_bus_input_first_flit_6 &&
	     (bus_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_4$wget[1] ;
  assign bus_selectInput_0_1$wget =
	     (IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1754 ||
	      IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1773) ?
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1782 :
	       bus_arbiter_lastSelect_1 ;
  assign bus_selectInput_1_1$wget =
	     (IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1754 ||
	      IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1773) ?
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1787 :
	       bus_arbiter_lastSelect_1_1 ;
  assign bus_selectInput_2$wget =
	     (IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1754 ||
	      IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1773) ?
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1792 :
	       bus_arbiter_lastSelect_2 ;
  assign bus_selectInput_3$wget =
	     (IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1754 ||
	      IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1773) ?
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1797 :
	       bus_arbiter_lastSelect_3 ;
  assign bus_selectInput_4$wget =
	     (IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1754 ||
	      IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1773) ?
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1802 :
	       bus_arbiter_firstHot_1 ;
  assign bus_1_inputDest_0$wget =
	     { core$cpu_imem_master_ar_peek[92:29] >=
	       soc_map$m_other_peripherals_addr_range[127:64] &&
	       x__h107254 < soc_map$m_other_peripherals_addr_range[63:0] &&
	       core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2021,
	       core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2025,
	       !core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2010 &&
	       core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2012 &&
	       (core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2005 ||
		!core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2007),
	       !core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2005 &&
	       core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2007 } ;
  assign bus_1_inputDest_1$wget =
	     { core$core_mem_master_ar_peek[92:29] >=
	       soc_map$m_other_peripherals_addr_range[127:64] &&
	       x__h108801 < soc_map$m_other_peripherals_addr_range[63:0] &&
	       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2059,
	       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2063,
	       !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2048 &&
	       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2050 &&
	       (core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2043 ||
		!core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2045),
	       !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2043 &&
	       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2045 } ;
  always@(MUX_bus_1_toOutput_0$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_1_toOutput_0$wset_1__SEL_2 or
	  MUX_bus_1_toOutput_0$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_1_toOutput_0$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toOutput_0$wset_1__SEL_1:
	  bus_1_toOutput_0$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_0$wset_1__SEL_2:
	  bus_1_toOutput_0$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_0$wset_1__SEL_3:
	  bus_1_toOutput_0$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      MUX_bus_1_toOutput_0$wset_1__SEL_4:
	  bus_1_toOutput_0$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      default: bus_1_toOutput_0$wget =
		   100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toOutput_0$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[0] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[0] ;
  always@(MUX_bus_1_toOutput_1$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_1_toOutput_1$wset_1__SEL_2 or
	  MUX_bus_1_toOutput_1$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_1_toOutput_1$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toOutput_1$wset_1__SEL_1:
	  bus_1_toOutput_1$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_1$wset_1__SEL_2:
	  bus_1_toOutput_1$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_1$wset_1__SEL_3:
	  bus_1_toOutput_1$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      MUX_bus_1_toOutput_1$wset_1__SEL_4:
	  bus_1_toOutput_1$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      default: bus_1_toOutput_1$wget =
		   100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toOutput_1$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[1] ;
  always@(MUX_bus_1_toOutput_2$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_1_toOutput_2$wset_1__SEL_2 or
	  MUX_bus_1_toOutput_2$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_1_toOutput_2$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toOutput_2$wset_1__SEL_1:
	  bus_1_toOutput_2$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_2$wset_1__SEL_2:
	  bus_1_toOutput_2$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_2$wset_1__SEL_3:
	  bus_1_toOutput_2$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      MUX_bus_1_toOutput_2$wset_1__SEL_4:
	  bus_1_toOutput_2$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      default: bus_1_toOutput_2$wget =
		   100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toOutput_2$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[2] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[2] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[2] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[2] ;
  always@(MUX_bus_1_toOutput_3$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_1_toOutput_3$wset_1__SEL_2 or
	  MUX_bus_1_toOutput_3$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_1_toOutput_3$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toOutput_3$wset_1__SEL_1:
	  bus_1_toOutput_3$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_3$wset_1__SEL_2:
	  bus_1_toOutput_3$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_3$wset_1__SEL_3:
	  bus_1_toOutput_3$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      MUX_bus_1_toOutput_3$wset_1__SEL_4:
	  bus_1_toOutput_3$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      default: bus_1_toOutput_3$wget =
		   100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toOutput_3$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[3] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[3] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[3] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[3] ;
  always@(MUX_bus_1_toDfltOutput$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_1_toDfltOutput$wset_1__SEL_2 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_1_toDfltOutput$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toDfltOutput$wset_1__SEL_1:
	  bus_1_toDfltOutput$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toDfltOutput$wset_1__SEL_2:
	  bus_1_toDfltOutput$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      MUX_bus_1_toDfltOutput$wset_1__SEL_3:
	  bus_1_toDfltOutput$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toDfltOutput$wset_1__SEL_4:
	  bus_1_toDfltOutput$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      default: bus_1_toDfltOutput$wget =
		   100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toDfltOutput$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ||
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign bus_1_selectInput_0$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2217 ||
	      IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2218) ?
	       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2221 :
	       bus_1_arbiter_lastSelect ;
  assign bus_1_selectInput_1$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2217 ||
	      IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2218) ?
	       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2223 :
	       bus_1_arbiter_firstHot ;
  assign bus_1_inputDest_0_1$wget = 2'd1 << bus_1_noRouteSlv_currentReq[99] ;
  assign bus_1_inputDest_1_1$wget =
	     2'd1 << boot_rom_axi4_deburster_inShim_rff$D_OUT[73] ;
  assign bus_1_inputDest_2$wget =
	     2'd1 << mem0_controller_axi4_deburster_inShim_rff$D_OUT[73] ;
  assign bus_1_inputDest_3$wget = 2'd1 << uart0$slave_r_peek[73] ;
  assign bus_1_inputDest_4$wget =
	     2'd1 << s_otherPeripheralsPortShim_rff$D_OUT[73] ;
  always@(MUX_bus_1_toOutput_0_1$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_1 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_2 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_2 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_4 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_3 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_5 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_4 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_6 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_5 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_7 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_8 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_9 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toOutput_0_1$wset_1__SEL_1:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_2:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_3:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_4:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_5:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_6:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_5;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_7:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_8:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_9:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_10:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_5;
      default: bus_1_toOutput_0_1$wget =
		   74'h2AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toOutput_0_1$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	     (bus_1_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_0_1$wget[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	     (bus_1_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_1_1$wget[0] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	     (bus_1_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_2$wget[0] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	     (bus_1_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_3$wget[0] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	     (bus_1_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_4$wget[0] ;
  always@(MUX_bus_1_toOutput_1_1$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_1 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_2 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_2 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_4 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_3 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_5 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_4 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_6 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_5 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_7 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_8 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_9 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toOutput_1_1$wset_1__SEL_1:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_2:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_3:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_4:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_5:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_6:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_5;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_7:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_8:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_9:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_10:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_5;
      default: bus_1_toOutput_1_1$wget =
		   74'h2AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toOutput_1_1$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	     (bus_1_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_0_1$wget[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	     (bus_1_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_1_1$wget[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	     (bus_1_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_2$wget[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	     (bus_1_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_3$wget[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	     (bus_1_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_4$wget[1] ;
  assign bus_1_selectInput_0_1$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2554 ||
	      IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2573) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2582 :
	       bus_1_arbiter_lastSelect_1 ;
  assign bus_1_selectInput_1_1$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2554 ||
	      IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2573) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2587 :
	       bus_1_arbiter_lastSelect_1_1 ;
  assign bus_1_selectInput_2$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2554 ||
	      IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2573) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2592 :
	       bus_1_arbiter_lastSelect_2 ;
  assign bus_1_selectInput_3$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2554 ||
	      IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2573) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2597 :
	       bus_1_arbiter_lastSelect_3 ;
  assign bus_1_selectInput_4$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2554 ||
	      IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2573) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2602 :
	       bus_1_arbiter_firstHot_1 ;
  assign core_mem_master_sig_awSig_src_dropWire$whas =
	     core$core_mem_master_aw_canPeek && core_dmem_pre_fabric_awready ;
  assign core_mem_master_sig_wSig_src_dropWire$whas =
	     core$core_mem_master_w_canPeek && core_dmem_pre_fabric_wready ;
  assign core_mem_master_sig_arSig_src_dropWire$whas =
	     core$core_mem_master_ar_canPeek && core_dmem_pre_fabric_arready ;
  assign s_otherPeripheralsPort_master_sig_awSig_src_dropWire$whas =
	     s_otherPeripheralsPortShim_awff$EMPTY_N &&
	     core_dmem_post_fabric_awready ;
  assign s_otherPeripheralsPort_master_sig_wSig_src_dropWire$whas =
	     s_otherPeripheralsPortShim_wff$EMPTY_N &&
	     core_dmem_post_fabric_wready ;
  assign s_otherPeripheralsPort_master_sig_arSig_src_dropWire$whas =
	     s_otherPeripheralsPortShim_arff$EMPTY_N &&
	     core_dmem_post_fabric_arready ;
  assign bus_merged_0_doDrop$whas =
	     WILL_FIRE_RL_bus_input_follow_flit ||
	     WILL_FIRE_RL_bus_input_first_flit ;
  assign bus_merged_1_doDrop$whas =
	     WILL_FIRE_RL_bus_input_follow_flit_1 ||
	     WILL_FIRE_RL_bus_input_first_flit_1 ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_inShim_awff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ?
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req &&
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$port2__read =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_inShim_wff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW ?
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_flitReceived$port1__read[8:0] } ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_produce_bresp ?
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ?
	       10'd170 :
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_inShim_arff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ?
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req &&
	     boot_rom_axi4_deburster_readsSent_port0__read__ETC___d155 ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$port2__read =
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       boot_rom_axi4_deburster_outShim_rff$D_OUT[73:1],
	       boot_rom_axi4_deburster_lastReadRspFF$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ?
	       boot_rom_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_rff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;
  assign boot_rom_axi4_deburster_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ?
	       2'd1 :
	       2'd2 ;
  assign boot_rom_axi4_deburster_inSerial_state$port1__read =
	     boot_rom_axi4_deburster_inSerial_state$EN_port0__write ?
	       boot_rom_axi4_deburster_inSerial_state$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_state ;
  assign boot_rom_axi4_deburster_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW &&
	     boot_rom_axi4_deburster_inShim_wff$D_OUT[0] ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR &&
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[0] ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ;
  assign boot_rom_axi4_deburster_inSerial_state$port1__write_1 =
	     (MUX_boot_rom_axi4_deburster_inSerial_state$port1__write_1__SEL_2 ||
	      WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign boot_rom_axi4_deburster_inSerial_state$port2__read =
	     boot_rom_axi4_deburster_inSerial_state$EN_port1__write ?
	       boot_rom_axi4_deburster_inSerial_state$port1__write_1 :
	       boot_rom_axi4_deburster_inSerial_state$port1__read ;
  assign boot_rom_axi4_deburster_writesSent$port0__write_1 =
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ?
	       8'd0 :
	       x1__h6340 ;
  assign boot_rom_axi4_deburster_writesSent$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ?
	       boot_rom_axi4_deburster_writesSent$port0__write_1 :
	       boot_rom_axi4_deburster_writesSent ;
  assign boot_rom_axi4_deburster_writesSent$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       boot_rom_axi4_deburster_writesSent$port1__read ;
  assign boot_rom_axi4_deburster_readsSent$port0__write_1 =
	     boot_rom_axi4_deburster_readsSent_port0__read__ETC___d155 ?
	       8'd0 :
	       x1__h7059 ;
  assign boot_rom_axi4_deburster_readsSent$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ?
	       boot_rom_axi4_deburster_readsSent$port0__write_1 :
	       boot_rom_axi4_deburster_readsSent ;
  assign boot_rom_axi4_deburster_readsSent$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       boot_rom_axi4_deburster_readsSent$port1__read ;
  assign boot_rom_axi4_deburster_flitReceived$port0__write_1 =
	     { x__h6436,
	       boot_rom_axi4_deburster_outShim_bff$D_OUT[8:2],
	       (boot_rom_axi4_deburster_flitReceived[1:0] == 2'd1 ||
		boot_rom_axi4_deburster_flitReceived[1:0] == 2'd0 &&
		boot_rom_axi4_deburster_outShim_bff$D_OUT[1:0] != 2'd1 ||
		boot_rom_axi4_deburster_flitReceived[1:0] == 2'd3 &&
		boot_rom_axi4_deburster_outShim_bff$D_OUT[1:0] != 2'd1 &&
		boot_rom_axi4_deburster_outShim_bff$D_OUT[1:0] != 2'd0) ?
		 boot_rom_axi4_deburster_outShim_bff$D_OUT[1:0] :
		 boot_rom_axi4_deburster_flitReceived[1:0] } ;
  assign boot_rom_axi4_deburster_flitReceived$port1__read =
	     boot_rom_axi4_deburster_outShim_bff$EMPTY_N ?
	       boot_rom_axi4_deburster_flitReceived$port0__write_1 :
	       boot_rom_axi4_deburster_flitReceived ;
  assign boot_rom_axi4_deburster_flitReceived$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_produce_bresp ?
	       18'd169 :
	       boot_rom_axi4_deburster_flitReceived$port1__read ;
  assign boot_rom_axi4_deburster_flitReceived$port3__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       18'd169 :
	       boot_rom_axi4_deburster_flitReceived$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_inShim_awff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ?
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req &&
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port2__read =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_inShim_wff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW ?
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1,
	       mem0_controller_axi4_deburster_flitReceived$port1__read[8:0] } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp ?
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ?
	       10'd170 :
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_inShim_arff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ?
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req &&
	     mem0_controller_axi4_deburster_readsSent_port0_ETC___d318 ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port2__read =
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       mem0_controller_axi4_deburster_outShim_rff$D_OUT[73:1],
	       mem0_controller_axi4_deburster_lastReadRspFF$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ?
	       mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_rff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;
  assign mem0_controller_axi4_deburster_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ?
	       2'd1 :
	       2'd2 ;
  assign mem0_controller_axi4_deburster_inSerial_state$port1__read =
	     mem0_controller_axi4_deburster_inSerial_state$EN_port0__write ?
	       mem0_controller_axi4_deburster_inSerial_state$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_state ;
  assign mem0_controller_axi4_deburster_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW &&
	     mem0_controller_axi4_deburster_inShim_wff$D_OUT[0] ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR &&
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[0] ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ;
  assign mem0_controller_axi4_deburster_inSerial_state$port1__write_1 =
	     (MUX_mem0_controller_axi4_deburster_inSerial_state$port1__write_1__SEL_2 ||
	      WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign mem0_controller_axi4_deburster_inSerial_state$port2__read =
	     mem0_controller_axi4_deburster_inSerial_state$EN_port1__write ?
	       mem0_controller_axi4_deburster_inSerial_state$port1__write_1 :
	       mem0_controller_axi4_deburster_inSerial_state$port1__read ;
  assign mem0_controller_axi4_deburster_writesSent$port0__write_1 =
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ?
	       8'd0 :
	       x1__h12804 ;
  assign mem0_controller_axi4_deburster_writesSent$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ?
	       mem0_controller_axi4_deburster_writesSent$port0__write_1 :
	       mem0_controller_axi4_deburster_writesSent ;
  assign mem0_controller_axi4_deburster_writesSent$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       mem0_controller_axi4_deburster_writesSent$port1__read ;
  assign mem0_controller_axi4_deburster_readsSent$port0__write_1 =
	     mem0_controller_axi4_deburster_readsSent_port0_ETC___d318 ?
	       8'd0 :
	       x1__h13520 ;
  assign mem0_controller_axi4_deburster_readsSent$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ?
	       mem0_controller_axi4_deburster_readsSent$port0__write_1 :
	       mem0_controller_axi4_deburster_readsSent ;
  assign mem0_controller_axi4_deburster_readsSent$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       mem0_controller_axi4_deburster_readsSent$port1__read ;
  assign mem0_controller_axi4_deburster_flitReceived$port0__write_1 =
	     { x__h12900,
	       mem0_controller_axi4_deburster_outShim_bff$D_OUT[8:2],
	       (mem0_controller_axi4_deburster_flitReceived[1:0] == 2'd1 ||
		mem0_controller_axi4_deburster_flitReceived[1:0] == 2'd0 &&
		mem0_controller_axi4_deburster_outShim_bff$D_OUT[1:0] !=
		2'd1 ||
		mem0_controller_axi4_deburster_flitReceived[1:0] == 2'd3 &&
		mem0_controller_axi4_deburster_outShim_bff$D_OUT[1:0] !=
		2'd1 &&
		mem0_controller_axi4_deburster_outShim_bff$D_OUT[1:0] !=
		2'd0) ?
		 mem0_controller_axi4_deburster_outShim_bff$D_OUT[1:0] :
		 mem0_controller_axi4_deburster_flitReceived[1:0] } ;
  assign mem0_controller_axi4_deburster_flitReceived$port1__read =
	     mem0_controller_axi4_deburster_outShim_bff$EMPTY_N ?
	       mem0_controller_axi4_deburster_flitReceived$port0__write_1 :
	       mem0_controller_axi4_deburster_flitReceived ;
  assign mem0_controller_axi4_deburster_flitReceived$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp ?
	       18'd169 :
	       mem0_controller_axi4_deburster_flitReceived$port1__read ;
  assign mem0_controller_axi4_deburster_flitReceived$port3__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       18'd169 :
	       mem0_controller_axi4_deburster_flitReceived$port2__read ;

  // register boot_rom_axi4_deburster_flitReceived
  assign boot_rom_axi4_deburster_flitReceived$D_IN =
	     boot_rom_axi4_deburster_flitReceived$port3__read ;
  assign boot_rom_axi4_deburster_flitReceived$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_lastWasRead
  assign boot_rom_axi4_deburster_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ;
  assign boot_rom_axi4_deburster_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;

  // register boot_rom_axi4_deburster_inSerial_shim_arff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_awff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_bff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_rff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_wff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_state
  assign boot_rom_axi4_deburster_inSerial_state$D_IN =
	     boot_rom_axi4_deburster_inSerial_state$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_state$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_readsSent
  assign boot_rom_axi4_deburster_readsSent$D_IN =
	     boot_rom_axi4_deburster_readsSent$port2__read ;
  assign boot_rom_axi4_deburster_readsSent$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_writesSent
  assign boot_rom_axi4_deburster_writesSent$D_IN =
	     boot_rom_axi4_deburster_writesSent$port2__read ;
  assign boot_rom_axi4_deburster_writesSent$EN = 1'b1 ;

  // register bus_1_arbiter_firstHot
  assign bus_1_arbiter_firstHot$D_IN = bus_1_selectInput_1$wget ;
  assign bus_1_arbiter_firstHot$EN = CAN_FIRE_RL_bus_1_arbitrate ;

  // register bus_1_arbiter_firstHot_1
  assign bus_1_arbiter_firstHot_1$D_IN = bus_1_selectInput_4$wget ;
  assign bus_1_arbiter_firstHot_1$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_arbiter_lastSelect
  assign bus_1_arbiter_lastSelect$D_IN = bus_1_selectInput_0$wget ;
  assign bus_1_arbiter_lastSelect$EN = CAN_FIRE_RL_bus_1_arbitrate ;

  // register bus_1_arbiter_lastSelect_1
  assign bus_1_arbiter_lastSelect_1$D_IN = bus_1_selectInput_0_1$wget ;
  assign bus_1_arbiter_lastSelect_1$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_arbiter_lastSelect_1_1
  assign bus_1_arbiter_lastSelect_1_1$D_IN = bus_1_selectInput_1_1$wget ;
  assign bus_1_arbiter_lastSelect_1_1$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_arbiter_lastSelect_2
  assign bus_1_arbiter_lastSelect_2$D_IN = bus_1_selectInput_2$wget ;
  assign bus_1_arbiter_lastSelect_2$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_arbiter_lastSelect_3
  assign bus_1_arbiter_lastSelect_3$D_IN = bus_1_selectInput_3$wget ;
  assign bus_1_arbiter_lastSelect_3$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_moreFlits
  assign bus_1_moreFlits$D_IN = 7'd42 ;
  assign bus_1_moreFlits$EN =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 ||
	     WILL_FIRE_RL_bus_1_input_follow_flit ;

  // register bus_1_moreFlits_1
  always@(MUX_bus_1_moreFlits_1$write_1__SEL_1 or
	  MUX_bus_1_moreFlits_1$write_1__VAL_1 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_3 or
	  MUX_bus_1_moreFlits_1$write_1__VAL_3 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_5 or
	  MUX_bus_1_moreFlits_1$write_1__VAL_5 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_7 or
	  MUX_bus_1_moreFlits_1$write_1__VAL_7 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_9 or
	  MUX_bus_1_moreFlits_1$write_1__VAL_9 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_2 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_4 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_6 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_8 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_moreFlits_1$write_1__SEL_1:
	  bus_1_moreFlits_1$D_IN = MUX_bus_1_moreFlits_1$write_1__VAL_1;
      MUX_bus_1_moreFlits_1$write_1__SEL_3:
	  bus_1_moreFlits_1$D_IN = MUX_bus_1_moreFlits_1$write_1__VAL_3;
      MUX_bus_1_moreFlits_1$write_1__SEL_5:
	  bus_1_moreFlits_1$D_IN = MUX_bus_1_moreFlits_1$write_1__VAL_5;
      MUX_bus_1_moreFlits_1$write_1__SEL_7:
	  bus_1_moreFlits_1$D_IN = MUX_bus_1_moreFlits_1$write_1__VAL_7;
      MUX_bus_1_moreFlits_1$write_1__SEL_9:
	  bus_1_moreFlits_1$D_IN = MUX_bus_1_moreFlits_1$write_1__VAL_9;
      MUX_bus_1_moreFlits_1$write_1__SEL_2 ||
      MUX_bus_1_moreFlits_1$write_1__SEL_4 ||
      MUX_bus_1_moreFlits_1$write_1__SEL_6 ||
      MUX_bus_1_moreFlits_1$write_1__SEL_8 ||
      MUX_bus_1_moreFlits_1$write_1__SEL_10:
	  bus_1_moreFlits_1$D_IN = 8'd42;
      default: bus_1_moreFlits_1$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign bus_1_moreFlits_1$EN =
	     WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_1[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_1[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_2[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_2[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_3[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_3[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_4[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_4[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_5[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_5[1] ;

  // register bus_1_noRouteSlv_currentReq
  assign bus_1_noRouteSlv_currentReq$D_IN =
	     { bus_1_toDfltOutput$wget[0], bus_1_toDfltOutput$wget[99:1] } ;
  assign bus_1_noRouteSlv_currentReq$EN =
	     CAN_FIRE_RL_bus_1_dflt_output_selected ;

  // register bus_1_noRouteSlv_flitCount
  assign bus_1_noRouteSlv_flitCount$D_IN =
	     WILL_FIRE_RL_bus_1_dflt_output_selected ?
	       MUX_bus_1_noRouteSlv_flitCount$write_1__VAL_1 :
	       MUX_bus_1_noRouteSlv_flitCount$write_1__VAL_2 ;
  assign bus_1_noRouteSlv_flitCount$EN =
	     WILL_FIRE_RL_bus_1_dflt_output_selected ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_2 ;

  // register bus_arbiter_firstHot
  assign bus_arbiter_firstHot$D_IN = bus_selectInput_1$wget ;
  assign bus_arbiter_firstHot$EN = CAN_FIRE_RL_bus_arbitrate ;

  // register bus_arbiter_firstHot_1
  assign bus_arbiter_firstHot_1$D_IN = bus_selectInput_4$wget ;
  assign bus_arbiter_firstHot_1$EN = CAN_FIRE_RL_bus_arbitrate_1 ;

  // register bus_arbiter_lastSelect
  assign bus_arbiter_lastSelect$D_IN = bus_selectInput_0$wget ;
  assign bus_arbiter_lastSelect$EN = CAN_FIRE_RL_bus_arbitrate ;

  // register bus_arbiter_lastSelect_1
  assign bus_arbiter_lastSelect_1$D_IN = bus_selectInput_0_1$wget ;
  assign bus_arbiter_lastSelect_1$EN = CAN_FIRE_RL_bus_arbitrate_1 ;

  // register bus_arbiter_lastSelect_1_1
  assign bus_arbiter_lastSelect_1_1$D_IN = bus_selectInput_1_1$wget ;
  assign bus_arbiter_lastSelect_1_1$EN = CAN_FIRE_RL_bus_arbitrate_1 ;

  // register bus_arbiter_lastSelect_2
  assign bus_arbiter_lastSelect_2$D_IN = bus_selectInput_2$wget ;
  assign bus_arbiter_lastSelect_2$EN = CAN_FIRE_RL_bus_arbitrate_1 ;

  // register bus_arbiter_lastSelect_3
  assign bus_arbiter_lastSelect_3$D_IN = bus_selectInput_3$wget ;
  assign bus_arbiter_lastSelect_3$EN = CAN_FIRE_RL_bus_arbitrate_1 ;

  // register bus_merged_0_flitLeft
  assign bus_merged_0_flitLeft$D_IN =
	     WILL_FIRE_RL_bus_merged_0_genFirst ?
	       bus_merged_0_awff$D_OUT[28:21] :
	       MUX_bus_merged_0_flitLeft$write_1__VAL_2 ;
  assign bus_merged_0_flitLeft$EN =
	     WILL_FIRE_RL_bus_merged_0_genFirst ||
	     WILL_FIRE_RL_bus_merged_0_genOther ;

  // register bus_merged_1_flitLeft
  assign bus_merged_1_flitLeft$D_IN =
	     WILL_FIRE_RL_bus_merged_1_genFirst ?
	       bus_merged_1_awff$D_OUT[28:21] :
	       MUX_bus_merged_1_flitLeft$write_1__VAL_2 ;
  assign bus_merged_1_flitLeft$EN =
	     WILL_FIRE_RL_bus_merged_1_genFirst ||
	     WILL_FIRE_RL_bus_merged_1_genOther ;

  // register bus_moreFlits
  always@(MUX_bus_moreFlits$write_1__SEL_1 or
	  MUX_bus_moreFlits$write_1__VAL_1 or
	  MUX_bus_moreFlits$write_1__SEL_3 or
	  MUX_bus_moreFlits$write_1__VAL_3 or
	  MUX_bus_moreFlits$write_1__SEL_2 or
	  MUX_bus_moreFlits$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_moreFlits$write_1__SEL_1:
	  bus_moreFlits$D_IN = MUX_bus_moreFlits$write_1__VAL_1;
      MUX_bus_moreFlits$write_1__SEL_3:
	  bus_moreFlits$D_IN = MUX_bus_moreFlits$write_1__VAL_3;
      MUX_bus_moreFlits$write_1__SEL_2 || MUX_bus_moreFlits$write_1__SEL_4:
	  bus_moreFlits$D_IN = 7'd42;
      default: bus_moreFlits$D_IN = 7'b0101010 /* unspecified value */ ;
    endcase
  end
  assign bus_moreFlits$EN =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     !MUX_bus_toDfltOutput$wset_1__VAL_1[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     MUX_bus_toDfltOutput$wset_1__VAL_1[1] ||
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     !MUX_bus_toDfltOutput$wset_1__VAL_2[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     MUX_bus_toDfltOutput$wset_1__VAL_2[1] ;

  // register bus_moreFlits_1
  assign bus_moreFlits_1$D_IN = 8'd42 ;
  assign bus_moreFlits_1$EN =
	     WILL_FIRE_RL_bus_input_follow_flit_6 ||
	     WILL_FIRE_RL_bus_input_follow_flit_5 ||
	     WILL_FIRE_RL_bus_input_follow_flit_4 ||
	     WILL_FIRE_RL_bus_input_follow_flit_3 ||
	     WILL_FIRE_RL_bus_input_follow_flit_2 ;

  // register bus_noRouteSlv_awidReg
  assign bus_noRouteSlv_awidReg$D_IN = _theResult____h78560 ;
  assign bus_noRouteSlv_awidReg$EN = CAN_FIRE_RL_bus_dflt_output_selected ;

  // register bus_split_0_flitLeft
  assign bus_split_0_flitLeft$D_IN =
	     MUX_bus_split_0_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_0_flitLeft$write_1__VAL_1 :
	       bus_split_0_doPut$wget[101:94] ;
  assign bus_split_0_flitLeft$EN = bus_split_0_wug_putWire$whas ;

  // register bus_split_1_flitLeft
  assign bus_split_1_flitLeft$D_IN =
	     MUX_bus_split_1_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_1_flitLeft$write_1__VAL_1 :
	       bus_split_1_doPut$wget[101:94] ;
  assign bus_split_1_flitLeft$EN = bus_split_1_wug_putWire$whas ;

  // register bus_split_2_flitLeft
  assign bus_split_2_flitLeft$D_IN =
	     MUX_bus_split_2_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_2_flitLeft$write_1__VAL_1 :
	       bus_split_2_doPut$wget[101:94] ;
  assign bus_split_2_flitLeft$EN = bus_split_2_wug_putWire$whas ;

  // register bus_split_3_flitLeft
  assign bus_split_3_flitLeft$D_IN =
	     MUX_bus_split_3_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_3_flitLeft$write_1__VAL_1 :
	       bus_split_3_doPut$wget[101:94] ;
  assign bus_split_3_flitLeft$EN = bus_split_3_wug_putWire$whas ;

  // register mem0_controller_axi4_deburster_flitReceived
  assign mem0_controller_axi4_deburster_flitReceived$D_IN =
	     mem0_controller_axi4_deburster_flitReceived$port3__read ;
  assign mem0_controller_axi4_deburster_flitReceived$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_lastWasRead
  assign mem0_controller_axi4_deburster_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ;
  assign mem0_controller_axi4_deburster_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;

  // register mem0_controller_axi4_deburster_inSerial_shim_arff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_awff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_bff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_rff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_wff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_state
  assign mem0_controller_axi4_deburster_inSerial_state$D_IN =
	     mem0_controller_axi4_deburster_inSerial_state$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_state$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_readsSent
  assign mem0_controller_axi4_deburster_readsSent$D_IN =
	     mem0_controller_axi4_deburster_readsSent$port2__read ;
  assign mem0_controller_axi4_deburster_readsSent$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_writesSent
  assign mem0_controller_axi4_deburster_writesSent$D_IN =
	     mem0_controller_axi4_deburster_writesSent$port2__read ;
  assign mem0_controller_axi4_deburster_writesSent$EN = 1'b1 ;

  // register rg_cpu_reset_completed
  assign rg_cpu_reset_completed$D_IN = 1'd1 ;
  assign rg_cpu_reset_completed$EN = MUX_rg_state$write_1__SEL_2 ;

  // register rg_state
  assign rg_state$D_IN = WILL_FIRE_RL_rl_reset_start_initial ? 2'd1 : 2'd2 ;
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset_start_initial ||
	     WILL_FIRE_RL_rl_reset_complete_initial ;

  // submodule boot_rom
  assign boot_rom$set_addr_map_addr_base =
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign boot_rom$set_addr_map_addr_lim = addr_lim__h158488 ;
  assign boot_rom$slave_ar_put_val =
	     boot_rom_axi4_deburster_outShim_arff$D_OUT ;
  assign boot_rom$slave_aw_put_val =
	     boot_rom_axi4_deburster_outShim_awff$D_OUT ;
  assign boot_rom$slave_w_put_val =
	     boot_rom_axi4_deburster_outShim_wff$D_OUT ;
  assign boot_rom$EN_set_addr_map = MUX_rg_state$write_1__SEL_2 ;
  assign boot_rom$EN_slave_aw_put = CAN_FIRE_RL_ug_snk_1_doPut_1 ;
  assign boot_rom$EN_slave_w_put = CAN_FIRE_RL_ug_snk_1_1_doPut ;
  assign boot_rom$EN_slave_b_drop = CAN_FIRE_RL_ug_src_1_2_doDrop ;
  assign boot_rom$EN_slave_ar_put = CAN_FIRE_RL_ug_snk_1_3_doPut ;
  assign boot_rom$EN_slave_r_drop = CAN_FIRE_RL_ug_src_1_4_doDrop ;

  // submodule boot_rom_axi4_deburster_countWriteRspFF
  assign boot_rom_axi4_deburster_countWriteRspFF$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign boot_rom_axi4_deburster_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req &&
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign boot_rom_axi4_deburster_countWriteRspFF$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_produce_bresp ;
  assign boot_rom_axi4_deburster_countWriteRspFF$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_arff
  assign boot_rom_axi4_deburster_inShim_arff$D_IN =
	     { bus_1_toOutput_0$wget[0], bus_1_toOutput_0$wget[99:1] } ;
  assign boot_rom_axi4_deburster_inShim_arff$ENQ =
	     CAN_FIRE_RL_bus_1_output_selected ;
  assign boot_rom_axi4_deburster_inShim_arff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;
  assign boot_rom_axi4_deburster_inShim_arff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_awff
  assign boot_rom_axi4_deburster_inShim_awff$D_IN =
	     bus_split_0_doPut$wget[172:73] ;
  assign boot_rom_axi4_deburster_inShim_awff$ENQ =
	     CAN_FIRE_RL_bus_split_0_awug_doPut ;
  assign boot_rom_axi4_deburster_inShim_awff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ;
  assign boot_rom_axi4_deburster_inShim_awff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_bff
  assign boot_rom_axi4_deburster_inShim_bff$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read[8:0] ;
  assign boot_rom_axi4_deburster_inShim_bff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ;
  assign boot_rom_axi4_deburster_inShim_bff$DEQ =
	     WILL_FIRE_RL_bus_input_follow_flit_3 ||
	     WILL_FIRE_RL_bus_input_first_flit_3 ;
  assign boot_rom_axi4_deburster_inShim_bff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_rff
  assign boot_rom_axi4_deburster_inShim_rff$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[73:0] ;
  assign boot_rom_axi4_deburster_inShim_rff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR ;
  assign boot_rom_axi4_deburster_inShim_rff$DEQ =
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_3 ;
  assign boot_rom_axi4_deburster_inShim_rff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_wff
  assign boot_rom_axi4_deburster_inShim_wff$D_IN =
	     bus_split_0_doPut$wget[72:0] ;
  assign boot_rom_axi4_deburster_inShim_wff$ENQ =
	     CAN_FIRE_RL_bus_split_0_wug_doPut ;
  assign boot_rom_axi4_deburster_inShim_wff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW ;
  assign boot_rom_axi4_deburster_inShim_wff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_lastReadRspFF
  assign boot_rom_axi4_deburster_lastReadRspFF$D_IN =
	     boot_rom_axi4_deburster_readsSent_port0__read__ETC___d155 ;
  assign boot_rom_axi4_deburster_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ;
  assign boot_rom_axi4_deburster_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ;
  assign boot_rom_axi4_deburster_lastReadRspFF$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_arff
  assign boot_rom_axi4_deburster_outShim_arff$D_IN =
	     { boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[99:93],
	       x_araddr__h6733,
	       8'd0,
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign boot_rom_axi4_deburster_outShim_arff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ;
  assign boot_rom_axi4_deburster_outShim_arff$DEQ =
	     CAN_FIRE_RL_ug_src_1_3_doDrop ;
  assign boot_rom_axi4_deburster_outShim_arff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_awff
  assign boot_rom_axi4_deburster_outShim_awff$D_IN =
	     { boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[99:93],
	       x_awaddr__h5971,
	       8'd0,
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign boot_rom_axi4_deburster_outShim_awff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ;
  assign boot_rom_axi4_deburster_outShim_awff$DEQ =
	     CAN_FIRE_RL_ug_src_1_doDrop_1 ;
  assign boot_rom_axi4_deburster_outShim_awff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_bff
  assign boot_rom_axi4_deburster_outShim_bff$D_IN = boot_rom$slave_b_peek ;
  assign boot_rom_axi4_deburster_outShim_bff$ENQ =
	     CAN_FIRE_RL_ug_snk_1_2_doPut ;
  assign boot_rom_axi4_deburster_outShim_bff$DEQ =
	     boot_rom_axi4_deburster_outShim_bff$EMPTY_N ;
  assign boot_rom_axi4_deburster_outShim_bff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_rff
  assign boot_rom_axi4_deburster_outShim_rff$D_IN = boot_rom$slave_r_peek ;
  assign boot_rom_axi4_deburster_outShim_rff$ENQ =
	     CAN_FIRE_RL_ug_snk_1_4_doPut ;
  assign boot_rom_axi4_deburster_outShim_rff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ;
  assign boot_rom_axi4_deburster_outShim_rff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_wff
  assign boot_rom_axi4_deburster_outShim_wff$D_IN =
	     { boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[72:1],
	       1'd1 } ;
  assign boot_rom_axi4_deburster_outShim_wff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ;
  assign boot_rom_axi4_deburster_outShim_wff$DEQ =
	     CAN_FIRE_RL_ug_src_1_1_doDrop ;
  assign boot_rom_axi4_deburster_outShim_wff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule bus_merged_0_awff
  assign bus_merged_0_awff$D_IN = bus_merged_0_awug_peekWire$wget ;
  assign bus_merged_0_awff$ENQ = CAN_FIRE_RL_bus_merged_0_awFlit ;
  assign bus_merged_0_awff$DEQ = CAN_FIRE_RL_bus_merged_0_genFirst ;
  assign bus_merged_0_awff$CLR = 1'b0 ;

  // submodule bus_merged_0_wff
  assign bus_merged_0_wff$D_IN = core$cpu_imem_master_w_peek ;
  assign bus_merged_0_wff$ENQ = CAN_FIRE_RL_bus_merged_0_wFlit ;
  assign bus_merged_0_wff$DEQ =
	     WILL_FIRE_RL_bus_merged_0_genOther ||
	     WILL_FIRE_RL_bus_merged_0_genFirst ;
  assign bus_merged_0_wff$CLR = 1'b0 ;

  // submodule bus_merged_1_awff
  assign bus_merged_1_awff$D_IN = core$core_mem_master_aw_peek ;
  assign bus_merged_1_awff$ENQ = CAN_FIRE_RL_bus_merged_1_awFlit ;
  assign bus_merged_1_awff$DEQ = CAN_FIRE_RL_bus_merged_1_genFirst ;
  assign bus_merged_1_awff$CLR = 1'b0 ;

  // submodule bus_merged_1_wff
  assign bus_merged_1_wff$D_IN = core$core_mem_master_w_peek ;
  assign bus_merged_1_wff$ENQ = CAN_FIRE_RL_bus_merged_1_wFlit ;
  assign bus_merged_1_wff$DEQ =
	     WILL_FIRE_RL_bus_merged_1_genOther ||
	     WILL_FIRE_RL_bus_merged_1_genFirst ;
  assign bus_merged_1_wff$CLR = 1'b0 ;

  // submodule bus_noRouteSlv_rspFF
  assign bus_noRouteSlv_rspFF$D_IN = { _theResult____h78560, 2'd3 } ;
  assign bus_noRouteSlv_rspFF$ENQ =
	     WILL_FIRE_RL_bus_dflt_output_selected &&
	     bus_toDfltOutput$wget[1] ;
  assign bus_noRouteSlv_rspFF$DEQ =
	     WILL_FIRE_RL_bus_input_follow_flit_2 ||
	     WILL_FIRE_RL_bus_input_first_flit_2 ;
  assign bus_noRouteSlv_rspFF$CLR = 1'b0 ;

  // submodule core
  assign core$cms_ifc_halt_cpu_state = cms_ifc_halt_cpu_state ;
  assign core$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear =
	     uart0$intr ;
  assign core$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_mem_master_b_put_val =
	     WILL_FIRE_RL_core_mem_master_sig_bSig_snk_doPut ?
	       core_mem_master_sig_bSig_snk_putWire$wget :
	       bus_toOutput_1_1$wget[8:1] ;
  assign core$core_mem_master_r_put_val =
	     WILL_FIRE_RL_core_mem_master_sig_rSig_snk_doPut ?
	       core_mem_master_sig_rSig_snk_putWire$wget :
	       bus_1_toOutput_1_1$wget[73:1] ;
  assign core$cpu_imem_master_b_put_val =
	     { bus_toOutput_0_1wget_BITS_8_TO_3__q1[4:0],
	       bus_toOutput_0_1$wget[2:1] } ;
  assign core$cpu_imem_master_r_put_val =
	     { bus_1_toOutput_0_1wget_BITS_73_TO_68__q2[4:0],
	       bus_1_toOutput_0_1$wget[67:1] } ;
  assign core$cpu_reset_server_request_put = 1'd1 ;
  assign core$dma_server_ar_put_val = 99'h0 ;
  assign core$dma_server_aw_put_val = 99'h0 ;
  assign core$dma_server_w_put_val = 577'h0 ;
  assign core$nmi_req_set_not_clear = 1'd0 ;
  assign core$set_verbosity_logdelay = set_verbosity_logdelay ;
  assign core$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign core$set_watch_tohost_tohost_addr = set_watch_tohost_tohost_addr ;
  assign core$set_watch_tohost_watch_tohost = set_watch_tohost_watch_tohost ;
  assign core$EN_cpu_reset_server_request_put = MUX_rg_state$write_1__SEL_1 ;
  assign core$EN_cpu_reset_server_response_get = MUX_rg_state$write_1__SEL_2 ;
  assign core$EN_cpu_imem_master_aw_drop =
	     core$RDY_cpu_imem_master_aw_drop &&
	     CAN_FIRE_RL_bus_merged_0_awFlit &&
	     core$cpu_imem_master_aw_canPeek ;
  assign core$EN_cpu_imem_master_w_drop =
	     core$RDY_cpu_imem_master_w_drop &&
	     CAN_FIRE_RL_bus_merged_0_wFlit &&
	     core$cpu_imem_master_w_canPeek ;
  assign core$EN_cpu_imem_master_b_put =
	     core$RDY_cpu_imem_master_b_put && bus_toOutput_0_1$whas &&
	     core$cpu_imem_master_b_canPut ;
  assign core$EN_cpu_imem_master_ar_drop =
	     WILL_FIRE_RL_bus_1_input_follow_flit ||
	     WILL_FIRE_RL_bus_1_input_first_flit ;
  assign core$EN_cpu_imem_master_r_put =
	     core$RDY_cpu_imem_master_r_put && bus_1_toOutput_0_1$whas &&
	     core$cpu_imem_master_r_canPut ;
  assign core$EN_core_mem_master_aw_drop =
	     WILL_FIRE_RL_bus_merged_1_awug_doDrop ||
	     WILL_FIRE_RL_core_mem_master_sig_awSig_src_doDrop ;
  assign core$EN_core_mem_master_w_drop =
	     WILL_FIRE_RL_bus_merged_1_wug_doDrop ||
	     WILL_FIRE_RL_core_mem_master_sig_wSig_src_doDrop ;
  assign core$EN_core_mem_master_b_put =
	     WILL_FIRE_RL_core_mem_master_sig_bSig_snk_doPut ||
	     WILL_FIRE_RL_bus_output_selected_5 ;
  assign core$EN_core_mem_master_ar_drop =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_1 ||
	     WILL_FIRE_RL_core_mem_master_sig_arSig_src_doDrop ;
  assign core$EN_core_mem_master_r_put =
	     WILL_FIRE_RL_core_mem_master_sig_rSig_snk_doPut ||
	     WILL_FIRE_RL_bus_1_output_selected_5 ;
  assign core$EN_dma_server_aw_put = 1'b0 ;
  assign core$EN_dma_server_w_put = 1'b0 ;
  assign core$EN_dma_server_b_drop = CAN_FIRE_RL_ug_src_2_doDrop ;
  assign core$EN_dma_server_ar_put = 1'b0 ;
  assign core$EN_dma_server_r_drop = CAN_FIRE_RL_ug_src_4_doDrop ;
  assign core$EN_set_verbosity = EN_set_verbosity ;
  assign core$EN_set_watch_tohost = EN_set_watch_tohost ;
  assign core$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;
  assign core$EN_cms_ifc_halt_cpu = EN_cms_ifc_halt_cpu ;

  // submodule mem0_controller
  assign mem0_controller$set_addr_map_addr_base =
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign mem0_controller$set_addr_map_addr_lim = addr_lim__h158516 ;
  assign mem0_controller$set_watch_tohost_tohost_addr = 64'h0 ;
  assign mem0_controller$set_watch_tohost_watch_tohost = 1'b0 ;
  assign mem0_controller$slave_ar_put_val =
	     mem0_controller_axi4_deburster_outShim_arff$D_OUT ;
  assign mem0_controller$slave_aw_put_val =
	     mem0_controller_axi4_deburster_outShim_awff$D_OUT ;
  assign mem0_controller$slave_w_put_val =
	     mem0_controller_axi4_deburster_outShim_wff$D_OUT ;
  assign mem0_controller$to_raw_mem_response_put = to_raw_mem_response_put ;
  assign mem0_controller$EN_server_reset_request_put =
	     MUX_rg_state$write_1__SEL_1 ;
  assign mem0_controller$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_2 ;
  assign mem0_controller$EN_set_addr_map = MUX_rg_state$write_1__SEL_2 ;
  assign mem0_controller$EN_slave_aw_put = CAN_FIRE_RL_ug_snk_2_doPut_1 ;
  assign mem0_controller$EN_slave_w_put = CAN_FIRE_RL_ug_snk_2_1_doPut ;
  assign mem0_controller$EN_slave_b_drop = CAN_FIRE_RL_ug_src_2_2_doDrop ;
  assign mem0_controller$EN_slave_ar_put = CAN_FIRE_RL_ug_snk_2_3_doPut ;
  assign mem0_controller$EN_slave_r_drop = CAN_FIRE_RL_ug_src_2_4_doDrop ;
  assign mem0_controller$EN_to_raw_mem_request_get =
	     EN_to_raw_mem_request_get ;
  assign mem0_controller$EN_to_raw_mem_response_put =
	     EN_to_raw_mem_response_put ;
  assign mem0_controller$EN_set_watch_tohost = 1'b0 ;

  // submodule mem0_controller_axi4_deburster_countWriteRspFF
  assign mem0_controller_axi4_deburster_countWriteRspFF$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign mem0_controller_axi4_deburster_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req &&
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign mem0_controller_axi4_deburster_countWriteRspFF$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp ;
  assign mem0_controller_axi4_deburster_countWriteRspFF$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_arff
  assign mem0_controller_axi4_deburster_inShim_arff$D_IN =
	     { bus_1_toOutput_1$wget[0], bus_1_toOutput_1$wget[99:1] } ;
  assign mem0_controller_axi4_deburster_inShim_arff$ENQ =
	     CAN_FIRE_RL_bus_1_output_selected_1 ;
  assign mem0_controller_axi4_deburster_inShim_arff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;
  assign mem0_controller_axi4_deburster_inShim_arff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_awff
  assign mem0_controller_axi4_deburster_inShim_awff$D_IN =
	     bus_split_1_doPut$wget[172:73] ;
  assign mem0_controller_axi4_deburster_inShim_awff$ENQ =
	     CAN_FIRE_RL_bus_split_1_awug_doPut ;
  assign mem0_controller_axi4_deburster_inShim_awff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ;
  assign mem0_controller_axi4_deburster_inShim_awff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_bff
  assign mem0_controller_axi4_deburster_inShim_bff$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read[8:0] ;
  assign mem0_controller_axi4_deburster_inShim_bff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ;
  assign mem0_controller_axi4_deburster_inShim_bff$DEQ =
	     WILL_FIRE_RL_bus_input_follow_flit_4 ||
	     WILL_FIRE_RL_bus_input_first_flit_4 ;
  assign mem0_controller_axi4_deburster_inShim_bff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_rff
  assign mem0_controller_axi4_deburster_inShim_rff$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[73:0] ;
  assign mem0_controller_axi4_deburster_inShim_rff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR ;
  assign mem0_controller_axi4_deburster_inShim_rff$DEQ =
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_4 ;
  assign mem0_controller_axi4_deburster_inShim_rff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_wff
  assign mem0_controller_axi4_deburster_inShim_wff$D_IN =
	     bus_split_1_doPut$wget[72:0] ;
  assign mem0_controller_axi4_deburster_inShim_wff$ENQ =
	     CAN_FIRE_RL_bus_split_1_wug_doPut ;
  assign mem0_controller_axi4_deburster_inShim_wff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW ;
  assign mem0_controller_axi4_deburster_inShim_wff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_lastReadRspFF
  assign mem0_controller_axi4_deburster_lastReadRspFF$D_IN =
	     mem0_controller_axi4_deburster_readsSent_port0_ETC___d318 ;
  assign mem0_controller_axi4_deburster_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ;
  assign mem0_controller_axi4_deburster_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ;
  assign mem0_controller_axi4_deburster_lastReadRspFF$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_arff
  assign mem0_controller_axi4_deburster_outShim_arff$D_IN =
	     { mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[99:93],
	       x_araddr__h13194,
	       8'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign mem0_controller_axi4_deburster_outShim_arff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ;
  assign mem0_controller_axi4_deburster_outShim_arff$DEQ =
	     CAN_FIRE_RL_ug_src_2_3_doDrop ;
  assign mem0_controller_axi4_deburster_outShim_arff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_awff
  assign mem0_controller_axi4_deburster_outShim_awff$D_IN =
	     { mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[99:93],
	       x_awaddr__h12441,
	       8'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign mem0_controller_axi4_deburster_outShim_awff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ;
  assign mem0_controller_axi4_deburster_outShim_awff$DEQ =
	     CAN_FIRE_RL_ug_src_2_doDrop_1 ;
  assign mem0_controller_axi4_deburster_outShim_awff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_bff
  assign mem0_controller_axi4_deburster_outShim_bff$D_IN =
	     mem0_controller$slave_b_peek ;
  assign mem0_controller_axi4_deburster_outShim_bff$ENQ =
	     CAN_FIRE_RL_ug_snk_2_2_doPut ;
  assign mem0_controller_axi4_deburster_outShim_bff$DEQ =
	     mem0_controller_axi4_deburster_outShim_bff$EMPTY_N ;
  assign mem0_controller_axi4_deburster_outShim_bff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_rff
  assign mem0_controller_axi4_deburster_outShim_rff$D_IN =
	     mem0_controller$slave_r_peek ;
  assign mem0_controller_axi4_deburster_outShim_rff$ENQ =
	     CAN_FIRE_RL_ug_snk_2_4_doPut ;
  assign mem0_controller_axi4_deburster_outShim_rff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ;
  assign mem0_controller_axi4_deburster_outShim_rff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_wff
  assign mem0_controller_axi4_deburster_outShim_wff$D_IN =
	     { mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[72:1],
	       1'd1 } ;
  assign mem0_controller_axi4_deburster_outShim_wff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ;
  assign mem0_controller_axi4_deburster_outShim_wff$DEQ =
	     CAN_FIRE_RL_ug_src_2_1_doDrop ;
  assign mem0_controller_axi4_deburster_outShim_wff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule s_otherPeripheralsPortShim_arff
  assign s_otherPeripheralsPortShim_arff$D_IN =
	     { bus_1_toOutput_3$wget[0], bus_1_toOutput_3$wget[99:1] } ;
  assign s_otherPeripheralsPortShim_arff$ENQ =
	     CAN_FIRE_RL_bus_1_output_selected_3 ;
  assign s_otherPeripheralsPortShim_arff$DEQ =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_doDrop ;
  assign s_otherPeripheralsPortShim_arff$CLR = 1'b0 ;

  // submodule s_otherPeripheralsPortShim_awff
  assign s_otherPeripheralsPortShim_awff$D_IN =
	     bus_split_3_doPut$wget[172:73] ;
  assign s_otherPeripheralsPortShim_awff$ENQ =
	     CAN_FIRE_RL_bus_split_3_awug_doPut ;
  assign s_otherPeripheralsPortShim_awff$DEQ =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_doDrop ;
  assign s_otherPeripheralsPortShim_awff$CLR = 1'b0 ;

  // submodule s_otherPeripheralsPortShim_bff
  assign s_otherPeripheralsPortShim_bff$D_IN =
	     s_otherPeripheralsPort_master_sig_bSig_snk_putWire$wget ;
  assign s_otherPeripheralsPortShim_bff$ENQ =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_doPut ;
  assign s_otherPeripheralsPortShim_bff$DEQ =
	     WILL_FIRE_RL_bus_input_follow_flit_6 ||
	     WILL_FIRE_RL_bus_input_first_flit_6 ;
  assign s_otherPeripheralsPortShim_bff$CLR = 1'b0 ;

  // submodule s_otherPeripheralsPortShim_rff
  assign s_otherPeripheralsPortShim_rff$D_IN =
	     s_otherPeripheralsPort_master_sig_rSig_snk_putWire$wget ;
  assign s_otherPeripheralsPortShim_rff$ENQ =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_doPut ;
  assign s_otherPeripheralsPortShim_rff$DEQ =
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_6 ;
  assign s_otherPeripheralsPortShim_rff$CLR = 1'b0 ;

  // submodule s_otherPeripheralsPortShim_wff
  assign s_otherPeripheralsPortShim_wff$D_IN = bus_split_3_doPut$wget[72:0] ;
  assign s_otherPeripheralsPortShim_wff$ENQ =
	     CAN_FIRE_RL_bus_split_3_wug_doPut ;
  assign s_otherPeripheralsPortShim_wff$DEQ =
	     CAN_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_doDrop ;
  assign s_otherPeripheralsPortShim_wff$CLR = 1'b0 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule uart0
  assign uart0$put_from_console_put = put_from_console_put ;
  assign uart0$set_addr_map_addr_base = soc_map$m_uart0_addr_range[127:64] ;
  assign uart0$set_addr_map_addr_lim = addr_lim__h158542 ;
  assign uart0$slave_ar_put_val =
	     { bus_1_toOutput_2$wget[0], bus_1_toOutput_2$wget[99:1] } ;
  assign uart0$slave_aw_put_val = bus_split_2_doPut$wget[172:73] ;
  assign uart0$slave_w_put_val = bus_split_2_doPut$wget[72:0] ;
  assign uart0$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_1 ;
  assign uart0$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_2 ;
  assign uart0$EN_set_addr_map = MUX_rg_state$write_1__SEL_2 ;
  assign uart0$EN_slave_aw_put = CAN_FIRE_RL_bus_split_2_awug_doPut ;
  assign uart0$EN_slave_w_put = CAN_FIRE_RL_bus_split_2_wug_doPut ;
  assign uart0$EN_slave_b_drop =
	     WILL_FIRE_RL_bus_input_follow_flit_5 ||
	     WILL_FIRE_RL_bus_input_first_flit_5 ;
  assign uart0$EN_slave_ar_put = CAN_FIRE_RL_bus_1_output_selected_2 ;
  assign uart0$EN_slave_r_drop =
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_5 ;
  assign uart0$EN_get_to_console_get = EN_get_to_console_get ;
  assign uart0$EN_put_from_console_put = EN_put_from_console_put ;

  // remaining internal signals
  assign IF_IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_b_ETC___d2398 =
	     (!bus_1_inputDest_0_1$wget[0] ||
	      !core$cpu_imem_master_r_canPut) ?
	       bus_1_inputDest_0_1$wget[1] && core$core_mem_master_r_canPut :
	       bus_1_inputDest_0_1$wget[0] ;
  assign IF_IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_ETC___d2133 =
	     (!bus_1_inputDest_0$wget[1] ||
	      !mem0_controller_axi4_deburster_inShim_arff$FULL_N) ?
	       ((!bus_1_inputDest_0$wget[2] || !uart0$slave_ar_canPut) ?
		  bus_1_inputDest_0$wget[3] &&
		  s_otherPeripheralsPortShim_arff$FULL_N :
		  bus_1_inputDest_0$wget[2]) :
	       bus_1_inputDest_0$wget[1] ;
  assign IF_IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_ETC___d2134 =
	     (!bus_1_inputDest_0$wget[0] ||
	      !boot_rom_axi4_deburster_inShim_arff$FULL_N) ?
	       IF_IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_ETC___d2133 :
	       bus_1_inputDest_0$wget[0] ;
  assign IF_IF_bus_1_inputDest_0_whas__081_THEN_bus_1_i_ETC___d2190 =
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 ||
	     bus_1_noRouteSlv_flitCount != 9'd0 ;
  assign IF_IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_b_ETC___d2413 =
	     (!bus_1_inputDest_1_1$wget[0] ||
	      !core$cpu_imem_master_r_canPut) ?
	       bus_1_inputDest_1_1$wget[1] && core$core_mem_master_r_canPut :
	       bus_1_inputDest_1_1$wget[0] ;
  assign IF_IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_ETC___d2171 =
	     (!bus_1_inputDest_1$wget[1] ||
	      !mem0_controller_axi4_deburster_inShim_arff$FULL_N) ?
	       ((!bus_1_inputDest_1$wget[2] || !uart0$slave_ar_canPut) ?
		  bus_1_inputDest_1$wget[3] &&
		  s_otherPeripheralsPortShim_arff$FULL_N :
		  bus_1_inputDest_1$wget[2]) :
	       bus_1_inputDest_1$wget[1] ;
  assign IF_IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_ETC___d2172 =
	     (!bus_1_inputDest_1$wget[0] ||
	      !boot_rom_axi4_deburster_inShim_arff$FULL_N) ?
	       IF_IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_ETC___d2171 :
	       bus_1_inputDest_1$wget[0] ;
  assign IF_IF_bus_1_inputDest_1_whas__140_THEN_bus_1_i_ETC___d2205 =
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 ||
	     bus_1_noRouteSlv_flitCount != 9'd0 ;
  assign IF_IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_ETC___d2429 =
	     (!bus_1_inputDest_2$wget[0] || !core$cpu_imem_master_r_canPut) ?
	       bus_1_inputDest_2$wget[1] && core$core_mem_master_r_canPut :
	       bus_1_inputDest_2$wget[0] ;
  assign IF_IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_ETC___d2444 =
	     (!bus_1_inputDest_3$wget[0] || !core$cpu_imem_master_r_canPut) ?
	       bus_1_inputDest_3$wget[1] && core$core_mem_master_r_canPut :
	       bus_1_inputDest_3$wget[0] ;
  assign IF_IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_ETC___d2461 =
	     (!bus_1_inputDest_4$wget[0] || !core$cpu_imem_master_r_canPut) ?
	       bus_1_inputDest_4$wget[1] && core$core_mem_master_r_canPut :
	       bus_1_inputDest_4$wget[0] ;
  assign IF_IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_ETC___d1598 =
	     (!bus_inputDest_0_1$wget[0] || !core$cpu_imem_master_b_canPut) ?
	       bus_inputDest_0_1$wget[1] && core$core_mem_master_b_canPut :
	       bus_inputDest_0_1$wget[0] ;
  assign IF_IF_bus_inputDest_0_whas__252_THEN_NOT_bus_i_ETC___d1304 =
	     (!bus_inputDest_0$wget[1] ||
	      !IF_bus_split_1_flitLeft_94_EQ_0_95_THEN_bus_sp_ETC___d1243) ?
	       ((!bus_inputDest_0$wget[2] ||
		 !IF_bus_split_2_flitLeft_039_EQ_0_040_THEN_bus__ETC___d1245) ?
		  bus_inputDest_0$wget[3] &&
		  IF_bus_split_3_flitLeft_084_EQ_0_085_THEN_bus__ETC___d1247 :
		  bus_inputDest_0$wget[2]) :
	       bus_inputDest_0$wget[1] ;
  assign IF_IF_bus_inputDest_0_whas__252_THEN_NOT_bus_i_ETC___d1305 =
	     (!bus_inputDest_0$wget[0] ||
	      !IF_bus_split_0_flitLeft_49_EQ_0_50_THEN_bus_sp_ETC___d1241) ?
	       IF_IF_bus_inputDest_0_whas__252_THEN_NOT_bus_i_ETC___d1304 :
	       bus_inputDest_0$wget[0] ;
  assign IF_IF_bus_inputDest_0_whas__252_THEN_bus_input_ETC___d1361 =
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 ||
	     !bus_noRouteSlv_rspFF$FULL_N ;
  assign IF_IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_ETC___d1613 =
	     (!bus_inputDest_1_1$wget[0] || !core$cpu_imem_master_b_canPut) ?
	       bus_inputDest_1_1$wget[1] && core$core_mem_master_b_canPut :
	       bus_inputDest_1_1$wget[0] ;
  assign IF_IF_bus_inputDest_1_whas__311_THEN_NOT_bus_i_ETC___d1342 =
	     (!bus_inputDest_1$wget[1] ||
	      !IF_bus_split_1_flitLeft_94_EQ_0_95_THEN_bus_sp_ETC___d1243) ?
	       ((!bus_inputDest_1$wget[2] ||
		 !IF_bus_split_2_flitLeft_039_EQ_0_040_THEN_bus__ETC___d1245) ?
		  bus_inputDest_1$wget[3] &&
		  IF_bus_split_3_flitLeft_084_EQ_0_085_THEN_bus__ETC___d1247 :
		  bus_inputDest_1$wget[2]) :
	       bus_inputDest_1$wget[1] ;
  assign IF_IF_bus_inputDest_1_whas__311_THEN_NOT_bus_i_ETC___d1343 =
	     (!bus_inputDest_1$wget[0] ||
	      !IF_bus_split_0_flitLeft_49_EQ_0_50_THEN_bus_sp_ETC___d1241) ?
	       IF_IF_bus_inputDest_1_whas__311_THEN_NOT_bus_i_ETC___d1342 :
	       bus_inputDest_1$wget[0] ;
  assign IF_IF_bus_inputDest_1_whas__311_THEN_bus_input_ETC___d1376 =
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 ||
	     !bus_noRouteSlv_rspFF$FULL_N ;
  assign IF_IF_bus_inputDest_2_whas__619_THEN_NOT_bus_i_ETC___d1629 =
	     (!bus_inputDest_2$wget[0] || !core$cpu_imem_master_b_canPut) ?
	       bus_inputDest_2$wget[1] && core$core_mem_master_b_canPut :
	       bus_inputDest_2$wget[0] ;
  assign IF_IF_bus_inputDest_3_whas__634_THEN_NOT_bus_i_ETC___d1644 =
	     (!bus_inputDest_3$wget[0] || !core$cpu_imem_master_b_canPut) ?
	       bus_inputDest_3$wget[1] && core$core_mem_master_b_canPut :
	       bus_inputDest_3$wget[0] ;
  assign IF_IF_bus_inputDest_4_whas__651_THEN_NOT_bus_i_ETC___d1661 =
	     (!bus_inputDest_4$wget[0] || !core$cpu_imem_master_b_canPut) ?
	       bus_inputDest_4$wget[1] && core$core_mem_master_b_canPut :
	       bus_inputDest_4$wget[0] ;
  assign IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2214 =
	     (!bus_1_arbiter_firstHot && bus_1_arbiter_lastSelect) ?
	       !core$cpu_imem_master_ar_canPeek ||
	       IF_IF_bus_1_inputDest_0_whas__081_THEN_bus_1_i_ETC___d2190 &&
	       IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_1__ETC___d2199 :
	       !core$core_mem_master_ar_canPeek ||
	       IF_IF_bus_1_inputDest_1_whas__140_THEN_bus_1_i_ETC___d2205 &&
	       IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_1__ETC___d2211 ;
  assign IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2215 =
	     (!bus_1_arbiter_firstHot && bus_1_arbiter_lastSelect) ?
	       !core$core_mem_master_ar_canPeek ||
	       IF_IF_bus_1_inputDest_1_whas__140_THEN_bus_1_i_ETC___d2205 &&
	       IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_1__ETC___d2211 :
	       !core$cpu_imem_master_ar_canPeek ||
	       IF_IF_bus_1_inputDest_0_whas__081_THEN_bus_1_i_ETC___d2190 &&
	       IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_1__ETC___d2199 ;
  assign IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2217 =
	     (!bus_1_arbiter_firstHot && bus_1_arbiter_lastSelect) ?
	       core$cpu_imem_master_ar_canPeek &&
	       (NOT_IF_IF_bus_1_inputDest_0_whas__081_THEN_bus_ETC___d2103 ||
		IF_IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_ETC___d2134) :
	       core$core_mem_master_ar_canPeek &&
	       (NOT_IF_IF_bus_1_inputDest_1_whas__140_THEN_bus_ETC___d2159 ||
		IF_IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_ETC___d2172) ;
  assign IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2218 =
	     (!bus_1_arbiter_firstHot && bus_1_arbiter_lastSelect) ?
	       core$core_mem_master_ar_canPeek &&
	       (NOT_IF_IF_bus_1_inputDest_1_whas__140_THEN_bus_ETC___d2159 ||
		IF_IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_ETC___d2172) :
	       core$cpu_imem_master_ar_canPeek &&
	       (NOT_IF_IF_bus_1_inputDest_0_whas__081_THEN_bus_ETC___d2103 ||
		IF_IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_ETC___d2134) ;
  assign IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2221 =
	     (!bus_1_arbiter_firstHot && bus_1_arbiter_lastSelect) ?
	       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2215 &&
	       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2217 :
	       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2218 ;
  assign IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2223 =
	     (!bus_1_arbiter_firstHot && bus_1_arbiter_lastSelect) ?
	       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2218 :
	       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2215 &&
	       IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2217 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2530 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2521 :
	       !s_otherPeripheralsPortShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_1__ETC___d2528 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2534 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2533 :
	       !uart0$slave_r_canPeek ||
	       IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_1__ETC___d2493 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2538 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2537 :
	       !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_1__ETC___d2501 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2542 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2541 :
	       !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_bus__ETC___d2510 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2545 :
	       !(bus_1_noRouteSlv_flitCount != 9'd0) ||
	       IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_bus__ETC___d2519 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2549 =
	     IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2534 &&
	     IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2538 &&
	     IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2542 &&
	     IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2554 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2553 :
	       s_otherPeripheralsPortShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_ETC___d2461 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2558 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2557 :
	       uart0$slave_r_canPeek &&
	       IF_IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_ETC___d2444 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2562 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2561 :
	       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_ETC___d2429 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2566 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2565 :
	       boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_b_ETC___d2413 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2570 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2569 :
	       bus_1_noRouteSlv_flitCount != 9'd0 &&
	       IF_IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_b_ETC___d2398 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2573 =
	     IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2558 ||
	     IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2562 ||
	     IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2566 ||
	     IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2570 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2578 =
	     IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2538 &&
	     IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2542 &&
	     IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 &&
	     IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2558 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2582 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2581 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2570 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2587 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       (NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
		  IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2585 :
		  IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2570) :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2566 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2592 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2591 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2542 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2562 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2597 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2596 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2578 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2602 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476) ?
	       (NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
		  IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2600 :
		  IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2578) :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2549 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2554 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2503 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       !uart0$slave_r_canPeek ||
	       IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_1__ETC___d2493 :
	       !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_1__ETC___d2501 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2531 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_1__ETC___d2501 :
	       !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_bus__ETC___d2510 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2535 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_bus__ETC___d2510 :
	       !(bus_1_noRouteSlv_flitCount != 9'd0) ||
	       IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_bus__ETC___d2519 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2539 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       !(bus_1_noRouteSlv_flitCount != 9'd0) ||
	       IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_bus__ETC___d2519 :
	       !s_otherPeripheralsPortShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_1__ETC___d2528 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2543 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       !s_otherPeripheralsPortShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_1__ETC___d2528 :
	       !uart0$slave_r_canPeek ||
	       IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_1__ETC___d2493 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2551 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       uart0$slave_r_canPeek &&
	       IF_IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_ETC___d2444 :
	       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_ETC___d2429 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2555 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_ETC___d2429 :
	       boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_b_ETC___d2413 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2559 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_b_ETC___d2413 :
	       bus_1_noRouteSlv_flitCount != 9'd0 &&
	       IF_IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_b_ETC___d2398 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2563 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       bus_1_noRouteSlv_flitCount != 9'd0 &&
	       IF_IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_b_ETC___d2398 :
	       s_otherPeripheralsPortShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_ETC___d2461 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2567 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       s_otherPeripheralsPortShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_ETC___d2461 :
	       uart0$slave_r_canPeek &&
	       IF_IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_ETC___d2444 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2577 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2566 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2542 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2562 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2584 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2542 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2562 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2578 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2589 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2578 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2549 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2554 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2594 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2549 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2554 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2570 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2599 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2570 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2566 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2512 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2503 :
	       !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_bus__ETC___d2510 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2532 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2531 :
	       !(bus_1_noRouteSlv_flitCount != 9'd0) ||
	       IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_bus__ETC___d2519 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2536 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2535 :
	       !s_otherPeripheralsPortShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_1__ETC___d2528 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2540 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2539 :
	       !uart0$slave_r_canPeek ||
	       IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_1__ETC___d2493 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2544 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2543 :
	       !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_1__ETC___d2501 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2552 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2551 :
	       boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_b_ETC___d2413 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2556 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2555 :
	       bus_1_noRouteSlv_flitCount != 9'd0 &&
	       IF_IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_b_ETC___d2398 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2560 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2559 :
	       s_otherPeripheralsPortShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_ETC___d2461 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2564 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2563 :
	       uart0$slave_r_canPeek &&
	       IF_IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_ETC___d2444 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2568 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2567 :
	       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_ETC___d2429 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2579 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2577 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2578 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2585 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2584 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2549 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2554 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2590 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2589 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2570 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2595 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2594 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2566 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2600 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_472_482_AN_ETC___d2599 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2542 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2562 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2521 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2512 :
	       !(bus_1_noRouteSlv_flitCount != 9'd0) ||
	       IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_bus__ETC___d2519 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2533 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2532 :
	       !s_otherPeripheralsPortShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_1__ETC___d2528 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2537 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2536 :
	       !uart0$slave_r_canPeek ||
	       IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_1__ETC___d2493 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2541 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2540 :
	       !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_1__ETC___d2501 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2545 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2544 :
	       !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_bus__ETC___d2510 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2553 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2552 :
	       bus_1_noRouteSlv_flitCount != 9'd0 &&
	       IF_IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_b_ETC___d2398 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2557 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2556 :
	       s_otherPeripheralsPortShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_ETC___d2461 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2561 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2560 :
	       uart0$slave_r_canPeek &&
	       IF_IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_ETC___d2444 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2565 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2564 :
	       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_ETC___d2429 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2569 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2568 :
	       boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_b_ETC___d2413 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2581 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2579 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2549 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2554 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2591 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2590 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2566 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_470_478_AND__ETC___d2596 =
	     NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_471_480_AND__ETC___d2595 :
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2542 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2546 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2562 ;
  assign IF_NOT_bus_1_moreFlits_176_BIT_0_249_263_OR_NO_ETC___d2272 =
	     (!bus_1_moreFlits[0] ||
	      !boot_rom_axi4_deburster_inShim_arff$FULL_N) ?
	       IF_NOT_bus_1_moreFlits_176_BIT_1_251_265_OR_NO_ETC___d2271 :
	       bus_1_moreFlits[0] ;
  assign IF_NOT_bus_1_moreFlits_176_BIT_1_251_265_OR_NO_ETC___d2271 =
	     (!bus_1_moreFlits[1] ||
	      !mem0_controller_axi4_deburster_inShim_arff$FULL_N) ?
	       ((!bus_1_moreFlits[2] || !uart0$slave_ar_canPut) ?
		  bus_1_moreFlits[3] &&
		  s_otherPeripheralsPortShim_arff$FULL_N :
		  bus_1_moreFlits[2]) :
	       bus_1_moreFlits[1] ;
  assign IF_NOT_bus_1_moreFlits_1_464_BIT_0_710_711_OR__ETC___d2715 =
	     (!bus_1_moreFlits_1[0] || !core$cpu_imem_master_r_canPut) ?
	       bus_1_moreFlits_1[1] && core$core_mem_master_r_canPut :
	       bus_1_moreFlits_1[0] ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1730 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1721 :
	       !s_otherPeripheralsPortShim_bff$EMPTY_N ||
	       IF_bus_inputDest_4_whas__651_THEN_NOT_bus_inpu_ETC___d1728 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1734 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1733 :
	       !uart0$slave_b_canPeek ||
	       IF_bus_inputDest_3_whas__634_THEN_NOT_bus_inpu_ETC___d1693 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1738 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1737 :
	       !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_2_whas__619_THEN_NOT_bus_inpu_ETC___d1701 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1742 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1741 :
	       !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_in_ETC___d1710 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1745 :
	       !bus_noRouteSlv_rspFF$EMPTY_N ||
	       IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_in_ETC___d1719 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1749 =
	     IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1734 &&
	     IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1738 &&
	     IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1742 &&
	     IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1754 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1753 :
	       s_otherPeripheralsPortShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_4_whas__651_THEN_NOT_bus_i_ETC___d1661 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1758 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1757 :
	       uart0$slave_b_canPeek &&
	       IF_IF_bus_inputDest_3_whas__634_THEN_NOT_bus_i_ETC___d1644 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1762 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1761 :
	       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_2_whas__619_THEN_NOT_bus_i_ETC___d1629 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1766 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1765 :
	       boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_ETC___d1613 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1770 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1769 :
	       bus_noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_ETC___d1598 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1773 =
	     IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1758 ||
	     IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1762 ||
	     IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1766 ||
	     IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1770 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1778 =
	     IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1738 &&
	     IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1742 &&
	     IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 &&
	     IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1758 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1782 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1781 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1770 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1787 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       (NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
		  IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1785 :
		  IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1770) :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1766 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1792 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1791 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1742 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1762 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1797 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1796 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1778 ;
  assign IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1802 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676) ?
	       (NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
		  IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1800 :
		  IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1778) :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1749 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1754 ;
  assign IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1385 =
	     (!bus_arbiter_firstHot && bus_arbiter_lastSelect) ?
	       !IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117 ||
	       IF_IF_bus_inputDest_0_whas__252_THEN_bus_input_ETC___d1361 &&
	       IF_bus_inputDest_0_whas__252_THEN_NOT_bus_inpu_ETC___d1370 :
	       !IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186 ||
	       IF_IF_bus_inputDest_1_whas__311_THEN_bus_input_ETC___d1376 &&
	       IF_bus_inputDest_1_whas__311_THEN_NOT_bus_inpu_ETC___d1382 ;
  assign IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1386 =
	     (!bus_arbiter_firstHot && bus_arbiter_lastSelect) ?
	       !IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186 ||
	       IF_IF_bus_inputDest_1_whas__311_THEN_bus_input_ETC___d1376 &&
	       IF_bus_inputDest_1_whas__311_THEN_NOT_bus_inpu_ETC___d1382 :
	       !IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117 ||
	       IF_IF_bus_inputDest_0_whas__252_THEN_bus_input_ETC___d1361 &&
	       IF_bus_inputDest_0_whas__252_THEN_NOT_bus_inpu_ETC___d1370 ;
  assign IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1388 =
	     (!bus_arbiter_firstHot && bus_arbiter_lastSelect) ?
	       IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117 &&
	       (NOT_IF_IF_bus_inputDest_0_whas__252_THEN_bus_i_ETC___d1274 ||
		IF_IF_bus_inputDest_0_whas__252_THEN_NOT_bus_i_ETC___d1305) :
	       IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186 &&
	       (NOT_IF_IF_bus_inputDest_1_whas__311_THEN_bus_i_ETC___d1330 ||
		IF_IF_bus_inputDest_1_whas__311_THEN_NOT_bus_i_ETC___d1343) ;
  assign IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1389 =
	     (!bus_arbiter_firstHot && bus_arbiter_lastSelect) ?
	       IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186 &&
	       (NOT_IF_IF_bus_inputDest_1_whas__311_THEN_bus_i_ETC___d1330 ||
		IF_IF_bus_inputDest_1_whas__311_THEN_NOT_bus_i_ETC___d1343) :
	       IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117 &&
	       (NOT_IF_IF_bus_inputDest_0_whas__252_THEN_bus_i_ETC___d1274 ||
		IF_IF_bus_inputDest_0_whas__252_THEN_NOT_bus_i_ETC___d1305) ;
  assign IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1392 =
	     (!bus_arbiter_firstHot && bus_arbiter_lastSelect) ?
	       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1386 &&
	       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1388 :
	       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1389 ;
  assign IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1394 =
	     (!bus_arbiter_firstHot && bus_arbiter_lastSelect) ?
	       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1389 :
	       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1386 &&
	       IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1388 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1703 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       !uart0$slave_b_canPeek ||
	       IF_bus_inputDest_3_whas__634_THEN_NOT_bus_inpu_ETC___d1693 :
	       !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_2_whas__619_THEN_NOT_bus_inpu_ETC___d1701 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1731 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_2_whas__619_THEN_NOT_bus_inpu_ETC___d1701 :
	       !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_in_ETC___d1710 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1735 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_in_ETC___d1710 :
	       !bus_noRouteSlv_rspFF$EMPTY_N ||
	       IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_in_ETC___d1719 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1739 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       !bus_noRouteSlv_rspFF$EMPTY_N ||
	       IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_in_ETC___d1719 :
	       !s_otherPeripheralsPortShim_bff$EMPTY_N ||
	       IF_bus_inputDest_4_whas__651_THEN_NOT_bus_inpu_ETC___d1728 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1743 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       !s_otherPeripheralsPortShim_bff$EMPTY_N ||
	       IF_bus_inputDest_4_whas__651_THEN_NOT_bus_inpu_ETC___d1728 :
	       !uart0$slave_b_canPeek ||
	       IF_bus_inputDest_3_whas__634_THEN_NOT_bus_inpu_ETC___d1693 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1751 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       uart0$slave_b_canPeek &&
	       IF_IF_bus_inputDest_3_whas__634_THEN_NOT_bus_i_ETC___d1644 :
	       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_2_whas__619_THEN_NOT_bus_i_ETC___d1629 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1755 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_2_whas__619_THEN_NOT_bus_i_ETC___d1629 :
	       boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_ETC___d1613 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1759 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_ETC___d1613 :
	       bus_noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_ETC___d1598 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1763 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       bus_noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_ETC___d1598 :
	       s_otherPeripheralsPortShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_4_whas__651_THEN_NOT_bus_i_ETC___d1661 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1767 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       s_otherPeripheralsPortShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_4_whas__651_THEN_NOT_bus_i_ETC___d1661 :
	       uart0$slave_b_canPeek &&
	       IF_IF_bus_inputDest_3_whas__634_THEN_NOT_bus_i_ETC___d1644 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1777 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1766 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1742 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1762 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1784 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1742 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1762 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1778 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1789 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1778 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1749 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1754 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1794 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1749 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1754 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1770 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1799 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1770 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1766 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1712 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1703 :
	       !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_in_ETC___d1710 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1732 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1731 :
	       !bus_noRouteSlv_rspFF$EMPTY_N ||
	       IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_in_ETC___d1719 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1736 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1735 :
	       !s_otherPeripheralsPortShim_bff$EMPTY_N ||
	       IF_bus_inputDest_4_whas__651_THEN_NOT_bus_inpu_ETC___d1728 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1740 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1739 :
	       !uart0$slave_b_canPeek ||
	       IF_bus_inputDest_3_whas__634_THEN_NOT_bus_inpu_ETC___d1693 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1744 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1743 :
	       !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_2_whas__619_THEN_NOT_bus_inpu_ETC___d1701 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1752 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1751 :
	       boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_ETC___d1613 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1756 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1755 :
	       bus_noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_ETC___d1598 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1760 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1759 :
	       s_otherPeripheralsPortShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_4_whas__651_THEN_NOT_bus_i_ETC___d1661 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1764 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1763 :
	       uart0$slave_b_canPeek &&
	       IF_IF_bus_inputDest_3_whas__634_THEN_NOT_bus_i_ETC___d1644 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1768 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1767 :
	       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_2_whas__619_THEN_NOT_bus_i_ETC___d1629 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1779 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1777 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1778 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1785 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1784 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1749 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1754 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1790 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1789 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1770 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1795 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1794 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1766 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1800 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_672_682_AND__ETC___d1799 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1742 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1762 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1721 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1712 :
	       !bus_noRouteSlv_rspFF$EMPTY_N ||
	       IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_in_ETC___d1719 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1733 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1732 :
	       !s_otherPeripheralsPortShim_bff$EMPTY_N ||
	       IF_bus_inputDest_4_whas__651_THEN_NOT_bus_inpu_ETC___d1728 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1737 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1736 :
	       !uart0$slave_b_canPeek ||
	       IF_bus_inputDest_3_whas__634_THEN_NOT_bus_inpu_ETC___d1693 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1741 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1740 :
	       !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_2_whas__619_THEN_NOT_bus_inpu_ETC___d1701 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1745 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1744 :
	       !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_in_ETC___d1710 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1753 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1752 :
	       bus_noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_ETC___d1598 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1757 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1756 :
	       s_otherPeripheralsPortShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_4_whas__651_THEN_NOT_bus_i_ETC___d1661 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1761 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1760 :
	       uart0$slave_b_canPeek &&
	       IF_IF_bus_inputDest_3_whas__634_THEN_NOT_bus_i_ETC___d1644 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1765 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1764 :
	       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_2_whas__619_THEN_NOT_bus_i_ETC___d1629 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1769 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1768 :
	       boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_ETC___d1613 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1781 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1779 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1749 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1754 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1791 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1790 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1766 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_670_678_AND_bu_ETC___d1796 =
	     NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 ?
	       IF_NOT_bus_arbiter_lastSelect_2_671_680_AND_bu_ETC___d1795 :
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1742 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1746 &&
	       IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1762 ;
  assign IF_NOT_bus_moreFlits_1_664_BIT_0_908_909_OR_NO_ETC___d1913 =
	     (!bus_moreFlits_1[0] || !core$cpu_imem_master_b_canPut) ?
	       bus_moreFlits_1[1] && core$core_mem_master_b_canPut :
	       bus_moreFlits_1[0] ;
  assign IF_NOT_bus_moreFlits_347_BIT_0_425_439_OR_NOT__ETC___d1448 =
	     (!bus_moreFlits[0] ||
	      !IF_bus_split_0_flitLeft_49_EQ_0_50_THEN_bus_sp_ETC___d1241) ?
	       IF_NOT_bus_moreFlits_347_BIT_1_427_441_OR_NOT__ETC___d1447 :
	       bus_moreFlits[0] ;
  assign IF_NOT_bus_moreFlits_347_BIT_1_427_441_OR_NOT__ETC___d1447 =
	     (!bus_moreFlits[1] ||
	      !IF_bus_split_1_flitLeft_94_EQ_0_95_THEN_bus_sp_ETC___d1243) ?
	       ((!bus_moreFlits[2] ||
		 !IF_bus_split_2_flitLeft_039_EQ_0_040_THEN_bus__ETC___d1245) ?
		  bus_moreFlits[3] &&
		  IF_bus_split_3_flitLeft_084_EQ_0_085_THEN_bus__ETC___d1247 :
		  bus_moreFlits[2]) :
	       bus_moreFlits[1] ;
  assign IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_bus__ETC___d2519 =
	     (!bus_1_inputDest_0_1$wget[0] ||
	      !core$cpu_imem_master_r_canPut) &&
	     (!bus_1_inputDest_0_1$wget[1] ||
	      !core$core_mem_master_r_canPut) ;
  assign IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_1__ETC___d2198 =
	     (!bus_1_inputDest_0$wget[1] ||
	      !mem0_controller_axi4_deburster_inShim_arff$FULL_N) &&
	     (!bus_1_inputDest_0$wget[2] || !uart0$slave_ar_canPut) &&
	     (!bus_1_inputDest_0$wget[3] ||
	      !s_otherPeripheralsPortShim_arff$FULL_N) ;
  assign IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_1__ETC___d2199 =
	     (!bus_1_inputDest_0$wget[0] ||
	      !boot_rom_axi4_deburster_inShim_arff$FULL_N) &&
	     IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_1__ETC___d2198 ;
  assign IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_bus__ETC___d2510 =
	     (!bus_1_inputDest_1_1$wget[0] ||
	      !core$cpu_imem_master_r_canPut) &&
	     (!bus_1_inputDest_1_1$wget[1] ||
	      !core$core_mem_master_r_canPut) ;
  assign IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_1__ETC___d2210 =
	     (!bus_1_inputDest_1$wget[1] ||
	      !mem0_controller_axi4_deburster_inShim_arff$FULL_N) &&
	     (!bus_1_inputDest_1$wget[2] || !uart0$slave_ar_canPut) &&
	     (!bus_1_inputDest_1$wget[3] ||
	      !s_otherPeripheralsPortShim_arff$FULL_N) ;
  assign IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_1__ETC___d2211 =
	     (!bus_1_inputDest_1$wget[0] ||
	      !boot_rom_axi4_deburster_inShim_arff$FULL_N) &&
	     IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_1__ETC___d2210 ;
  assign IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_1__ETC___d2501 =
	     (!bus_1_inputDest_2$wget[0] || !core$cpu_imem_master_r_canPut) &&
	     (!bus_1_inputDest_2$wget[1] || !core$core_mem_master_r_canPut) ;
  assign IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_1__ETC___d2493 =
	     (!bus_1_inputDest_3$wget[0] || !core$cpu_imem_master_r_canPut) &&
	     (!bus_1_inputDest_3$wget[1] || !core$core_mem_master_r_canPut) ;
  assign IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_1__ETC___d2528 =
	     (!bus_1_inputDest_4$wget[0] || !core$cpu_imem_master_r_canPut) &&
	     (!bus_1_inputDest_4$wget[1] || !core$core_mem_master_r_canPut) ;
  assign IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_in_ETC___d1719 =
	     (!bus_inputDest_0_1$wget[0] || !core$cpu_imem_master_b_canPut) &&
	     (!bus_inputDest_0_1$wget[1] || !core$core_mem_master_b_canPut) ;
  assign IF_bus_inputDest_0_whas__252_THEN_NOT_bus_inpu_ETC___d1369 =
	     (!bus_inputDest_0$wget[1] ||
	      !IF_bus_split_1_flitLeft_94_EQ_0_95_THEN_bus_sp_ETC___d1243) &&
	     (!bus_inputDest_0$wget[2] ||
	      !IF_bus_split_2_flitLeft_039_EQ_0_040_THEN_bus__ETC___d1245) &&
	     (!bus_inputDest_0$wget[3] ||
	      !IF_bus_split_3_flitLeft_084_EQ_0_085_THEN_bus__ETC___d1247) ;
  assign IF_bus_inputDest_0_whas__252_THEN_NOT_bus_inpu_ETC___d1370 =
	     (!bus_inputDest_0$wget[0] ||
	      !IF_bus_split_0_flitLeft_49_EQ_0_50_THEN_bus_sp_ETC___d1241) &&
	     IF_bus_inputDest_0_whas__252_THEN_NOT_bus_inpu_ETC___d1369 ;
  assign IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_in_ETC___d1710 =
	     (!bus_inputDest_1_1$wget[0] || !core$cpu_imem_master_b_canPut) &&
	     (!bus_inputDest_1_1$wget[1] || !core$core_mem_master_b_canPut) ;
  assign IF_bus_inputDest_1_whas__311_THEN_NOT_bus_inpu_ETC___d1381 =
	     (!bus_inputDest_1$wget[1] ||
	      !IF_bus_split_1_flitLeft_94_EQ_0_95_THEN_bus_sp_ETC___d1243) &&
	     (!bus_inputDest_1$wget[2] ||
	      !IF_bus_split_2_flitLeft_039_EQ_0_040_THEN_bus__ETC___d1245) &&
	     (!bus_inputDest_1$wget[3] ||
	      !IF_bus_split_3_flitLeft_084_EQ_0_085_THEN_bus__ETC___d1247) ;
  assign IF_bus_inputDest_1_whas__311_THEN_NOT_bus_inpu_ETC___d1382 =
	     (!bus_inputDest_1$wget[0] ||
	      !IF_bus_split_0_flitLeft_49_EQ_0_50_THEN_bus_sp_ETC___d1241) &&
	     IF_bus_inputDest_1_whas__311_THEN_NOT_bus_inpu_ETC___d1381 ;
  assign IF_bus_inputDest_2_whas__619_THEN_NOT_bus_inpu_ETC___d1701 =
	     (!bus_inputDest_2$wget[0] || !core$cpu_imem_master_b_canPut) &&
	     (!bus_inputDest_2$wget[1] || !core$core_mem_master_b_canPut) ;
  assign IF_bus_inputDest_3_whas__634_THEN_NOT_bus_inpu_ETC___d1693 =
	     (!bus_inputDest_3$wget[0] || !core$cpu_imem_master_b_canPut) &&
	     (!bus_inputDest_3$wget[1] || !core$core_mem_master_b_canPut) ;
  assign IF_bus_inputDest_4_whas__651_THEN_NOT_bus_inpu_ETC___d1728 =
	     (!bus_inputDest_4$wget[0] || !core$cpu_imem_master_b_canPut) &&
	     (!bus_inputDest_4$wget[1] || !core$core_mem_master_b_canPut) ;
  assign IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117 =
	     (bus_merged_0_flitLeft == 8'd0) ?
	       bus_merged_0_awff$EMPTY_N && bus_merged_0_wff$EMPTY_N :
	       bus_merged_0_wff$EMPTY_N ;
  assign IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1131 =
	     (CAN_FIRE_RL_bus_merged_0_passFlit &&
	      !bus_merged_0_outflit$wget[172]) ?
	       bus_merged_0_outflit$wget[171:0] :
	       { 99'h2AAAAAAAAAAAAAAAAAAAAAAAA,
		 CAN_FIRE_RL_bus_merged_0_passFlit ?
		   bus_merged_0_outflit$wget[72:0] :
		   bus_merged_0_wff$D_OUT } ;
  assign IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1147 =
	     addr__h46762 < soc_map$m_boot_rom_addr_range[127:64] ;
  assign IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1150 =
	     x__h47229 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1155 =
	     addr__h46762 < soc_map$m_mem0_controller_addr_range[127:64] ;
  assign IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1158 =
	     x__h47302 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1164 =
	     addr__h46762 < soc_map$m_uart0_addr_range[127:64] ;
  assign IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1167 =
	     x__h47386 < soc_map$m_uart0_addr_range[63:0] ;
  assign IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1170 =
	     (IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1147 ||
	      !IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1150) &&
	     (IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1155 ||
	      !IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1158) &&
	     (IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1164 ||
	      !IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1167) ;
  assign IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1174 =
	     (IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1147 ||
	      !IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1150) &&
	     (IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1155 ||
	      !IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1158) &&
	     !IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1164 &&
	     IF_bus_merged_0_outflit_whas__118_AND_NOT_bus__ETC___d1167 ;
  assign IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186 =
	     (bus_merged_1_flitLeft == 8'd0) ?
	       bus_merged_1_awff$EMPTY_N && bus_merged_1_wff$EMPTY_N :
	       bus_merged_1_wff$EMPTY_N ;
  assign IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1200 =
	     (CAN_FIRE_RL_bus_merged_1_passFlit &&
	      !bus_merged_1_outflit$wget[172]) ?
	       bus_merged_1_outflit$wget[171:0] :
	       { 99'h2AAAAAAAAAAAAAAAAAAAAAAAA,
		 CAN_FIRE_RL_bus_merged_1_passFlit ?
		   bus_merged_1_outflit$wget[72:0] :
		   bus_merged_1_wff$D_OUT } ;
  assign IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1211 =
	     addr__h48548 < soc_map$m_boot_rom_addr_range[127:64] ;
  assign IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1213 =
	     x__h48944 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1216 =
	     addr__h48548 < soc_map$m_mem0_controller_addr_range[127:64] ;
  assign IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1218 =
	     x__h49007 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1222 =
	     addr__h48548 < soc_map$m_uart0_addr_range[127:64] ;
  assign IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1224 =
	     x__h49081 < soc_map$m_uart0_addr_range[63:0] ;
  assign IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1227 =
	     (IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1211 ||
	      !IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1213) &&
	     (IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1216 ||
	      !IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1218) &&
	     (IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1222 ||
	      !IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1224) ;
  assign IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1231 =
	     (IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1211 ||
	      !IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1213) &&
	     (IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1216 ||
	      !IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1218) &&
	     !IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1222 &&
	     IF_bus_merged_1_outflit_whas__187_AND_NOT_bus__ETC___d1224 ;
  assign IF_bus_split_0_flitLeft_49_EQ_0_50_THEN_bus_sp_ETC___d1241 =
	     (bus_split_0_flitLeft == 8'd0) ?
	       boot_rom_axi4_deburster_inShim_awff$FULL_N &&
	       boot_rom_axi4_deburster_inShim_wff$FULL_N :
	       boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign IF_bus_split_1_flitLeft_94_EQ_0_95_THEN_bus_sp_ETC___d1243 =
	     (bus_split_1_flitLeft == 8'd0) ?
	       mem0_controller_axi4_deburster_inShim_awff$FULL_N &&
	       mem0_controller_axi4_deburster_inShim_wff$FULL_N :
	       mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign IF_bus_split_2_flitLeft_039_EQ_0_040_THEN_bus__ETC___d1245 =
	     (bus_split_2_flitLeft == 8'd0) ?
	       uart0$slave_aw_canPut && uart0$slave_w_canPut :
	       uart0$slave_w_canPut ;
  assign IF_bus_split_3_flitLeft_084_EQ_0_085_THEN_bus__ETC___d1247 =
	     (bus_split_3_flitLeft == 8'd0) ?
	       s_otherPeripheralsPortShim_awff$FULL_N &&
	       s_otherPeripheralsPortShim_wff$FULL_N :
	       s_otherPeripheralsPortShim_wff$FULL_N ;
  assign NOT_IF_IF_bus_1_inputDest_0_whas__081_THEN_bus_ETC___d2103 =
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 &&
	     bus_1_noRouteSlv_flitCount == 9'd0 ;
  assign NOT_IF_IF_bus_1_inputDest_1_whas__140_THEN_bus_ETC___d2159 =
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 &&
	     bus_1_noRouteSlv_flitCount == 9'd0 ;
  assign NOT_IF_IF_bus_inputDest_0_whas__252_THEN_bus_i_ETC___d1274 =
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 &&
	     bus_noRouteSlv_rspFF$FULL_N ;
  assign NOT_IF_IF_bus_inputDest_1_whas__311_THEN_bus_i_ETC___d1330 =
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 &&
	     bus_noRouteSlv_rspFF$FULL_N ;
  assign NOT_IF_bus_1_moreFlits_176_BIT_0_249_THEN_1_EL_ETC___d2262 =
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 &&
	     bus_1_noRouteSlv_flitCount == 9'd0 ;
  assign NOT_IF_bus_moreFlits_347_BIT_0_425_THEN_1_ELSE_ETC___d1438 =
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 &&
	     bus_noRouteSlv_rspFF$FULL_N ;
  assign NOT_bus_1_arbiter_lastSelect_3_470_478_AND_bus_ETC___d2479 =
	     !bus_1_arbiter_lastSelect_3 &&
	     (bus_1_arbiter_lastSelect_2 || bus_1_arbiter_lastSelect_1_1 ||
	      bus_1_arbiter_lastSelect_1) ;
  assign NOT_bus_arbiter_lastSelect_3_670_678_AND_bus_a_ETC___d1679 =
	     !bus_arbiter_lastSelect_3 &&
	     (bus_arbiter_lastSelect_2 || bus_arbiter_lastSelect_1_1 ||
	      bus_arbiter_lastSelect_1) ;
  assign _theResult____h78560 =
	     bus_toDfltOutput$wget[173] ?
	       bus_noRouteSlv_awidReg :
	       currentAwid__h78745 ;
  assign addr__h46762 =
	     (CAN_FIRE_RL_bus_merged_0_passFlit &&
	      !bus_merged_0_outflit$wget[172]) ?
	       bus_merged_0_outflit$wget[165:102] :
	       64'd0 ;
  assign addr__h48548 =
	     (CAN_FIRE_RL_bus_merged_1_passFlit &&
	      !bus_merged_1_outflit$wget[172]) ?
	       bus_merged_1_outflit$wget[165:102] :
	       64'd0 ;
  assign addr_lim__h158488 =
	     soc_map$m_boot_rom_addr_range[127:64] +
	     soc_map$m_boot_rom_addr_range[63:0] ;
  assign addr_lim__h158516 =
	     soc_map$m_mem0_controller_addr_range[127:64] +
	     soc_map$m_mem0_controller_addr_range[63:0] ;
  assign addr_lim__h158542 =
	     soc_map$m_uart0_addr_range[127:64] +
	     soc_map$m_uart0_addr_range[63:0] ;
  assign boot_rom_axi4_deburster_readsSent_port0__read__ETC___d155 =
	     boot_rom_axi4_deburster_readsSent ==
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign bus_1_arbiter_lastSelect_3_470_OR_bus_1_arbite_ETC___d2476 =
	     bus_1_arbiter_lastSelect_3 || bus_1_arbiter_lastSelect_2 ||
	     bus_1_arbiter_lastSelect_1_1 ||
	     bus_1_arbiter_lastSelect_1 ;
  assign bus_1_inputCanPeek_0_1_whas__377_AND_bus_1_inp_ETC___d2463 =
	     bus_1_noRouteSlv_flitCount != 9'd0 &&
	     IF_IF_bus_1_inputDest_0_1_whas__380_THEN_NOT_b_ETC___d2398 ||
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     IF_IF_bus_1_inputDest_1_1_whas__403_THEN_NOT_b_ETC___d2413 ||
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     IF_IF_bus_1_inputDest_2_whas__419_THEN_NOT_bus_ETC___d2429 ||
	     uart0$slave_r_canPeek &&
	     IF_IF_bus_1_inputDest_3_whas__434_THEN_NOT_bus_ETC___d2444 ||
	     s_otherPeripheralsPortShim_rff$EMPTY_N &&
	     IF_IF_bus_1_inputDest_4_whas__451_THEN_NOT_bus_ETC___d2461 ;
  assign bus_1_inputCanPeek_0_whas__078_AND_bus_1_input_ETC___d2175 =
	     core$cpu_imem_master_ar_canPeek &&
	     (NOT_IF_IF_bus_1_inputDest_0_whas__081_THEN_bus_ETC___d2103 ||
	      IF_IF_bus_1_inputDest_0_whas__081_THEN_NOT_bus_ETC___d2134) ||
	     core$core_mem_master_ar_canPeek &&
	     (NOT_IF_IF_bus_1_inputDest_1_whas__140_THEN_bus_ETC___d2159 ||
	      IF_IF_bus_1_inputDest_1_whas__140_THEN_NOT_bus_ETC___d2172) ;
  assign bus_1_toOutput_0_1wget_BITS_73_TO_68__q2 =
	     bus_1_toOutput_0_1$wget[73:68] ;
  assign bus_arbiter_lastSelect_3_670_OR_bus_arbiter_la_ETC___d1676 =
	     bus_arbiter_lastSelect_3 || bus_arbiter_lastSelect_2 ||
	     bus_arbiter_lastSelect_1_1 ||
	     bus_arbiter_lastSelect_1 ;
  assign bus_inputCanPeek_0_1_whas__577_AND_bus_inputCa_ETC___d1663 =
	     bus_noRouteSlv_rspFF$EMPTY_N &&
	     IF_IF_bus_inputDest_0_1_whas__580_THEN_NOT_bus_ETC___d1598 ||
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     IF_IF_bus_inputDest_1_1_whas__603_THEN_NOT_bus_ETC___d1613 ||
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     IF_IF_bus_inputDest_2_whas__619_THEN_NOT_bus_i_ETC___d1629 ||
	     uart0$slave_b_canPeek &&
	     IF_IF_bus_inputDest_3_whas__634_THEN_NOT_bus_i_ETC___d1644 ||
	     s_otherPeripheralsPortShim_bff$EMPTY_N &&
	     IF_IF_bus_inputDest_4_whas__651_THEN_NOT_bus_i_ETC___d1661 ;
  assign bus_inputCanPeek_0_whas__249_AND_bus_inputCanP_ETC___d1346 =
	     IF_bus_merged_0_flitLeft_59_EQ_0_60_THEN_bus_m_ETC___d1117 &&
	     (NOT_IF_IF_bus_inputDest_0_whas__252_THEN_bus_i_ETC___d1274 ||
	      IF_IF_bus_inputDest_0_whas__252_THEN_NOT_bus_i_ETC___d1305) ||
	     IF_bus_merged_1_flitLeft_13_EQ_0_14_THEN_bus_m_ETC___d1186 &&
	     (NOT_IF_IF_bus_inputDest_1_whas__311_THEN_bus_i_ETC___d1330 ||
	      IF_IF_bus_inputDest_1_whas__311_THEN_NOT_bus_i_ETC___d1343) ;
  assign bus_toOutput_0_1wget_BITS_8_TO_3__q1 = bus_toOutput_0_1$wget[8:3] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2043 =
	     core$core_mem_master_ar_peek[92:29] <
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2045 =
	     x__h108601 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2048 =
	     core$core_mem_master_ar_peek[92:29] <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2050 =
	     x__h108664 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2054 =
	     core$core_mem_master_ar_peek[92:29] <
	     soc_map$m_uart0_addr_range[127:64] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2056 =
	     x__h108738 < soc_map$m_uart0_addr_range[63:0] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2059 =
	     (core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2043 ||
	      !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2045) &&
	     (core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2048 ||
	      !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2050) &&
	     (core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2054 ||
	      !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2056) ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2063 =
	     (core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2043 ||
	      !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2045) &&
	     (core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2048 ||
	      !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2050) &&
	     !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2054 &&
	     core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2056 ;
  assign core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2005 =
	     core$cpu_imem_master_ar_peek[92:29] <
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2007 =
	     x__h107054 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2010 =
	     core$cpu_imem_master_ar_peek[92:29] <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2012 =
	     x__h107117 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2016 =
	     core$cpu_imem_master_ar_peek[92:29] <
	     soc_map$m_uart0_addr_range[127:64] ;
  assign core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2018 =
	     x__h107191 < soc_map$m_uart0_addr_range[63:0] ;
  assign core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2021 =
	     (core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2005 ||
	      !core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2007) &&
	     (core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2010 ||
	      !core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2012) &&
	     (core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2016 ||
	      !core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2018) ;
  assign core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2025 =
	     (core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2005 ||
	      !core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2007) &&
	     (core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2010 ||
	      !core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2012) &&
	     !core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2016 &&
	     core_cpu_imem_master_ar_peek__995_BITS_92_TO_2_ETC___d2018 ;
  assign currentAwid__h78745 =
	     { bus_toDfltOutput$wget[0], bus_toDfltOutput$wget[172:167] } ;
  assign mem0_controller_axi4_deburster_readsSent_port0_ETC___d318 =
	     mem0_controller_axi4_deburster_readsSent ==
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign x1__h12804 = mem0_controller_axi4_deburster_writesSent + 8'd1 ;
  assign x1__h13520 = mem0_controller_axi4_deburster_readsSent + 8'd1 ;
  assign x1__h6340 = boot_rom_axi4_deburster_writesSent + 8'd1 ;
  assign x1__h7059 = boot_rom_axi4_deburster_readsSent + 8'd1 ;
  assign x__h107054 =
	     core$cpu_imem_master_ar_peek[92:29] -
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h107117 =
	     core$cpu_imem_master_ar_peek[92:29] -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h107191 =
	     core$cpu_imem_master_ar_peek[92:29] -
	     soc_map$m_uart0_addr_range[127:64] ;
  assign x__h107254 =
	     core$cpu_imem_master_ar_peek[92:29] -
	     soc_map$m_other_peripherals_addr_range[127:64] ;
  assign x__h108601 =
	     core$core_mem_master_ar_peek[92:29] -
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h108664 =
	     core$core_mem_master_ar_peek[92:29] -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h108738 =
	     core$core_mem_master_ar_peek[92:29] -
	     soc_map$m_uart0_addr_range[127:64] ;
  assign x__h108801 =
	     core$core_mem_master_ar_peek[92:29] -
	     soc_map$m_other_peripherals_addr_range[127:64] ;
  assign x__h12561 = { 56'd0, mem0_controller_axi4_deburster_writesSent } ;
  assign x__h12900 =
	     mem0_controller_axi4_deburster_flitReceived[17:9] + 9'd1 ;
  assign x__h13314 = { 56'd0, mem0_controller_axi4_deburster_readsSent } ;
  assign x__h47229 = addr__h46762 - soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h47302 =
	     addr__h46762 - soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h47386 = addr__h46762 - soc_map$m_uart0_addr_range[127:64] ;
  assign x__h47459 =
	     addr__h46762 - soc_map$m_other_peripherals_addr_range[127:64] ;
  assign x__h48944 = addr__h48548 - soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h49007 =
	     addr__h48548 - soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h49081 = addr__h48548 - soc_map$m_uart0_addr_range[127:64] ;
  assign x__h49144 =
	     addr__h48548 - soc_map$m_other_peripherals_addr_range[127:64] ;
  assign x__h6095 = { 56'd0, boot_rom_axi4_deburster_writesSent } ;
  assign x__h6436 = boot_rom_axi4_deburster_flitReceived[17:9] + 9'd1 ;
  assign x__h6853 = { 56'd0, boot_rom_axi4_deburster_readsSent } ;
  assign x_araddr__h13194 =
	     (mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h13302 :
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_araddr__h6733 =
	     (boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h6841 :
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_awaddr__h12441 =
	     (mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h12549 :
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign x_awaddr__h5971 =
	     (boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h6083 :
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign y__h12549 =
	     x__h12561 <<
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h13302 =
	     x__h13314 <<
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18] ;
  assign y__h6083 =
	     x__h6095 <<
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h6841 =
	     x__h6853 <<
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        boot_rom_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY 18'd169;
	boot_rom_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	boot_rom_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	boot_rom_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	boot_rom_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	boot_rom_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_1_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_1_arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_1_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_moreFlits <= `BSV_ASSIGNMENT_DELAY 7'd42;
	bus_1_moreFlits_1 <= `BSV_ASSIGNMENT_DELAY 8'd42;
	bus_1_noRouteSlv_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	bus_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_arbiter_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_arbiter_lastSelect_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_moreFlits <= `BSV_ASSIGNMENT_DELAY 7'd42;
	bus_moreFlits_1 <= `BSV_ASSIGNMENT_DELAY 8'd42;
	bus_split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_3_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	mem0_controller_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	    18'd169;
	mem0_controller_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	mem0_controller_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	mem0_controller_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	mem0_controller_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	mem0_controller_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	rg_cpu_reset_completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (boot_rom_axi4_deburster_flitReceived$EN)
	  boot_rom_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_flitReceived$D_IN;
	if (boot_rom_axi4_deburster_inSerial_lastWasRead$EN)
	  boot_rom_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_lastWasRead$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_arff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_awff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_bff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_rff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_rff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_wff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_wff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_state$EN)
	  boot_rom_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_state$D_IN;
	if (boot_rom_axi4_deburster_readsSent$EN)
	  boot_rom_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_readsSent$D_IN;
	if (boot_rom_axi4_deburster_writesSent$EN)
	  boot_rom_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_writesSent$D_IN;
	if (bus_1_arbiter_firstHot$EN)
	  bus_1_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_firstHot$D_IN;
	if (bus_1_arbiter_firstHot_1$EN)
	  bus_1_arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_firstHot_1$D_IN;
	if (bus_1_arbiter_lastSelect$EN)
	  bus_1_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect$D_IN;
	if (bus_1_arbiter_lastSelect_1$EN)
	  bus_1_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_1$D_IN;
	if (bus_1_arbiter_lastSelect_1_1$EN)
	  bus_1_arbiter_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_1_1$D_IN;
	if (bus_1_arbiter_lastSelect_2$EN)
	  bus_1_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_2$D_IN;
	if (bus_1_arbiter_lastSelect_3$EN)
	  bus_1_arbiter_lastSelect_3 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_3$D_IN;
	if (bus_1_moreFlits$EN)
	  bus_1_moreFlits <= `BSV_ASSIGNMENT_DELAY bus_1_moreFlits$D_IN;
	if (bus_1_moreFlits_1$EN)
	  bus_1_moreFlits_1 <= `BSV_ASSIGNMENT_DELAY bus_1_moreFlits_1$D_IN;
	if (bus_1_noRouteSlv_flitCount$EN)
	  bus_1_noRouteSlv_flitCount <= `BSV_ASSIGNMENT_DELAY
	      bus_1_noRouteSlv_flitCount$D_IN;
	if (bus_arbiter_firstHot$EN)
	  bus_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_firstHot$D_IN;
	if (bus_arbiter_firstHot_1$EN)
	  bus_arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_firstHot_1$D_IN;
	if (bus_arbiter_lastSelect$EN)
	  bus_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_lastSelect$D_IN;
	if (bus_arbiter_lastSelect_1$EN)
	  bus_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_lastSelect_1$D_IN;
	if (bus_arbiter_lastSelect_1_1$EN)
	  bus_arbiter_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_lastSelect_1_1$D_IN;
	if (bus_arbiter_lastSelect_2$EN)
	  bus_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_lastSelect_2$D_IN;
	if (bus_arbiter_lastSelect_3$EN)
	  bus_arbiter_lastSelect_3 <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_lastSelect_3$D_IN;
	if (bus_merged_0_flitLeft$EN)
	  bus_merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_merged_0_flitLeft$D_IN;
	if (bus_merged_1_flitLeft$EN)
	  bus_merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_merged_1_flitLeft$D_IN;
	if (bus_moreFlits$EN)
	  bus_moreFlits <= `BSV_ASSIGNMENT_DELAY bus_moreFlits$D_IN;
	if (bus_moreFlits_1$EN)
	  bus_moreFlits_1 <= `BSV_ASSIGNMENT_DELAY bus_moreFlits_1$D_IN;
	if (bus_split_0_flitLeft$EN)
	  bus_split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_0_flitLeft$D_IN;
	if (bus_split_1_flitLeft$EN)
	  bus_split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_1_flitLeft$D_IN;
	if (bus_split_2_flitLeft$EN)
	  bus_split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_2_flitLeft$D_IN;
	if (bus_split_3_flitLeft$EN)
	  bus_split_3_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_3_flitLeft$D_IN;
	if (mem0_controller_axi4_deburster_flitReceived$EN)
	  mem0_controller_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_flitReceived$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_lastWasRead$EN)
	  mem0_controller_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_lastWasRead$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_arff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_awff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_bff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_rff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_rff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_wff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_wff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_state$EN)
	  mem0_controller_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_state$D_IN;
	if (mem0_controller_axi4_deburster_readsSent$EN)
	  mem0_controller_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_readsSent$D_IN;
	if (mem0_controller_axi4_deburster_writesSent$EN)
	  mem0_controller_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_writesSent$D_IN;
	if (rg_cpu_reset_completed$EN)
	  rg_cpu_reset_completed <= `BSV_ASSIGNMENT_DELAY
	      rg_cpu_reset_completed$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (bus_1_noRouteSlv_currentReq$EN)
      bus_1_noRouteSlv_currentReq <= `BSV_ASSIGNMENT_DELAY
	  bus_1_noRouteSlv_currentReq$D_IN;
    if (bus_noRouteSlv_awidReg$EN)
      bus_noRouteSlv_awidReg <= `BSV_ASSIGNMENT_DELAY
	  bus_noRouteSlv_awidReg$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    boot_rom_axi4_deburster_flitReceived = 18'h2AAAA;
    boot_rom_axi4_deburster_inSerial_lastWasRead = 1'h0;
    boot_rom_axi4_deburster_inSerial_shim_arff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_shim_awff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_shim_bff_rv = 10'h2AA;
    boot_rom_axi4_deburster_inSerial_shim_rff_rv = 75'h2AAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_shim_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_state = 2'h2;
    boot_rom_axi4_deburster_readsSent = 8'hAA;
    boot_rom_axi4_deburster_writesSent = 8'hAA;
    bus_1_arbiter_firstHot = 1'h0;
    bus_1_arbiter_firstHot_1 = 1'h0;
    bus_1_arbiter_lastSelect = 1'h0;
    bus_1_arbiter_lastSelect_1 = 1'h0;
    bus_1_arbiter_lastSelect_1_1 = 1'h0;
    bus_1_arbiter_lastSelect_2 = 1'h0;
    bus_1_arbiter_lastSelect_3 = 1'h0;
    bus_1_moreFlits = 7'h2A;
    bus_1_moreFlits_1 = 8'hAA;
    bus_1_noRouteSlv_currentReq = 100'hAAAAAAAAAAAAAAAAAAAAAAAAA;
    bus_1_noRouteSlv_flitCount = 9'h0AA;
    bus_arbiter_firstHot = 1'h0;
    bus_arbiter_firstHot_1 = 1'h0;
    bus_arbiter_lastSelect = 1'h0;
    bus_arbiter_lastSelect_1 = 1'h0;
    bus_arbiter_lastSelect_1_1 = 1'h0;
    bus_arbiter_lastSelect_2 = 1'h0;
    bus_arbiter_lastSelect_3 = 1'h0;
    bus_merged_0_flitLeft = 8'hAA;
    bus_merged_1_flitLeft = 8'hAA;
    bus_moreFlits = 7'h2A;
    bus_moreFlits_1 = 8'hAA;
    bus_noRouteSlv_awidReg = 7'h2A;
    bus_split_0_flitLeft = 8'hAA;
    bus_split_1_flitLeft = 8'hAA;
    bus_split_2_flitLeft = 8'hAA;
    bus_split_3_flitLeft = 8'hAA;
    mem0_controller_axi4_deburster_flitReceived = 18'h2AAAA;
    mem0_controller_axi4_deburster_inSerial_lastWasRead = 1'h0;
    mem0_controller_axi4_deburster_inSerial_shim_arff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_shim_awff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_shim_bff_rv = 10'h2AA;
    mem0_controller_axi4_deburster_inSerial_shim_rff_rv =
	75'h2AAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_shim_wff_rv =
	74'h2AAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_state = 2'h2;
    mem0_controller_axi4_deburster_readsSent = 8'hAA;
    mem0_controller_axi4_deburster_writesSent = 8'hAA;
    rg_cpu_reset_completed = 1'h0;
    rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_awSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_wSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_bSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_arSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_otherPeripheralsPort_master_sig_rSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_1_warnDoDrop_1)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_1_warnDoPut_1)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_1_1_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_1_1_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_1_2_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_1_2_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_1_3_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_1_3_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_1_4_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_1_4_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_warnDoDrop_1)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_warnDoPut_1)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_1_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_1_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_2_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_2_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_3_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_3_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_4_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_4_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitrate_1 &&
	  IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1730 &&
	  IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1749)
	$display("mkFairOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitrate_1 &&
	  IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1730 &&
	  IF_NOT_bus_arbiter_firstHot_1_668_669_AND_bus__ETC___d1749)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_2)
	begin
	  v__h90341 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_2)
	$display("%0t -- %m error: input#%0d ",
		 v__h90341,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_2) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2)
	begin
	  v__h90603 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2)
	$write("%0t -- %m error: input#%0d ",
	       v__h90603,
	       $signed(32'd0),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2 &&
	  bus_noRouteSlv_rspFF$EMPTY_N &&
	  !bus_inputDest_0_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2 &&
	  (!bus_noRouteSlv_rspFF$EMPTY_N || bus_inputDest_0_1$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2 &&
	  bus_noRouteSlv_rspFF$EMPTY_N &&
	  !bus_inputDest_0_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2 &&
	  (!bus_noRouteSlv_rspFF$EMPTY_N || bus_inputDest_0_1$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_3)
	begin
	  v__h90887 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_3)
	$display("%0t -- %m error: input#%0d ",
		 v__h90887,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_3) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3)
	begin
	  v__h91149 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3)
	$write("%0t -- %m error: input#%0d ",
	       v__h91149,
	       $signed(32'd1),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3 &&
	  boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	  !bus_inputDest_1_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3 &&
	  (!boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	   bus_inputDest_1_1$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3 &&
	  boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	  !bus_inputDest_1_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3 &&
	  (!boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	   bus_inputDest_1_1$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_4)
	begin
	  v__h91433 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_4)
	$display("%0t -- %m error: input#%0d ",
		 v__h91433,
		 $signed(32'd2),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4)
	begin
	  v__h91695 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4)
	$write("%0t -- %m error: input#%0d ",
	       v__h91695,
	       $signed(32'd2),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4 &&
	  mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	  !bus_inputDest_2$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4 &&
	  (!mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	   bus_inputDest_2$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4 &&
	  mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	  !bus_inputDest_2$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4 &&
	  (!mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	   bus_inputDest_2$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_5)
	begin
	  v__h91979 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_5)
	$display("%0t -- %m error: input#%0d ",
		 v__h91979,
		 $signed(32'd3),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_5) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5)
	begin
	  v__h92241 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5)
	$write("%0t -- %m error: input#%0d ",
	       v__h92241,
	       $signed(32'd3),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5 &&
	  uart0$RDY_slave_b_peek &&
	  !bus_inputDest_3$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5 &&
	  (!uart0$RDY_slave_b_peek || bus_inputDest_3$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5 &&
	  uart0$RDY_slave_b_peek &&
	  !bus_inputDest_3$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5 &&
	  (!uart0$RDY_slave_b_peek || bus_inputDest_3$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_6)
	begin
	  v__h92525 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_6)
	$display("%0t -- %m error: input#%0d ",
		 v__h92525,
		 $signed(32'd4),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_6) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6)
	begin
	  v__h92787 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6)
	$write("%0t -- %m error: input#%0d ",
	       v__h92787,
	       $signed(32'd4),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6 &&
	  s_otherPeripheralsPortShim_bff$EMPTY_N &&
	  !bus_inputDest_4$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6 &&
	  (!s_otherPeripheralsPortShim_bff$EMPTY_N ||
	   bus_inputDest_4$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6 &&
	  s_otherPeripheralsPortShim_bff$EMPTY_N &&
	  !bus_inputDest_4$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6 &&
	  (!s_otherPeripheralsPortShim_bff$EMPTY_N ||
	   bus_inputDest_4$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit_3 &&
	  WILL_FIRE_RL_bus_input_follow_flit_3)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_3] and\n  [RL_bus_input_follow_flit_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit_4 &&
	  WILL_FIRE_RL_bus_input_follow_flit_4)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_4] and\n  [RL_bus_input_follow_flit_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit_5 &&
	  WILL_FIRE_RL_bus_input_follow_flit_5)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_5] and\n  [RL_bus_input_follow_flit_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit_6 &&
	  WILL_FIRE_RL_bus_input_follow_flit_6)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_6] and\n  [RL_bus_input_follow_flit_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitrate &&
	  IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1385 &&
	  IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1386)
	$display("mkFairOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitrate &&
	  IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1385 &&
	  IF_NOT_bus_arbiter_firstHot_351_352_AND_bus_ar_ETC___d1386)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail)
	begin
	  v__h55508 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail)
	$display("%0t -- %m error: input#%0d ",
		 v__h55508,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_1)
	begin
	  v__h55972 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_1)
	$display("%0t -- %m error: input#%0d ",
		 v__h55972,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_1) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit &&
	  WILL_FIRE_RL_bus_input_follow_flit)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 262, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit] and\n  [RL_bus_input_follow_flit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_input_first_flit ||
	   WILL_FIRE_RL_bus_input_follow_flit) &&
	  (WILL_FIRE_RL_bus_input_first_flit_1 ||
	   WILL_FIRE_RL_bus_input_follow_flit_1))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit,\n  RL_bus_input_follow_flit] and [RL_bus_input_first_flit_1,\n  RL_bus_input_follow_flit_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit_1 &&
	  WILL_FIRE_RL_bus_input_follow_flit_1)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_1] and\n  [RL_bus_input_follow_flit_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_output_selected &&
	  WILL_FIRE_RL_bus_output_selected_1)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_output_selected] and\n  [RL_bus_output_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_output_selected ||
	   WILL_FIRE_RL_bus_output_selected_1) &&
	  WILL_FIRE_RL_bus_output_selected_2)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_output_selected,\n  RL_bus_output_selected_1] and [RL_bus_output_selected_2] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_output_selected ||
	   WILL_FIRE_RL_bus_output_selected_1 ||
	   WILL_FIRE_RL_bus_output_selected_2) &&
	  WILL_FIRE_RL_bus_output_selected_3)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_output_selected,\n  RL_bus_output_selected_1, RL_bus_output_selected_2] and\n  [RL_bus_output_selected_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_output_selected ||
	   WILL_FIRE_RL_bus_output_selected_1 ||
	   WILL_FIRE_RL_bus_output_selected_2 ||
	   WILL_FIRE_RL_bus_output_selected_3) &&
	  WILL_FIRE_RL_bus_dflt_output_selected)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_output_selected,\n  RL_bus_output_selected_1, RL_bus_output_selected_2,\n  RL_bus_output_selected_3] and [RL_bus_dflt_output_selected] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit_2 &&
	  WILL_FIRE_RL_bus_input_follow_flit_2)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_2] and\n  [RL_bus_input_follow_flit_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_input_follow_flit_2) &&
	  (WILL_FIRE_RL_bus_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_input_follow_flit_3))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_2,\n  RL_bus_input_follow_flit_2] and [RL_bus_input_first_flit_3,\n  RL_bus_input_follow_flit_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_input_follow_flit_2 ||
	   WILL_FIRE_RL_bus_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_input_follow_flit_3) &&
	  (WILL_FIRE_RL_bus_input_first_flit_4 ||
	   WILL_FIRE_RL_bus_input_follow_flit_4))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_2,\n  RL_bus_input_follow_flit_2, RL_bus_input_first_flit_3,\n  RL_bus_input_follow_flit_3] and [RL_bus_input_first_flit_4,\n  RL_bus_input_follow_flit_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_input_follow_flit_2 ||
	   WILL_FIRE_RL_bus_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_input_follow_flit_3 ||
	   WILL_FIRE_RL_bus_input_first_flit_4 ||
	   WILL_FIRE_RL_bus_input_follow_flit_4) &&
	  (WILL_FIRE_RL_bus_input_first_flit_5 ||
	   WILL_FIRE_RL_bus_input_follow_flit_5))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_2,\n  RL_bus_input_follow_flit_2, RL_bus_input_first_flit_3,\n  RL_bus_input_follow_flit_3, RL_bus_input_first_flit_4,\n  RL_bus_input_follow_flit_4] and [RL_bus_input_first_flit_5,\n  RL_bus_input_follow_flit_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_input_follow_flit_2 ||
	   WILL_FIRE_RL_bus_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_input_follow_flit_3 ||
	   WILL_FIRE_RL_bus_input_first_flit_4 ||
	   WILL_FIRE_RL_bus_input_follow_flit_4 ||
	   WILL_FIRE_RL_bus_input_first_flit_5 ||
	   WILL_FIRE_RL_bus_input_follow_flit_5) &&
	  (WILL_FIRE_RL_bus_input_first_flit_6 ||
	   WILL_FIRE_RL_bus_input_follow_flit_6))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_2,\n  RL_bus_input_follow_flit_2, RL_bus_input_first_flit_3,\n  RL_bus_input_follow_flit_3, RL_bus_input_first_flit_4,\n  RL_bus_input_follow_flit_4, RL_bus_input_first_flit_5,\n  RL_bus_input_follow_flit_5] and [RL_bus_input_first_flit_6,\n  RL_bus_input_follow_flit_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_output_selected_4 &&
	  WILL_FIRE_RL_bus_output_selected_5)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_output_selected_4] and\n  [RL_bus_output_selected_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && bus_merged_0_wff$D_OUT[0] &&
	  bus_merged_0_flitLeft > 8'd1)
	$display("%m - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && bus_merged_0_wff$D_OUT[0] &&
	  bus_merged_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && !bus_merged_0_wff$D_OUT[0] &&
	  bus_merged_0_flitLeft == 8'd1)
	$display("%m - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && !bus_merged_0_wff$D_OUT[0] &&
	  bus_merged_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_awug_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_wug_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && bus_merged_1_wff$D_OUT[0] &&
	  bus_merged_1_flitLeft > 8'd1)
	$display("%m - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && bus_merged_1_wff$D_OUT[0] &&
	  bus_merged_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && !bus_merged_1_wff$D_OUT[0] &&
	  bus_merged_1_flitLeft == 8'd1)
	$display("%m - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && !bus_merged_1_wff$D_OUT[0] &&
	  bus_merged_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_awug_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_wug_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putFirst && bus_split_0_doPut$wget[173])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putFirst && bus_split_0_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  !bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  !bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && !bus_split_0_doPut$wget[173])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && !bus_split_0_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_awug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_wug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putFirst && bus_split_1_doPut$wget[173])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putFirst && bus_split_1_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  !bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  !bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && !bus_split_1_doPut$wget[173])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && !bus_split_1_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_awug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_wug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putFirst && bus_split_2_doPut$wget[173])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putFirst && bus_split_2_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  !bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  !bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && !bus_split_2_doPut$wget[173])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && !bus_split_2_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_awug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_wug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putFirst && bus_split_3_doPut$wget[173])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putFirst && bus_split_3_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && bus_split_3_doPut$wget[173] &&
	  bus_split_3_doPut$wget[0] &&
	  bus_split_3_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && bus_split_3_doPut$wget[173] &&
	  bus_split_3_doPut$wget[0] &&
	  bus_split_3_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && bus_split_3_doPut$wget[173] &&
	  !bus_split_3_doPut$wget[0] &&
	  bus_split_3_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && bus_split_3_doPut$wget[173] &&
	  !bus_split_3_doPut$wget[0] &&
	  bus_split_3_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && !bus_split_3_doPut$wget[173])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && !bus_split_3_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_awug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_wug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate &&
	  IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2214 &&
	  IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2215)
	$display("mkFairOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate &&
	  IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2214 &&
	  IF_NOT_bus_1_arbiter_firstHot_180_181_AND_bus__ETC___d2215)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail)
	begin
	  v__h115231 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail)
	$display("%0t -- %m error: input#%0d ",
		 v__h115231,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_1)
	begin
	  v__h115693 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_1)
	$display("%0t -- %m error: input#%0d ",
		 v__h115693,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_1) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit &&
	  WILL_FIRE_RL_bus_1_input_follow_flit)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 262, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit] and\n  [RL_bus_1_input_follow_flit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_input_first_flit ||
	   WILL_FIRE_RL_bus_1_input_follow_flit) &&
	  (WILL_FIRE_RL_bus_1_input_first_flit_1 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_1))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit,\n  RL_bus_1_input_follow_flit] and [RL_bus_1_input_first_flit_1,\n  RL_bus_1_input_follow_flit_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	  WILL_FIRE_RL_bus_1_input_follow_flit_1)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_1] and\n  [RL_bus_1_input_follow_flit_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR &&
	  WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB)
	$display("Error: \"../..//libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 480, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_boot_rom_axi4_deburster_inSerial_takeR] and\n  [RL_boot_rom_axi4_deburster_inSerial_takeB] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR &&
	  WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB)
	$display("Error: \"../..//libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 480, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mem0_controller_axi4_deburster_inSerial_takeR] and\n  [RL_mem0_controller_axi4_deburster_inSerial_takeB] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("  SoC address map:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("  Boot ROM:        0x%0h .. 0x%0h",
		 soc_map$m_boot_rom_addr_range[127:64],
		 addr_lim__h158488);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("  Mem0 Controller: 0x%0h .. 0x%0h",
		 soc_map$m_mem0_controller_addr_range[127:64],
		 addr_lim__h158516);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("  UART0:           0x%0h .. 0x%0h",
		 soc_map$m_uart0_addr_range[127:64],
		 addr_lim__h158542);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	begin
	  v__h158720 = $stime;
	  #0;
	end
    v__h158714 = v__h158720 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("%0d:%m.rl_reset_complete_initial", v__h158714);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_output_selected &&
	  WILL_FIRE_RL_bus_1_output_selected_1)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_output_selected] and\n  [RL_bus_1_output_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_output_selected ||
	   WILL_FIRE_RL_bus_1_output_selected_1) &&
	  WILL_FIRE_RL_bus_1_output_selected_2)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_output_selected,\n  RL_bus_1_output_selected_1] and [RL_bus_1_output_selected_2] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_output_selected ||
	   WILL_FIRE_RL_bus_1_output_selected_1 ||
	   WILL_FIRE_RL_bus_1_output_selected_2) &&
	  WILL_FIRE_RL_bus_1_output_selected_3)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_output_selected,\n  RL_bus_1_output_selected_1, RL_bus_1_output_selected_2] and\n  [RL_bus_1_output_selected_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_output_selected ||
	   WILL_FIRE_RL_bus_1_output_selected_1 ||
	   WILL_FIRE_RL_bus_1_output_selected_2 ||
	   WILL_FIRE_RL_bus_1_output_selected_3) &&
	  WILL_FIRE_RL_bus_1_dflt_output_selected)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_output_selected,\n  RL_bus_1_output_selected_1, RL_bus_1_output_selected_2,\n  RL_bus_1_output_selected_3] and [RL_bus_1_dflt_output_selected] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate_1 &&
	  IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2530 &&
	  IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2549)
	$display("mkFairOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate_1 &&
	  IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2530 &&
	  IF_NOT_bus_1_arbiter_firstHot_1_468_469_AND_bu_ETC___d2549)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_2)
	begin
	  v__h137573 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_2)
	$display("%0t -- %m error: input#%0d ",
		 v__h137573,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_2) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2)
	begin
	  v__h137835 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2)
	$write("%0t -- %m error: input#%0d ",
	       v__h137835,
	       $signed(32'd0),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2 &&
	  bus_1_noRouteSlv_flitCount != 9'd0 &&
	  !bus_1_inputDest_0_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2 &&
	  (!(bus_1_noRouteSlv_flitCount != 9'd0) ||
	   bus_1_inputDest_0_1$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2 &&
	  bus_1_noRouteSlv_flitCount != 9'd0 &&
	  !bus_1_inputDest_0_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2 &&
	  (!(bus_1_noRouteSlv_flitCount != 9'd0) ||
	   bus_1_inputDest_0_1$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_3)
	begin
	  v__h138119 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_3)
	$display("%0t -- %m error: input#%0d ",
		 v__h138119,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_3) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3)
	begin
	  v__h138381 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3)
	$write("%0t -- %m error: input#%0d ",
	       v__h138381,
	       $signed(32'd1),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3 &&
	  boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	  !bus_1_inputDest_1_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3 &&
	  (!boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	   bus_1_inputDest_1_1$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3 &&
	  boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	  !bus_1_inputDest_1_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3 &&
	  (!boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	   bus_1_inputDest_1_1$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_4)
	begin
	  v__h138665 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_4)
	$display("%0t -- %m error: input#%0d ",
		 v__h138665,
		 $signed(32'd2),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4)
	begin
	  v__h138927 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4)
	$write("%0t -- %m error: input#%0d ",
	       v__h138927,
	       $signed(32'd2),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4 &&
	  mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	  !bus_1_inputDest_2$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4 &&
	  (!mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	   bus_1_inputDest_2$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4 &&
	  mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	  !bus_1_inputDest_2$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4 &&
	  (!mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	   bus_1_inputDest_2$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_5)
	begin
	  v__h139211 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_5)
	$display("%0t -- %m error: input#%0d ",
		 v__h139211,
		 $signed(32'd3),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_5) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5)
	begin
	  v__h139473 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5)
	$write("%0t -- %m error: input#%0d ",
	       v__h139473,
	       $signed(32'd3),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5 &&
	  uart0$RDY_slave_r_peek &&
	  !bus_1_inputDest_3$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5 &&
	  (!uart0$RDY_slave_r_peek || bus_1_inputDest_3$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5 &&
	  uart0$RDY_slave_r_peek &&
	  !bus_1_inputDest_3$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5 &&
	  (!uart0$RDY_slave_r_peek || bus_1_inputDest_3$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_6)
	begin
	  v__h139757 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_6)
	$display("%0t -- %m error: input#%0d ",
		 v__h139757,
		 $signed(32'd4),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_6) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6)
	begin
	  v__h140019 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6)
	$write("%0t -- %m error: input#%0d ",
	       v__h140019,
	       $signed(32'd4),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6 &&
	  s_otherPeripheralsPortShim_rff$EMPTY_N &&
	  !bus_1_inputDest_4$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6 &&
	  (!s_otherPeripheralsPortShim_rff$EMPTY_N ||
	   bus_1_inputDest_4$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6 &&
	  s_otherPeripheralsPortShim_rff$EMPTY_N &&
	  !bus_1_inputDest_4$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6 &&
	  (!s_otherPeripheralsPortShim_rff$EMPTY_N ||
	   bus_1_inputDest_4$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	  WILL_FIRE_RL_bus_1_input_follow_flit_3)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_3] and\n  [RL_bus_1_input_follow_flit_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	  WILL_FIRE_RL_bus_1_input_follow_flit_4)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_4] and\n  [RL_bus_1_input_follow_flit_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start_initial)
	begin
	  v__h158334 = $stime;
	  #0;
	end
    v__h158328 = v__h158334 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start_initial)
	$display("%0d:%m.rl_reset_start_initial ...", v__h158328);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	  WILL_FIRE_RL_bus_1_input_follow_flit_5)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_5] and\n  [RL_bus_1_input_follow_flit_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	  WILL_FIRE_RL_bus_1_input_follow_flit_2)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_2] and\n  [RL_bus_1_input_follow_flit_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_2) &&
	  (WILL_FIRE_RL_bus_1_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_3))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_2,\n  RL_bus_1_input_follow_flit_2] and [RL_bus_1_input_first_flit_3,\n  RL_bus_1_input_follow_flit_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_3) &&
	  (WILL_FIRE_RL_bus_1_input_first_flit_4 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_4))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_2,\n  RL_bus_1_input_follow_flit_2, RL_bus_1_input_first_flit_3,\n  RL_bus_1_input_follow_flit_3] and [RL_bus_1_input_first_flit_4,\n  RL_bus_1_input_follow_flit_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_3 ||
	   WILL_FIRE_RL_bus_1_input_first_flit_4 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_4) &&
	  (WILL_FIRE_RL_bus_1_input_first_flit_5 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_5))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_2,\n  RL_bus_1_input_follow_flit_2, RL_bus_1_input_first_flit_3,\n  RL_bus_1_input_follow_flit_3, RL_bus_1_input_first_flit_4,\n  RL_bus_1_input_follow_flit_4] and [RL_bus_1_input_first_flit_5,\n  RL_bus_1_input_follow_flit_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_3 ||
	   WILL_FIRE_RL_bus_1_input_first_flit_4 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_4 ||
	   WILL_FIRE_RL_bus_1_input_first_flit_5 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_5) &&
	  (WILL_FIRE_RL_bus_1_input_first_flit_6 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_6))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_2,\n  RL_bus_1_input_follow_flit_2, RL_bus_1_input_first_flit_3,\n  RL_bus_1_input_follow_flit_3, RL_bus_1_input_first_flit_4,\n  RL_bus_1_input_follow_flit_4, RL_bus_1_input_first_flit_5,\n  RL_bus_1_input_follow_flit_5] and [RL_bus_1_input_first_flit_6,\n  RL_bus_1_input_follow_flit_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	  WILL_FIRE_RL_bus_1_input_follow_flit_6)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_6] and\n  [RL_bus_1_input_follow_flit_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_output_selected_4 &&
	  WILL_FIRE_RL_bus_1_output_selected_5)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_output_selected_4] and\n  [RL_bus_1_output_selected_5] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkSoC_Top

