//
// Generated by Bluespec Compiler, version untagged-gb2fda995 (build b2fda995)
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// read_csr                       O    65
// read_csr_port2                 O    65
// read_scr                       O   152
// mav_read_csr                   O    65
// mav_csr_write                  O   129
// mav_scr_write                  O   151
// read_frm                       O     3 reg
// read_fflags                    O     5 reg
// mv_update_fcsr_fflags          O     5
// mv_update_mstatus_fs           O    64
// read_misa                      O    28 const
// read_mstatus                   O    64 reg
// read_sstatus                   O    64
// read_ustatus                   O    64
// read_satp                      O    64 reg
// csr_trap_actions               O   281
// RDY_csr_trap_actions           O     1 const
// csr_ret_actions                O   227
// RDY_csr_ret_actions            O     1 const
// read_csr_minstret              O    64 reg
// read_csr_mcycle                O    64 reg
// read_csr_mtime                 O    64 reg
// access_permitted_1             O     2
// access_permitted_2             O     2
// access_permitted_scr           O     2
// csr_counter_read_fault         O     1
// csr_mip_read                   O    64
// interrupt_pending              O     7
// wfi_resume                     O     1
// nmi_pending                    O     1 reg
// RDY_debug                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_csr_csr_addr              I    12
// read_csr_port2_csr_addr        I    12
// read_scr_scr_addr              I     5
// mav_read_csr_csr_addr          I    12
// mav_csr_write_csr_addr         I    12
// mav_csr_write_word             I    64
// mav_scr_write_scr_addr         I     5
// mav_scr_write_cap              I   151
// mv_update_fcsr_fflags_flags    I     5
// ma_update_fcsr_fflags_flags    I     5
// mv_update_mstatus_fs_fs        I     2
// ma_update_mstatus_fs_fs        I     2
// csr_trap_actions_from_priv     I     2
// csr_trap_actions_pcc           I   161
// csr_trap_actions_nmi           I     1
// csr_trap_actions_interrupt     I     1
// csr_trap_actions_cheri_exc_code  I     5
// csr_trap_actions_cheri_exc_reg  I     6
// csr_trap_actions_exc_code      I     6
// csr_trap_actions_xtval         I    64
// csr_ret_actions_from_priv      I     2
// send_performance_events_evts   I  7360
// access_permitted_1_priv        I     2
// access_permitted_1_csr_addr    I    12
// access_permitted_1_read_not_write  I     1
// access_permitted_2_priv        I     2
// access_permitted_2_csr_addr    I    12
// access_permitted_2_read_not_write  I     1
// access_permitted_scr_priv      I     2
// access_permitted_scr_scr_addr  I     5
// access_permitted_scr_read_not_write  I     1 unused
// csr_counter_read_fault_priv    I     2
// csr_counter_read_fault_csr_addr  I    12
// m_external_interrupt_req_set_not_clear  I     1
// s_external_interrupt_req_set_not_clear  I     1
// timer_interrupt_req_set_not_clear  I     1
// software_interrupt_req_set_not_clear  I     1
// interrupt_pending_cur_priv     I     2
// nmi_req_set_not_clear          I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_ma_update_fcsr_fflags       I     1
// EN_ma_update_mstatus_fs        I     1
// EN_csr_minstret_incr           I     1
// EN_m_external_interrupt_req    I     1
// EN_s_external_interrupt_req    I     1
// EN_timer_interrupt_req         I     1
// EN_software_interrupt_req      I     1
// EN_nmi_req                     I     1
// EN_debug                       I     1 unused
// EN_mav_read_csr                I     1 unused
// EN_mav_csr_write               I     1
// EN_mav_scr_write               I     1
// EN_csr_trap_actions            I     1
// EN_csr_ret_actions             I     1
//
// Combinational paths from inputs to outputs:
//   read_csr_csr_addr -> read_csr
//   read_csr_port2_csr_addr -> read_csr_port2
//   read_scr_scr_addr -> read_scr
//   mv_update_fcsr_fflags_flags -> mv_update_fcsr_fflags
//   mv_update_mstatus_fs_fs -> mv_update_mstatus_fs
//   (access_permitted_1_priv,
//    access_permitted_1_csr_addr,
//    access_permitted_1_read_not_write) -> access_permitted_1
//   (access_permitted_2_priv,
//    access_permitted_2_csr_addr,
//    access_permitted_2_read_not_write) -> access_permitted_2
//   (access_permitted_scr_priv,
//    access_permitted_scr_scr_addr) -> access_permitted_scr
//   (csr_counter_read_fault_priv,
//    csr_counter_read_fault_csr_addr) -> csr_counter_read_fault
//   interrupt_pending_cur_priv -> interrupt_pending
//   mav_read_csr_csr_addr -> mav_read_csr
//   (mav_csr_write_csr_addr,
//    mav_csr_write_word,
//    EN_mav_csr_write) -> mav_csr_write
//   (mav_scr_write_scr_addr, mav_scr_write_cap) -> mav_scr_write
//   (csr_trap_actions_from_priv,
//    csr_trap_actions_nmi,
//    csr_trap_actions_interrupt,
//    csr_trap_actions_exc_code) -> csr_trap_actions
//   csr_ret_actions_from_priv -> csr_ret_actions
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCSR_RegFile(CLK,
		     RST_N,

		     EN_server_reset_request_put,
		     RDY_server_reset_request_put,

		     EN_server_reset_response_get,
		     RDY_server_reset_response_get,

		     read_csr_csr_addr,
		     read_csr,

		     read_csr_port2_csr_addr,
		     read_csr_port2,

		     read_scr_scr_addr,
		     read_scr,

		     mav_read_csr_csr_addr,
		     EN_mav_read_csr,
		     mav_read_csr,

		     mav_csr_write_csr_addr,
		     mav_csr_write_word,
		     EN_mav_csr_write,
		     mav_csr_write,

		     mav_scr_write_scr_addr,
		     mav_scr_write_cap,
		     EN_mav_scr_write,
		     mav_scr_write,

		     read_frm,

		     read_fflags,

		     mv_update_fcsr_fflags_flags,
		     mv_update_fcsr_fflags,

		     ma_update_fcsr_fflags_flags,
		     EN_ma_update_fcsr_fflags,

		     mv_update_mstatus_fs_fs,
		     mv_update_mstatus_fs,

		     ma_update_mstatus_fs_fs,
		     EN_ma_update_mstatus_fs,

		     read_misa,

		     read_mstatus,

		     read_sstatus,

		     read_ustatus,

		     read_satp,

		     csr_trap_actions_from_priv,
		     csr_trap_actions_pcc,
		     csr_trap_actions_nmi,
		     csr_trap_actions_interrupt,
		     csr_trap_actions_cheri_exc_code,
		     csr_trap_actions_cheri_exc_reg,
		     csr_trap_actions_exc_code,
		     csr_trap_actions_xtval,
		     EN_csr_trap_actions,
		     csr_trap_actions,
		     RDY_csr_trap_actions,

		     csr_ret_actions_from_priv,
		     EN_csr_ret_actions,
		     csr_ret_actions,
		     RDY_csr_ret_actions,

		     read_csr_minstret,

		     EN_csr_minstret_incr,

		     read_csr_mcycle,

		     read_csr_mtime,

		     send_performance_events_evts,

		     access_permitted_1_priv,
		     access_permitted_1_csr_addr,
		     access_permitted_1_read_not_write,
		     access_permitted_1,

		     access_permitted_2_priv,
		     access_permitted_2_csr_addr,
		     access_permitted_2_read_not_write,
		     access_permitted_2,

		     access_permitted_scr_priv,
		     access_permitted_scr_scr_addr,
		     access_permitted_scr_read_not_write,
		     access_permitted_scr,

		     csr_counter_read_fault_priv,
		     csr_counter_read_fault_csr_addr,
		     csr_counter_read_fault,

		     csr_mip_read,

		     m_external_interrupt_req_set_not_clear,
		     EN_m_external_interrupt_req,

		     s_external_interrupt_req_set_not_clear,
		     EN_s_external_interrupt_req,

		     timer_interrupt_req_set_not_clear,
		     EN_timer_interrupt_req,

		     software_interrupt_req_set_not_clear,
		     EN_software_interrupt_req,

		     interrupt_pending_cur_priv,
		     interrupt_pending,

		     wfi_resume,

		     nmi_req_set_not_clear,
		     EN_nmi_req,

		     nmi_pending,

		     EN_debug,
		     RDY_debug);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // value method read_csr
  input  [11 : 0] read_csr_csr_addr;
  output [64 : 0] read_csr;

  // value method read_csr_port2
  input  [11 : 0] read_csr_port2_csr_addr;
  output [64 : 0] read_csr_port2;

  // value method read_scr
  input  [4 : 0] read_scr_scr_addr;
  output [151 : 0] read_scr;

  // actionvalue method mav_read_csr
  input  [11 : 0] mav_read_csr_csr_addr;
  input  EN_mav_read_csr;
  output [64 : 0] mav_read_csr;

  // actionvalue method mav_csr_write
  input  [11 : 0] mav_csr_write_csr_addr;
  input  [63 : 0] mav_csr_write_word;
  input  EN_mav_csr_write;
  output [128 : 0] mav_csr_write;

  // actionvalue method mav_scr_write
  input  [4 : 0] mav_scr_write_scr_addr;
  input  [150 : 0] mav_scr_write_cap;
  input  EN_mav_scr_write;
  output [150 : 0] mav_scr_write;

  // value method read_frm
  output [2 : 0] read_frm;

  // value method read_fflags
  output [4 : 0] read_fflags;

  // value method mv_update_fcsr_fflags
  input  [4 : 0] mv_update_fcsr_fflags_flags;
  output [4 : 0] mv_update_fcsr_fflags;

  // action method ma_update_fcsr_fflags
  input  [4 : 0] ma_update_fcsr_fflags_flags;
  input  EN_ma_update_fcsr_fflags;

  // value method mv_update_mstatus_fs
  input  [1 : 0] mv_update_mstatus_fs_fs;
  output [63 : 0] mv_update_mstatus_fs;

  // action method ma_update_mstatus_fs
  input  [1 : 0] ma_update_mstatus_fs_fs;
  input  EN_ma_update_mstatus_fs;

  // value method read_misa
  output [27 : 0] read_misa;

  // value method read_mstatus
  output [63 : 0] read_mstatus;

  // value method read_sstatus
  output [63 : 0] read_sstatus;

  // value method read_ustatus
  output [63 : 0] read_ustatus;

  // value method read_satp
  output [63 : 0] read_satp;

  // actionvalue method csr_trap_actions
  input  [1 : 0] csr_trap_actions_from_priv;
  input  [160 : 0] csr_trap_actions_pcc;
  input  csr_trap_actions_nmi;
  input  csr_trap_actions_interrupt;
  input  [4 : 0] csr_trap_actions_cheri_exc_code;
  input  [5 : 0] csr_trap_actions_cheri_exc_reg;
  input  [5 : 0] csr_trap_actions_exc_code;
  input  [63 : 0] csr_trap_actions_xtval;
  input  EN_csr_trap_actions;
  output [280 : 0] csr_trap_actions;
  output RDY_csr_trap_actions;

  // actionvalue method csr_ret_actions
  input  [1 : 0] csr_ret_actions_from_priv;
  input  EN_csr_ret_actions;
  output [226 : 0] csr_ret_actions;
  output RDY_csr_ret_actions;

  // value method read_csr_minstret
  output [63 : 0] read_csr_minstret;

  // action method csr_minstret_incr
  input  EN_csr_minstret_incr;

  // value method read_csr_mcycle
  output [63 : 0] read_csr_mcycle;

  // value method read_csr_mtime
  output [63 : 0] read_csr_mtime;

  // action method send_performance_events
  input  [7359 : 0] send_performance_events_evts;

  // value method access_permitted_1
  input  [1 : 0] access_permitted_1_priv;
  input  [11 : 0] access_permitted_1_csr_addr;
  input  access_permitted_1_read_not_write;
  output [1 : 0] access_permitted_1;

  // value method access_permitted_2
  input  [1 : 0] access_permitted_2_priv;
  input  [11 : 0] access_permitted_2_csr_addr;
  input  access_permitted_2_read_not_write;
  output [1 : 0] access_permitted_2;

  // value method access_permitted_scr
  input  [1 : 0] access_permitted_scr_priv;
  input  [4 : 0] access_permitted_scr_scr_addr;
  input  access_permitted_scr_read_not_write;
  output [1 : 0] access_permitted_scr;

  // value method csr_counter_read_fault
  input  [1 : 0] csr_counter_read_fault_priv;
  input  [11 : 0] csr_counter_read_fault_csr_addr;
  output csr_counter_read_fault;

  // value method csr_mip_read
  output [63 : 0] csr_mip_read;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;
  input  EN_m_external_interrupt_req;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;
  input  EN_s_external_interrupt_req;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;
  input  EN_timer_interrupt_req;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;
  input  EN_software_interrupt_req;

  // value method interrupt_pending
  input  [1 : 0] interrupt_pending_cur_priv;
  output [6 : 0] interrupt_pending;

  // value method wfi_resume
  output wfi_resume;

  // action method nmi_req
  input  nmi_req_set_not_clear;
  input  EN_nmi_req;

  // value method nmi_pending
  output nmi_pending;

  // action method debug
  input  EN_debug;
  output RDY_debug;

  // signals for module outputs
  wire [280 : 0] csr_trap_actions;
  wire [226 : 0] csr_ret_actions;
  wire [151 : 0] read_scr;
  wire [150 : 0] mav_scr_write;
  wire [128 : 0] mav_csr_write;
  wire [64 : 0] mav_read_csr, read_csr, read_csr_port2;
  wire [63 : 0] csr_mip_read,
		mv_update_mstatus_fs,
		read_csr_mcycle,
		read_csr_minstret,
		read_csr_mtime,
		read_mstatus,
		read_satp,
		read_sstatus,
		read_ustatus;
  wire [27 : 0] read_misa;
  wire [6 : 0] interrupt_pending;
  wire [4 : 0] mv_update_fcsr_fflags, read_fflags;
  wire [2 : 0] read_frm;
  wire [1 : 0] access_permitted_1, access_permitted_2, access_permitted_scr;
  wire RDY_csr_ret_actions,
       RDY_csr_trap_actions,
       RDY_debug,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       csr_counter_read_fault,
       nmi_pending,
       wfi_resume;

  // inlined wires
  wire [1 : 0] w_ctr_inhib_ir_cy$wget;
  wire rw_mcycle$whas;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register csr_mstatus_rg_mstatus
  reg [63 : 0] csr_mstatus_rg_mstatus;
  reg [63 : 0] csr_mstatus_rg_mstatus$D_IN;
  wire csr_mstatus_rg_mstatus$EN;

  // register rg_ctr_inhib_ir_cy
  reg [1 : 0] rg_ctr_inhib_ir_cy;
  wire [1 : 0] rg_ctr_inhib_ir_cy$D_IN;
  wire rg_ctr_inhib_ir_cy$EN;

  // register rg_dcsr
  reg [31 : 0] rg_dcsr;
  wire [31 : 0] rg_dcsr$D_IN;
  wire rg_dcsr$EN;

  // register rg_dpcc
  reg [160 : 0] rg_dpcc;
  wire [160 : 0] rg_dpcc$D_IN;
  wire rg_dpcc$EN;

  // register rg_dscratch0
  reg [63 : 0] rg_dscratch0;
  wire [63 : 0] rg_dscratch0$D_IN;
  wire rg_dscratch0$EN;

  // register rg_dscratch1
  reg [63 : 0] rg_dscratch1;
  wire [63 : 0] rg_dscratch1$D_IN;
  wire rg_dscratch1$EN;

  // register rg_fflags
  reg [4 : 0] rg_fflags;
  reg [4 : 0] rg_fflags$D_IN;
  wire rg_fflags$EN;

  // register rg_frm
  reg [2 : 0] rg_frm;
  wire [2 : 0] rg_frm$D_IN;
  wire rg_frm$EN;

  // register rg_mcause
  reg [6 : 0] rg_mcause;
  reg [6 : 0] rg_mcause$D_IN;
  wire rg_mcause$EN;

  // register rg_mccsr
  reg [10 : 0] rg_mccsr;
  wire [10 : 0] rg_mccsr$D_IN;
  wire rg_mccsr$EN;

  // register rg_mcounteren
  reg [31 : 0] rg_mcounteren;
  wire [31 : 0] rg_mcounteren$D_IN;
  wire rg_mcounteren$EN;

  // register rg_mcycle
  reg [63 : 0] rg_mcycle;
  wire [63 : 0] rg_mcycle$D_IN;
  wire rg_mcycle$EN;

  // register rg_medeleg
  reg [28 : 0] rg_medeleg;
  wire [28 : 0] rg_medeleg$D_IN;
  wire rg_medeleg$EN;

  // register rg_mepcc
  reg [150 : 0] rg_mepcc;
  reg [150 : 0] rg_mepcc$D_IN;
  wire rg_mepcc$EN;

  // register rg_mideleg
  reg [11 : 0] rg_mideleg;
  wire [11 : 0] rg_mideleg$D_IN;
  wire rg_mideleg$EN;

  // register rg_minstret
  reg [63 : 0] rg_minstret;
  wire [63 : 0] rg_minstret$D_IN;
  wire rg_minstret$EN;

  // register rg_mscratch
  reg [63 : 0] rg_mscratch;
  wire [63 : 0] rg_mscratch$D_IN;
  wire rg_mscratch$EN;

  // register rg_mscratchc
  reg [150 : 0] rg_mscratchc;
  wire [150 : 0] rg_mscratchc$D_IN;
  wire rg_mscratchc$EN;

  // register rg_mtcc
  reg [150 : 0] rg_mtcc;
  reg [150 : 0] rg_mtcc$D_IN;
  wire rg_mtcc$EN;

  // register rg_mtdc
  reg [150 : 0] rg_mtdc;
  wire [150 : 0] rg_mtdc$D_IN;
  wire rg_mtdc$EN;

  // register rg_mtime
  reg [63 : 0] rg_mtime;
  wire [63 : 0] rg_mtime$D_IN;
  wire rg_mtime$EN;

  // register rg_mtval
  reg [63 : 0] rg_mtval;
  wire [63 : 0] rg_mtval$D_IN;
  wire rg_mtval$EN;

  // register rg_nmi
  reg rg_nmi;
  wire rg_nmi$D_IN, rg_nmi$EN;

  // register rg_nmi_vector
  reg [63 : 0] rg_nmi_vector;
  wire [63 : 0] rg_nmi_vector$D_IN;
  wire rg_nmi_vector$EN;

  // register rg_satp
  reg [63 : 0] rg_satp;
  wire [63 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_scause
  reg [6 : 0] rg_scause;
  reg [6 : 0] rg_scause$D_IN;
  wire rg_scause$EN;

  // register rg_sccsr
  reg [10 : 0] rg_sccsr;
  wire [10 : 0] rg_sccsr$D_IN;
  wire rg_sccsr$EN;

  // register rg_sepcc
  reg [150 : 0] rg_sepcc;
  reg [150 : 0] rg_sepcc$D_IN;
  wire rg_sepcc$EN;

  // register rg_sscratch
  reg [63 : 0] rg_sscratch;
  wire [63 : 0] rg_sscratch$D_IN;
  wire rg_sscratch$EN;

  // register rg_sscratchc
  reg [150 : 0] rg_sscratchc;
  wire [150 : 0] rg_sscratchc$D_IN;
  wire rg_sscratchc$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // register rg_stcc
  reg [150 : 0] rg_stcc;
  reg [150 : 0] rg_stcc$D_IN;
  wire rg_stcc$EN;

  // register rg_stdc
  reg [150 : 0] rg_stdc;
  wire [150 : 0] rg_stdc$D_IN;
  wire rg_stdc$EN;

  // register rg_stval
  reg [63 : 0] rg_stval;
  wire [63 : 0] rg_stval$D_IN;
  wire rg_stval$EN;

  // register rg_tdata1
  reg [63 : 0] rg_tdata1;
  wire [63 : 0] rg_tdata1$D_IN;
  wire rg_tdata1$EN;

  // register rg_tdata2
  reg [63 : 0] rg_tdata2;
  wire [63 : 0] rg_tdata2$D_IN;
  wire rg_tdata2$EN;

  // register rg_tdata3
  reg [63 : 0] rg_tdata3;
  wire [63 : 0] rg_tdata3$D_IN;
  wire rg_tdata3$EN;

  // register rg_tselect
  reg [63 : 0] rg_tselect;
  wire [63 : 0] rg_tselect$D_IN;
  wire rg_tselect$EN;

  // ports of submodule csr_mie
  wire [63 : 0] csr_mie$mav_sie_write,
		csr_mie$mav_sie_write_wordxl,
		csr_mie$mav_write,
		csr_mie$mav_write_wordxl,
		csr_mie$mv_read,
		csr_mie$mv_sie_read;
  wire [27 : 0] csr_mie$mav_sie_write_misa, csr_mie$mav_write_misa;
  wire csr_mie$EN_mav_sie_write, csr_mie$EN_mav_write, csr_mie$EN_reset;

  // ports of submodule csr_mip
  wire [63 : 0] csr_mip$mav_sip_write,
		csr_mip$mav_sip_write_wordxl,
		csr_mip$mav_write,
		csr_mip$mav_write_wordxl,
		csr_mip$mv_read,
		csr_mip$mv_sip_read;
  wire [27 : 0] csr_mip$mav_sip_write_misa, csr_mip$mav_write_misa;
  wire csr_mip$EN_m_external_interrupt_req,
       csr_mip$EN_mav_sip_write,
       csr_mip$EN_mav_write,
       csr_mip$EN_reset,
       csr_mip$EN_s_external_interrupt_req,
       csr_mip$EN_software_interrupt_req,
       csr_mip$EN_timer_interrupt_req,
       csr_mip$m_external_interrupt_req_req,
       csr_mip$s_external_interrupt_req_req,
       csr_mip$software_interrupt_req_req,
       csr_mip$timer_interrupt_req_req;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule perf_counters
  wire [7359 : 0] perf_counters$send_performance_events_evts;
  wire [63 : 0] perf_counters$read_counters_0__read,
		perf_counters$read_counters_10__read,
		perf_counters$read_counters_11__read,
		perf_counters$read_counters_12__read,
		perf_counters$read_counters_13__read,
		perf_counters$read_counters_14__read,
		perf_counters$read_counters_15__read,
		perf_counters$read_counters_16__read,
		perf_counters$read_counters_17__read,
		perf_counters$read_counters_18__read,
		perf_counters$read_counters_19__read,
		perf_counters$read_counters_1__read,
		perf_counters$read_counters_20__read,
		perf_counters$read_counters_21__read,
		perf_counters$read_counters_22__read,
		perf_counters$read_counters_23__read,
		perf_counters$read_counters_24__read,
		perf_counters$read_counters_25__read,
		perf_counters$read_counters_26__read,
		perf_counters$read_counters_27__read,
		perf_counters$read_counters_28__read,
		perf_counters$read_counters_2__read,
		perf_counters$read_counters_3__read,
		perf_counters$read_counters_4__read,
		perf_counters$read_counters_5__read,
		perf_counters$read_counters_6__read,
		perf_counters$read_counters_7__read,
		perf_counters$read_counters_8__read,
		perf_counters$read_counters_9__read,
		perf_counters$write_counter_val;
  wire [28 : 0] perf_counters$read_ctr_inhibit__read,
		perf_counters$write_ctr_inhibit_val;
  wire [6 : 0] perf_counters$read_ctr_sels_0__read,
	       perf_counters$read_ctr_sels_10__read,
	       perf_counters$read_ctr_sels_11__read,
	       perf_counters$read_ctr_sels_12__read,
	       perf_counters$read_ctr_sels_13__read,
	       perf_counters$read_ctr_sels_14__read,
	       perf_counters$read_ctr_sels_15__read,
	       perf_counters$read_ctr_sels_16__read,
	       perf_counters$read_ctr_sels_17__read,
	       perf_counters$read_ctr_sels_18__read,
	       perf_counters$read_ctr_sels_19__read,
	       perf_counters$read_ctr_sels_1__read,
	       perf_counters$read_ctr_sels_20__read,
	       perf_counters$read_ctr_sels_21__read,
	       perf_counters$read_ctr_sels_22__read,
	       perf_counters$read_ctr_sels_23__read,
	       perf_counters$read_ctr_sels_24__read,
	       perf_counters$read_ctr_sels_25__read,
	       perf_counters$read_ctr_sels_26__read,
	       perf_counters$read_ctr_sels_27__read,
	       perf_counters$read_ctr_sels_28__read,
	       perf_counters$read_ctr_sels_2__read,
	       perf_counters$read_ctr_sels_3__read,
	       perf_counters$read_ctr_sels_4__read,
	       perf_counters$read_ctr_sels_5__read,
	       perf_counters$read_ctr_sels_6__read,
	       perf_counters$read_ctr_sels_7__read,
	       perf_counters$read_ctr_sels_8__read,
	       perf_counters$read_ctr_sels_9__read,
	       perf_counters$write_ctr_sel_val;
  wire [4 : 0] perf_counters$write_counter_idx,
	       perf_counters$write_ctr_sel_idx;
  wire perf_counters$EN_write_counter,
       perf_counters$EN_write_ctr_inhibit,
       perf_counters$EN_write_ctr_sel;

  // ports of submodule soc_map
  wire [150 : 0] soc_map$m_mepcc_reset_value, soc_map$m_mtcc_reset_value;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_nmivec_reset_value;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_mcycle_incr,
       CAN_FIRE_RL_rl_mtime_incr,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_upd_ctr_inhib_csrrx,
       CAN_FIRE_RL_rl_upd_minstret_csrrx,
       CAN_FIRE_RL_rl_upd_minstret_incr,
       CAN_FIRE_csr_minstret_incr,
       CAN_FIRE_csr_ret_actions,
       CAN_FIRE_csr_trap_actions,
       CAN_FIRE_debug,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_ma_update_fcsr_fflags,
       CAN_FIRE_ma_update_mstatus_fs,
       CAN_FIRE_mav_csr_write,
       CAN_FIRE_mav_read_csr,
       CAN_FIRE_mav_scr_write,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_send_performance_events,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_rl_mcycle_incr,
       WILL_FIRE_RL_rl_mtime_incr,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_upd_ctr_inhib_csrrx,
       WILL_FIRE_RL_rl_upd_minstret_csrrx,
       WILL_FIRE_RL_rl_upd_minstret_incr,
       WILL_FIRE_csr_minstret_incr,
       WILL_FIRE_csr_ret_actions,
       WILL_FIRE_csr_trap_actions,
       WILL_FIRE_debug,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_ma_update_fcsr_fflags,
       WILL_FIRE_ma_update_mstatus_fs,
       WILL_FIRE_mav_csr_write,
       WILL_FIRE_mav_read_csr,
       WILL_FIRE_mav_scr_write,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_send_performance_events,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_csr_mstatus_rg_mstatus$write_1__VAL_5;
  wire [150 : 0] MUX_rg_mepcc$write_1__VAL_2,
		 MUX_rg_mepcc$write_1__VAL_4,
		 MUX_rg_mtcc$write_1__VAL_2,
		 MUX_rg_mtcc$write_1__VAL_3,
		 MUX_rg_sepcc$write_1__VAL_4,
		 MUX_rg_stcc$write_1__VAL_3;
  wire [63 : 0] MUX_csr_mstatus_rg_mstatus$write_1__VAL_2,
		MUX_csr_mstatus_rg_mstatus$write_1__VAL_4,
		MUX_rg_minstret$write_1__VAL_1,
		MUX_rg_minstret$write_1__VAL_2,
		MUX_rg_mtval$write_1__VAL_1;
  wire [28 : 0] MUX_rg_medeleg$write_1__VAL_1;
  wire [6 : 0] MUX_rg_mcause$write_1__VAL_2, MUX_rg_mcause$write_1__VAL_3;
  wire [4 : 0] MUX_rg_fflags$write_1__VAL_3;
  wire [2 : 0] MUX_rg_frm$write_1__VAL_1;
  wire MUX_csr_mstatus_rg_mstatus$write_1__SEL_5,
       MUX_rg_fflags$write_1__SEL_2,
       MUX_rg_frm$write_1__SEL_1,
       MUX_rg_mcause$write_1__SEL_2,
       MUX_rg_mcause$write_1__SEL_3,
       MUX_rg_mcounteren$write_1__SEL_1,
       MUX_rg_medeleg$write_1__SEL_1,
       MUX_rg_mepcc$write_1__SEL_2,
       MUX_rg_mepcc$write_1__SEL_4,
       MUX_rg_mideleg$write_1__SEL_1,
       MUX_rg_mtcc$write_1__SEL_2,
       MUX_rg_mtcc$write_1__SEL_3,
       MUX_rg_satp$write_1__SEL_1,
       MUX_rg_scause$write_1__SEL_2,
       MUX_rg_scause$write_1__SEL_3,
       MUX_rg_sepcc$write_1__SEL_2,
       MUX_rg_sepcc$write_1__SEL_4,
       MUX_rg_stcc$write_1__SEL_2,
       MUX_rg_stcc$write_1__SEL_3,
       MUX_rg_stval$write_1__SEL_1,
       MUX_rg_tdata1$write_1__SEL_1,
       MUX_rw_minstret$wset_1__SEL_1;

  // remaining internal signals
  reg [150 : 0] IF_read_scr_scr_addr_EQ_12_69_THEN_rg_stcc_27__ETC___d594;
  reg [71 : 0] IF_mav_scr_write_scr_addr_EQ_13_332_OR_mav_scr_ETC___d1536;
  reg [63 : 0] IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750,
	       IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1493,
	       IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406,
	       IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565,
	       SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165,
	       SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169,
	       SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512,
	       SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516,
	       SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697,
	       SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701,
	       y_avValue_fst__h21581;
  reg [61 : 0] CASE_new_priv0923_0b1_SEXT__0b0_CONCAT_rg_stcc_ETC__q1;
  reg [33 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9;
  reg [17 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7;
  reg [13 : 0] IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1500;
  reg [6 : 0] x__h10167, x__h12030, x__h7397;
  reg [3 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4;
  reg [1 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6,
	      mask__h15870,
	      mask__h16832,
	      mask__h19167,
	      mask__h20201,
	      mask__h22898,
	      mask__h34789;
  reg CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5,
      CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8,
      CASE_new_priv0923_0b1_SEXT__0b0_CONCAT_rg_stcc_ETC__q3,
      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2490,
      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608,
      IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1486;
  wire [150 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2124;
  wire [149 : 0] IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2064;
  wire [85 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2123;
  wire [65 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2149;
  wire [64 : 0] IF_mav_scr_write_cap_BITS_33_TO_28_257_ULT_51__ETC___d1416,
		addTop__h27044,
		length__h27691,
		result__h27632,
		ret__h27046;
  wire [63 : 0] IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821,
		IF_NOT_mav_read_csr_csr_addr_ULT_0x323_03_04_A_ETC___d751,
		IF_NOT_mav_read_csr_csr_addr_ULT_0xB03_99_00_A_ETC___d752,
		IF_NOT_mav_read_csr_csr_addr_ULT_0xC03_95_96_A_ETC___d753,
		IF_NOT_read_csr_csr_addr_ULT_0x323_1_2_AND_rea_ETC___d407,
		IF_NOT_read_csr_csr_addr_ULT_0xB03_7_8_AND_rea_ETC___d408,
		IF_NOT_read_csr_csr_addr_ULT_0xC03_3_4_AND_rea_ETC___d409,
		IF_NOT_read_csr_port2_csr_addr_ULT_0x323_18_19_ETC___d566,
		IF_NOT_read_csr_port2_csr_addr_ULT_0xB03_14_15_ETC___d567,
		IF_NOT_read_csr_port2_csr_addr_ULT_0xC03_10_11_ETC___d568,
		IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2087,
		SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1284,
		SEXT__0b0_CONCAT_rg_mepcc_27_BITS_85_TO_72_28__ETC___d350,
		SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320,
		SEXT__0b0_CONCAT_rg_sepcc_55_BITS_85_TO_72_56__ETC___d278,
		SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250,
		_theResult_____2__h32467,
		_theResult___fst__h35853,
		_theResult___fst__h36054,
		a_capFat_address__h36582,
		addBase__h15910,
		addBase__h16872,
		addBase__h19207,
		addBase__h20241,
		addBase__h26928,
		addBase__h34843,
		addrLSB__h27784,
		addrLSB__h29608,
		addrLSB__h8733,
		addrLSB__h8938,
		addrLSB__h9266,
		addrLSB__h9494,
		cap_unpacked_capFat_address__h24204,
		cap_unpacked_capFat_address__h25293,
		csr_mstatus_rg_mstatus_11_AND_INV_1_SL_0_CONCA_ETC___d2080,
		csr_mstatus_rg_mstatus_11_AND_INV_1_SL_1_CONCA_ETC___d1813,
		exc_pc___1__h32566,
		exc_pc__h32465,
		mask__h31141,
		mask__h31158,
		mask__h35874,
		mask__h35891,
		mav_csr_write_word_BITS_14_TO_13_99_EQ_0x3_00__ETC___d830,
		mav_scr_write_cap_BITS_149_TO_100_315_AND_1125_ETC___d1320,
		new_csr__h23328,
		new_csr_value__h18407,
		new_csr_value__h19457,
		new_csr_value__h21162,
		new_offset__h24432,
		result_d_address__h34800,
		v__h12271,
		v__h14489,
		v__h17654,
		v__h17775,
		v__h19343,
		v__h20377,
		v__h21037,
		v__h30928,
		val__h31142,
		val__h31159,
		val__h35892,
		vector_offset__h32466,
		wordxl1__h13910,
		wordxl1__h17831,
		x1_avValue_address__h25517,
		x__h15745,
		x__h16713,
		x__h19048,
		x__h20082,
		x__h23399,
		x__h23401,
		x__h24039,
		x__h25153,
		x__h27876,
		x__h29619,
		x__h29621,
		x__h29740,
		x__h31140,
		x__h31153,
		x__h31170,
		x__h34713,
		x__h34846,
		x__h35688,
		x__h35689,
		x__h35873,
		x__h35886,
		x__h35903,
		x__h5468,
		x__h8744,
		x__h8746,
		x__h8875,
		x__h8949,
		x__h8951,
		x__h9077,
		x__h9277,
		x__h9279,
		x__h9405,
		x__h9505,
		x__h9507,
		x__h9633,
		x_address__h15890,
		x_address__h16852,
		x_address__h19187,
		x_address__h20221,
		y__h27875,
		y__h29739,
		y__h31154,
		y__h31171,
		y__h35887,
		y__h35904,
		y__h8874,
		y__h9076,
		y__h9404,
		y__h9632,
		y_avValue_fst__h21331,
		y_avValue_fst__h21336,
		y_avValue_fst__h21341,
		y_avValue_fst__h21597,
		y_avValue_fst__h32419,
		y_avValue_fst__h32437,
		y_avValue_new_csr_value__h21748,
		y_avValue_snd_snd_snd__h32528;
  wire [54 : 0] IF_IF_mav_scr_write_cap_BITS_33_TO_28_257_EQ_0_ETC___d1476;
  wire [52 : 0] IF_IF_csr_ret_actions_from_priv_EQ_0b11_067_TH_ETC___d2121;
  wire [50 : 0] mask__h27045;
  wire [49 : 0] highBitsfilter__h15148,
		highBitsfilter__h16132,
		highBitsfilter__h18451,
		highBitsfilter__h19501,
		highBitsfilter__h33450,
		highOffsetBits__h15149,
		highOffsetBits__h16133,
		highOffsetBits__h18452,
		highOffsetBits__h19502,
		highOffsetBits__h24459,
		highOffsetBits__h33451,
		mask__h26929,
		mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x7_ETC__q2,
		signBits__h19499,
		signBits__h24456,
		signBits__h33448,
		x__h19529,
		x__h24486,
		x__h33478;
  wire [31 : 0] x__h21108, x__h9697;
  wire [28 : 0] rg_mcounteren_BITS_31_TO_3__q10;
  wire [22 : 0] fixed_up_val_23__h13960,
		fixed_up_val_23__h14549,
		fixed_up_val_23__h17881,
		fixed_up_val_23__h28359,
		fixed_up_val_23__h28913,
		fixed_up_val_23__h30981,
		fixed_up_val_23__h35760;
  wire [17 : 0] a_capFat_otype__h36587, x1_avValue_otype__h25522, x__h36520;
  wire [15 : 0] base__h29606,
		offset__h23387,
		offset__h29607,
		offset__h8732,
		offset__h8937,
		offset__h9265,
		offset__h9493,
		x__h10227,
		x__h10255,
		x__h15961,
		x__h16923,
		x__h19258,
		x__h20292,
		x__h26979,
		x__h27104,
		x__h27696,
		x__h34904;
  wire [13 : 0] a_capFat_addrBits__h36583,
		cap_unpacked_capFat_addrBits__h24205,
		cap_unpacked_capFat_addrBits__h25294,
		newAddrBits__h15869,
		newAddrBits__h16831,
		newAddrBits__h19166,
		newAddrBits__h20200,
		newAddrBits__h24183,
		newAddrBits__h25272,
		newAddrBits__h34788,
		result_d_addrBits__h34801,
		toBoundsM1__h15159,
		toBoundsM1__h16143,
		toBoundsM1__h18462,
		toBoundsM1__h19512,
		toBoundsM1__h25662,
		toBoundsM1__h33461,
		toBounds__h15158,
		toBounds__h16142,
		toBounds__h18461,
		toBounds__h19511,
		toBounds__h25661,
		toBounds__h33460,
		x1_avValue_addrBits__h25518,
		x1_avValue_snd_fst_capFat_bounds_baseBits__h34149,
		x_addrBits__h15891,
		x_addrBits__h16853,
		x_addrBits__h19188,
		x_addrBits__h20222;
  wire [11 : 0] i__h51530,
		idx__h11610,
		idx__h11633,
		idx__h11656,
		idx__h5826,
		idx__h5849,
		idx__h5872,
		idx__h9747,
		idx__h9770,
		idx__h9793,
		x__h12225,
		x__h12294;
  wire [9 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2143;
  wire [6 : 0] IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2651,
	       IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2652,
	       IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2653,
	       IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2655,
	       IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2656;
  wire [5 : 0] IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2016,
	       exc_code__h33277,
	       ie_from_x__h35837,
	       ie_to_x__h31058,
	       pie_from_x__h35838,
	       pie_to_x__h31059;
  wire [3 : 0] IF_rg_mepcc_27_BITS_27_TO_25_125_ULT_rg_mepcc__ETC___d2131,
	       IF_rg_sepcc_55_BITS_27_TO_25_134_ULT_rg_sepcc__ETC___d2140,
	       x1_avValue_perms_soft__h28078;
  wire [2 : 0] repBound__h27916,
	       repBound__h8779,
	       repBound__h8984,
	       repBound__h9312,
	       repBound__h9540;
  wire [1 : 0] IF_csr_mstatus_rg_mstatus_11_BITS_12_TO_11_90__ETC___d792,
	       IF_rg_mepcc_27_BITS_13_TO_11_30_ULT_rg_mepcc_2_ETC___d339,
	       IF_rg_sepcc_55_BITS_13_TO_11_58_ULT_rg_sepcc_5_ETC___d267,
	       _0b0_CONCAT_mav_scr_write_cap_BITS_149_TO_100_3_ETC___d1408,
	       _theResult____h51743,
	       _theResult____h51955,
	       _theResult____h52167,
	       _theResult____h52379,
	       _theResult____h52591,
	       _theResult____h52803,
	       _theResult____h53015,
	       _theResult____h53227,
	       _theResult____h53439,
	       _theResult___fst__h31070,
	       a_capFat_reserved__h36586,
	       new_priv__h30923,
	       to_y__h36053,
	       x1_avValue_reserved__h25521,
	       x__h24440,
	       x__h27977,
	       x__h27996;
  wire IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d2033,
       IF_SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85__ETC___d1305,
       IF_SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85__ETC___d1341,
       IF_csr_trap_actions_interrupt_AND_NOT_csr_trap_ETC___d2041,
       IF_mav_csr_write_word_BIT_63_46_THEN_NOT_mav_c_ETC___d1038,
       IF_mav_csr_write_word_BIT_63_46_THEN_NOT_mav_c_ETC___d866,
       IF_mav_csr_write_word_BIT_63_46_THEN_NOT_mav_c_ETC___d914,
       IF_mav_csr_write_word_BIT_63_46_THEN_NOT_mav_c_ETC___d988,
       NOT_access_permitted_1_csr_addr_ULT_0xC03_150__ETC___d2253,
       NOT_access_permitted_2_csr_addr_ULT_0xC03_283__ETC___d2386,
       NOT_cfg_verbosity_read__184_ULE_1_185___d1186,
       NOT_csr_mip_mv_read__56_BIT_0_584_585_OR_NOT_c_ETC___d2597,
       NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2493,
       NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2538,
       NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2583,
       NOT_csr_mip_mv_read__56_BIT_1_539_540_OR_NOT_c_ETC___d2552,
       NOT_csr_mip_mv_read__56_BIT_3_494_495_OR_NOT_c_ETC___d2507,
       NOT_csr_mip_mv_read__56_BIT_5_554_555_OR_NOT_c_ETC___d2567,
       NOT_csr_mip_mv_read__56_BIT_7_509_510_OR_NOT_c_ETC___d2522,
       NOT_csr_mip_mv_read__56_BIT_8_569_570_OR_NOT_c_ETC___d2582,
       NOT_csr_mip_mv_read__56_BIT_9_524_525_OR_NOT_c_ETC___d2537,
       NOT_csr_trap_actions_nmi_843_AND_csr_trap_acti_ETC___d1957,
       NOT_mav_scr_write_cap_BITS_33_TO_28_257_ULT_50_ETC___d1308,
       NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1379,
       NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1381,
       NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1422,
       NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1424,
       NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1425,
       NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1427,
       NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1428,
       NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1429,
       SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1312,
       SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1346,
       a_capFat_flags__h36585,
       access_permitted_1_csr_addr_ULE_0xC1F___d2152,
       access_permitted_1_csr_addr_ULT_0xC03_150_OR_N_ETC___d2279,
       access_permitted_1_csr_addr_ULT_0xC03___d2150,
       access_permitted_2_csr_addr_ULE_0xC1F___d2285,
       access_permitted_2_csr_addr_ULT_0xC03_283_OR_N_ETC___d2410,
       access_permitted_2_csr_addr_ULT_0xC03___d2283,
       b__h31157,
       b__h35890,
       csr_counter_read_fault_csr_addr_EQ_0xC00_443_A_ETC___d2467,
       csr_mip_mv_read__56_BIT_0_584_AND_csr_mie_mv_r_ETC___d2616,
       csr_mip_mv_read__56_BIT_1_539_AND_csr_mie_mv_r_ETC___d2631,
       csr_mip_mv_read__56_BIT_3_494_AND_csr_mie_mv_r_ETC___d2646,
       csr_mip_mv_read__56_BIT_4_599_AND_csr_mie_mv_r_ETC___d2611,
       csr_mip_mv_read__56_BIT_5_554_AND_csr_mie_mv_r_ETC___d2626,
       csr_mip_mv_read__56_BIT_7_509_AND_csr_mie_mv_r_ETC___d2641,
       csr_mip_mv_read__56_BIT_8_569_AND_csr_mie_mv_r_ETC___d2621,
       csr_mip_mv_read__56_BIT_9_524_AND_csr_mie_mv_r_ETC___d2636,
       csr_trap_actions_interrupt_AND_NOT_csr_trap_ac_ETC___d1856,
       csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d2008,
       deleg_bit___1__h31079,
       deleg_bit___1__h31094,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2477,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2503,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2518,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2533,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2548,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2563,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2578,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2593,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2475,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2501,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2516,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2531,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2546,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2561,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2576,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2591,
       mav_csr_write_csr_addr_ULE_0x33F___d764,
       mav_csr_write_csr_addr_ULE_0xB1F___d756,
       mav_csr_write_csr_addr_ULT_0x323_62_OR_NOT_mav_ETC___d1182,
       mav_csr_write_csr_addr_ULT_0x323_62_OR_NOT_mav_ETC___d785,
       mav_csr_write_csr_addr_ULT_0x323___d762,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1017,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1021,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1024,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1067,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1070,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1073,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1076,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1079,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1082,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1088,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1091,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1096,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1099,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1255,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d776,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d835,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d841,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d844,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d895,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d898,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d943,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d948,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d951,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d954,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d957,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d967,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d971,
       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d974,
       mav_csr_write_csr_addr_ULT_0xB03___d754,
       mav_scr_write_cap_BITS_13_TO_11_265_ULT_mav_sc_ETC___d1267,
       mav_scr_write_cap_BITS_27_TO_25_389_ULT_mav_sc_ETC___d1390,
       mav_scr_write_cap_BITS_85_TO_83_268_ULT_mav_sc_ETC___d1269,
       rg_mepcc_27_BITS_13_TO_11_30_ULT_rg_mepcc_27_B_ETC___d332,
       rg_mepcc_27_BITS_27_TO_25_125_ULT_rg_mepcc_27__ETC___d2126,
       rg_mepcc_27_BITS_85_TO_83_33_ULT_rg_mepcc_27_B_ETC___d334,
       rg_mtcc_97_BITS_13_TO_11_00_ULT_rg_mtcc_97_BIT_ETC___d302,
       rg_mtcc_97_BITS_85_TO_83_03_ULT_rg_mtcc_97_BIT_ETC___d304,
       rg_sepcc_55_BITS_13_TO_11_58_ULT_rg_sepcc_55_B_ETC___d260,
       rg_sepcc_55_BITS_27_TO_25_134_ULT_rg_sepcc_55__ETC___d2135,
       rg_sepcc_55_BITS_85_TO_83_61_ULT_rg_sepcc_55_B_ETC___d262,
       rg_stcc_27_BITS_13_TO_11_30_ULT_rg_stcc_27_BIT_ETC___d232,
       rg_stcc_27_BITS_85_TO_83_33_ULT_rg_stcc_27_BIT_ETC___d234,
       sd__h17880,
       sd__h28358,
       sd__h28912,
       sd__h30980,
       sd__h35759,
       x1_avValue_flags__h25520;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = rg_state && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     rg_state && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // value method read_csr
  assign read_csr =
	     { read_csr_csr_addr >= 12'hC03 && read_csr_csr_addr <= 12'hC1F ||
	       read_csr_csr_addr >= 12'hB03 && read_csr_csr_addr <= 12'hB1F ||
	       read_csr_csr_addr >= 12'h323 && read_csr_csr_addr <= 12'h33F ||
	       read_csr_csr_addr == 12'h001 ||
	       read_csr_csr_addr == 12'h002 ||
	       read_csr_csr_addr == 12'h003 ||
	       read_csr_csr_addr == 12'hC00 ||
	       read_csr_csr_addr == 12'hC01 ||
	       read_csr_csr_addr == 12'hC02 ||
	       read_csr_csr_addr == 12'h100 ||
	       read_csr_csr_addr == 12'h102 ||
	       read_csr_csr_addr == 12'h103 ||
	       read_csr_csr_addr == 12'h104 ||
	       read_csr_csr_addr == 12'h105 ||
	       read_csr_csr_addr == 12'h106 ||
	       read_csr_csr_addr == 12'h140 ||
	       read_csr_csr_addr == 12'h141 ||
	       read_csr_csr_addr == 12'h142 ||
	       read_csr_csr_addr == 12'h143 ||
	       read_csr_csr_addr == 12'h144 ||
	       read_csr_csr_addr == 12'h9C0 ||
	       read_csr_csr_addr == 12'h180 ||
	       read_csr_csr_addr == 12'h302 ||
	       read_csr_csr_addr == 12'h303 ||
	       read_csr_csr_addr == 12'hF11 ||
	       read_csr_csr_addr == 12'hF12 ||
	       read_csr_csr_addr == 12'hF13 ||
	       read_csr_csr_addr == 12'hF14 ||
	       read_csr_csr_addr == 12'h300 ||
	       read_csr_csr_addr == 12'h301 ||
	       read_csr_csr_addr == 12'h304 ||
	       read_csr_csr_addr == 12'h305 ||
	       read_csr_csr_addr == 12'h306 ||
	       read_csr_csr_addr == 12'h340 ||
	       read_csr_csr_addr == 12'h341 ||
	       read_csr_csr_addr == 12'h342 ||
	       read_csr_csr_addr == 12'h343 ||
	       read_csr_csr_addr == 12'h344 ||
	       read_csr_csr_addr == 12'hBC0 ||
	       read_csr_csr_addr == 12'hB00 ||
	       read_csr_csr_addr == 12'hB02 ||
	       read_csr_csr_addr == 12'h320 ||
	       read_csr_csr_addr == 12'h7A0 ||
	       read_csr_csr_addr == 12'h7A1 ||
	       read_csr_csr_addr == 12'h7A2 ||
	       read_csr_csr_addr == 12'h7A3,
	       IF_NOT_read_csr_csr_addr_ULT_0xC03_3_4_AND_rea_ETC___d409 } ;

  // value method read_csr_port2
  assign read_csr_port2 =
	     { read_csr_port2_csr_addr >= 12'hC03 &&
	       read_csr_port2_csr_addr <= 12'hC1F ||
	       read_csr_port2_csr_addr >= 12'hB03 &&
	       read_csr_port2_csr_addr <= 12'hB1F ||
	       read_csr_port2_csr_addr >= 12'h323 &&
	       read_csr_port2_csr_addr <= 12'h33F ||
	       read_csr_port2_csr_addr == 12'h001 ||
	       read_csr_port2_csr_addr == 12'h002 ||
	       read_csr_port2_csr_addr == 12'h003 ||
	       read_csr_port2_csr_addr == 12'hC00 ||
	       read_csr_port2_csr_addr == 12'hC01 ||
	       read_csr_port2_csr_addr == 12'hC02 ||
	       read_csr_port2_csr_addr == 12'h100 ||
	       read_csr_port2_csr_addr == 12'h102 ||
	       read_csr_port2_csr_addr == 12'h103 ||
	       read_csr_port2_csr_addr == 12'h104 ||
	       read_csr_port2_csr_addr == 12'h105 ||
	       read_csr_port2_csr_addr == 12'h106 ||
	       read_csr_port2_csr_addr == 12'h140 ||
	       read_csr_port2_csr_addr == 12'h141 ||
	       read_csr_port2_csr_addr == 12'h142 ||
	       read_csr_port2_csr_addr == 12'h143 ||
	       read_csr_port2_csr_addr == 12'h144 ||
	       read_csr_port2_csr_addr == 12'h9C0 ||
	       read_csr_port2_csr_addr == 12'h180 ||
	       read_csr_port2_csr_addr == 12'h302 ||
	       read_csr_port2_csr_addr == 12'h303 ||
	       read_csr_port2_csr_addr == 12'hF11 ||
	       read_csr_port2_csr_addr == 12'hF12 ||
	       read_csr_port2_csr_addr == 12'hF13 ||
	       read_csr_port2_csr_addr == 12'hF14 ||
	       read_csr_port2_csr_addr == 12'h300 ||
	       read_csr_port2_csr_addr == 12'h301 ||
	       read_csr_port2_csr_addr == 12'h304 ||
	       read_csr_port2_csr_addr == 12'h305 ||
	       read_csr_port2_csr_addr == 12'h306 ||
	       read_csr_port2_csr_addr == 12'h340 ||
	       read_csr_port2_csr_addr == 12'h341 ||
	       read_csr_port2_csr_addr == 12'h342 ||
	       read_csr_port2_csr_addr == 12'h343 ||
	       read_csr_port2_csr_addr == 12'h344 ||
	       read_csr_port2_csr_addr == 12'hBC0 ||
	       read_csr_port2_csr_addr == 12'hB00 ||
	       read_csr_port2_csr_addr == 12'hB02 ||
	       read_csr_port2_csr_addr == 12'h320 ||
	       read_csr_port2_csr_addr == 12'h7A0 ||
	       read_csr_port2_csr_addr == 12'h7A1 ||
	       read_csr_port2_csr_addr == 12'h7A2 ||
	       read_csr_port2_csr_addr == 12'h7A3,
	       IF_NOT_read_csr_port2_csr_addr_ULT_0xC03_10_11_ETC___d568 } ;

  // value method read_scr
  assign read_scr =
	     { read_scr_scr_addr == 5'd12 || read_scr_scr_addr == 5'd13 ||
	       read_scr_scr_addr == 5'd14 ||
	       read_scr_scr_addr == 5'd15 ||
	       read_scr_scr_addr == 5'd28 ||
	       read_scr_scr_addr == 5'd29 ||
	       read_scr_scr_addr == 5'd30 ||
	       read_scr_scr_addr == 5'd31,
	       IF_read_scr_scr_addr_EQ_12_69_THEN_rg_stcc_27__ETC___d594 } ;

  // actionvalue method mav_read_csr
  assign mav_read_csr =
	     { mav_read_csr_csr_addr >= 12'hC03 &&
	       mav_read_csr_csr_addr <= 12'hC1F ||
	       mav_read_csr_csr_addr >= 12'hB03 &&
	       mav_read_csr_csr_addr <= 12'hB1F ||
	       mav_read_csr_csr_addr >= 12'h323 &&
	       mav_read_csr_csr_addr <= 12'h33F ||
	       mav_read_csr_csr_addr == 12'h001 ||
	       mav_read_csr_csr_addr == 12'h002 ||
	       mav_read_csr_csr_addr == 12'h003 ||
	       mav_read_csr_csr_addr == 12'hC00 ||
	       mav_read_csr_csr_addr == 12'hC01 ||
	       mav_read_csr_csr_addr == 12'hC02 ||
	       mav_read_csr_csr_addr == 12'h100 ||
	       mav_read_csr_csr_addr == 12'h102 ||
	       mav_read_csr_csr_addr == 12'h103 ||
	       mav_read_csr_csr_addr == 12'h104 ||
	       mav_read_csr_csr_addr == 12'h105 ||
	       mav_read_csr_csr_addr == 12'h106 ||
	       mav_read_csr_csr_addr == 12'h140 ||
	       mav_read_csr_csr_addr == 12'h141 ||
	       mav_read_csr_csr_addr == 12'h142 ||
	       mav_read_csr_csr_addr == 12'h143 ||
	       mav_read_csr_csr_addr == 12'h144 ||
	       mav_read_csr_csr_addr == 12'h9C0 ||
	       mav_read_csr_csr_addr == 12'h180 ||
	       mav_read_csr_csr_addr == 12'h302 ||
	       mav_read_csr_csr_addr == 12'h303 ||
	       mav_read_csr_csr_addr == 12'hF11 ||
	       mav_read_csr_csr_addr == 12'hF12 ||
	       mav_read_csr_csr_addr == 12'hF13 ||
	       mav_read_csr_csr_addr == 12'hF14 ||
	       mav_read_csr_csr_addr == 12'h300 ||
	       mav_read_csr_csr_addr == 12'h301 ||
	       mav_read_csr_csr_addr == 12'h304 ||
	       mav_read_csr_csr_addr == 12'h305 ||
	       mav_read_csr_csr_addr == 12'h306 ||
	       mav_read_csr_csr_addr == 12'h340 ||
	       mav_read_csr_csr_addr == 12'h341 ||
	       mav_read_csr_csr_addr == 12'h342 ||
	       mav_read_csr_csr_addr == 12'h343 ||
	       mav_read_csr_csr_addr == 12'h344 ||
	       mav_read_csr_csr_addr == 12'hBC0 ||
	       mav_read_csr_csr_addr == 12'hB00 ||
	       mav_read_csr_csr_addr == 12'hB02 ||
	       mav_read_csr_csr_addr == 12'h320 ||
	       mav_read_csr_csr_addr == 12'h7A0 ||
	       mav_read_csr_csr_addr == 12'h7A1 ||
	       mav_read_csr_csr_addr == 12'h7A2 ||
	       mav_read_csr_csr_addr == 12'h7A3,
	       IF_NOT_mav_read_csr_csr_addr_ULT_0xC03_95_96_A_ETC___d753 } ;
  assign CAN_FIRE_mav_read_csr = 1'd1 ;
  assign WILL_FIRE_mav_read_csr = EN_mav_read_csr ;

  // actionvalue method mav_csr_write
  assign mav_csr_write =
	     { y_avValue_new_csr_value__h21748,
	       mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1255,
	       wordxl1__h13910 } ;
  assign CAN_FIRE_mav_csr_write = 1'd1 ;
  assign WILL_FIRE_mav_csr_write = EN_mav_csr_write ;

  // actionvalue method mav_scr_write
  assign mav_scr_write =
	     (mav_scr_write_scr_addr == 5'd12) ?
	       { x__h24440 == 2'd0 &&
		 SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1312 &&
		 mav_scr_write_cap[150],
		 x1_avValue_address__h25517,
		 x1_avValue_addrBits__h25518,
		 x1_avValue_perms_soft__h28078,
		 x__h24440 == 2'd0 && mav_scr_write_cap[67],
		 x__h24440 == 2'd0 && mav_scr_write_cap[66],
		 x__h24440 == 2'd0 && mav_scr_write_cap[65],
		 x__h24440 == 2'd0 && mav_scr_write_cap[64],
		 x__h24440 == 2'd0 && mav_scr_write_cap[63],
		 x__h24440 == 2'd0 && mav_scr_write_cap[62],
		 x__h24440 == 2'd0 && mav_scr_write_cap[61],
		 x__h24440 == 2'd0 && mav_scr_write_cap[60],
		 x__h24440 == 2'd0 && mav_scr_write_cap[59],
		 x__h24440 == 2'd0 && mav_scr_write_cap[58],
		 x__h24440 == 2'd0 && mav_scr_write_cap[57],
		 x__h24440 == 2'd0 && mav_scr_write_cap[56],
		 x1_avValue_flags__h25520,
		 IF_IF_mav_scr_write_cap_BITS_33_TO_28_257_EQ_0_ETC___d1476 } :
	       { IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1486,
		 IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1493,
		 IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1500,
		 IF_mav_scr_write_scr_addr_EQ_13_332_OR_mav_scr_ETC___d1536 } ;
  assign CAN_FIRE_mav_scr_write = 1'd1 ;
  assign WILL_FIRE_mav_scr_write = EN_mav_scr_write ;

  // value method read_frm
  assign read_frm = rg_frm ;

  // value method read_fflags
  assign read_fflags = rg_fflags ;

  // value method mv_update_fcsr_fflags
  assign mv_update_fcsr_fflags = rg_fflags | mv_update_fcsr_fflags_flags ;

  // action method ma_update_fcsr_fflags
  assign CAN_FIRE_ma_update_fcsr_fflags = 1'd1 ;
  assign WILL_FIRE_ma_update_fcsr_fflags = EN_ma_update_fcsr_fflags ;

  // value method mv_update_mstatus_fs
  assign mv_update_mstatus_fs =
	     { sd__h28358, 40'd5120, fixed_up_val_23__h28359 } ;

  // action method ma_update_mstatus_fs
  assign CAN_FIRE_ma_update_mstatus_fs = 1'd1 ;
  assign WILL_FIRE_ma_update_mstatus_fs = EN_ma_update_mstatus_fs ;

  // value method read_misa
  assign read_misa = 28'd135532845 ;

  // value method read_mstatus
  assign read_mstatus = csr_mstatus_rg_mstatus ;

  // value method read_sstatus
  assign read_sstatus =
	     { csr_mstatus_rg_mstatus[63],
	       29'd0,
	       csr_mstatus_rg_mstatus[33:32],
	       12'd0,
	       csr_mstatus_rg_mstatus[19:18],
	       1'd0,
	       csr_mstatus_rg_mstatus[16:13],
	       4'd0,
	       csr_mstatus_rg_mstatus[8],
	       2'd0,
	       csr_mstatus_rg_mstatus[5:4],
	       2'd0,
	       csr_mstatus_rg_mstatus[1:0] } ;

  // value method read_ustatus
  assign read_ustatus =
	     { 59'd0,
	       csr_mstatus_rg_mstatus[4],
	       3'd0,
	       csr_mstatus_rg_mstatus[0] } ;

  // value method read_satp
  assign read_satp = rg_satp ;

  // actionvalue method csr_trap_actions
  assign csr_trap_actions =
	     { IF_csr_trap_actions_interrupt_AND_NOT_csr_trap_ETC___d2041,
	       IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2064,
	       x__h35688,
	       x__h35689,
	       new_priv__h30923 } ;
  assign RDY_csr_trap_actions = 1'd1 ;
  assign CAN_FIRE_csr_trap_actions = 1'd1 ;
  assign WILL_FIRE_csr_trap_actions = EN_csr_trap_actions ;

  // actionvalue method csr_ret_actions
  assign csr_ret_actions =
	     { IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2124,
	       IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2143,
	       IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2149 } ;
  assign RDY_csr_ret_actions = 1'd1 ;
  assign CAN_FIRE_csr_ret_actions = 1'd1 ;
  assign WILL_FIRE_csr_ret_actions = EN_csr_ret_actions ;

  // value method read_csr_minstret
  assign read_csr_minstret = rg_minstret ;

  // action method csr_minstret_incr
  assign CAN_FIRE_csr_minstret_incr = 1'd1 ;
  assign WILL_FIRE_csr_minstret_incr = EN_csr_minstret_incr ;

  // value method read_csr_mcycle
  assign read_csr_mcycle = rg_mcycle ;

  // value method read_csr_mtime
  assign read_csr_mtime = rg_mtime ;

  // action method send_performance_events
  assign CAN_FIRE_send_performance_events = 1'd1 ;
  assign WILL_FIRE_send_performance_events = 1'd1 ;

  // value method access_permitted_1
  assign access_permitted_1 =
	     { NOT_access_permitted_1_csr_addr_ULT_0xC03_150__ETC___d2253 &&
	       (access_permitted_1_csr_addr != 12'h180 ||
		!csr_mstatus_rg_mstatus[20]) &&
	       (access_permitted_1_read_not_write ||
		access_permitted_1_csr_addr[11:10] != 2'b11),
	       access_permitted_1_csr_addr_ULT_0xC03_150_OR_N_ETC___d2279 &&
	       (access_permitted_1_csr_addr != 12'hC02 ||
		!access_permitted_1_read_not_write) } ;

  // value method access_permitted_2
  assign access_permitted_2 =
	     { NOT_access_permitted_2_csr_addr_ULT_0xC03_283__ETC___d2386 &&
	       (access_permitted_2_csr_addr != 12'h180 ||
		!csr_mstatus_rg_mstatus[20]) &&
	       (access_permitted_2_read_not_write ||
		access_permitted_2_csr_addr[11:10] != 2'b11),
	       access_permitted_2_csr_addr_ULT_0xC03_283_OR_N_ETC___d2410 &&
	       (access_permitted_2_csr_addr != 12'hC02 ||
		!access_permitted_2_read_not_write) } ;

  // value method access_permitted_scr
  assign access_permitted_scr =
	     { (access_permitted_scr_scr_addr == 5'd1 ||
		access_permitted_scr_scr_addr == 5'd12 ||
		access_permitted_scr_scr_addr == 5'd13 ||
		access_permitted_scr_scr_addr == 5'd15 ||
		access_permitted_scr_scr_addr == 5'd14 ||
		access_permitted_scr_scr_addr == 5'd28 ||
		access_permitted_scr_scr_addr == 5'd29 ||
		access_permitted_scr_scr_addr == 5'd31 ||
		access_permitted_scr_scr_addr == 5'd30) &&
	       access_permitted_scr_priv >=
	       access_permitted_scr_scr_addr[4:3] &&
	       access_permitted_scr_scr_addr != 5'd0,
	       access_permitted_scr_scr_addr != 5'd1 } ;

  // value method csr_counter_read_fault
  assign csr_counter_read_fault =
	     (csr_counter_read_fault_priv == 2'b01 ||
	      csr_counter_read_fault_priv == 2'b0) &&
	     csr_counter_read_fault_csr_addr_EQ_0xC00_443_A_ETC___d2467 ;

  // value method csr_mip_read
  assign csr_mip_read = csr_mip$mv_read ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = EN_m_external_interrupt_req ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = EN_s_external_interrupt_req ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = EN_timer_interrupt_req ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = EN_software_interrupt_req ;

  // value method interrupt_pending
  assign interrupt_pending =
	     (NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2583 &&
	      NOT_csr_mip_mv_read__56_BIT_0_584_585_OR_NOT_c_ETC___d2597) ?
	       { csr_mip_mv_read__56_BIT_4_599_AND_csr_mie_mv_r_ETC___d2611,
		 6'd4 } :
	       (NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2583 ?
		  { csr_mip_mv_read__56_BIT_0_584_AND_csr_mie_mv_r_ETC___d2616,
		    6'd0 } :
		  IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2656) ;

  // value method wfi_resume
  assign wfi_resume = (csr_mip$mv_read & csr_mie$mv_read) != 64'd0 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = EN_nmi_req ;

  // value method nmi_pending
  assign nmi_pending = rg_nmi ;

  // action method debug
  assign RDY_debug = 1'd1 ;
  assign CAN_FIRE_debug = 1'd1 ;
  assign WILL_FIRE_debug = EN_debug ;

  // submodule csr_mie
  mkCSR_MIE csr_mie(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_sie_write_misa(csr_mie$mav_sie_write_misa),
		    .mav_sie_write_wordxl(csr_mie$mav_sie_write_wordxl),
		    .mav_write_misa(csr_mie$mav_write_misa),
		    .mav_write_wordxl(csr_mie$mav_write_wordxl),
		    .EN_reset(csr_mie$EN_reset),
		    .EN_mav_write(csr_mie$EN_mav_write),
		    .EN_mav_sie_write(csr_mie$EN_mav_sie_write),
		    .mv_read(csr_mie$mv_read),
		    .mav_write(csr_mie$mav_write),
		    .mv_sie_read(csr_mie$mv_sie_read),
		    .mav_sie_write(csr_mie$mav_sie_write));

  // submodule csr_mip
  mkCSR_MIP csr_mip(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_external_interrupt_req_req(csr_mip$m_external_interrupt_req_req),
		    .mav_sip_write_misa(csr_mip$mav_sip_write_misa),
		    .mav_sip_write_wordxl(csr_mip$mav_sip_write_wordxl),
		    .mav_write_misa(csr_mip$mav_write_misa),
		    .mav_write_wordxl(csr_mip$mav_write_wordxl),
		    .s_external_interrupt_req_req(csr_mip$s_external_interrupt_req_req),
		    .software_interrupt_req_req(csr_mip$software_interrupt_req_req),
		    .timer_interrupt_req_req(csr_mip$timer_interrupt_req_req),
		    .EN_reset(csr_mip$EN_reset),
		    .EN_mav_write(csr_mip$EN_mav_write),
		    .EN_mav_sip_write(csr_mip$EN_mav_sip_write),
		    .EN_m_external_interrupt_req(csr_mip$EN_m_external_interrupt_req),
		    .EN_s_external_interrupt_req(csr_mip$EN_s_external_interrupt_req),
		    .EN_software_interrupt_req(csr_mip$EN_software_interrupt_req),
		    .EN_timer_interrupt_req(csr_mip$EN_timer_interrupt_req),
		    .mv_read(csr_mip$mv_read),
		    .mav_write(csr_mip$mav_write),
		    .mv_sip_read(csr_mip$mv_sip_read),
		    .mav_sip_write(csr_mip$mav_sip_write));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(1'd1)) f_reset_rsps(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_rsps$ENQ),
					.DEQ(f_reset_rsps$DEQ),
					.CLR(f_reset_rsps$CLR),
					.FULL_N(f_reset_rsps$FULL_N),
					.EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule perf_counters
  mkPerfCountersFlute perf_counters(.CLK(CLK),
				    .RST_N(RST_N),
				    .send_performance_events_evts(perf_counters$send_performance_events_evts),
				    .write_counter_idx(perf_counters$write_counter_idx),
				    .write_counter_val(perf_counters$write_counter_val),
				    .write_ctr_inhibit_val(perf_counters$write_ctr_inhibit_val),
				    .write_ctr_sel_idx(perf_counters$write_ctr_sel_idx),
				    .write_ctr_sel_val(perf_counters$write_ctr_sel_val),
				    .EN_write_counter(perf_counters$EN_write_counter),
				    .EN_write_ctr_sel(perf_counters$EN_write_ctr_sel),
				    .EN_write_ctr_inhibit(perf_counters$EN_write_ctr_inhibit),
				    .read_counters_0__read(perf_counters$read_counters_0__read),
				    .read_counters_1__read(perf_counters$read_counters_1__read),
				    .read_counters_2__read(perf_counters$read_counters_2__read),
				    .read_counters_3__read(perf_counters$read_counters_3__read),
				    .read_counters_4__read(perf_counters$read_counters_4__read),
				    .read_counters_5__read(perf_counters$read_counters_5__read),
				    .read_counters_6__read(perf_counters$read_counters_6__read),
				    .read_counters_7__read(perf_counters$read_counters_7__read),
				    .read_counters_8__read(perf_counters$read_counters_8__read),
				    .read_counters_9__read(perf_counters$read_counters_9__read),
				    .read_counters_10__read(perf_counters$read_counters_10__read),
				    .read_counters_11__read(perf_counters$read_counters_11__read),
				    .read_counters_12__read(perf_counters$read_counters_12__read),
				    .read_counters_13__read(perf_counters$read_counters_13__read),
				    .read_counters_14__read(perf_counters$read_counters_14__read),
				    .read_counters_15__read(perf_counters$read_counters_15__read),
				    .read_counters_16__read(perf_counters$read_counters_16__read),
				    .read_counters_17__read(perf_counters$read_counters_17__read),
				    .read_counters_18__read(perf_counters$read_counters_18__read),
				    .read_counters_19__read(perf_counters$read_counters_19__read),
				    .read_counters_20__read(perf_counters$read_counters_20__read),
				    .read_counters_21__read(perf_counters$read_counters_21__read),
				    .read_counters_22__read(perf_counters$read_counters_22__read),
				    .read_counters_23__read(perf_counters$read_counters_23__read),
				    .read_counters_24__read(perf_counters$read_counters_24__read),
				    .read_counters_25__read(perf_counters$read_counters_25__read),
				    .read_counters_26__read(perf_counters$read_counters_26__read),
				    .read_counters_27__read(perf_counters$read_counters_27__read),
				    .read_counters_28__read(perf_counters$read_counters_28__read),
				    .read_ctr_sels_0__read(perf_counters$read_ctr_sels_0__read),
				    .read_ctr_sels_1__read(perf_counters$read_ctr_sels_1__read),
				    .read_ctr_sels_2__read(perf_counters$read_ctr_sels_2__read),
				    .read_ctr_sels_3__read(perf_counters$read_ctr_sels_3__read),
				    .read_ctr_sels_4__read(perf_counters$read_ctr_sels_4__read),
				    .read_ctr_sels_5__read(perf_counters$read_ctr_sels_5__read),
				    .read_ctr_sels_6__read(perf_counters$read_ctr_sels_6__read),
				    .read_ctr_sels_7__read(perf_counters$read_ctr_sels_7__read),
				    .read_ctr_sels_8__read(perf_counters$read_ctr_sels_8__read),
				    .read_ctr_sels_9__read(perf_counters$read_ctr_sels_9__read),
				    .read_ctr_sels_10__read(perf_counters$read_ctr_sels_10__read),
				    .read_ctr_sels_11__read(perf_counters$read_ctr_sels_11__read),
				    .read_ctr_sels_12__read(perf_counters$read_ctr_sels_12__read),
				    .read_ctr_sels_13__read(perf_counters$read_ctr_sels_13__read),
				    .read_ctr_sels_14__read(perf_counters$read_ctr_sels_14__read),
				    .read_ctr_sels_15__read(perf_counters$read_ctr_sels_15__read),
				    .read_ctr_sels_16__read(perf_counters$read_ctr_sels_16__read),
				    .read_ctr_sels_17__read(perf_counters$read_ctr_sels_17__read),
				    .read_ctr_sels_18__read(perf_counters$read_ctr_sels_18__read),
				    .read_ctr_sels_19__read(perf_counters$read_ctr_sels_19__read),
				    .read_ctr_sels_20__read(perf_counters$read_ctr_sels_20__read),
				    .read_ctr_sels_21__read(perf_counters$read_ctr_sels_21__read),
				    .read_ctr_sels_22__read(perf_counters$read_ctr_sels_22__read),
				    .read_ctr_sels_23__read(perf_counters$read_ctr_sels_23__read),
				    .read_ctr_sels_24__read(perf_counters$read_ctr_sels_24__read),
				    .read_ctr_sels_25__read(perf_counters$read_ctr_sels_25__read),
				    .read_ctr_sels_26__read(perf_counters$read_ctr_sels_26__read),
				    .read_ctr_sels_27__read(perf_counters$read_ctr_sels_27__read),
				    .read_ctr_sels_28__read(perf_counters$read_ctr_sels_28__read),
				    .read_ctr_inhibit__read(perf_counters$read_ctr_inhibit__read),
				    .read_ctr_overflow__read());

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_range(),
		    .m_plic_addr_range(),
		    .m_uart0_addr_range(),
		    .m_other_peripherals_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_mem0_controller_addr_range(),
		    .m_tcm_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value(soc_map$m_nmivec_reset_value),
		    .m_pcc_reset_value(),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(soc_map$m_mtcc_reset_value),
		    .m_mepcc_reset_value(soc_map$m_mepcc_reset_value));

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start = !rg_state ;
  assign WILL_FIRE_RL_rl_reset_start =
	     CAN_FIRE_RL_rl_reset_start && !EN_mav_csr_write ;

  // rule RL_rl_mcycle_incr
  assign CAN_FIRE_RL_rl_mcycle_incr = 1'd1 ;
  assign WILL_FIRE_RL_rl_mcycle_incr = 1'd1 ;

  // rule RL_rl_mtime_incr
  assign CAN_FIRE_RL_rl_mtime_incr = 1'd1 ;
  assign WILL_FIRE_RL_rl_mtime_incr = 1'd1 ;

  // rule RL_rl_upd_minstret_csrrx
  assign CAN_FIRE_RL_rl_upd_minstret_csrrx =
	     MUX_rw_minstret$wset_1__SEL_1 || WILL_FIRE_RL_rl_reset_start ;
  assign WILL_FIRE_RL_rl_upd_minstret_csrrx =
	     CAN_FIRE_RL_rl_upd_minstret_csrrx ;

  // rule RL_rl_upd_minstret_incr
  assign CAN_FIRE_RL_rl_upd_minstret_incr =
	     !CAN_FIRE_RL_rl_upd_minstret_csrrx && EN_csr_minstret_incr &&
	     !rg_ctr_inhib_ir_cy[1] ;
  assign WILL_FIRE_RL_rl_upd_minstret_incr =
	     CAN_FIRE_RL_rl_upd_minstret_incr ;

  // rule RL_rl_upd_ctr_inhib_csrrx
  assign CAN_FIRE_RL_rl_upd_ctr_inhib_csrrx =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1082 ;
  assign WILL_FIRE_RL_rl_upd_ctr_inhib_csrrx =
	     CAN_FIRE_RL_rl_upd_ctr_inhib_csrrx ;

  // inputs to muxes for submodule ports
  assign MUX_csr_mstatus_rg_mstatus$write_1__SEL_5 =
	     EN_mav_csr_write &&
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     mav_csr_write_csr_addr_ULT_0x323_62_OR_NOT_mav_ETC___d785 ;
  assign MUX_rg_fflags$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d776 ;
  assign MUX_rg_frm$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d835 ;
  assign MUX_rg_mcause$write_1__SEL_2 =
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h30923 == 2'b11) ;
  assign MUX_rg_mcause$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1067 ;
  assign MUX_rg_mcounteren$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1017 ;
  assign MUX_rg_medeleg$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d957 ;
  assign MUX_rg_mepcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd31 ;
  assign MUX_rg_mepcc$write_1__SEL_4 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1024 ;
  assign MUX_rg_mideleg$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d967 ;
  assign MUX_rg_mtcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd28 &&
	     x__h24440 == 2'd0 ;
  assign MUX_rg_mtcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d974 ;
  assign MUX_rg_satp$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d954 ;
  assign MUX_rg_scause$write_1__SEL_2 =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h30923 == 2'b01 ;
  assign MUX_rg_scause$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d943 ;
  assign MUX_rg_sepcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd15 ;
  assign MUX_rg_sepcc$write_1__SEL_4 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d898 ;
  assign MUX_rg_stcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd12 &&
	     x__h24440 == 2'd0 ;
  assign MUX_rg_stcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d844 ;
  assign MUX_rg_stval$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d948 ;
  assign MUX_rg_tdata1$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1091 ;
  assign MUX_rw_minstret$wset_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1079 ;
  assign MUX_csr_mstatus_rg_mstatus$write_1__VAL_2 =
	     { sd__h35759, 40'd5120, fixed_up_val_23__h35760 } ;
  assign MUX_csr_mstatus_rg_mstatus$write_1__VAL_4 =
	     { sd__h28912, 40'd5120, fixed_up_val_23__h28913 } ;
  always@(mav_csr_write_csr_addr or
	  mav_csr_write_word_BITS_14_TO_13_99_EQ_0x3_00__ETC___d830 or
	  wordxl1__h13910)
  begin
    case (mav_csr_write_csr_addr)
      12'h001, 12'h002, 12'h003:
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_5 = wordxl1__h13910;
      default: MUX_csr_mstatus_rg_mstatus$write_1__VAL_5 =
		   mav_csr_write_word_BITS_14_TO_13_99_EQ_0x3_00__ETC___d830;
    endcase
  end
  assign MUX_rg_fflags$write_1__VAL_3 =
	     rg_fflags | ma_update_fcsr_fflags_flags ;
  assign MUX_rg_frm$write_1__VAL_1 =
	     (mav_csr_write_csr_addr == 12'h002) ?
	       mav_csr_write_word[2:0] :
	       mav_csr_write_word[7:5] ;
  assign MUX_rg_mcause$write_1__VAL_2 =
	     { !csr_trap_actions_nmi && csr_trap_actions_interrupt,
	       exc_code__h33277 } ;
  assign MUX_rg_mcause$write_1__VAL_3 =
	     { mav_csr_write_word[63], mav_csr_write_word[5:0] } ;
  assign MUX_rg_medeleg$write_1__VAL_1 =
	     { mav_csr_write_word[28:26],
	       10'd0,
	       mav_csr_write_word[15],
	       1'd0,
	       mav_csr_write_word[13:12],
	       2'd0,
	       mav_csr_write_word[9:0] } ;
  assign MUX_rg_mepcc$write_1__VAL_2 =
	     { SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1346 &&
	       mav_scr_write_cap[150],
	       cap_unpacked_capFat_address__h24204,
	       cap_unpacked_capFat_addrBits__h24205,
	       mav_scr_write_cap[71:0] } ;
  assign MUX_rg_mepcc$write_1__VAL_4 =
	     { (highOffsetBits__h19502 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_46_THEN_NOT_mav_c_ETC___d1038 ||
		rg_mepcc[33:28] >= 6'd50) &&
	       rg_mepcc[52:35] == 18'd262143 &&
	       rg_mepcc[150],
	       x_address__h20221,
	       x_addrBits__h20222,
	       rg_mepcc[71:0] } ;
  assign MUX_rg_minstret$write_1__VAL_1 =
	     MUX_rw_minstret$wset_1__SEL_1 ? mav_csr_write_word : 64'd0 ;
  assign MUX_rg_minstret$write_1__VAL_2 = rg_minstret + 64'd1 ;
  assign MUX_rg_mtcc$write_1__VAL_2 =
	     { SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1312 &&
	       mav_scr_write_cap[150],
	       cap_unpacked_capFat_address__h25293,
	       cap_unpacked_capFat_addrBits__h25294,
	       mav_scr_write_cap[71:0] } ;
  assign MUX_rg_mtcc$write_1__VAL_3 =
	     { (highOffsetBits__h18452 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_46_THEN_NOT_mav_c_ETC___d988 ||
		rg_mtcc[33:28] >= 6'd50) &&
	       rg_mtcc[52:35] == 18'd262143 &&
	       rg_mtcc[150],
	       x_address__h19187,
	       x_addrBits__h19188,
	       rg_mtcc[71:0] } ;
  assign MUX_rg_mtval$write_1__VAL_1 =
	     (csr_trap_actions_exc_code == 6'd28) ?
	       { 53'd0,
		 csr_trap_actions_cheri_exc_reg,
		 csr_trap_actions_cheri_exc_code } :
	       csr_trap_actions_xtval ;
  assign MUX_rg_sepcc$write_1__VAL_4 =
	     { (highOffsetBits__h16133 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_46_THEN_NOT_mav_c_ETC___d914 ||
		rg_sepcc[33:28] >= 6'd50) &&
	       rg_sepcc[52:35] == 18'd262143 &&
	       rg_sepcc[150],
	       x_address__h16852,
	       x_addrBits__h16853,
	       rg_sepcc[71:0] } ;
  assign MUX_rg_stcc$write_1__VAL_3 =
	     { (highOffsetBits__h15149 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_46_THEN_NOT_mav_c_ETC___d866 ||
		rg_stcc[33:28] >= 6'd50) &&
	       rg_stcc[52:35] == 18'd262143 &&
	       rg_stcc[150],
	       x_address__h15890,
	       x_addrBits__h15891,
	       rg_stcc[71:0] } ;

  // inlined wires
  assign rw_mcycle$whas =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1076 ;
  assign w_ctr_inhib_ir_cy$wget =
	     { mav_csr_write_word[2], mav_csr_write_word[0] } ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register csr_mstatus_rg_mstatus
  always@(WILL_FIRE_RL_rl_reset_start or
	  EN_csr_ret_actions or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_2 or
	  EN_csr_trap_actions or
	  v__h30928 or
	  EN_ma_update_mstatus_fs or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_4 or
	  MUX_csr_mstatus_rg_mstatus$write_1__SEL_5 or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_5)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start:
	csr_mstatus_rg_mstatus$D_IN = 64'h0000000A00002000;
    EN_csr_ret_actions:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_2;
    EN_csr_trap_actions: csr_mstatus_rg_mstatus$D_IN = v__h30928;
    EN_ma_update_mstatus_fs:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_4;
    MUX_csr_mstatus_rg_mstatus$write_1__SEL_5:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_5;
    default: csr_mstatus_rg_mstatus$D_IN =
		 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign csr_mstatus_rg_mstatus$EN =
	     EN_mav_csr_write &&
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     mav_csr_write_csr_addr_ULT_0x323_62_OR_NOT_mav_ETC___d785 ||
	     EN_csr_trap_actions ||
	     EN_ma_update_mstatus_fs ||
	     EN_csr_ret_actions ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_ctr_inhib_ir_cy
  assign rg_ctr_inhib_ir_cy$D_IN = w_ctr_inhib_ir_cy$wget ;
  assign rg_ctr_inhib_ir_cy$EN = CAN_FIRE_RL_rl_upd_ctr_inhib_csrrx ;

  // register rg_dcsr
  assign rg_dcsr$D_IN = 32'h0 ;
  assign rg_dcsr$EN = 1'b0 ;

  // register rg_dpcc
  assign rg_dpcc$D_IN = 161'h0 ;
  assign rg_dpcc$EN = 1'b0 ;

  // register rg_dscratch0
  assign rg_dscratch0$D_IN = 64'h0 ;
  assign rg_dscratch0$EN = 1'b0 ;

  // register rg_dscratch1
  assign rg_dscratch1$D_IN = 64'h0 ;
  assign rg_dscratch1$EN = 1'b0 ;

  // register rg_fflags
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_fflags$write_1__SEL_2 or
	  mav_csr_write_word or
	  EN_ma_update_fcsr_fflags or MUX_rg_fflags$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_fflags$D_IN = 5'd0;
    MUX_rg_fflags$write_1__SEL_2: rg_fflags$D_IN = mav_csr_write_word[4:0];
    EN_ma_update_fcsr_fflags: rg_fflags$D_IN = MUX_rg_fflags$write_1__VAL_3;
    default: rg_fflags$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign rg_fflags$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d776 ||
	     EN_ma_update_fcsr_fflags ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_frm
  assign rg_frm$D_IN =
	     MUX_rg_frm$write_1__SEL_1 ? MUX_rg_frm$write_1__VAL_1 : 3'd0 ;
  assign rg_frm$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d835 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_mcause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  MUX_rg_mcause$write_1__SEL_3 or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mcause$D_IN = 7'd0;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    MUX_rg_mcause$write_1__SEL_3:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_mcause$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign rg_mcause$EN =
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h30923 == 2'b11) ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1067 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mccsr
  assign rg_mccsr$D_IN =
	     { csr_trap_actions_cheri_exc_reg,
	       csr_trap_actions_cheri_exc_code } ;
  assign rg_mccsr$EN =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h30923 == 2'b11 &&
	     csr_trap_actions_exc_code == 6'd28 ;

  // register rg_mcounteren
  assign rg_mcounteren$D_IN =
	     MUX_rg_mcounteren$write_1__SEL_1 ?
	       mav_csr_write_word[31:0] :
	       32'd0 ;
  assign rg_mcounteren$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1017 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcycle
  assign rg_mcycle$D_IN = rw_mcycle$whas ? mav_csr_write_word : x__h5468 ;
  assign rg_mcycle$EN = rw_mcycle$whas || !rg_ctr_inhib_ir_cy[0] ;

  // register rg_medeleg
  assign rg_medeleg$D_IN =
	     MUX_rg_medeleg$write_1__SEL_1 ?
	       MUX_rg_medeleg$write_1__VAL_1 :
	       29'd0 ;
  assign rg_medeleg$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d957 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mepcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mepcc_reset_value or
	  MUX_rg_mepcc$write_1__SEL_2 or
	  MUX_rg_mepcc$write_1__VAL_2 or
	  MUX_rg_mcause$write_1__SEL_2 or
	  csr_trap_actions_pcc or
	  MUX_rg_mepcc$write_1__SEL_4 or MUX_rg_mepcc$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mepcc$D_IN = soc_map$m_mepcc_reset_value;
    MUX_rg_mepcc$write_1__SEL_2: rg_mepcc$D_IN = MUX_rg_mepcc$write_1__VAL_2;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mepcc$D_IN = csr_trap_actions_pcc[160:10];
    MUX_rg_mepcc$write_1__SEL_4: rg_mepcc$D_IN = MUX_rg_mepcc$write_1__VAL_4;
    default: rg_mepcc$D_IN =
		 151'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_mepcc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd31 ||
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h30923 == 2'b11) ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1024 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mideleg
  assign rg_mideleg$D_IN =
	     MUX_rg_mideleg$write_1__SEL_1 ?
	       mav_csr_write_word[11:0] :
	       12'd0 ;
  assign rg_mideleg$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d967 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_minstret
  assign rg_minstret$D_IN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ?
	       MUX_rg_minstret$write_1__VAL_1 :
	       MUX_rg_minstret$write_1__VAL_2 ;
  assign rg_minstret$EN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ||
	     WILL_FIRE_RL_rl_upd_minstret_incr ;

  // register rg_mscratch
  assign rg_mscratch$D_IN = mav_csr_write_word ;
  assign rg_mscratch$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1021 ;

  // register rg_mscratchc
  assign rg_mscratchc$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       151'h0000000000000000000000001FFFFF44000000 :
	       mav_scr_write_cap ;
  assign rg_mscratchc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd30 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mtcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mtcc_reset_value or
	  MUX_rg_mtcc$write_1__SEL_2 or
	  MUX_rg_mtcc$write_1__VAL_2 or
	  MUX_rg_mtcc$write_1__SEL_3 or MUX_rg_mtcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mtcc$D_IN = soc_map$m_mtcc_reset_value;
    MUX_rg_mtcc$write_1__SEL_2: rg_mtcc$D_IN = MUX_rg_mtcc$write_1__VAL_2;
    MUX_rg_mtcc$write_1__SEL_3: rg_mtcc$D_IN = MUX_rg_mtcc$write_1__VAL_3;
    default: rg_mtcc$D_IN =
		 151'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_mtcc$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d974 ||
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd28 &&
	     x__h24440 == 2'd0 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mtdc
  assign rg_mtdc$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       151'h0000000000000000000000001FFFFF44000000 :
	       mav_scr_write_cap ;
  assign rg_mtdc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd29 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mtime
  assign rg_mtime$D_IN = rg_mtime + 64'd1 ;
  assign rg_mtime$EN = 1'd1 ;

  // register rg_mtval
  assign rg_mtval$D_IN =
	     MUX_rg_mcause$write_1__SEL_2 ?
	       MUX_rg_mtval$write_1__VAL_1 :
	       mav_csr_write_word ;
  assign rg_mtval$EN =
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h30923 == 2'b11) ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1070 ;

  // register rg_nmi
  assign rg_nmi$D_IN = !WILL_FIRE_RL_rl_reset_start && nmi_req_set_not_clear ;
  assign rg_nmi$EN = EN_nmi_req || WILL_FIRE_RL_rl_reset_start ;

  // register rg_nmi_vector
  assign rg_nmi_vector$D_IN = soc_map$m_nmivec_reset_value ;
  assign rg_nmi_vector$EN = WILL_FIRE_RL_rl_reset_start ;

  // register rg_satp
  assign rg_satp$D_IN =
	     MUX_rg_satp$write_1__SEL_1 ? mav_csr_write_word : 64'd0 ;
  assign rg_satp$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d954 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_scause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_scause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  MUX_rg_scause$write_1__SEL_3 or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_scause$D_IN = 7'd0;
    MUX_rg_scause$write_1__SEL_2:
	rg_scause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    MUX_rg_scause$write_1__SEL_3:
	rg_scause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_scause$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign rg_scause$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d943 ||
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h30923 == 2'b01 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_sccsr
  assign rg_sccsr$D_IN =
	     { csr_trap_actions_cheri_exc_reg,
	       csr_trap_actions_cheri_exc_code } ;
  assign rg_sccsr$EN =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h30923 == 2'b01 &&
	     csr_trap_actions_exc_code == 6'd28 ;

  // register rg_sepcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mepcc_reset_value or
	  MUX_rg_sepcc$write_1__SEL_2 or
	  MUX_rg_mepcc$write_1__VAL_2 or
	  MUX_rg_scause$write_1__SEL_2 or
	  csr_trap_actions_pcc or
	  MUX_rg_sepcc$write_1__SEL_4 or MUX_rg_sepcc$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_sepcc$D_IN = soc_map$m_mepcc_reset_value;
    MUX_rg_sepcc$write_1__SEL_2: rg_sepcc$D_IN = MUX_rg_mepcc$write_1__VAL_2;
    MUX_rg_scause$write_1__SEL_2:
	rg_sepcc$D_IN = csr_trap_actions_pcc[160:10];
    MUX_rg_sepcc$write_1__SEL_4: rg_sepcc$D_IN = MUX_rg_sepcc$write_1__VAL_4;
    default: rg_sepcc$D_IN =
		 151'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_sepcc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd15 ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d898 ||
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h30923 == 2'b01 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_sscratch
  assign rg_sscratch$D_IN = mav_csr_write_word ;
  assign rg_sscratch$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d895 ;

  // register rg_sscratchc
  assign rg_sscratchc$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       151'h0000000000000000000000001FFFFF44000000 :
	       mav_scr_write_cap ;
  assign rg_sscratchc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd14 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_state
  assign rg_state$D_IN = !EN_server_reset_request_put ;
  assign rg_state$EN =
	     EN_server_reset_request_put || WILL_FIRE_RL_rl_reset_start ;

  // register rg_stcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mtcc_reset_value or
	  MUX_rg_stcc$write_1__SEL_2 or
	  MUX_rg_mtcc$write_1__VAL_2 or
	  MUX_rg_stcc$write_1__SEL_3 or MUX_rg_stcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_stcc$D_IN = soc_map$m_mtcc_reset_value;
    MUX_rg_stcc$write_1__SEL_2: rg_stcc$D_IN = MUX_rg_mtcc$write_1__VAL_2;
    MUX_rg_stcc$write_1__SEL_3: rg_stcc$D_IN = MUX_rg_stcc$write_1__VAL_3;
    default: rg_stcc$D_IN =
		 151'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_stcc$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d844 ||
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd12 &&
	     x__h24440 == 2'd0 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_stdc
  assign rg_stdc$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       151'h0000000000000000000000001FFFFF44000000 :
	       mav_scr_write_cap ;
  assign rg_stdc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd13 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_stval
  assign rg_stval$D_IN =
	     MUX_rg_stval$write_1__SEL_1 ?
	       mav_csr_write_word :
	       MUX_rg_mtval$write_1__VAL_1 ;
  assign rg_stval$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d948 ||
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h30923 == 2'b01 ;

  // register rg_tdata1
  assign rg_tdata1$D_IN =
	     MUX_rg_tdata1$write_1__SEL_1 ? new_csr_value__h21162 : 64'd0 ;
  assign rg_tdata1$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1091 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_tdata2
  assign rg_tdata2$D_IN = mav_csr_write_word ;
  assign rg_tdata2$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1096 ;

  // register rg_tdata3
  assign rg_tdata3$D_IN = mav_csr_write_word ;
  assign rg_tdata3$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1099 ;

  // register rg_tselect
  assign rg_tselect$D_IN = 64'd0 ;
  assign rg_tselect$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1088 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // submodule csr_mie
  assign csr_mie$mav_sie_write_misa = 28'd135532845 ;
  assign csr_mie$mav_sie_write_wordxl = mav_csr_write_word ;
  assign csr_mie$mav_write_misa = 28'd135532845 ;
  assign csr_mie$mav_write_wordxl = mav_csr_write_word ;
  assign csr_mie$EN_reset = WILL_FIRE_RL_rl_reset_start ;
  assign csr_mie$EN_mav_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d971 ;
  assign csr_mie$EN_mav_sie_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d841 ;

  // submodule csr_mip
  assign csr_mip$m_external_interrupt_req_req =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_mip$mav_sip_write_misa = 28'd135532845 ;
  assign csr_mip$mav_sip_write_wordxl = mav_csr_write_word ;
  assign csr_mip$mav_write_misa = 28'd135532845 ;
  assign csr_mip$mav_write_wordxl = mav_csr_write_word ;
  assign csr_mip$s_external_interrupt_req_req =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_mip$software_interrupt_req_req =
	     software_interrupt_req_set_not_clear ;
  assign csr_mip$timer_interrupt_req_req = timer_interrupt_req_set_not_clear ;
  assign csr_mip$EN_reset = WILL_FIRE_RL_rl_reset_start ;
  assign csr_mip$EN_mav_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1073 ;
  assign csr_mip$EN_mav_sip_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d951 ;
  assign csr_mip$EN_m_external_interrupt_req = EN_m_external_interrupt_req ;
  assign csr_mip$EN_s_external_interrupt_req = EN_s_external_interrupt_req ;
  assign csr_mip$EN_software_interrupt_req = EN_software_interrupt_req ;
  assign csr_mip$EN_timer_interrupt_req = EN_timer_interrupt_req ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = EN_server_reset_request_put ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule perf_counters
  assign perf_counters$send_performance_events_evts =
	     send_performance_events_evts ;
  assign perf_counters$write_counter_idx = x__h12225[4:0] ;
  assign perf_counters$write_counter_val = mav_csr_write_word ;
  assign perf_counters$write_ctr_inhibit_val = mav_csr_write_word[31:3] ;
  assign perf_counters$write_ctr_sel_idx = x__h12294[4:0] ;
  assign perf_counters$write_ctr_sel_val = mav_csr_write_word[6:0] ;
  assign perf_counters$EN_write_counter =
	     EN_mav_csr_write && !mav_csr_write_csr_addr_ULT_0xB03___d754 &&
	     mav_csr_write_csr_addr_ULE_0xB1F___d756 ;
  assign perf_counters$EN_write_ctr_sel =
	     EN_mav_csr_write &&
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     !mav_csr_write_csr_addr_ULT_0x323___d762 &&
	     mav_csr_write_csr_addr_ULE_0x33F___d764 ;
  assign perf_counters$EN_write_ctr_inhibit =
	     CAN_FIRE_RL_rl_upd_ctr_inhib_csrrx ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_IF_csr_ret_actions_from_priv_EQ_0b11_067_TH_ETC___d2121 =
	     { a_capFat_otype__h36587,
	       (csr_ret_actions_from_priv == 2'b11) ?
		 rg_mepcc[34:0] :
		 rg_sepcc[34:0] } ;
  assign IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d2033 =
	     _theResult_____2__h32467[63] ?
	       x__h34713[13:0] >= toBounds__h33460 :
	       x__h34713[13:0] <= toBoundsM1__h33461 ;
  assign IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821 =
	     (new_priv__h30923 == 2'b11) ?
	       { csr_mstatus_rg_mstatus_11_AND_INV_1_SL_1_CONCA_ETC___d1813[63:13],
		 csr_trap_actions_from_priv,
		 csr_mstatus_rg_mstatus_11_AND_INV_1_SL_1_CONCA_ETC___d1813[10:0] } :
	       { csr_mstatus_rg_mstatus_11_AND_INV_1_SL_1_CONCA_ETC___d1813[63:9],
		 csr_trap_actions_from_priv[0],
		 csr_mstatus_rg_mstatus_11_AND_INV_1_SL_1_CONCA_ETC___d1813[7:0] } ;
  assign IF_IF_mav_scr_write_cap_BITS_33_TO_28_257_EQ_0_ETC___d1476 =
	     { x1_avValue_reserved__h25521,
	       x1_avValue_otype__h25522,
	       x__h24440 != 2'd0 || mav_scr_write_cap[34],
	       (x__h24440 == 2'd0) ?
		 mav_scr_write_cap[33:0] :
		 34'h344000000 } ;
  assign IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2651 =
	     NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2493 ?
	       { csr_mip_mv_read__56_BIT_3_494_AND_csr_mie_mv_r_ETC___d2646,
		 6'd3 } :
	       { interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2475 ||
		 interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2477 &&
		 IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608,
		 6'd11 } ;
  assign IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2652 =
	     (NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2493 &&
	      NOT_csr_mip_mv_read__56_BIT_3_494_495_OR_NOT_c_ETC___d2507) ?
	       { csr_mip_mv_read__56_BIT_7_509_AND_csr_mie_mv_r_ETC___d2641,
		 6'd7 } :
	       IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2651 ;
  assign IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2653 =
	     (NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2493 &&
	      NOT_csr_mip_mv_read__56_BIT_3_494_495_OR_NOT_c_ETC___d2507 &&
	      NOT_csr_mip_mv_read__56_BIT_7_509_510_OR_NOT_c_ETC___d2522) ?
	       { csr_mip_mv_read__56_BIT_9_524_AND_csr_mie_mv_r_ETC___d2636,
		 6'd9 } :
	       IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2652 ;
  assign IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2655 =
	     (NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2538 &&
	      NOT_csr_mip_mv_read__56_BIT_1_539_540_OR_NOT_c_ETC___d2552) ?
	       { csr_mip_mv_read__56_BIT_5_554_AND_csr_mie_mv_r_ETC___d2626,
		 6'd5 } :
	       (NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2538 ?
		  { csr_mip_mv_read__56_BIT_1_539_AND_csr_mie_mv_r_ETC___d2631,
		    6'd1 } :
		  IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2653) ;
  assign IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2656 =
	     (NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2538 &&
	      NOT_csr_mip_mv_read__56_BIT_1_539_540_OR_NOT_c_ETC___d2552 &&
	      NOT_csr_mip_mv_read__56_BIT_5_554_555_OR_NOT_c_ETC___d2567) ?
	       { csr_mip_mv_read__56_BIT_8_569_AND_csr_mie_mv_r_ETC___d2621,
		 6'd8 } :
	       IF_NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_N_ETC___d2655 ;
  assign IF_NOT_mav_read_csr_csr_addr_ULT_0x323_03_04_A_ETC___d751 =
	     (mav_read_csr_csr_addr >= 12'h323 &&
	      mav_read_csr_csr_addr <= 12'h33F) ?
	       ((idx__h11656 < 12'd29) ? { 57'd0, x__h12030 } : 64'd0) :
	       IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 ;
  assign IF_NOT_mav_read_csr_csr_addr_ULT_0xB03_99_00_A_ETC___d752 =
	     (mav_read_csr_csr_addr >= 12'hB03 &&
	      mav_read_csr_csr_addr <= 12'hB1F) ?
	       ((idx__h11633 < 12'd29) ?
		  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 :
		  64'd0) :
	       IF_NOT_mav_read_csr_csr_addr_ULT_0x323_03_04_A_ETC___d751 ;
  assign IF_NOT_mav_read_csr_csr_addr_ULT_0xC03_95_96_A_ETC___d753 =
	     (mav_read_csr_csr_addr >= 12'hC03 &&
	      mav_read_csr_csr_addr <= 12'hC1F) ?
	       ((idx__h11610 < 12'd29) ?
		  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 :
		  64'd0) :
	       IF_NOT_mav_read_csr_csr_addr_ULT_0xB03_99_00_A_ETC___d752 ;
  assign IF_NOT_read_csr_csr_addr_ULT_0x323_1_2_AND_rea_ETC___d407 =
	     (read_csr_csr_addr >= 12'h323 && read_csr_csr_addr <= 12'h33F) ?
	       ((idx__h5872 < 12'd29) ? { 57'd0, x__h7397 } : 64'd0) :
	       IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 ;
  assign IF_NOT_read_csr_csr_addr_ULT_0xB03_7_8_AND_rea_ETC___d408 =
	     (read_csr_csr_addr >= 12'hB03 && read_csr_csr_addr <= 12'hB1F) ?
	       ((idx__h5849 < 12'd29) ?
		  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 :
		  64'd0) :
	       IF_NOT_read_csr_csr_addr_ULT_0x323_1_2_AND_rea_ETC___d407 ;
  assign IF_NOT_read_csr_csr_addr_ULT_0xC03_3_4_AND_rea_ETC___d409 =
	     (read_csr_csr_addr >= 12'hC03 && read_csr_csr_addr <= 12'hC1F) ?
	       ((idx__h5826 < 12'd29) ?
		  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 :
		  64'd0) :
	       IF_NOT_read_csr_csr_addr_ULT_0xB03_7_8_AND_rea_ETC___d408 ;
  assign IF_NOT_read_csr_port2_csr_addr_ULT_0x323_18_19_ETC___d566 =
	     (read_csr_port2_csr_addr >= 12'h323 &&
	      read_csr_port2_csr_addr <= 12'h33F) ?
	       ((idx__h9793 < 12'd29) ? { 57'd0, x__h10167 } : 64'd0) :
	       IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 ;
  assign IF_NOT_read_csr_port2_csr_addr_ULT_0xB03_14_15_ETC___d567 =
	     (read_csr_port2_csr_addr >= 12'hB03 &&
	      read_csr_port2_csr_addr <= 12'hB1F) ?
	       ((idx__h9770 < 12'd29) ?
		  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 :
		  64'd0) :
	       IF_NOT_read_csr_port2_csr_addr_ULT_0x323_18_19_ETC___d566 ;
  assign IF_NOT_read_csr_port2_csr_addr_ULT_0xC03_10_11_ETC___d568 =
	     (read_csr_port2_csr_addr >= 12'hC03 &&
	      read_csr_port2_csr_addr <= 12'hC1F) ?
	       ((idx__h9747 < 12'd29) ?
		  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 :
		  64'd0) :
	       IF_NOT_read_csr_port2_csr_addr_ULT_0xB03_14_15_ETC___d567 ;
  assign IF_SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85__ETC___d1305 =
	     SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1284[63] ?
	       x__h25153[13:0] >= toBounds__h25661 :
	       x__h25153[13:0] <= toBoundsM1__h25662 ;
  assign IF_SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85__ETC___d1341 =
	     SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1284[63] ?
	       x__h24039[13:0] >= toBounds__h25661 :
	       x__h24039[13:0] <= toBoundsM1__h25662 ;
  assign IF_csr_mstatus_rg_mstatus_11_BITS_12_TO_11_90__ETC___d792 =
	     (csr_mstatus_rg_mstatus[12:11] == 2'b10) ?
	       2'b01 :
	       csr_mstatus_rg_mstatus[12:11] ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2087 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       _theResult___fst__h35853 :
	       _theResult___fst__h36054 ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2123 =
	     { a_capFat_addrBits__h36583,
	       (csr_ret_actions_from_priv == 2'b11) ?
		 rg_mepcc[71:56] :
		 rg_sepcc[71:56],
	       a_capFat_flags__h36585,
	       a_capFat_reserved__h36586,
	       IF_IF_csr_ret_actions_from_priv_EQ_0b11_067_TH_ETC___d2121 } ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2124 =
	     { (csr_ret_actions_from_priv == 2'b11) ?
		 rg_mepcc[150] :
		 rg_sepcc[150],
	       a_capFat_address__h36582,
	       IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2123 } ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2143 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       { repBound__h9540,
		 rg_mepcc_27_BITS_27_TO_25_125_ULT_rg_mepcc_27__ETC___d2126,
		 rg_mepcc_27_BITS_13_TO_11_30_ULT_rg_mepcc_27_B_ETC___d332,
		 rg_mepcc_27_BITS_85_TO_83_33_ULT_rg_mepcc_27_B_ETC___d334,
		 IF_rg_mepcc_27_BITS_27_TO_25_125_ULT_rg_mepcc__ETC___d2131 } :
	       { repBound__h8984,
		 rg_sepcc_55_BITS_27_TO_25_134_ULT_rg_sepcc_55__ETC___d2135,
		 rg_sepcc_55_BITS_13_TO_11_58_ULT_rg_sepcc_55_B_ETC___d260,
		 rg_sepcc_55_BITS_85_TO_83_61_ULT_rg_sepcc_55_B_ETC___d262,
		 IF_rg_sepcc_55_BITS_27_TO_25_134_ULT_rg_sepcc__ETC___d2140 } ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2149 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       { csr_mstatus_rg_mstatus_11_AND_INV_1_SL_0_CONCA_ETC___d2080[12:11],
		 _theResult___fst__h35853 } :
	       { to_y__h36053, _theResult___fst__h36054 } ;
  assign IF_csr_trap_actions_interrupt_AND_NOT_csr_trap_ETC___d2041 =
	     (highOffsetBits__h33451 == 50'd0 &&
	      IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d2033 ||
	      IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2016 >=
	      6'd50) &&
	     ((new_priv__h30923 == 2'b11) ? rg_mtcc[150] : rg_stcc[150]) ;
  assign IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2016 =
	     (new_priv__h30923 == 2'b11) ? rg_mtcc[33:28] : rg_stcc[33:28] ;
  assign IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2064 =
	     { result_d_address__h34800,
	       result_d_addrBits__h34801,
	       (new_priv__h30923 == 2'b11) ? rg_mtcc[71:0] : rg_stcc[71:0] } ;
  assign IF_mav_csr_write_word_BIT_63_46_THEN_NOT_mav_c_ETC___d1038 =
	     mav_csr_write_word[63] ?
	       x__h20082[13:0] >= toBounds__h19511 :
	       x__h20082[13:0] <= toBoundsM1__h19512 ;
  assign IF_mav_csr_write_word_BIT_63_46_THEN_NOT_mav_c_ETC___d866 =
	     mav_csr_write_word[63] ?
	       x__h15745[13:0] >= toBounds__h15158 :
	       x__h15745[13:0] <= toBoundsM1__h15159 ;
  assign IF_mav_csr_write_word_BIT_63_46_THEN_NOT_mav_c_ETC___d914 =
	     mav_csr_write_word[63] ?
	       x__h16713[13:0] >= toBounds__h16142 :
	       x__h16713[13:0] <= toBoundsM1__h16143 ;
  assign IF_mav_csr_write_word_BIT_63_46_THEN_NOT_mav_c_ETC___d988 =
	     mav_csr_write_word[63] ?
	       x__h19048[13:0] >= toBounds__h18461 :
	       x__h19048[13:0] <= toBoundsM1__h18462 ;
  assign IF_mav_scr_write_cap_BITS_33_TO_28_257_ULT_51__ETC___d1416 =
	     (mav_scr_write_cap[33:28] < 6'd51 &&
	      _0b0_CONCAT_mav_scr_write_cap_BITS_149_TO_100_3_ETC___d1408 >
	      2'd1) ?
	       result__h27632 :
	       ret__h27046 ;
  assign IF_rg_mepcc_27_BITS_13_TO_11_30_ULT_rg_mepcc_2_ETC___d339 =
	     (rg_mepcc_27_BITS_13_TO_11_30_ULT_rg_mepcc_27_B_ETC___d332 ==
	      rg_mepcc_27_BITS_85_TO_83_33_ULT_rg_mepcc_27_B_ETC___d334) ?
	       2'd0 :
	       ((rg_mepcc_27_BITS_13_TO_11_30_ULT_rg_mepcc_27_B_ETC___d332 &&
		 !rg_mepcc_27_BITS_85_TO_83_33_ULT_rg_mepcc_27_B_ETC___d334) ?
		  2'd1 :
		  2'd3) ;
  assign IF_rg_mepcc_27_BITS_27_TO_25_125_ULT_rg_mepcc__ETC___d2131 =
	     { (rg_mepcc_27_BITS_27_TO_25_125_ULT_rg_mepcc_27__ETC___d2126 ==
		rg_mepcc_27_BITS_85_TO_83_33_ULT_rg_mepcc_27_B_ETC___d334) ?
		 2'd0 :
		 ((rg_mepcc_27_BITS_27_TO_25_125_ULT_rg_mepcc_27__ETC___d2126 &&
		   !rg_mepcc_27_BITS_85_TO_83_33_ULT_rg_mepcc_27_B_ETC___d334) ?
		    2'd1 :
		    2'd3),
	       IF_rg_mepcc_27_BITS_13_TO_11_30_ULT_rg_mepcc_2_ETC___d339 } ;
  assign IF_rg_sepcc_55_BITS_13_TO_11_58_ULT_rg_sepcc_5_ETC___d267 =
	     (rg_sepcc_55_BITS_13_TO_11_58_ULT_rg_sepcc_55_B_ETC___d260 ==
	      rg_sepcc_55_BITS_85_TO_83_61_ULT_rg_sepcc_55_B_ETC___d262) ?
	       2'd0 :
	       ((rg_sepcc_55_BITS_13_TO_11_58_ULT_rg_sepcc_55_B_ETC___d260 &&
		 !rg_sepcc_55_BITS_85_TO_83_61_ULT_rg_sepcc_55_B_ETC___d262) ?
		  2'd1 :
		  2'd3) ;
  assign IF_rg_sepcc_55_BITS_27_TO_25_134_ULT_rg_sepcc__ETC___d2140 =
	     { (rg_sepcc_55_BITS_27_TO_25_134_ULT_rg_sepcc_55__ETC___d2135 ==
		rg_sepcc_55_BITS_85_TO_83_61_ULT_rg_sepcc_55_B_ETC___d262) ?
		 2'd0 :
		 ((rg_sepcc_55_BITS_27_TO_25_134_ULT_rg_sepcc_55__ETC___d2135 &&
		   !rg_sepcc_55_BITS_85_TO_83_61_ULT_rg_sepcc_55_B_ETC___d262) ?
		    2'd1 :
		    2'd3),
	       IF_rg_sepcc_55_BITS_13_TO_11_58_ULT_rg_sepcc_5_ETC___d267 } ;
  assign NOT_access_permitted_1_csr_addr_ULT_0xC03_150__ETC___d2253 =
	     (!access_permitted_1_csr_addr_ULT_0xC03___d2150 &&
	      access_permitted_1_csr_addr_ULE_0xC1F___d2152 ||
	      access_permitted_1_csr_addr >= 12'hB03 &&
	      access_permitted_1_csr_addr <= 12'hB1F ||
	      access_permitted_1_csr_addr >= 12'h323 &&
	      access_permitted_1_csr_addr <= 12'h33F ||
	      access_permitted_1_csr_addr == 12'h001 ||
	      access_permitted_1_csr_addr == 12'h002 ||
	      access_permitted_1_csr_addr == 12'h003 ||
	      access_permitted_1_csr_addr == 12'hC00 ||
	      access_permitted_1_csr_addr == 12'hC01 ||
	      access_permitted_1_csr_addr == 12'hC02 ||
	      access_permitted_1_csr_addr == 12'h100 ||
	      access_permitted_1_csr_addr == 12'h102 ||
	      access_permitted_1_csr_addr == 12'h103 ||
	      access_permitted_1_csr_addr == 12'h104 ||
	      access_permitted_1_csr_addr == 12'h105 ||
	      access_permitted_1_csr_addr == 12'h106 ||
	      access_permitted_1_csr_addr == 12'h140 ||
	      access_permitted_1_csr_addr == 12'h141 ||
	      access_permitted_1_csr_addr == 12'h142 ||
	      access_permitted_1_csr_addr == 12'h143 ||
	      access_permitted_1_csr_addr == 12'h144 ||
	      access_permitted_1_csr_addr == 12'h180 ||
	      access_permitted_1_csr_addr == 12'h302 ||
	      access_permitted_1_csr_addr == 12'h303 ||
	      access_permitted_1_csr_addr == 12'h9C0 ||
	      access_permitted_1_csr_addr == 12'hF11 ||
	      access_permitted_1_csr_addr == 12'hF12 ||
	      access_permitted_1_csr_addr == 12'hF13 ||
	      access_permitted_1_csr_addr == 12'hF14 ||
	      access_permitted_1_csr_addr == 12'h300 ||
	      access_permitted_1_csr_addr == 12'h301 ||
	      access_permitted_1_csr_addr == 12'h304 ||
	      access_permitted_1_csr_addr == 12'h305 ||
	      access_permitted_1_csr_addr == 12'h306 ||
	      access_permitted_1_csr_addr == 12'h340 ||
	      access_permitted_1_csr_addr == 12'h341 ||
	      access_permitted_1_csr_addr == 12'h342 ||
	      access_permitted_1_csr_addr == 12'h343 ||
	      access_permitted_1_csr_addr == 12'h344 ||
	      access_permitted_1_csr_addr == 12'hBC0 ||
	      access_permitted_1_csr_addr == 12'hB00 ||
	      access_permitted_1_csr_addr == 12'hB02 ||
	      access_permitted_1_csr_addr == 12'h320 ||
	      access_permitted_1_csr_addr == 12'h7A0 ||
	      access_permitted_1_csr_addr == 12'h7A1 ||
	      access_permitted_1_csr_addr == 12'h7A2 ||
	      access_permitted_1_csr_addr == 12'h7A3) &&
	     access_permitted_1_priv >= access_permitted_1_csr_addr[9:8] ;
  assign NOT_access_permitted_2_csr_addr_ULT_0xC03_283__ETC___d2386 =
	     (!access_permitted_2_csr_addr_ULT_0xC03___d2283 &&
	      access_permitted_2_csr_addr_ULE_0xC1F___d2285 ||
	      access_permitted_2_csr_addr >= 12'hB03 &&
	      access_permitted_2_csr_addr <= 12'hB1F ||
	      access_permitted_2_csr_addr >= 12'h323 &&
	      access_permitted_2_csr_addr <= 12'h33F ||
	      access_permitted_2_csr_addr == 12'h001 ||
	      access_permitted_2_csr_addr == 12'h002 ||
	      access_permitted_2_csr_addr == 12'h003 ||
	      access_permitted_2_csr_addr == 12'hC00 ||
	      access_permitted_2_csr_addr == 12'hC01 ||
	      access_permitted_2_csr_addr == 12'hC02 ||
	      access_permitted_2_csr_addr == 12'h100 ||
	      access_permitted_2_csr_addr == 12'h102 ||
	      access_permitted_2_csr_addr == 12'h103 ||
	      access_permitted_2_csr_addr == 12'h104 ||
	      access_permitted_2_csr_addr == 12'h105 ||
	      access_permitted_2_csr_addr == 12'h106 ||
	      access_permitted_2_csr_addr == 12'h140 ||
	      access_permitted_2_csr_addr == 12'h141 ||
	      access_permitted_2_csr_addr == 12'h142 ||
	      access_permitted_2_csr_addr == 12'h143 ||
	      access_permitted_2_csr_addr == 12'h144 ||
	      access_permitted_2_csr_addr == 12'h180 ||
	      access_permitted_2_csr_addr == 12'h302 ||
	      access_permitted_2_csr_addr == 12'h303 ||
	      access_permitted_2_csr_addr == 12'h9C0 ||
	      access_permitted_2_csr_addr == 12'hF11 ||
	      access_permitted_2_csr_addr == 12'hF12 ||
	      access_permitted_2_csr_addr == 12'hF13 ||
	      access_permitted_2_csr_addr == 12'hF14 ||
	      access_permitted_2_csr_addr == 12'h300 ||
	      access_permitted_2_csr_addr == 12'h301 ||
	      access_permitted_2_csr_addr == 12'h304 ||
	      access_permitted_2_csr_addr == 12'h305 ||
	      access_permitted_2_csr_addr == 12'h306 ||
	      access_permitted_2_csr_addr == 12'h340 ||
	      access_permitted_2_csr_addr == 12'h341 ||
	      access_permitted_2_csr_addr == 12'h342 ||
	      access_permitted_2_csr_addr == 12'h343 ||
	      access_permitted_2_csr_addr == 12'h344 ||
	      access_permitted_2_csr_addr == 12'hBC0 ||
	      access_permitted_2_csr_addr == 12'hB00 ||
	      access_permitted_2_csr_addr == 12'hB02 ||
	      access_permitted_2_csr_addr == 12'h320 ||
	      access_permitted_2_csr_addr == 12'h7A0 ||
	      access_permitted_2_csr_addr == 12'h7A1 ||
	      access_permitted_2_csr_addr == 12'h7A2 ||
	      access_permitted_2_csr_addr == 12'h7A3) &&
	     access_permitted_2_priv >= access_permitted_2_csr_addr[9:8] ;
  assign NOT_cfg_verbosity_read__184_ULE_1_185___d1186 =
	     cfg_verbosity > 4'd1 ;
  assign NOT_csr_mip_mv_read__56_BIT_0_584_585_OR_NOT_c_ETC___d2597 =
	     !csr_mip$mv_read[0] || !csr_mie$mv_read[0] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2591 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2593 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2490) ;
  assign NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2493 =
	     !csr_mip$mv_read[11] || !csr_mie$mv_read[11] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2475 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2477 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2490) ;
  assign NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2538 =
	     NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2493 &&
	     NOT_csr_mip_mv_read__56_BIT_3_494_495_OR_NOT_c_ETC___d2507 &&
	     NOT_csr_mip_mv_read__56_BIT_7_509_510_OR_NOT_c_ETC___d2522 &&
	     NOT_csr_mip_mv_read__56_BIT_9_524_525_OR_NOT_c_ETC___d2537 ;
  assign NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2583 =
	     NOT_csr_mip_mv_read__56_BIT_11_468_469_OR_NOT__ETC___d2538 &&
	     NOT_csr_mip_mv_read__56_BIT_1_539_540_OR_NOT_c_ETC___d2552 &&
	     NOT_csr_mip_mv_read__56_BIT_5_554_555_OR_NOT_c_ETC___d2567 &&
	     NOT_csr_mip_mv_read__56_BIT_8_569_570_OR_NOT_c_ETC___d2582 ;
  assign NOT_csr_mip_mv_read__56_BIT_1_539_540_OR_NOT_c_ETC___d2552 =
	     !csr_mip$mv_read[1] || !csr_mie$mv_read[1] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2546 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2548 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2490) ;
  assign NOT_csr_mip_mv_read__56_BIT_3_494_495_OR_NOT_c_ETC___d2507 =
	     !csr_mip$mv_read[3] || !csr_mie$mv_read[3] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2501 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2503 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2490) ;
  assign NOT_csr_mip_mv_read__56_BIT_5_554_555_OR_NOT_c_ETC___d2567 =
	     !csr_mip$mv_read[5] || !csr_mie$mv_read[5] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2561 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2563 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2490) ;
  assign NOT_csr_mip_mv_read__56_BIT_7_509_510_OR_NOT_c_ETC___d2522 =
	     !csr_mip$mv_read[7] || !csr_mie$mv_read[7] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2516 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2518 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2490) ;
  assign NOT_csr_mip_mv_read__56_BIT_8_569_570_OR_NOT_c_ETC___d2582 =
	     !csr_mip$mv_read[8] || !csr_mie$mv_read[8] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2576 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2578 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2490) ;
  assign NOT_csr_mip_mv_read__56_BIT_9_524_525_OR_NOT_c_ETC___d2537 =
	     !csr_mip$mv_read[9] || !csr_mie$mv_read[9] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2531 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2533 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2490) ;
  assign NOT_csr_trap_actions_nmi_843_AND_csr_trap_acti_ETC___d1957 =
	     !csr_trap_actions_nmi && csr_trap_actions_interrupt &&
	     exc_code__h33277 != 6'd0 &&
	     exc_code__h33277 != 6'd1 &&
	     exc_code__h33277 != 6'd2 &&
	     exc_code__h33277 != 6'd3 &&
	     exc_code__h33277 != 6'd4 &&
	     exc_code__h33277 != 6'd5 &&
	     exc_code__h33277 != 6'd6 &&
	     exc_code__h33277 != 6'd7 &&
	     exc_code__h33277 != 6'd8 &&
	     exc_code__h33277 != 6'd9 &&
	     exc_code__h33277 != 6'd10 &&
	     exc_code__h33277 != 6'd11 ;
  assign NOT_mav_scr_write_cap_BITS_33_TO_28_257_ULT_50_ETC___d1308 =
	     mav_scr_write_cap[33:28] >= 6'd50 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1379 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	     mav_scr_write_cap[34] ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1381 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	     !mav_scr_write_cap[34] ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1422 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	     mav_scr_write_cap_BITS_27_TO_25_389_ULT_mav_sc_ETC___d1390 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1424 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	     !mav_scr_write_cap_BITS_27_TO_25_389_ULT_mav_sc_ETC___d1390 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1425 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	     mav_scr_write_cap_BITS_13_TO_11_265_ULT_mav_sc_ETC___d1267 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1427 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	     !mav_scr_write_cap_BITS_13_TO_11_265_ULT_mav_sc_ETC___d1267 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1428 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	     mav_scr_write_cap_BITS_85_TO_83_268_ULT_mav_sc_ETC___d1269 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1429 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	     !mav_scr_write_cap_BITS_85_TO_83_268_ULT_mav_sc_ETC___d1269 ;
  assign SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1284 =
	     x__h23399 | addrLSB__h27784 ;
  assign SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1312 =
	     (highOffsetBits__h24459 == 50'd0 &&
	      IF_SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85__ETC___d1305 ||
	      NOT_mav_scr_write_cap_BITS_33_TO_28_257_ULT_50_ETC___d1308) &&
	     mav_scr_write_cap[52:35] == 18'd262143 ;
  assign SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1346 =
	     (highOffsetBits__h24459 == 50'd0 &&
	      IF_SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85__ETC___d1341 ||
	      NOT_mav_scr_write_cap_BITS_33_TO_28_257_ULT_50_ETC___d1308) &&
	     (mav_scr_write_cap[52:35] == 18'd262143 ||
	      !SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1284[0]) ;
  assign SEXT__0b0_CONCAT_rg_mepcc_27_BITS_85_TO_72_28__ETC___d350 =
	     x__h9505 | addrLSB__h9494 ;
  assign SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320 =
	     x__h9277 | addrLSB__h9266 ;
  assign SEXT__0b0_CONCAT_rg_sepcc_55_BITS_85_TO_72_56__ETC___d278 =
	     x__h8949 | addrLSB__h8938 ;
  assign SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250 =
	     x__h8744 | addrLSB__h8733 ;
  assign _0b0_CONCAT_mav_scr_write_cap_BITS_149_TO_100_3_ETC___d1408 =
	     ret__h27046[64:63] -
	     { 1'b0,
	       (mav_scr_write_cap[33:28] == 6'd50) ?
		 mav_scr_write_cap[13] :
		 mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x7_ETC__q2[49] } ;
  assign _theResult_____2__h32467 =
	     csr_trap_actions_interrupt_AND_NOT_csr_trap_ac_ETC___d1856 ?
	       exc_pc___1__h32566 :
	       exc_pc__h32465 ;
  assign _theResult____h51743 = rg_mideleg[11] ? 2'b01 : 2'b11 ;
  assign _theResult____h51955 = rg_mideleg[3] ? 2'b01 : 2'b11 ;
  assign _theResult____h52167 = rg_mideleg[7] ? 2'b01 : 2'b11 ;
  assign _theResult____h52379 = rg_mideleg[9] ? 2'b01 : 2'b11 ;
  assign _theResult____h52591 = rg_mideleg[1] ? 2'b01 : 2'b11 ;
  assign _theResult____h52803 = rg_mideleg[5] ? 2'b01 : 2'b11 ;
  assign _theResult____h53015 = rg_mideleg[8] ? 2'b01 : 2'b11 ;
  assign _theResult____h53227 = rg_mideleg[0] ? 2'b01 : 2'b11 ;
  assign _theResult____h53439 = rg_mideleg[4] ? 2'b01 : 2'b11 ;
  assign _theResult___fst__h31070 =
	     (csr_trap_actions_interrupt ?
		deleg_bit___1__h31079 :
		deleg_bit___1__h31094) ?
	       2'b01 :
	       2'b11 ;
  assign _theResult___fst__h35853 =
	     { csr_mstatus_rg_mstatus_11_AND_INV_1_SL_0_CONCA_ETC___d2080[63:13],
	       2'd0,
	       csr_mstatus_rg_mstatus_11_AND_INV_1_SL_0_CONCA_ETC___d2080[10:0] } ;
  assign _theResult___fst__h36054 =
	     { csr_mstatus_rg_mstatus_11_AND_INV_1_SL_0_CONCA_ETC___d2080[63:9],
	       1'd0,
	       csr_mstatus_rg_mstatus_11_AND_INV_1_SL_0_CONCA_ETC___d2080[7:0] } ;
  assign a_capFat_addrBits__h36583 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[85:72] :
	       rg_sepcc[85:72] ;
  assign a_capFat_address__h36582 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[149:86] :
	       rg_sepcc[149:86] ;
  assign a_capFat_flags__h36585 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[55] :
	       rg_sepcc[55] ;
  assign a_capFat_otype__h36587 =
	     (x__h36520 == 18'd262142) ? 18'd262143 : x__h36520 ;
  assign a_capFat_reserved__h36586 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[54:53] :
	       rg_sepcc[54:53] ;
  assign access_permitted_1_csr_addr_ULE_0xC1F___d2152 =
	     access_permitted_1_csr_addr <= 12'hC1F ;
  assign access_permitted_1_csr_addr_ULT_0xC03_150_OR_N_ETC___d2279 =
	     (access_permitted_1_csr_addr_ULT_0xC03___d2150 ||
	      !access_permitted_1_csr_addr_ULE_0xC1F___d2152 ||
	      !access_permitted_1_read_not_write) &&
	     access_permitted_1_csr_addr != 12'h001 &&
	     access_permitted_1_csr_addr != 12'h002 &&
	     access_permitted_1_csr_addr != 12'h003 &&
	     (access_permitted_1_csr_addr != 12'hC00 ||
	      !access_permitted_1_read_not_write) &&
	     (access_permitted_1_csr_addr != 12'hC01 ||
	      !access_permitted_1_read_not_write) ;
  assign access_permitted_1_csr_addr_ULT_0xC03___d2150 =
	     access_permitted_1_csr_addr < 12'hC03 ;
  assign access_permitted_2_csr_addr_ULE_0xC1F___d2285 =
	     access_permitted_2_csr_addr <= 12'hC1F ;
  assign access_permitted_2_csr_addr_ULT_0xC03_283_OR_N_ETC___d2410 =
	     (access_permitted_2_csr_addr_ULT_0xC03___d2283 ||
	      !access_permitted_2_csr_addr_ULE_0xC1F___d2285 ||
	      !access_permitted_2_read_not_write) &&
	     access_permitted_2_csr_addr != 12'h001 &&
	     access_permitted_2_csr_addr != 12'h002 &&
	     access_permitted_2_csr_addr != 12'h003 &&
	     (access_permitted_2_csr_addr != 12'hC00 ||
	      !access_permitted_2_read_not_write) &&
	     (access_permitted_2_csr_addr != 12'hC01 ||
	      !access_permitted_2_read_not_write) ;
  assign access_permitted_2_csr_addr_ULT_0xC03___d2283 =
	     access_permitted_2_csr_addr < 12'hC03 ;
  assign addBase__h15910 =
	     { {48{x__h15961[15]}}, x__h15961 } << rg_stcc[33:28] ;
  assign addBase__h16872 =
	     { {48{x__h16923[15]}}, x__h16923 } << rg_sepcc[33:28] ;
  assign addBase__h19207 =
	     { {48{x__h19258[15]}}, x__h19258 } << rg_mtcc[33:28] ;
  assign addBase__h20241 =
	     { {48{x__h20292[15]}}, x__h20292 } << rg_mepcc[33:28] ;
  assign addBase__h26928 =
	     { {48{x__h26979[15]}}, x__h26979 } << mav_scr_write_cap[33:28] ;
  assign addBase__h34843 =
	     { {48{x__h34904[15]}}, x__h34904 } <<
	     IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2016 ;
  assign addTop__h27044 =
	     { {49{x__h27104[15]}}, x__h27104 } << mav_scr_write_cap[33:28] ;
  assign addrLSB__h27784 = mav_scr_write_cap[149:86] & y__h27875 ;
  assign addrLSB__h29608 = csr_trap_actions_pcc[159:96] & y__h29739 ;
  assign addrLSB__h8733 = rg_stcc[149:86] & y__h8874 ;
  assign addrLSB__h8938 = rg_sepcc[149:86] & y__h9076 ;
  assign addrLSB__h9266 = rg_mtcc[149:86] & y__h9404 ;
  assign addrLSB__h9494 = rg_mepcc[149:86] & y__h9632 ;
  assign b__h31157 = csr_mstatus_rg_mstatus[ie_to_x__h31058] ;
  assign b__h35890 = csr_mstatus_rg_mstatus[pie_from_x__h35838] ;
  assign base__h29606 =
	     { csr_trap_actions_pcc[1:0], csr_trap_actions_pcc[23:10] } ;
  assign cap_unpacked_capFat_addrBits__h24205 =
	     { mask__h22898, 12'd4095 } & newAddrBits__h24183 ;
  assign cap_unpacked_capFat_addrBits__h25294 =
	     { mask__h22898, 12'd4095 } & newAddrBits__h25272 ;
  assign cap_unpacked_capFat_address__h24204 =
	     mav_scr_write_cap_BITS_149_TO_100_315_AND_1125_ETC___d1320 +
	     new_csr__h23328 ;
  assign cap_unpacked_capFat_address__h25293 =
	     mav_scr_write_cap_BITS_149_TO_100_315_AND_1125_ETC___d1320 +
	     new_offset__h24432 ;
  assign csr_counter_read_fault_csr_addr_EQ_0xC00_443_A_ETC___d2467 =
	     csr_counter_read_fault_csr_addr == 12'hC00 &&
	     !rg_mcounteren[0] ||
	     csr_counter_read_fault_csr_addr == 12'hC01 &&
	     !rg_mcounteren[1] ||
	     csr_counter_read_fault_csr_addr == 12'hC02 &&
	     !rg_mcounteren[2] ||
	     csr_counter_read_fault_csr_addr >= 12'hC03 &&
	     csr_counter_read_fault_csr_addr <= 12'hC1F &&
	     !rg_mcounteren_BITS_31_TO_3__q10[i__h51530[4:0]] ;
  assign csr_mip_mv_read__56_BIT_0_584_AND_csr_mie_mv_r_ETC___d2616 =
	     csr_mip$mv_read[0] && csr_mie$mv_read[0] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2591 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2593 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608) ;
  assign csr_mip_mv_read__56_BIT_1_539_AND_csr_mie_mv_r_ETC___d2631 =
	     csr_mip$mv_read[1] && csr_mie$mv_read[1] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2546 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2548 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608) ;
  assign csr_mip_mv_read__56_BIT_3_494_AND_csr_mie_mv_r_ETC___d2646 =
	     csr_mip$mv_read[3] && csr_mie$mv_read[3] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2501 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2503 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608) ;
  assign csr_mip_mv_read__56_BIT_4_599_AND_csr_mie_mv_r_ETC___d2611 =
	     csr_mip$mv_read[4] && csr_mie$mv_read[4] &&
	     (interrupt_pending_cur_priv < _theResult____h53439 ||
	      interrupt_pending_cur_priv == _theResult____h53439 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608) ;
  assign csr_mip_mv_read__56_BIT_5_554_AND_csr_mie_mv_r_ETC___d2626 =
	     csr_mip$mv_read[5] && csr_mie$mv_read[5] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2561 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2563 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608) ;
  assign csr_mip_mv_read__56_BIT_7_509_AND_csr_mie_mv_r_ETC___d2641 =
	     csr_mip$mv_read[7] && csr_mie$mv_read[7] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2516 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2518 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608) ;
  assign csr_mip_mv_read__56_BIT_8_569_AND_csr_mie_mv_r_ETC___d2621 =
	     csr_mip$mv_read[8] && csr_mie$mv_read[8] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2576 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2578 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608) ;
  assign csr_mip_mv_read__56_BIT_9_524_AND_csr_mie_mv_r_ETC___d2636 =
	     csr_mip$mv_read[9] && csr_mie$mv_read[9] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2531 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2533 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608) ;
  assign csr_mstatus_rg_mstatus_11_AND_INV_1_SL_0_CONCA_ETC___d2080 =
	     x__h35886 | mask__h35874 ;
  assign csr_mstatus_rg_mstatus_11_AND_INV_1_SL_1_CONCA_ETC___d1813 =
	     x__h31153 | val__h31142 ;
  assign csr_trap_actions_interrupt_AND_NOT_csr_trap_ac_ETC___d1856 =
	     csr_trap_actions_interrupt && !csr_trap_actions_nmi &&
	     CASE_new_priv0923_0b1_SEXT__0b0_CONCAT_rg_stcc_ETC__q3 ;
  assign csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d2008 =
	     (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	     exc_code__h33277 != 6'd0 &&
	     exc_code__h33277 != 6'd1 &&
	     exc_code__h33277 != 6'd2 &&
	     exc_code__h33277 != 6'd3 &&
	     exc_code__h33277 != 6'd4 &&
	     exc_code__h33277 != 6'd5 &&
	     exc_code__h33277 != 6'd6 &&
	     exc_code__h33277 != 6'd7 &&
	     exc_code__h33277 != 6'd8 &&
	     exc_code__h33277 != 6'd9 &&
	     exc_code__h33277 != 6'd11 &&
	     exc_code__h33277 != 6'd12 &&
	     exc_code__h33277 != 6'd13 &&
	     exc_code__h33277 != 6'd15 ;
  assign deleg_bit___1__h31079 = rg_mideleg[csr_trap_actions_exc_code[3:0]] ;
  assign deleg_bit___1__h31094 = rg_medeleg[csr_trap_actions_exc_code[4:0]] ;
  assign exc_code__h33277 =
	     csr_trap_actions_nmi ? 6'd0 : csr_trap_actions_exc_code ;
  assign exc_pc___1__h32566 = exc_pc__h32465 + vector_offset__h32466 ;
  assign exc_pc__h32465 =
	     csr_trap_actions_nmi ?
	       rg_nmi_vector :
	       y_avValue_snd_snd_snd__h32528 ;
  assign fixed_up_val_23__h13960 =
	     { csr_mstatus_rg_mstatus[22:17],
	       4'd3,
	       IF_csr_mstatus_rg_mstatus_11_BITS_12_TO_11_90__ETC___d792,
	       csr_mstatus_rg_mstatus[10:5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h14549 =
	     { csr_mstatus_rg_mstatus[22:20],
	       mav_csr_write_word[19:18],
	       csr_mstatus_rg_mstatus[17],
	       2'd0,
	       mav_csr_write_word[14:13],
	       IF_csr_mstatus_rg_mstatus_11_BITS_12_TO_11_90__ETC___d792,
	       csr_mstatus_rg_mstatus[10:9],
	       mav_csr_write_word[8],
	       csr_mstatus_rg_mstatus[7:6],
	       mav_csr_write_word[5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:2],
	       mav_csr_write_word[1],
	       1'd0 } ;
  assign fixed_up_val_23__h17881 =
	     { mav_csr_write_word[22:17],
	       2'd0,
	       mav_csr_write_word[14:13],
	       (mav_csr_write_word[12:11] == 2'b10) ?
		 2'b01 :
		 mav_csr_write_word[12:11],
	       mav_csr_write_word[10:5],
	       1'd0,
	       mav_csr_write_word[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h28359 =
	     { csr_mstatus_rg_mstatus[22:17],
	       2'd0,
	       mv_update_mstatus_fs_fs,
	       IF_csr_mstatus_rg_mstatus_11_BITS_12_TO_11_90__ETC___d792,
	       csr_mstatus_rg_mstatus[10:5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h28913 =
	     { csr_mstatus_rg_mstatus[22:17],
	       2'd0,
	       ma_update_mstatus_fs_fs,
	       IF_csr_mstatus_rg_mstatus_11_BITS_12_TO_11_90__ETC___d792,
	       csr_mstatus_rg_mstatus[10:5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h30981 =
	     { IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821[22:17],
	       2'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821[14:13],
	       (IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821[12:11] ==
		2'b10) ?
		 2'b01 :
		 IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821[12:11],
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821[10:5],
	       1'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h35760 =
	     { IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2087[22:17],
	       2'd0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2087[14:13],
	       (IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2087[12:11] ==
		2'b10) ?
		 2'b01 :
		 IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2087[12:11],
	       IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2087[10:5],
	       1'd0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2087[3:1],
	       1'd0 } ;
  assign highBitsfilter__h15148 = 50'h3FFFFFFFFFFFF << rg_stcc[33:28] ;
  assign highBitsfilter__h16132 = 50'h3FFFFFFFFFFFF << rg_sepcc[33:28] ;
  assign highBitsfilter__h18451 = 50'h3FFFFFFFFFFFF << rg_mtcc[33:28] ;
  assign highBitsfilter__h19501 = 50'h3FFFFFFFFFFFF << rg_mepcc[33:28] ;
  assign highBitsfilter__h33450 =
	     50'h3FFFFFFFFFFFF <<
	     IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2016 ;
  assign highOffsetBits__h15149 = x__h19529 & highBitsfilter__h15148 ;
  assign highOffsetBits__h16133 = x__h19529 & highBitsfilter__h16132 ;
  assign highOffsetBits__h18452 = x__h19529 & highBitsfilter__h18451 ;
  assign highOffsetBits__h19502 = x__h19529 & highBitsfilter__h19501 ;
  assign highOffsetBits__h24459 = x__h24486 & mask__h26929 ;
  assign highOffsetBits__h33451 = x__h33478 & highBitsfilter__h33450 ;
  assign i__h51530 = csr_counter_read_fault_csr_addr - 12'hC03 ;
  assign idx__h11610 = mav_read_csr_csr_addr - 12'hC03 ;
  assign idx__h11633 = mav_read_csr_csr_addr - 12'hB03 ;
  assign idx__h11656 = mav_read_csr_csr_addr - 12'h323 ;
  assign idx__h5826 = read_csr_csr_addr - 12'hC03 ;
  assign idx__h5849 = read_csr_csr_addr - 12'hB03 ;
  assign idx__h5872 = read_csr_csr_addr - 12'h323 ;
  assign idx__h9747 = read_csr_port2_csr_addr - 12'hC03 ;
  assign idx__h9770 = read_csr_port2_csr_addr - 12'hB03 ;
  assign idx__h9793 = read_csr_port2_csr_addr - 12'h323 ;
  assign ie_from_x__h35837 = { 4'd0, csr_ret_actions_from_priv } ;
  assign ie_to_x__h31058 = { 4'd0, new_priv__h30923 } ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2477 =
	     interrupt_pending_cur_priv == _theResult____h51743 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2503 =
	     interrupt_pending_cur_priv == _theResult____h51955 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2518 =
	     interrupt_pending_cur_priv == _theResult____h52167 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2533 =
	     interrupt_pending_cur_priv == _theResult____h52379 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2548 =
	     interrupt_pending_cur_priv == _theResult____h52591 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2563 =
	     interrupt_pending_cur_priv == _theResult____h52803 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2578 =
	     interrupt_pending_cur_priv == _theResult____h53015 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_91_ETC___d2593 =
	     interrupt_pending_cur_priv == _theResult____h53227 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2475 =
	     interrupt_pending_cur_priv < _theResult____h51743 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2501 =
	     interrupt_pending_cur_priv < _theResult____h51955 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2516 =
	     interrupt_pending_cur_priv < _theResult____h52167 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2531 =
	     interrupt_pending_cur_priv < _theResult____h52379 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2546 =
	     interrupt_pending_cur_priv < _theResult____h52591 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2561 =
	     interrupt_pending_cur_priv < _theResult____h52803 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2576 =
	     interrupt_pending_cur_priv < _theResult____h53015 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_9_ETC___d2591 =
	     interrupt_pending_cur_priv < _theResult____h53227 ;
  assign length__h27691 = { 49'd0, x__h27696 } << mav_scr_write_cap[33:28] ;
  assign mask__h26929 = 50'h3FFFFFFFFFFFF << mav_scr_write_cap[33:28] ;
  assign mask__h27045 = 51'h7FFFFFFFFFFFF << mav_scr_write_cap[33:28] ;
  assign mask__h31141 = 64'd1 << ie_to_x__h31058 ;
  assign mask__h31158 = 64'd1 << pie_to_x__h31059 ;
  assign mask__h35874 = 64'd1 << pie_from_x__h35838 ;
  assign mask__h35891 = 64'd1 << ie_from_x__h35837 ;
  assign mav_csr_write_csr_addr_ULE_0x33F___d764 =
	     mav_csr_write_csr_addr <= 12'h33F ;
  assign mav_csr_write_csr_addr_ULE_0xB1F___d756 =
	     mav_csr_write_csr_addr <= 12'hB1F ;
  assign mav_csr_write_csr_addr_ULT_0x323_62_OR_NOT_mav_ETC___d1182 =
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr != 12'h001 &&
	     mav_csr_write_csr_addr != 12'h002 &&
	     mav_csr_write_csr_addr != 12'h003 &&
	     mav_csr_write_csr_addr != 12'h100 &&
	     mav_csr_write_csr_addr != 12'h102 &&
	     mav_csr_write_csr_addr != 12'h103 &&
	     mav_csr_write_csr_addr != 12'h104 &&
	     mav_csr_write_csr_addr != 12'h105 &&
	     mav_csr_write_csr_addr != 12'h106 &&
	     mav_csr_write_csr_addr != 12'h140 &&
	     mav_csr_write_csr_addr != 12'h141 &&
	     mav_csr_write_csr_addr != 12'h142 &&
	     mav_csr_write_csr_addr != 12'h143 &&
	     mav_csr_write_csr_addr != 12'h144 &&
	     mav_csr_write_csr_addr != 12'h180 &&
	     mav_csr_write_csr_addr != 12'h302 &&
	     mav_csr_write_csr_addr != 12'h303 &&
	     mav_csr_write_csr_addr != 12'hF11 &&
	     mav_csr_write_csr_addr != 12'hF12 &&
	     mav_csr_write_csr_addr != 12'hF13 &&
	     mav_csr_write_csr_addr != 12'hF14 &&
	     mav_csr_write_csr_addr != 12'h300 &&
	     mav_csr_write_csr_addr != 12'h301 &&
	     mav_csr_write_csr_addr != 12'h304 &&
	     mav_csr_write_csr_addr != 12'h305 &&
	     mav_csr_write_csr_addr != 12'h306 &&
	     mav_csr_write_csr_addr != 12'h340 &&
	     mav_csr_write_csr_addr != 12'h341 &&
	     mav_csr_write_csr_addr != 12'h342 &&
	     mav_csr_write_csr_addr != 12'h343 &&
	     mav_csr_write_csr_addr != 12'h344 &&
	     mav_csr_write_csr_addr != 12'hB00 &&
	     mav_csr_write_csr_addr != 12'hB02 &&
	     mav_csr_write_csr_addr != 12'h320 &&
	     mav_csr_write_csr_addr != 12'h7A0 &&
	     mav_csr_write_csr_addr != 12'h7A1 &&
	     mav_csr_write_csr_addr != 12'h7A2 &&
	     mav_csr_write_csr_addr != 12'h7A3 ;
  assign mav_csr_write_csr_addr_ULT_0x323_62_OR_NOT_mav_ETC___d785 =
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     (mav_csr_write_csr_addr == 12'h001 ||
	      mav_csr_write_csr_addr == 12'h002 ||
	      mav_csr_write_csr_addr == 12'h003 ||
	      mav_csr_write_csr_addr == 12'h100 ||
	      mav_csr_write_csr_addr == 12'h300) ;
  assign mav_csr_write_csr_addr_ULT_0x323___d762 =
	     mav_csr_write_csr_addr < 12'h323 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1017 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h306 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1021 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h340 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1024 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h341 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1067 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h342 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1070 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h343 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1073 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h344 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1076 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'hB00 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1079 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'hB02 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1082 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h320 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1088 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h7A0 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1091 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h7A1 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1096 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h7A2 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1099 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h7A3 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d1255 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     (mav_csr_write_csr_addr == 12'h001 ||
	      mav_csr_write_csr_addr == 12'h002 ||
	      mav_csr_write_csr_addr == 12'h003) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d776 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     (mav_csr_write_csr_addr == 12'h001 ||
	      mav_csr_write_csr_addr == 12'h003) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d835 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     (mav_csr_write_csr_addr == 12'h002 ||
	      mav_csr_write_csr_addr == 12'h003) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d841 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h104 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d844 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h105 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d895 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h140 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d898 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h141 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d943 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h142 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d948 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h143 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d951 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h144 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d954 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h180 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d957 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h302 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d967 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h303 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d971 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h304 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_54_OR_NOT_mav_ETC___d974 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d762 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d764) &&
	     mav_csr_write_csr_addr == 12'h305 ;
  assign mav_csr_write_csr_addr_ULT_0xB03___d754 =
	     mav_csr_write_csr_addr < 12'hB03 ;
  assign mav_csr_write_word_BITS_14_TO_13_99_EQ_0x3_00__ETC___d830 =
	     { sd__h17880,
	       40'd5120,
	       (mav_csr_write_csr_addr == 12'h100) ?
		 fixed_up_val_23__h14549 :
		 fixed_up_val_23__h17881 } ;
  assign mav_scr_write_cap_BITS_13_TO_11_265_ULT_mav_sc_ETC___d1267 =
	     mav_scr_write_cap[13:11] < repBound__h27916 ;
  assign mav_scr_write_cap_BITS_149_TO_100_315_AND_1125_ETC___d1320 =
	     { mav_scr_write_cap[149:100] & mask__h26929, 14'd0 } +
	     addBase__h26928 ;
  assign mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x7_ETC__q2 =
	     mav_scr_write_cap[149:100] +
	     ({ {48{x__h27996[1]}}, x__h27996 } << mav_scr_write_cap[33:28]) ;
  assign mav_scr_write_cap_BITS_27_TO_25_389_ULT_mav_sc_ETC___d1390 =
	     mav_scr_write_cap[27:25] < repBound__h27916 ;
  assign mav_scr_write_cap_BITS_85_TO_83_268_ULT_mav_sc_ETC___d1269 =
	     mav_scr_write_cap[85:83] < repBound__h27916 ;
  assign newAddrBits__h15869 = rg_stcc[13:0] + x__h15745[13:0] ;
  assign newAddrBits__h16831 = rg_sepcc[13:0] + x__h16713[13:0] ;
  assign newAddrBits__h19166 = rg_mtcc[13:0] + x__h19048[13:0] ;
  assign newAddrBits__h20200 = rg_mepcc[13:0] + x__h20082[13:0] ;
  assign newAddrBits__h24183 = mav_scr_write_cap[13:0] + x__h24039[13:0] ;
  assign newAddrBits__h25272 = mav_scr_write_cap[13:0] + x__h25153[13:0] ;
  assign newAddrBits__h34788 =
	     x1_avValue_snd_fst_capFat_bounds_baseBits__h34149 +
	     x__h34713[13:0] ;
  assign new_csr__h23328 =
	     { SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1284[63:1],
	       1'd0 } ;
  assign new_csr_value__h18407 =
	     { mav_csr_write_word[63:2], 1'd0, mav_csr_write_word[0] } ;
  assign new_csr_value__h19457 = { mav_csr_write_word[63:1], 1'd0 } ;
  assign new_csr_value__h21162 = { 4'd0, mav_csr_write_word[59:0] } ;
  assign new_offset__h24432 =
	     { SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1284[63:2],
	       1'b0,
	       SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1284[0] } ;
  assign new_priv__h30923 =
	     csr_trap_actions_nmi ?
	       2'b11 :
	       ((csr_trap_actions_from_priv == 2'b11) ?
		  csr_trap_actions_from_priv :
		  _theResult___fst__h31070) ;
  assign offset__h23387 = { 2'b0, mav_scr_write_cap[85:72] } - x__h26979 ;
  assign offset__h29607 =
	     { 2'b0, csr_trap_actions_pcc[95:82] } - base__h29606 ;
  assign offset__h8732 = { 2'b0, rg_stcc[85:72] } - x__h15961 ;
  assign offset__h8937 = { 2'b0, rg_sepcc[85:72] } - x__h16923 ;
  assign offset__h9265 = { 2'b0, rg_mtcc[85:72] } - x__h19258 ;
  assign offset__h9493 = { 2'b0, rg_mepcc[85:72] } - x__h20292 ;
  assign pie_from_x__h35838 = { 4'd1, csr_ret_actions_from_priv } ;
  assign pie_to_x__h31059 = { 4'd1, new_priv__h30923 } ;
  assign repBound__h27916 = mav_scr_write_cap[13:11] - 3'b001 ;
  assign repBound__h8779 = rg_stcc[13:11] - 3'b001 ;
  assign repBound__h8984 = rg_sepcc[13:11] - 3'b001 ;
  assign repBound__h9312 = rg_mtcc[13:11] - 3'b001 ;
  assign repBound__h9540 = rg_mepcc[13:11] - 3'b001 ;
  assign result__h27632 = { ~ret__h27046[64], ret__h27046[63:0] } ;
  assign result_d_addrBits__h34801 =
	     { mask__h34789, 12'd4095 } & newAddrBits__h34788 ;
  assign result_d_address__h34800 =
	     { x__h34846[63:14] & highBitsfilter__h33450, 14'd0 } +
	     addBase__h34843 +
	     _theResult_____2__h32467 ;
  assign ret__h27046 =
	     { { 1'b0, mav_scr_write_cap[149:100] } & mask__h27045, 14'd0 } +
	     addTop__h27044 ;
  assign rg_mcounteren_BITS_31_TO_3__q10 = rg_mcounteren[31:3] ;
  assign rg_mepcc_27_BITS_13_TO_11_30_ULT_rg_mepcc_27_B_ETC___d332 =
	     rg_mepcc[13:11] < repBound__h9540 ;
  assign rg_mepcc_27_BITS_27_TO_25_125_ULT_rg_mepcc_27__ETC___d2126 =
	     rg_mepcc[27:25] < repBound__h9540 ;
  assign rg_mepcc_27_BITS_85_TO_83_33_ULT_rg_mepcc_27_B_ETC___d334 =
	     rg_mepcc[85:83] < repBound__h9540 ;
  assign rg_mtcc_97_BITS_13_TO_11_00_ULT_rg_mtcc_97_BIT_ETC___d302 =
	     rg_mtcc[13:11] < repBound__h9312 ;
  assign rg_mtcc_97_BITS_85_TO_83_03_ULT_rg_mtcc_97_BIT_ETC___d304 =
	     rg_mtcc[85:83] < repBound__h9312 ;
  assign rg_sepcc_55_BITS_13_TO_11_58_ULT_rg_sepcc_55_B_ETC___d260 =
	     rg_sepcc[13:11] < repBound__h8984 ;
  assign rg_sepcc_55_BITS_27_TO_25_134_ULT_rg_sepcc_55__ETC___d2135 =
	     rg_sepcc[27:25] < repBound__h8984 ;
  assign rg_sepcc_55_BITS_85_TO_83_61_ULT_rg_sepcc_55_B_ETC___d262 =
	     rg_sepcc[85:83] < repBound__h8984 ;
  assign rg_stcc_27_BITS_13_TO_11_30_ULT_rg_stcc_27_BIT_ETC___d232 =
	     rg_stcc[13:11] < repBound__h8779 ;
  assign rg_stcc_27_BITS_85_TO_83_33_ULT_rg_stcc_27_BIT_ETC___d234 =
	     rg_stcc[85:83] < repBound__h8779 ;
  assign sd__h17880 = mav_csr_write_word[14:13] == 2'h3 ;
  assign sd__h28358 = mv_update_mstatus_fs_fs == 2'h3 ;
  assign sd__h28912 = ma_update_mstatus_fs_fs == 2'h3 ;
  assign sd__h30980 =
	     IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821[14:13] ==
	     2'h3 ;
  assign sd__h35759 =
	     IF_csr_ret_actions_from_priv_EQ_0b11_067_THEN__ETC___d2087[14:13] ==
	     2'h3 ;
  assign signBits__h19499 = {50{mav_csr_write_word[63]}} ;
  assign signBits__h24456 =
	     {50{SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1284[63]}} ;
  assign signBits__h33448 = {50{_theResult_____2__h32467[63]}} ;
  assign toBoundsM1__h15159 = { 3'b110, ~rg_stcc[10:0] } ;
  assign toBoundsM1__h16143 = { 3'b110, ~rg_sepcc[10:0] } ;
  assign toBoundsM1__h18462 = { 3'b110, ~rg_mtcc[10:0] } ;
  assign toBoundsM1__h19512 = { 3'b110, ~rg_mepcc[10:0] } ;
  assign toBoundsM1__h25662 = { 3'b110, ~mav_scr_write_cap[10:0] } ;
  assign toBoundsM1__h33461 =
	     { 3'b110,
	       ~x1_avValue_snd_fst_capFat_bounds_baseBits__h34149[10:0] } ;
  assign toBounds__h15158 = 14'd14336 - { 3'b0, rg_stcc[10:0] } ;
  assign toBounds__h16142 = 14'd14336 - { 3'b0, rg_sepcc[10:0] } ;
  assign toBounds__h18461 = 14'd14336 - { 3'b0, rg_mtcc[10:0] } ;
  assign toBounds__h19511 = 14'd14336 - { 3'b0, rg_mepcc[10:0] } ;
  assign toBounds__h25661 = 14'd14336 - { 3'b0, mav_scr_write_cap[10:0] } ;
  assign toBounds__h33460 =
	     14'd14336 -
	     { 3'b0,
	       x1_avValue_snd_fst_capFat_bounds_baseBits__h34149[10:0] } ;
  assign to_y__h36053 =
	     { 1'b0,
	       csr_mstatus_rg_mstatus_11_AND_INV_1_SL_0_CONCA_ETC___d2080[8] } ;
  assign v__h12271 = { 57'd0, mav_csr_write_word[6:0] } ;
  assign v__h14489 =
	     { sd__h17880,
	       43'd8192,
	       mav_csr_write_word[19:18],
	       3'd0,
	       mav_csr_write_word[14:13],
	       4'd0,
	       mav_csr_write_word[8],
	       2'd0,
	       mav_csr_write_word[5],
	       3'd0,
	       mav_csr_write_word[1],
	       1'd0 } ;
  assign v__h17654 =
	     { 35'd0,
	       mav_csr_write_word[28:26],
	       10'd0,
	       mav_csr_write_word[15],
	       1'd0,
	       mav_csr_write_word[13:12],
	       2'd0,
	       mav_csr_write_word[9:0] } ;
  assign v__h17775 = { 52'd0, mav_csr_write_word[11:0] } ;
  assign v__h19343 = { 32'd0, mav_csr_write_word[31:0] } ;
  assign v__h20377 =
	     { mav_csr_write_word[63], 57'd0, mav_csr_write_word[5:0] } ;
  assign v__h21037 = { 32'd0, x__h21108 } ;
  assign v__h30928 = { sd__h30980, 40'd5120, fixed_up_val_23__h30981 } ;
  assign val__h31142 = 64'd0 << ie_to_x__h31058 ;
  assign val__h31159 = { 63'd0, b__h31157 } << pie_to_x__h31059 ;
  assign val__h35892 = { 63'd0, b__h35890 } << ie_from_x__h35837 ;
  assign vector_offset__h32466 = { 56'd0, csr_trap_actions_exc_code, 2'd0 } ;
  assign wordxl1__h13910 = { 41'h10000001400, fixed_up_val_23__h13960 } ;
  assign wordxl1__h17831 = { sd__h17880, 40'd5120, fixed_up_val_23__h17881 } ;
  assign x1_avValue_addrBits__h25518 =
	     (x__h24440 == 2'd0) ?
	       cap_unpacked_capFat_addrBits__h25294 :
	       14'd0 ;
  assign x1_avValue_address__h25517 =
	     (x__h24440 == 2'd0) ?
	       cap_unpacked_capFat_address__h25293 :
	       64'd0 ;
  assign x1_avValue_flags__h25520 =
	     x__h24440 == 2'd0 && mav_scr_write_cap[55] ;
  assign x1_avValue_otype__h25522 =
	     (x__h24440 == 2'd0) ? mav_scr_write_cap[52:35] : 18'd262143 ;
  assign x1_avValue_perms_soft__h28078 =
	     (x__h24440 == 2'd0) ? mav_scr_write_cap[71:68] : 4'd0 ;
  assign x1_avValue_reserved__h25521 =
	     (x__h24440 == 2'd0) ? mav_scr_write_cap[54:53] : 2'd0 ;
  assign x1_avValue_snd_fst_capFat_bounds_baseBits__h34149 =
	     (new_priv__h30923 == 2'b11) ? rg_mtcc[13:0] : rg_stcc[13:0] ;
  assign x__h10227 = { rg_sccsr, 5'd3 } ;
  assign x__h10255 = { rg_mccsr, 5'd3 } ;
  assign x__h12225 = mav_csr_write_csr_addr - 12'hB03 ;
  assign x__h12294 = mav_csr_write_csr_addr - 12'h323 ;
  assign x__h15745 = new_csr_value__h18407 >> rg_stcc[33:28] ;
  assign x__h15961 =
	     { (rg_stcc_27_BITS_13_TO_11_30_ULT_rg_stcc_27_BIT_ETC___d232 ==
		rg_stcc_27_BITS_85_TO_83_33_ULT_rg_stcc_27_BIT_ETC___d234) ?
		 2'd0 :
		 ((rg_stcc_27_BITS_13_TO_11_30_ULT_rg_stcc_27_BIT_ETC___d232 &&
		   !rg_stcc_27_BITS_85_TO_83_33_ULT_rg_stcc_27_BIT_ETC___d234) ?
		    2'd1 :
		    2'd3),
	       rg_stcc[13:0] } ;
  assign x__h16713 = new_csr_value__h19457 >> rg_sepcc[33:28] ;
  assign x__h16923 =
	     { IF_rg_sepcc_55_BITS_13_TO_11_58_ULT_rg_sepcc_5_ETC___d267,
	       rg_sepcc[13:0] } ;
  assign x__h19048 = new_csr_value__h18407 >> rg_mtcc[33:28] ;
  assign x__h19258 =
	     { (rg_mtcc_97_BITS_13_TO_11_00_ULT_rg_mtcc_97_BIT_ETC___d302 ==
		rg_mtcc_97_BITS_85_TO_83_03_ULT_rg_mtcc_97_BIT_ETC___d304) ?
		 2'd0 :
		 ((rg_mtcc_97_BITS_13_TO_11_00_ULT_rg_mtcc_97_BIT_ETC___d302 &&
		   !rg_mtcc_97_BITS_85_TO_83_03_ULT_rg_mtcc_97_BIT_ETC___d304) ?
		    2'd1 :
		    2'd3),
	       rg_mtcc[13:0] } ;
  assign x__h19529 = mav_csr_write_word[63:14] ^ signBits__h19499 ;
  assign x__h20082 = new_csr_value__h19457 >> rg_mepcc[33:28] ;
  assign x__h20292 =
	     { IF_rg_mepcc_27_BITS_13_TO_11_30_ULT_rg_mepcc_2_ETC___d339,
	       rg_mepcc[13:0] } ;
  assign x__h21108 =
	     { mav_csr_write_word[31:2], 1'd0, mav_csr_write_word[0] } ;
  assign x__h23399 = x__h23401 << mav_scr_write_cap[33:28] ;
  assign x__h23401 = { {48{offset__h23387[15]}}, offset__h23387 } ;
  assign x__h24039 = new_csr__h23328 >> mav_scr_write_cap[33:28] ;
  assign x__h24440 =
	     (mav_scr_write_cap[33:28] == 6'd0) ?
	       mav_scr_write_cap[1:0] :
	       2'b0 ;
  assign x__h24486 =
	     SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1284[63:14] ^
	     signBits__h24456 ;
  assign x__h25153 = new_offset__h24432 >> mav_scr_write_cap[33:28] ;
  assign x__h26979 = { x__h27996, mav_scr_write_cap[13:0] } ;
  assign x__h27104 = { x__h27977, mav_scr_write_cap[27:14] } ;
  assign x__h27696 = x__h27104 - x__h26979 ;
  assign x__h27876 = 64'hFFFFFFFFFFFFFFFF << mav_scr_write_cap[33:28] ;
  assign x__h27977 =
	     (mav_scr_write_cap_BITS_27_TO_25_389_ULT_mav_sc_ETC___d1390 ==
	      mav_scr_write_cap_BITS_85_TO_83_268_ULT_mav_sc_ETC___d1269) ?
	       2'd0 :
	       ((mav_scr_write_cap_BITS_27_TO_25_389_ULT_mav_sc_ETC___d1390 &&
		 !mav_scr_write_cap_BITS_85_TO_83_268_ULT_mav_sc_ETC___d1269) ?
		  2'd1 :
		  2'd3) ;
  assign x__h27996 =
	     (mav_scr_write_cap_BITS_13_TO_11_265_ULT_mav_sc_ETC___d1267 ==
	      mav_scr_write_cap_BITS_85_TO_83_268_ULT_mav_sc_ETC___d1269) ?
	       2'd0 :
	       ((mav_scr_write_cap_BITS_13_TO_11_265_ULT_mav_sc_ETC___d1267 &&
		 !mav_scr_write_cap_BITS_85_TO_83_268_ULT_mav_sc_ETC___d1269) ?
		  2'd1 :
		  2'd3) ;
  assign x__h29619 = x__h29621 << csr_trap_actions_pcc[43:38] ;
  assign x__h29621 = { {48{offset__h29607[15]}}, offset__h29607 } ;
  assign x__h29740 = 64'hFFFFFFFFFFFFFFFF << csr_trap_actions_pcc[43:38] ;
  assign x__h31140 = x__h31170 | val__h31159 ;
  assign x__h31153 = x__h31140 & y__h31154 ;
  assign x__h31170 = csr_mstatus_rg_mstatus & y__h31171 ;
  assign x__h33478 = _theResult_____2__h32467[63:14] ^ signBits__h33448 ;
  assign x__h34713 =
	     _theResult_____2__h32467 >>
	     IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2016 ;
  assign x__h34846 =
	     (new_priv__h30923 == 2'b11) ? rg_mtcc[149:86] : rg_stcc[149:86] ;
  assign x__h34904 = (new_priv__h30923 == 2'b11) ? x__h19258 : x__h15961 ;
  assign x__h35688 =
	     (csr_trap_actions_nmi || new_priv__h30923 == 2'b11) ?
	       v__h30928 :
	       y_avValue_fst__h32437 ;
  assign x__h35689 =
	     { !csr_trap_actions_nmi && csr_trap_actions_interrupt,
	       57'd0,
	       exc_code__h33277 } ;
  assign x__h35873 = x__h35903 | val__h35892 ;
  assign x__h35886 = x__h35873 & y__h35887 ;
  assign x__h35903 = csr_mstatus_rg_mstatus & y__h35904 ;
  assign x__h36520 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[52:35] :
	       rg_sepcc[52:35] ;
  assign x__h5468 = rg_mcycle + 64'd1 ;
  assign x__h8744 = x__h8746 << rg_stcc[33:28] ;
  assign x__h8746 = { {48{offset__h8732[15]}}, offset__h8732 } ;
  assign x__h8875 = 64'hFFFFFFFFFFFFFFFF << rg_stcc[33:28] ;
  assign x__h8949 = x__h8951 << rg_sepcc[33:28] ;
  assign x__h8951 = { {48{offset__h8937[15]}}, offset__h8937 } ;
  assign x__h9077 = 64'hFFFFFFFFFFFFFFFF << rg_sepcc[33:28] ;
  assign x__h9277 = x__h9279 << rg_mtcc[33:28] ;
  assign x__h9279 = { {48{offset__h9265[15]}}, offset__h9265 } ;
  assign x__h9405 = 64'hFFFFFFFFFFFFFFFF << rg_mtcc[33:28] ;
  assign x__h9505 = x__h9507 << rg_mepcc[33:28] ;
  assign x__h9507 = { {48{offset__h9493[15]}}, offset__h9493 } ;
  assign x__h9633 = 64'hFFFFFFFFFFFFFFFF << rg_mepcc[33:28] ;
  assign x__h9697 =
	     { perf_counters$read_ctr_inhibit__read,
	       rg_ctr_inhib_ir_cy[1],
	       1'd0,
	       rg_ctr_inhib_ir_cy[0] } ;
  assign x_addrBits__h15891 =
	     { mask__h15870, 12'd4095 } & newAddrBits__h15869 ;
  assign x_addrBits__h16853 =
	     { mask__h16832, 12'd4095 } & newAddrBits__h16831 ;
  assign x_addrBits__h19188 =
	     { mask__h19167, 12'd4095 } & newAddrBits__h19166 ;
  assign x_addrBits__h20222 =
	     { mask__h20201, 12'd4095 } & newAddrBits__h20200 ;
  assign x_address__h15890 =
	     { rg_stcc[149:100] & highBitsfilter__h15148, 14'd0 } +
	     addBase__h15910 +
	     new_csr_value__h18407 ;
  assign x_address__h16852 =
	     { rg_sepcc[149:100] & highBitsfilter__h16132, 14'd0 } +
	     addBase__h16872 +
	     new_csr_value__h19457 ;
  assign x_address__h19187 =
	     { rg_mtcc[149:100] & highBitsfilter__h18451, 14'd0 } +
	     addBase__h19207 +
	     new_csr_value__h18407 ;
  assign x_address__h20221 =
	     { rg_mepcc[149:100] & highBitsfilter__h19501, 14'd0 } +
	     addBase__h20241 +
	     new_csr_value__h19457 ;
  assign y__h27875 = ~x__h27876 ;
  assign y__h29739 = ~x__h29740 ;
  assign y__h31154 = ~mask__h31141 ;
  assign y__h31171 = ~mask__h31158 ;
  assign y__h35887 = ~mask__h35874 ;
  assign y__h35904 = ~mask__h35891 ;
  assign y__h8874 = ~x__h8875 ;
  assign y__h9076 = ~x__h9077 ;
  assign y__h9404 = ~x__h9405 ;
  assign y__h9632 = ~x__h9633 ;
  assign y_avValue_fst__h21331 = { 59'd0, mav_csr_write_word[4:0] } ;
  assign y_avValue_fst__h21336 = { 61'd0, mav_csr_write_word[2:0] } ;
  assign y_avValue_fst__h21341 = { 56'd0, mav_csr_write_word[7:0] } ;
  assign y_avValue_fst__h21597 =
	     (!mav_csr_write_csr_addr_ULT_0x323___d762 &&
	      mav_csr_write_csr_addr_ULE_0x33F___d764) ?
	       v__h12271 :
	       y_avValue_fst__h21581 ;
  assign y_avValue_fst__h32419 =
	     { sd__h30980,
	       43'd8192,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821[19:18],
	       3'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821[14:13],
	       4'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821[8],
	       2'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821[5],
	       3'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d1821[1],
	       1'd0 } ;
  assign y_avValue_fst__h32437 =
	     (new_priv__h30923 == 2'b01) ? y_avValue_fst__h32419 : v__h30928 ;
  assign y_avValue_new_csr_value__h21748 =
	     (!mav_csr_write_csr_addr_ULT_0xB03___d754 &&
	      mav_csr_write_csr_addr_ULE_0xB1F___d756) ?
	       mav_csr_write_word :
	       y_avValue_fst__h21597 ;
  assign y_avValue_snd_snd_snd__h32528 =
	     { CASE_new_priv0923_0b1_SEXT__0b0_CONCAT_rg_stcc_ETC__q1,
	       2'd0 } ;
  always@(rg_stcc)
  begin
    case (rg_stcc[33:28])
      6'd51: mask__h15870 = 2'b01;
      6'd52: mask__h15870 = 2'b0;
      default: mask__h15870 = 2'b11;
    endcase
  end
  always@(rg_sepcc)
  begin
    case (rg_sepcc[33:28])
      6'd51: mask__h16832 = 2'b01;
      6'd52: mask__h16832 = 2'b0;
      default: mask__h16832 = 2'b11;
    endcase
  end
  always@(rg_mtcc)
  begin
    case (rg_mtcc[33:28])
      6'd51: mask__h19167 = 2'b01;
      6'd52: mask__h19167 = 2'b0;
      default: mask__h19167 = 2'b11;
    endcase
  end
  always@(rg_mepcc)
  begin
    case (rg_mepcc[33:28])
      6'd51: mask__h20201 = 2'b01;
      6'd52: mask__h20201 = 2'b0;
      default: mask__h20201 = 2'b11;
    endcase
  end
  always@(mav_scr_write_cap)
  begin
    case (mav_scr_write_cap[33:28])
      6'd51: mask__h22898 = 2'b01;
      6'd52: mask__h22898 = 2'b0;
      default: mask__h22898 = 2'b11;
    endcase
  end
  always@(mav_csr_write_csr_addr or
	  mav_csr_write_word or
	  y_avValue_fst__h21331 or
	  y_avValue_fst__h21336 or
	  y_avValue_fst__h21341 or
	  v__h14489 or
	  csr_mie$mav_sie_write or
	  new_csr_value__h18407 or
	  new_csr_value__h19457 or
	  v__h20377 or
	  csr_mip$mav_sip_write or
	  wordxl1__h17831 or
	  v__h17654 or
	  v__h17775 or
	  csr_mie$mav_write or
	  v__h19343 or
	  v__h21037 or csr_mip$mav_write or new_csr_value__h21162)
  begin
    case (mav_csr_write_csr_addr)
      12'h001: y_avValue_fst__h21581 = y_avValue_fst__h21331;
      12'h002: y_avValue_fst__h21581 = y_avValue_fst__h21336;
      12'h003: y_avValue_fst__h21581 = y_avValue_fst__h21341;
      12'h100: y_avValue_fst__h21581 = v__h14489;
      12'h102, 12'h103, 12'h106, 12'h7A0, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  y_avValue_fst__h21581 = 64'd0;
      12'h104: y_avValue_fst__h21581 = csr_mie$mav_sie_write;
      12'h105, 12'h305: y_avValue_fst__h21581 = new_csr_value__h18407;
      12'h140, 12'h143, 12'h180, 12'h340, 12'h343, 12'hB00, 12'hB02:
	  y_avValue_fst__h21581 = mav_csr_write_word;
      12'h141, 12'h341: y_avValue_fst__h21581 = new_csr_value__h19457;
      12'h142, 12'h342: y_avValue_fst__h21581 = v__h20377;
      12'h144: y_avValue_fst__h21581 = csr_mip$mav_sip_write;
      12'h300: y_avValue_fst__h21581 = wordxl1__h17831;
      12'h301: y_avValue_fst__h21581 = 64'h800000000014112D;
      12'h302: y_avValue_fst__h21581 = v__h17654;
      12'h303: y_avValue_fst__h21581 = v__h17775;
      12'h304: y_avValue_fst__h21581 = csr_mie$mav_write;
      12'h306: y_avValue_fst__h21581 = v__h19343;
      12'h320: y_avValue_fst__h21581 = v__h21037;
      12'h344: y_avValue_fst__h21581 = csr_mip$mav_write;
      12'h7A1: y_avValue_fst__h21581 = new_csr_value__h21162;
      default: y_avValue_fst__h21581 = mav_csr_write_word;
    endcase
  end
  always@(idx__h5872 or
	  perf_counters$read_ctr_sels_0__read or
	  perf_counters$read_ctr_sels_1__read or
	  perf_counters$read_ctr_sels_2__read or
	  perf_counters$read_ctr_sels_3__read or
	  perf_counters$read_ctr_sels_4__read or
	  perf_counters$read_ctr_sels_5__read or
	  perf_counters$read_ctr_sels_6__read or
	  perf_counters$read_ctr_sels_7__read or
	  perf_counters$read_ctr_sels_8__read or
	  perf_counters$read_ctr_sels_9__read or
	  perf_counters$read_ctr_sels_10__read or
	  perf_counters$read_ctr_sels_11__read or
	  perf_counters$read_ctr_sels_12__read or
	  perf_counters$read_ctr_sels_13__read or
	  perf_counters$read_ctr_sels_14__read or
	  perf_counters$read_ctr_sels_15__read or
	  perf_counters$read_ctr_sels_16__read or
	  perf_counters$read_ctr_sels_17__read or
	  perf_counters$read_ctr_sels_18__read or
	  perf_counters$read_ctr_sels_19__read or
	  perf_counters$read_ctr_sels_20__read or
	  perf_counters$read_ctr_sels_21__read or
	  perf_counters$read_ctr_sels_22__read or
	  perf_counters$read_ctr_sels_23__read or
	  perf_counters$read_ctr_sels_24__read or
	  perf_counters$read_ctr_sels_25__read or
	  perf_counters$read_ctr_sels_26__read or
	  perf_counters$read_ctr_sels_27__read or
	  perf_counters$read_ctr_sels_28__read)
  begin
    case (idx__h5872)
      12'd0: x__h7397 = perf_counters$read_ctr_sels_0__read;
      12'd1: x__h7397 = perf_counters$read_ctr_sels_1__read;
      12'd2: x__h7397 = perf_counters$read_ctr_sels_2__read;
      12'd3: x__h7397 = perf_counters$read_ctr_sels_3__read;
      12'd4: x__h7397 = perf_counters$read_ctr_sels_4__read;
      12'd5: x__h7397 = perf_counters$read_ctr_sels_5__read;
      12'd6: x__h7397 = perf_counters$read_ctr_sels_6__read;
      12'd7: x__h7397 = perf_counters$read_ctr_sels_7__read;
      12'd8: x__h7397 = perf_counters$read_ctr_sels_8__read;
      12'd9: x__h7397 = perf_counters$read_ctr_sels_9__read;
      12'd10: x__h7397 = perf_counters$read_ctr_sels_10__read;
      12'd11: x__h7397 = perf_counters$read_ctr_sels_11__read;
      12'd12: x__h7397 = perf_counters$read_ctr_sels_12__read;
      12'd13: x__h7397 = perf_counters$read_ctr_sels_13__read;
      12'd14: x__h7397 = perf_counters$read_ctr_sels_14__read;
      12'd15: x__h7397 = perf_counters$read_ctr_sels_15__read;
      12'd16: x__h7397 = perf_counters$read_ctr_sels_16__read;
      12'd17: x__h7397 = perf_counters$read_ctr_sels_17__read;
      12'd18: x__h7397 = perf_counters$read_ctr_sels_18__read;
      12'd19: x__h7397 = perf_counters$read_ctr_sels_19__read;
      12'd20: x__h7397 = perf_counters$read_ctr_sels_20__read;
      12'd21: x__h7397 = perf_counters$read_ctr_sels_21__read;
      12'd22: x__h7397 = perf_counters$read_ctr_sels_22__read;
      12'd23: x__h7397 = perf_counters$read_ctr_sels_23__read;
      12'd24: x__h7397 = perf_counters$read_ctr_sels_24__read;
      12'd25: x__h7397 = perf_counters$read_ctr_sels_25__read;
      12'd26: x__h7397 = perf_counters$read_ctr_sels_26__read;
      12'd27: x__h7397 = perf_counters$read_ctr_sels_27__read;
      12'd28: x__h7397 = perf_counters$read_ctr_sels_28__read;
      default: x__h7397 = 7'b0101010 /* unspecified value */ ;
    endcase
  end
  always@(idx__h9793 or
	  perf_counters$read_ctr_sels_0__read or
	  perf_counters$read_ctr_sels_1__read or
	  perf_counters$read_ctr_sels_2__read or
	  perf_counters$read_ctr_sels_3__read or
	  perf_counters$read_ctr_sels_4__read or
	  perf_counters$read_ctr_sels_5__read or
	  perf_counters$read_ctr_sels_6__read or
	  perf_counters$read_ctr_sels_7__read or
	  perf_counters$read_ctr_sels_8__read or
	  perf_counters$read_ctr_sels_9__read or
	  perf_counters$read_ctr_sels_10__read or
	  perf_counters$read_ctr_sels_11__read or
	  perf_counters$read_ctr_sels_12__read or
	  perf_counters$read_ctr_sels_13__read or
	  perf_counters$read_ctr_sels_14__read or
	  perf_counters$read_ctr_sels_15__read or
	  perf_counters$read_ctr_sels_16__read or
	  perf_counters$read_ctr_sels_17__read or
	  perf_counters$read_ctr_sels_18__read or
	  perf_counters$read_ctr_sels_19__read or
	  perf_counters$read_ctr_sels_20__read or
	  perf_counters$read_ctr_sels_21__read or
	  perf_counters$read_ctr_sels_22__read or
	  perf_counters$read_ctr_sels_23__read or
	  perf_counters$read_ctr_sels_24__read or
	  perf_counters$read_ctr_sels_25__read or
	  perf_counters$read_ctr_sels_26__read or
	  perf_counters$read_ctr_sels_27__read or
	  perf_counters$read_ctr_sels_28__read)
  begin
    case (idx__h9793)
      12'd0: x__h10167 = perf_counters$read_ctr_sels_0__read;
      12'd1: x__h10167 = perf_counters$read_ctr_sels_1__read;
      12'd2: x__h10167 = perf_counters$read_ctr_sels_2__read;
      12'd3: x__h10167 = perf_counters$read_ctr_sels_3__read;
      12'd4: x__h10167 = perf_counters$read_ctr_sels_4__read;
      12'd5: x__h10167 = perf_counters$read_ctr_sels_5__read;
      12'd6: x__h10167 = perf_counters$read_ctr_sels_6__read;
      12'd7: x__h10167 = perf_counters$read_ctr_sels_7__read;
      12'd8: x__h10167 = perf_counters$read_ctr_sels_8__read;
      12'd9: x__h10167 = perf_counters$read_ctr_sels_9__read;
      12'd10: x__h10167 = perf_counters$read_ctr_sels_10__read;
      12'd11: x__h10167 = perf_counters$read_ctr_sels_11__read;
      12'd12: x__h10167 = perf_counters$read_ctr_sels_12__read;
      12'd13: x__h10167 = perf_counters$read_ctr_sels_13__read;
      12'd14: x__h10167 = perf_counters$read_ctr_sels_14__read;
      12'd15: x__h10167 = perf_counters$read_ctr_sels_15__read;
      12'd16: x__h10167 = perf_counters$read_ctr_sels_16__read;
      12'd17: x__h10167 = perf_counters$read_ctr_sels_17__read;
      12'd18: x__h10167 = perf_counters$read_ctr_sels_18__read;
      12'd19: x__h10167 = perf_counters$read_ctr_sels_19__read;
      12'd20: x__h10167 = perf_counters$read_ctr_sels_20__read;
      12'd21: x__h10167 = perf_counters$read_ctr_sels_21__read;
      12'd22: x__h10167 = perf_counters$read_ctr_sels_22__read;
      12'd23: x__h10167 = perf_counters$read_ctr_sels_23__read;
      12'd24: x__h10167 = perf_counters$read_ctr_sels_24__read;
      12'd25: x__h10167 = perf_counters$read_ctr_sels_25__read;
      12'd26: x__h10167 = perf_counters$read_ctr_sels_26__read;
      12'd27: x__h10167 = perf_counters$read_ctr_sels_27__read;
      12'd28: x__h10167 = perf_counters$read_ctr_sels_28__read;
      default: x__h10167 = 7'b0101010 /* unspecified value */ ;
    endcase
  end
  always@(idx__h11656 or
	  perf_counters$read_ctr_sels_0__read or
	  perf_counters$read_ctr_sels_1__read or
	  perf_counters$read_ctr_sels_2__read or
	  perf_counters$read_ctr_sels_3__read or
	  perf_counters$read_ctr_sels_4__read or
	  perf_counters$read_ctr_sels_5__read or
	  perf_counters$read_ctr_sels_6__read or
	  perf_counters$read_ctr_sels_7__read or
	  perf_counters$read_ctr_sels_8__read or
	  perf_counters$read_ctr_sels_9__read or
	  perf_counters$read_ctr_sels_10__read or
	  perf_counters$read_ctr_sels_11__read or
	  perf_counters$read_ctr_sels_12__read or
	  perf_counters$read_ctr_sels_13__read or
	  perf_counters$read_ctr_sels_14__read or
	  perf_counters$read_ctr_sels_15__read or
	  perf_counters$read_ctr_sels_16__read or
	  perf_counters$read_ctr_sels_17__read or
	  perf_counters$read_ctr_sels_18__read or
	  perf_counters$read_ctr_sels_19__read or
	  perf_counters$read_ctr_sels_20__read or
	  perf_counters$read_ctr_sels_21__read or
	  perf_counters$read_ctr_sels_22__read or
	  perf_counters$read_ctr_sels_23__read or
	  perf_counters$read_ctr_sels_24__read or
	  perf_counters$read_ctr_sels_25__read or
	  perf_counters$read_ctr_sels_26__read or
	  perf_counters$read_ctr_sels_27__read or
	  perf_counters$read_ctr_sels_28__read)
  begin
    case (idx__h11656)
      12'd0: x__h12030 = perf_counters$read_ctr_sels_0__read;
      12'd1: x__h12030 = perf_counters$read_ctr_sels_1__read;
      12'd2: x__h12030 = perf_counters$read_ctr_sels_2__read;
      12'd3: x__h12030 = perf_counters$read_ctr_sels_3__read;
      12'd4: x__h12030 = perf_counters$read_ctr_sels_4__read;
      12'd5: x__h12030 = perf_counters$read_ctr_sels_5__read;
      12'd6: x__h12030 = perf_counters$read_ctr_sels_6__read;
      12'd7: x__h12030 = perf_counters$read_ctr_sels_7__read;
      12'd8: x__h12030 = perf_counters$read_ctr_sels_8__read;
      12'd9: x__h12030 = perf_counters$read_ctr_sels_9__read;
      12'd10: x__h12030 = perf_counters$read_ctr_sels_10__read;
      12'd11: x__h12030 = perf_counters$read_ctr_sels_11__read;
      12'd12: x__h12030 = perf_counters$read_ctr_sels_12__read;
      12'd13: x__h12030 = perf_counters$read_ctr_sels_13__read;
      12'd14: x__h12030 = perf_counters$read_ctr_sels_14__read;
      12'd15: x__h12030 = perf_counters$read_ctr_sels_15__read;
      12'd16: x__h12030 = perf_counters$read_ctr_sels_16__read;
      12'd17: x__h12030 = perf_counters$read_ctr_sels_17__read;
      12'd18: x__h12030 = perf_counters$read_ctr_sels_18__read;
      12'd19: x__h12030 = perf_counters$read_ctr_sels_19__read;
      12'd20: x__h12030 = perf_counters$read_ctr_sels_20__read;
      12'd21: x__h12030 = perf_counters$read_ctr_sels_21__read;
      12'd22: x__h12030 = perf_counters$read_ctr_sels_22__read;
      12'd23: x__h12030 = perf_counters$read_ctr_sels_23__read;
      12'd24: x__h12030 = perf_counters$read_ctr_sels_24__read;
      12'd25: x__h12030 = perf_counters$read_ctr_sels_25__read;
      12'd26: x__h12030 = perf_counters$read_ctr_sels_26__read;
      12'd27: x__h12030 = perf_counters$read_ctr_sels_27__read;
      12'd28: x__h12030 = perf_counters$read_ctr_sels_28__read;
      default: x__h12030 = 7'b0101010 /* unspecified value */ ;
    endcase
  end
  always@(new_priv__h30923 or
	  SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320 or
	  SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250)
  begin
    case (new_priv__h30923)
      2'b01:
	  CASE_new_priv0923_0b1_SEXT__0b0_CONCAT_rg_stcc_ETC__q1 =
	      SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250[63:2];
      2'b11:
	  CASE_new_priv0923_0b1_SEXT__0b0_CONCAT_rg_stcc_ETC__q1 =
	      SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320[63:2];
      default: CASE_new_priv0923_0b1_SEXT__0b0_CONCAT_rg_stcc_ETC__q1 =
		   SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320[63:2];
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or
	  cap_unpacked_capFat_addrBits__h24205 or x1_avValue_addrBits__h25518)
  begin
    case (mav_scr_write_scr_addr)
      5'd13, 5'd14, 5'd29, 5'd30:
	  IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1500 =
	      mav_scr_write_cap[85:72];
      5'd15, 5'd31:
	  IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1500 =
	      cap_unpacked_capFat_addrBits__h24205;
      5'd28:
	  IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1500 =
	      x1_avValue_addrBits__h25518;
      default: IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1500 =
		   14'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or
	  SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1346 or
	  x__h24440 or
	  SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1312)
  begin
    case (mav_scr_write_scr_addr)
      5'd13, 5'd14, 5'd29:
	  IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1486 =
	      mav_scr_write_cap[150];
      5'd15, 5'd31:
	  IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1486 =
	      SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1346 &&
	      mav_scr_write_cap[150];
      5'd28:
	  IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1486 =
	      x__h24440 == 2'd0 &&
	      SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1312 &&
	      mav_scr_write_cap[150];
      default: IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1486 =
		   mav_scr_write_scr_addr == 5'd30 && mav_scr_write_cap[150];
    endcase
  end
  always@(new_priv__h30923 or
	  SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320 or
	  SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250)
  begin
    case (new_priv__h30923)
      2'b01:
	  CASE_new_priv0923_0b1_SEXT__0b0_CONCAT_rg_stcc_ETC__q3 =
	      SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250[0];
      2'b11:
	  CASE_new_priv0923_0b1_SEXT__0b0_CONCAT_rg_stcc_ETC__q3 =
	      SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320[0];
      default: CASE_new_priv0923_0b1_SEXT__0b0_CONCAT_rg_stcc_ETC__q3 =
		   SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320[0];
    endcase
  end
  always@(IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2016)
  begin
    case (IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2016)
      6'd51: mask__h34789 = 2'b01;
      6'd52: mask__h34789 = 2'b0;
      default: mask__h34789 = 2'b11;
    endcase
  end
  always@(interrupt_pending_cur_priv or csr_mstatus_rg_mstatus)
  begin
    case (interrupt_pending_cur_priv)
      2'b0:
	  IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2490 =
	      !csr_mstatus_rg_mstatus[0];
      2'b01:
	  IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2490 =
	      !csr_mstatus_rg_mstatus[1];
      default: IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2490 =
		   interrupt_pending_cur_priv != 2'b11 ||
		   !csr_mstatus_rg_mstatus[3];
    endcase
  end
  always@(interrupt_pending_cur_priv or csr_mstatus_rg_mstatus)
  begin
    case (interrupt_pending_cur_priv)
      2'b0:
	  IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608 =
	      csr_mstatus_rg_mstatus[0];
      2'b01:
	  IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608 =
	      csr_mstatus_rg_mstatus[1];
      default: IF_interrupt_pending_cur_priv_EQ_0b0_479_THEN__ETC___d2608 =
		   interrupt_pending_cur_priv == 2'b11 &&
		   csr_mstatus_rg_mstatus[3];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 =
	      mav_scr_write_cap[71:68];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 = 4'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 =
	      mav_scr_write_cap[55];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 =
		   mav_scr_write_scr_addr == 5'd30 && mav_scr_write_cap[55];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 =
	      mav_scr_write_cap[54:53];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 = 2'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 =
	      mav_scr_write_cap[52:35];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 =
		   18'd262143;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 =
	      mav_scr_write_cap[34];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 =
		   mav_scr_write_scr_addr != 5'd30 || mav_scr_write_cap[34];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 =
	      mav_scr_write_cap[33:0];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 =
		   34'h344000000;
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 or
	  mav_scr_write_cap or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 or
	  x1_avValue_perms_soft__h28078 or
	  x__h24440 or
	  x1_avValue_flags__h25520 or
	  IF_IF_mav_scr_write_cap_BITS_33_TO_28_257_EQ_0_ETC___d1476)
  begin
    case (mav_scr_write_scr_addr)
      5'd13, 5'd14, 5'd15:
	  IF_mav_scr_write_scr_addr_EQ_13_332_OR_mav_scr_ETC___d1536 =
	      mav_scr_write_cap[71:0];
      5'd28:
	  IF_mav_scr_write_scr_addr_EQ_13_332_OR_mav_scr_ETC___d1536 =
	      { x1_avValue_perms_soft__h28078,
		x__h24440 == 2'd0 && mav_scr_write_cap[67],
		x__h24440 == 2'd0 && mav_scr_write_cap[66],
		x__h24440 == 2'd0 && mav_scr_write_cap[65],
		x__h24440 == 2'd0 && mav_scr_write_cap[64],
		x__h24440 == 2'd0 && mav_scr_write_cap[63],
		x__h24440 == 2'd0 && mav_scr_write_cap[62],
		x__h24440 == 2'd0 && mav_scr_write_cap[61],
		x__h24440 == 2'd0 && mav_scr_write_cap[60],
		x__h24440 == 2'd0 && mav_scr_write_cap[59],
		x__h24440 == 2'd0 && mav_scr_write_cap[58],
		x__h24440 == 2'd0 && mav_scr_write_cap[57],
		x__h24440 == 2'd0 && mav_scr_write_cap[56],
		x1_avValue_flags__h25520,
		IF_IF_mav_scr_write_cap_BITS_33_TO_28_257_EQ_0_ETC___d1476 };
      default: IF_mav_scr_write_scr_addr_EQ_13_332_OR_mav_scr_ETC___d1536 =
		   { CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4,
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[67],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[66],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[65],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[64],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[63],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[62],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[61],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[60],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[59],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[58],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[57],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[56],
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5,
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6,
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7,
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8,
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 };
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or
	  cap_unpacked_capFat_address__h24204 or x1_avValue_address__h25517)
  begin
    case (mav_scr_write_scr_addr)
      5'd13, 5'd14, 5'd29, 5'd30:
	  IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1493 =
	      mav_scr_write_cap[149:86];
      5'd15, 5'd31:
	  IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1493 =
	      cap_unpacked_capFat_address__h24204;
      5'd28:
	  IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1493 =
	      x1_avValue_address__h25517;
      default: IF_mav_scr_write_scr_addr_EQ_13_332_THEN_mav_s_ETC___d1493 =
		   64'd0;
    endcase
  end
  always@(read_csr_csr_addr or
	  rg_tdata3 or
	  rg_fflags or
	  rg_frm or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_sie_read or
	  SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250 or
	  rg_sscratch or
	  SEXT__0b0_CONCAT_rg_sepcc_55_BITS_85_TO_72_56__ETC___d278 or
	  rg_scause or
	  rg_stval or
	  csr_mip$mv_sip_read or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  csr_mie$mv_read or
	  SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320 or
	  rg_mcounteren or
	  x__h9697 or
	  rg_mscratch or
	  SEXT__0b0_CONCAT_rg_mepcc_27_BITS_85_TO_72_28__ETC___d350 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  x__h10227 or rg_mcycle or rg_minstret or x__h10255 or rg_mtime)
  begin
    case (read_csr_csr_addr)
      12'h001:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { 59'd0, rg_fflags };
      12'h002:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { 61'd0, rg_frm };
      12'h003:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { 56'd0, rg_frm, rg_fflags };
      12'h100:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { csr_mstatus_rg_mstatus[63],
		29'd0,
		csr_mstatus_rg_mstatus[33:32],
		12'd0,
		csr_mstatus_rg_mstatus[19:18],
		1'd0,
		csr_mstatus_rg_mstatus[16:13],
		4'd0,
		csr_mstatus_rg_mstatus[8],
		2'd0,
		csr_mstatus_rg_mstatus[5:4],
		2'd0,
		csr_mstatus_rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 = 64'd0;
      12'h104:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      csr_mie$mv_sie_read;
      12'h105:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250[63:2],
		1'b0,
		SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250[0] };
      12'h140:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      rg_sscratch;
      12'h141:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      SEXT__0b0_CONCAT_rg_sepcc_55_BITS_85_TO_72_56__ETC___d278;
      12'h142:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { rg_scause[6], 57'd0, rg_scause[5:0] };
      12'h143:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      rg_stval;
      12'h144:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      csr_mip$mv_sip_read;
      12'h180:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 = rg_satp;
      12'h300:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      64'h800000000014112D;
      12'h302:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { 35'd0, rg_medeleg };
      12'h303:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      csr_mie$mv_read;
      12'h305:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320[63:2],
		1'b0,
		SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320[0] };
      12'h306:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { 32'd0, rg_mcounteren };
      12'h320:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { 32'd0, x__h9697 };
      12'h340:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      SEXT__0b0_CONCAT_rg_mepcc_27_BITS_85_TO_72_28__ETC___d350;
      12'h342:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      rg_tdata2;
      12'h9C0:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { 48'd0, x__h10227 };
      12'hB00, 12'hC00:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      rg_minstret;
      12'hBC0:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      { 48'd0, x__h10255 };
      12'hC01:
	  IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
	      rg_mtime;
      default: IF_read_csr_csr_addr_EQ_0x1_5_THEN_0_CONCAT_rg_ETC___d406 =
		   rg_tdata3;
    endcase
  end
  always@(idx__h5849 or
	  perf_counters$read_counters_0__read or
	  perf_counters$read_counters_1__read or
	  perf_counters$read_counters_2__read or
	  perf_counters$read_counters_3__read or
	  perf_counters$read_counters_4__read or
	  perf_counters$read_counters_5__read or
	  perf_counters$read_counters_6__read or
	  perf_counters$read_counters_7__read or
	  perf_counters$read_counters_8__read or
	  perf_counters$read_counters_9__read or
	  perf_counters$read_counters_10__read or
	  perf_counters$read_counters_11__read or
	  perf_counters$read_counters_12__read or
	  perf_counters$read_counters_13__read or
	  perf_counters$read_counters_14__read or
	  perf_counters$read_counters_15__read or
	  perf_counters$read_counters_16__read or
	  perf_counters$read_counters_17__read or
	  perf_counters$read_counters_18__read or
	  perf_counters$read_counters_19__read or
	  perf_counters$read_counters_20__read or
	  perf_counters$read_counters_21__read or
	  perf_counters$read_counters_22__read or
	  perf_counters$read_counters_23__read or
	  perf_counters$read_counters_24__read or
	  perf_counters$read_counters_25__read or
	  perf_counters$read_counters_26__read or
	  perf_counters$read_counters_27__read or
	  perf_counters$read_counters_28__read)
  begin
    case (idx__h5849)
      12'd0:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_0__read;
      12'd1:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_1__read;
      12'd2:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_2__read;
      12'd3:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_3__read;
      12'd4:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_4__read;
      12'd5:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_5__read;
      12'd6:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_6__read;
      12'd7:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_7__read;
      12'd8:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_8__read;
      12'd9:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_9__read;
      12'd10:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_10__read;
      12'd11:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_11__read;
      12'd12:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_12__read;
      12'd13:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_13__read;
      12'd14:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_14__read;
      12'd15:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_15__read;
      12'd16:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_16__read;
      12'd17:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_17__read;
      12'd18:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_18__read;
      12'd19:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_19__read;
      12'd20:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_20__read;
      12'd21:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_21__read;
      12'd22:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_22__read;
      12'd23:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_23__read;
      12'd24:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_24__read;
      12'd25:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_25__read;
      12'd26:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_26__read;
      12'd27:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_27__read;
      12'd28:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
	      perf_counters$read_counters_28__read;
      default: SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d169 =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(idx__h5826 or
	  perf_counters$read_counters_0__read or
	  perf_counters$read_counters_1__read or
	  perf_counters$read_counters_2__read or
	  perf_counters$read_counters_3__read or
	  perf_counters$read_counters_4__read or
	  perf_counters$read_counters_5__read or
	  perf_counters$read_counters_6__read or
	  perf_counters$read_counters_7__read or
	  perf_counters$read_counters_8__read or
	  perf_counters$read_counters_9__read or
	  perf_counters$read_counters_10__read or
	  perf_counters$read_counters_11__read or
	  perf_counters$read_counters_12__read or
	  perf_counters$read_counters_13__read or
	  perf_counters$read_counters_14__read or
	  perf_counters$read_counters_15__read or
	  perf_counters$read_counters_16__read or
	  perf_counters$read_counters_17__read or
	  perf_counters$read_counters_18__read or
	  perf_counters$read_counters_19__read or
	  perf_counters$read_counters_20__read or
	  perf_counters$read_counters_21__read or
	  perf_counters$read_counters_22__read or
	  perf_counters$read_counters_23__read or
	  perf_counters$read_counters_24__read or
	  perf_counters$read_counters_25__read or
	  perf_counters$read_counters_26__read or
	  perf_counters$read_counters_27__read or
	  perf_counters$read_counters_28__read)
  begin
    case (idx__h5826)
      12'd0:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_0__read;
      12'd1:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_1__read;
      12'd2:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_2__read;
      12'd3:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_3__read;
      12'd4:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_4__read;
      12'd5:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_5__read;
      12'd6:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_6__read;
      12'd7:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_7__read;
      12'd8:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_8__read;
      12'd9:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_9__read;
      12'd10:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_10__read;
      12'd11:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_11__read;
      12'd12:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_12__read;
      12'd13:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_13__read;
      12'd14:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_14__read;
      12'd15:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_15__read;
      12'd16:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_16__read;
      12'd17:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_17__read;
      12'd18:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_18__read;
      12'd19:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_19__read;
      12'd20:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_20__read;
      12'd21:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_21__read;
      12'd22:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_22__read;
      12'd23:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_23__read;
      12'd24:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_24__read;
      12'd25:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_25__read;
      12'd26:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_26__read;
      12'd27:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_27__read;
      12'd28:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
	      perf_counters$read_counters_28__read;
      default: SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d165 =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(read_csr_port2_csr_addr or
	  rg_tdata3 or
	  rg_fflags or
	  rg_frm or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_sie_read or
	  SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250 or
	  rg_sscratch or
	  SEXT__0b0_CONCAT_rg_sepcc_55_BITS_85_TO_72_56__ETC___d278 or
	  rg_scause or
	  rg_stval or
	  csr_mip$mv_sip_read or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  csr_mie$mv_read or
	  SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320 or
	  rg_mcounteren or
	  x__h9697 or
	  rg_mscratch or
	  SEXT__0b0_CONCAT_rg_mepcc_27_BITS_85_TO_72_28__ETC___d350 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  x__h10227 or rg_mcycle or rg_minstret or x__h10255 or rg_mtime)
  begin
    case (read_csr_port2_csr_addr)
      12'h001:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { 59'd0, rg_fflags };
      12'h002:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { 61'd0, rg_frm };
      12'h003:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { 56'd0, rg_frm, rg_fflags };
      12'h100:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { csr_mstatus_rg_mstatus[63],
		29'd0,
		csr_mstatus_rg_mstatus[33:32],
		12'd0,
		csr_mstatus_rg_mstatus[19:18],
		1'd0,
		csr_mstatus_rg_mstatus[16:13],
		4'd0,
		csr_mstatus_rg_mstatus[8],
		2'd0,
		csr_mstatus_rg_mstatus[5:4],
		2'd0,
		csr_mstatus_rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 = 64'd0;
      12'h104:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      csr_mie$mv_sie_read;
      12'h105:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250[63:2],
		1'b0,
		SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250[0] };
      12'h140:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      rg_sscratch;
      12'h141:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      SEXT__0b0_CONCAT_rg_sepcc_55_BITS_85_TO_72_56__ETC___d278;
      12'h142:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { rg_scause[6], 57'd0, rg_scause[5:0] };
      12'h143:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      rg_stval;
      12'h144:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      csr_mip$mv_sip_read;
      12'h180:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 = rg_satp;
      12'h300:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      64'h800000000014112D;
      12'h302:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { 35'd0, rg_medeleg };
      12'h303:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      csr_mie$mv_read;
      12'h305:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320[63:2],
		1'b0,
		SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320[0] };
      12'h306:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { 32'd0, rg_mcounteren };
      12'h320:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { 32'd0, x__h9697 };
      12'h340:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      SEXT__0b0_CONCAT_rg_mepcc_27_BITS_85_TO_72_28__ETC___d350;
      12'h342:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      rg_tdata2;
      12'h9C0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { 48'd0, x__h10227 };
      12'hB00, 12'hC00:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      rg_minstret;
      12'hBC0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      { 48'd0, x__h10255 };
      12'hC01:
	  IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
	      rg_mtime;
      default: IF_read_csr_port2_csr_addr_EQ_0x1_22_THEN_0_CO_ETC___d565 =
		   rg_tdata3;
    endcase
  end
  always@(idx__h9770 or
	  perf_counters$read_counters_0__read or
	  perf_counters$read_counters_1__read or
	  perf_counters$read_counters_2__read or
	  perf_counters$read_counters_3__read or
	  perf_counters$read_counters_4__read or
	  perf_counters$read_counters_5__read or
	  perf_counters$read_counters_6__read or
	  perf_counters$read_counters_7__read or
	  perf_counters$read_counters_8__read or
	  perf_counters$read_counters_9__read or
	  perf_counters$read_counters_10__read or
	  perf_counters$read_counters_11__read or
	  perf_counters$read_counters_12__read or
	  perf_counters$read_counters_13__read or
	  perf_counters$read_counters_14__read or
	  perf_counters$read_counters_15__read or
	  perf_counters$read_counters_16__read or
	  perf_counters$read_counters_17__read or
	  perf_counters$read_counters_18__read or
	  perf_counters$read_counters_19__read or
	  perf_counters$read_counters_20__read or
	  perf_counters$read_counters_21__read or
	  perf_counters$read_counters_22__read or
	  perf_counters$read_counters_23__read or
	  perf_counters$read_counters_24__read or
	  perf_counters$read_counters_25__read or
	  perf_counters$read_counters_26__read or
	  perf_counters$read_counters_27__read or
	  perf_counters$read_counters_28__read)
  begin
    case (idx__h9770)
      12'd0:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_0__read;
      12'd1:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_1__read;
      12'd2:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_2__read;
      12'd3:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_3__read;
      12'd4:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_4__read;
      12'd5:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_5__read;
      12'd6:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_6__read;
      12'd7:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_7__read;
      12'd8:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_8__read;
      12'd9:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_9__read;
      12'd10:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_10__read;
      12'd11:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_11__read;
      12'd12:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_12__read;
      12'd13:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_13__read;
      12'd14:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_14__read;
      12'd15:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_15__read;
      12'd16:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_16__read;
      12'd17:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_17__read;
      12'd18:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_18__read;
      12'd19:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_19__read;
      12'd20:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_20__read;
      12'd21:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_21__read;
      12'd22:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_22__read;
      12'd23:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_23__read;
      12'd24:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_24__read;
      12'd25:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_25__read;
      12'd26:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_26__read;
      12'd27:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_27__read;
      12'd28:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
	      perf_counters$read_counters_28__read;
      default: SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d516 =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(idx__h9747 or
	  perf_counters$read_counters_0__read or
	  perf_counters$read_counters_1__read or
	  perf_counters$read_counters_2__read or
	  perf_counters$read_counters_3__read or
	  perf_counters$read_counters_4__read or
	  perf_counters$read_counters_5__read or
	  perf_counters$read_counters_6__read or
	  perf_counters$read_counters_7__read or
	  perf_counters$read_counters_8__read or
	  perf_counters$read_counters_9__read or
	  perf_counters$read_counters_10__read or
	  perf_counters$read_counters_11__read or
	  perf_counters$read_counters_12__read or
	  perf_counters$read_counters_13__read or
	  perf_counters$read_counters_14__read or
	  perf_counters$read_counters_15__read or
	  perf_counters$read_counters_16__read or
	  perf_counters$read_counters_17__read or
	  perf_counters$read_counters_18__read or
	  perf_counters$read_counters_19__read or
	  perf_counters$read_counters_20__read or
	  perf_counters$read_counters_21__read or
	  perf_counters$read_counters_22__read or
	  perf_counters$read_counters_23__read or
	  perf_counters$read_counters_24__read or
	  perf_counters$read_counters_25__read or
	  perf_counters$read_counters_26__read or
	  perf_counters$read_counters_27__read or
	  perf_counters$read_counters_28__read)
  begin
    case (idx__h9747)
      12'd0:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_0__read;
      12'd1:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_1__read;
      12'd2:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_2__read;
      12'd3:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_3__read;
      12'd4:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_4__read;
      12'd5:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_5__read;
      12'd6:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_6__read;
      12'd7:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_7__read;
      12'd8:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_8__read;
      12'd9:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_9__read;
      12'd10:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_10__read;
      12'd11:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_11__read;
      12'd12:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_12__read;
      12'd13:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_13__read;
      12'd14:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_14__read;
      12'd15:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_15__read;
      12'd16:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_16__read;
      12'd17:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_17__read;
      12'd18:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_18__read;
      12'd19:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_19__read;
      12'd20:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_20__read;
      12'd21:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_21__read;
      12'd22:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_22__read;
      12'd23:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_23__read;
      12'd24:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_24__read;
      12'd25:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_25__read;
      12'd26:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_26__read;
      12'd27:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_27__read;
      12'd28:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
	      perf_counters$read_counters_28__read;
      default: SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d512 =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(mav_read_csr_csr_addr or
	  rg_tdata3 or
	  rg_fflags or
	  rg_frm or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_sie_read or
	  SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250 or
	  rg_sscratch or
	  SEXT__0b0_CONCAT_rg_sepcc_55_BITS_85_TO_72_56__ETC___d278 or
	  rg_scause or
	  rg_stval or
	  csr_mip$mv_sip_read or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  csr_mie$mv_read or
	  SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320 or
	  rg_mcounteren or
	  x__h9697 or
	  rg_mscratch or
	  SEXT__0b0_CONCAT_rg_mepcc_27_BITS_85_TO_72_28__ETC___d350 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  x__h10227 or rg_mcycle or rg_minstret or x__h10255 or rg_mtime)
  begin
    case (mav_read_csr_csr_addr)
      12'h001:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { 59'd0, rg_fflags };
      12'h002:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { 61'd0, rg_frm };
      12'h003:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { 56'd0, rg_frm, rg_fflags };
      12'h100:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { csr_mstatus_rg_mstatus[63],
		29'd0,
		csr_mstatus_rg_mstatus[33:32],
		12'd0,
		csr_mstatus_rg_mstatus[19:18],
		1'd0,
		csr_mstatus_rg_mstatus[16:13],
		4'd0,
		csr_mstatus_rg_mstatus[8],
		2'd0,
		csr_mstatus_rg_mstatus[5:4],
		2'd0,
		csr_mstatus_rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 = 64'd0;
      12'h104:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      csr_mie$mv_sie_read;
      12'h105:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250[63:2],
		1'b0,
		SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250[0] };
      12'h140:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      rg_sscratch;
      12'h141:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      SEXT__0b0_CONCAT_rg_sepcc_55_BITS_85_TO_72_56__ETC___d278;
      12'h142:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { rg_scause[6], 57'd0, rg_scause[5:0] };
      12'h143:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      rg_stval;
      12'h144:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      csr_mip$mv_sip_read;
      12'h180:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 = rg_satp;
      12'h300:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      64'h800000000014112D;
      12'h302:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { 35'd0, rg_medeleg };
      12'h303:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      csr_mie$mv_read;
      12'h305:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320[63:2],
		1'b0,
		SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320[0] };
      12'h306:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { 32'd0, rg_mcounteren };
      12'h320:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { 32'd0, x__h9697 };
      12'h340:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      rg_mscratch;
      12'h341:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      SEXT__0b0_CONCAT_rg_mepcc_27_BITS_85_TO_72_28__ETC___d350;
      12'h342:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      rg_mtval;
      12'h344:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      rg_tselect;
      12'h7A1:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      rg_tdata1;
      12'h7A2:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      rg_tdata2;
      12'h9C0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { 48'd0, x__h10227 };
      12'hB00, 12'hC00:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      rg_minstret;
      12'hBC0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      { 48'd0, x__h10255 };
      12'hC01:
	  IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
	      rg_mtime;
      default: IF_mav_read_csr_csr_addr_EQ_0x1_07_THEN_0_CONC_ETC___d750 =
		   rg_tdata3;
    endcase
  end
  always@(idx__h11633 or
	  perf_counters$read_counters_0__read or
	  perf_counters$read_counters_1__read or
	  perf_counters$read_counters_2__read or
	  perf_counters$read_counters_3__read or
	  perf_counters$read_counters_4__read or
	  perf_counters$read_counters_5__read or
	  perf_counters$read_counters_6__read or
	  perf_counters$read_counters_7__read or
	  perf_counters$read_counters_8__read or
	  perf_counters$read_counters_9__read or
	  perf_counters$read_counters_10__read or
	  perf_counters$read_counters_11__read or
	  perf_counters$read_counters_12__read or
	  perf_counters$read_counters_13__read or
	  perf_counters$read_counters_14__read or
	  perf_counters$read_counters_15__read or
	  perf_counters$read_counters_16__read or
	  perf_counters$read_counters_17__read or
	  perf_counters$read_counters_18__read or
	  perf_counters$read_counters_19__read or
	  perf_counters$read_counters_20__read or
	  perf_counters$read_counters_21__read or
	  perf_counters$read_counters_22__read or
	  perf_counters$read_counters_23__read or
	  perf_counters$read_counters_24__read or
	  perf_counters$read_counters_25__read or
	  perf_counters$read_counters_26__read or
	  perf_counters$read_counters_27__read or
	  perf_counters$read_counters_28__read)
  begin
    case (idx__h11633)
      12'd0:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_0__read;
      12'd1:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_1__read;
      12'd2:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_2__read;
      12'd3:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_3__read;
      12'd4:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_4__read;
      12'd5:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_5__read;
      12'd6:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_6__read;
      12'd7:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_7__read;
      12'd8:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_8__read;
      12'd9:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_9__read;
      12'd10:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_10__read;
      12'd11:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_11__read;
      12'd12:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_12__read;
      12'd13:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_13__read;
      12'd14:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_14__read;
      12'd15:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_15__read;
      12'd16:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_16__read;
      12'd17:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_17__read;
      12'd18:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_18__read;
      12'd19:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_19__read;
      12'd20:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_20__read;
      12'd21:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_21__read;
      12'd22:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_22__read;
      12'd23:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_23__read;
      12'd24:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_24__read;
      12'd25:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_25__read;
      12'd26:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_26__read;
      12'd27:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_27__read;
      12'd28:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
	      perf_counters$read_counters_28__read;
      default: SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d701 =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(idx__h11610 or
	  perf_counters$read_counters_0__read or
	  perf_counters$read_counters_1__read or
	  perf_counters$read_counters_2__read or
	  perf_counters$read_counters_3__read or
	  perf_counters$read_counters_4__read or
	  perf_counters$read_counters_5__read or
	  perf_counters$read_counters_6__read or
	  perf_counters$read_counters_7__read or
	  perf_counters$read_counters_8__read or
	  perf_counters$read_counters_9__read or
	  perf_counters$read_counters_10__read or
	  perf_counters$read_counters_11__read or
	  perf_counters$read_counters_12__read or
	  perf_counters$read_counters_13__read or
	  perf_counters$read_counters_14__read or
	  perf_counters$read_counters_15__read or
	  perf_counters$read_counters_16__read or
	  perf_counters$read_counters_17__read or
	  perf_counters$read_counters_18__read or
	  perf_counters$read_counters_19__read or
	  perf_counters$read_counters_20__read or
	  perf_counters$read_counters_21__read or
	  perf_counters$read_counters_22__read or
	  perf_counters$read_counters_23__read or
	  perf_counters$read_counters_24__read or
	  perf_counters$read_counters_25__read or
	  perf_counters$read_counters_26__read or
	  perf_counters$read_counters_27__read or
	  perf_counters$read_counters_28__read)
  begin
    case (idx__h11610)
      12'd0:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_0__read;
      12'd1:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_1__read;
      12'd2:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_2__read;
      12'd3:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_3__read;
      12'd4:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_4__read;
      12'd5:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_5__read;
      12'd6:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_6__read;
      12'd7:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_7__read;
      12'd8:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_8__read;
      12'd9:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_9__read;
      12'd10:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_10__read;
      12'd11:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_11__read;
      12'd12:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_12__read;
      12'd13:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_13__read;
      12'd14:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_14__read;
      12'd15:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_15__read;
      12'd16:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_16__read;
      12'd17:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_17__read;
      12'd18:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_18__read;
      12'd19:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_19__read;
      12'd20:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_20__read;
      12'd21:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_21__read;
      12'd22:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_22__read;
      12'd23:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_23__read;
      12'd24:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_24__read;
      12'd25:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_25__read;
      12'd26:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_26__read;
      12'd27:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_27__read;
      12'd28:
	  SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
	      perf_counters$read_counters_28__read;
      default: SEL_ARR_perf_counters_read_counters_0__read__3_ETC___d697 =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(read_scr_scr_addr or
	  rg_mepcc or
	  rg_stcc or
	  rg_stdc or
	  rg_sscratchc or rg_sepcc or rg_mtcc or rg_mtdc or rg_mscratchc)
  begin
    case (read_scr_scr_addr)
      5'd12:
	  IF_read_scr_scr_addr_EQ_12_69_THEN_rg_stcc_27__ETC___d594 = rg_stcc;
      5'd13:
	  IF_read_scr_scr_addr_EQ_12_69_THEN_rg_stcc_27__ETC___d594 = rg_stdc;
      5'd14:
	  IF_read_scr_scr_addr_EQ_12_69_THEN_rg_stcc_27__ETC___d594 =
	      rg_sscratchc;
      5'd15:
	  IF_read_scr_scr_addr_EQ_12_69_THEN_rg_stcc_27__ETC___d594 =
	      rg_sepcc;
      5'd28:
	  IF_read_scr_scr_addr_EQ_12_69_THEN_rg_stcc_27__ETC___d594 = rg_mtcc;
      5'd29:
	  IF_read_scr_scr_addr_EQ_12_69_THEN_rg_stcc_27__ETC___d594 = rg_mtdc;
      5'd30:
	  IF_read_scr_scr_addr_EQ_12_69_THEN_rg_stcc_27__ETC___d594 =
	      rg_mscratchc;
      default: IF_read_scr_scr_addr_EQ_12_69_THEN_rg_stcc_27__ETC___d594 =
		   rg_mepcc;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	csr_mstatus_rg_mstatus <= `BSV_ASSIGNMENT_DELAY 64'h0000000A00002000;
	rg_ctr_inhib_ir_cy <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mepcc <= `BSV_ASSIGNMENT_DELAY
	    151'h0000000000000000000000001FFFFF44000000;
	rg_minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mscratchc <= `BSV_ASSIGNMENT_DELAY
	    151'h0000000000000000000000001FFFFF44000000;
	rg_mtcc <= `BSV_ASSIGNMENT_DELAY
	    151'h0000000000000000000000001FFFFF44000000;
	rg_mtdc <= `BSV_ASSIGNMENT_DELAY
	    151'h0000000000000000000000001FFFFF44000000;
	rg_mtime <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_nmi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sepcc <= `BSV_ASSIGNMENT_DELAY
	    151'h0000000000000000000000001FFFFF44000000;
	rg_sscratchc <= `BSV_ASSIGNMENT_DELAY
	    151'h0000000000000000000000001FFFFF44000000;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stcc <= `BSV_ASSIGNMENT_DELAY
	    151'h0000000000000000000000001FFFFF44000000;
	rg_stdc <= `BSV_ASSIGNMENT_DELAY
	    151'h0000000000000000000000001FFFFF44000000;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (csr_mstatus_rg_mstatus$EN)
	  csr_mstatus_rg_mstatus <= `BSV_ASSIGNMENT_DELAY
	      csr_mstatus_rg_mstatus$D_IN;
	if (rg_ctr_inhib_ir_cy$EN)
	  rg_ctr_inhib_ir_cy <= `BSV_ASSIGNMENT_DELAY rg_ctr_inhib_ir_cy$D_IN;
	if (rg_mcycle$EN) rg_mcycle <= `BSV_ASSIGNMENT_DELAY rg_mcycle$D_IN;
	if (rg_mepcc$EN) rg_mepcc <= `BSV_ASSIGNMENT_DELAY rg_mepcc$D_IN;
	if (rg_minstret$EN)
	  rg_minstret <= `BSV_ASSIGNMENT_DELAY rg_minstret$D_IN;
	if (rg_mscratchc$EN)
	  rg_mscratchc <= `BSV_ASSIGNMENT_DELAY rg_mscratchc$D_IN;
	if (rg_mtcc$EN) rg_mtcc <= `BSV_ASSIGNMENT_DELAY rg_mtcc$D_IN;
	if (rg_mtdc$EN) rg_mtdc <= `BSV_ASSIGNMENT_DELAY rg_mtdc$D_IN;
	if (rg_mtime$EN) rg_mtime <= `BSV_ASSIGNMENT_DELAY rg_mtime$D_IN;
	if (rg_nmi$EN) rg_nmi <= `BSV_ASSIGNMENT_DELAY rg_nmi$D_IN;
	if (rg_sepcc$EN) rg_sepcc <= `BSV_ASSIGNMENT_DELAY rg_sepcc$D_IN;
	if (rg_sscratchc$EN)
	  rg_sscratchc <= `BSV_ASSIGNMENT_DELAY rg_sscratchc$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_stcc$EN) rg_stcc <= `BSV_ASSIGNMENT_DELAY rg_stcc$D_IN;
	if (rg_stdc$EN) rg_stdc <= `BSV_ASSIGNMENT_DELAY rg_stdc$D_IN;
      end
    if (rg_dcsr$EN) rg_dcsr <= `BSV_ASSIGNMENT_DELAY rg_dcsr$D_IN;
    if (rg_dpcc$EN) rg_dpcc <= `BSV_ASSIGNMENT_DELAY rg_dpcc$D_IN;
    if (rg_dscratch0$EN)
      rg_dscratch0 <= `BSV_ASSIGNMENT_DELAY rg_dscratch0$D_IN;
    if (rg_dscratch1$EN)
      rg_dscratch1 <= `BSV_ASSIGNMENT_DELAY rg_dscratch1$D_IN;
    if (rg_fflags$EN) rg_fflags <= `BSV_ASSIGNMENT_DELAY rg_fflags$D_IN;
    if (rg_frm$EN) rg_frm <= `BSV_ASSIGNMENT_DELAY rg_frm$D_IN;
    if (rg_mcause$EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause$D_IN;
    if (rg_mccsr$EN) rg_mccsr <= `BSV_ASSIGNMENT_DELAY rg_mccsr$D_IN;
    if (rg_mcounteren$EN)
      rg_mcounteren <= `BSV_ASSIGNMENT_DELAY rg_mcounteren$D_IN;
    if (rg_medeleg$EN) rg_medeleg <= `BSV_ASSIGNMENT_DELAY rg_medeleg$D_IN;
    if (rg_mideleg$EN) rg_mideleg <= `BSV_ASSIGNMENT_DELAY rg_mideleg$D_IN;
    if (rg_mscratch$EN) rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch$D_IN;
    if (rg_mtval$EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval$D_IN;
    if (rg_nmi_vector$EN)
      rg_nmi_vector <= `BSV_ASSIGNMENT_DELAY rg_nmi_vector$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_scause$EN) rg_scause <= `BSV_ASSIGNMENT_DELAY rg_scause$D_IN;
    if (rg_sccsr$EN) rg_sccsr <= `BSV_ASSIGNMENT_DELAY rg_sccsr$D_IN;
    if (rg_sscratch$EN) rg_sscratch <= `BSV_ASSIGNMENT_DELAY rg_sscratch$D_IN;
    if (rg_stval$EN) rg_stval <= `BSV_ASSIGNMENT_DELAY rg_stval$D_IN;
    if (rg_tdata1$EN) rg_tdata1 <= `BSV_ASSIGNMENT_DELAY rg_tdata1$D_IN;
    if (rg_tdata2$EN) rg_tdata2 <= `BSV_ASSIGNMENT_DELAY rg_tdata2$D_IN;
    if (rg_tdata3$EN) rg_tdata3 <= `BSV_ASSIGNMENT_DELAY rg_tdata3$D_IN;
    if (rg_tselect$EN) rg_tselect <= `BSV_ASSIGNMENT_DELAY rg_tselect$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    csr_mstatus_rg_mstatus = 64'hAAAAAAAAAAAAAAAA;
    rg_ctr_inhib_ir_cy = 2'h2;
    rg_dcsr = 32'hAAAAAAAA;
    rg_dpcc = 161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_dscratch0 = 64'hAAAAAAAAAAAAAAAA;
    rg_dscratch1 = 64'hAAAAAAAAAAAAAAAA;
    rg_fflags = 5'h0A;
    rg_frm = 3'h2;
    rg_mcause = 7'h2A;
    rg_mccsr = 11'h2AA;
    rg_mcounteren = 32'hAAAAAAAA;
    rg_mcycle = 64'hAAAAAAAAAAAAAAAA;
    rg_medeleg = 29'h0AAAAAAA;
    rg_mepcc = 151'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mideleg = 12'hAAA;
    rg_minstret = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratchc = 151'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtcc = 151'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtdc = 151'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtime = 64'hAAAAAAAAAAAAAAAA;
    rg_mtval = 64'hAAAAAAAAAAAAAAAA;
    rg_nmi = 1'h0;
    rg_nmi_vector = 64'hAAAAAAAAAAAAAAAA;
    rg_satp = 64'hAAAAAAAAAAAAAAAA;
    rg_scause = 7'h2A;
    rg_sccsr = 11'h2AA;
    rg_sepcc = 151'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_sscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_sscratchc = 151'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state = 1'h0;
    rg_stcc = 151'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_stdc = 151'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_stval = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata1 = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata2 = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata3 = 64'hAAAAAAAAAAAAAAAA;
    rg_tselect = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mstatus = 0x%0h", csr_mstatus_rg_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug)
	$display("sstatus = 0x%0h",
		 { csr_mstatus_rg_mstatus[63],
		   29'd0,
		   csr_mstatus_rg_mstatus[33:32],
		   12'd0,
		   csr_mstatus_rg_mstatus[19:18],
		   1'd0,
		   csr_mstatus_rg_mstatus[16:13],
		   4'd0,
		   csr_mstatus_rg_mstatus[8],
		   2'd0,
		   csr_mstatus_rg_mstatus[5:4],
		   2'd0,
		   csr_mstatus_rg_mstatus[1:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mip     = 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("sip     = 0x%0h", csr_mip$mv_sip_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mie     = 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("sie     = 0x%0h", csr_mie$mv_sie_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_csr_write &&
	  (mav_csr_write_csr_addr_ULT_0xB03___d754 ||
	   !mav_csr_write_csr_addr_ULE_0xB1F___d756) &&
	  mav_csr_write_csr_addr_ULT_0x323_62_OR_NOT_mav_ETC___d1182 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$display("%0d: ERROR: CSR-write addr 0x%0h val 0x%0h not successful",
		 rg_mcycle,
		 mav_csr_write_csr_addr,
		 mav_csr_write_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$display("%0d: CSR_Regfile.csr_trap_actions:", rg_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$display("    from priv %0d  pc 0x%0h  interrupt %0d  exc_code %0d  xtval 0x%0h",
		 csr_trap_actions_from_priv,
		 x__h29619 | addrLSB__h29608,
		 csr_trap_actions_interrupt,
		 csr_trap_actions_exc_code,
		 csr_trap_actions_xtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("    priv %0d: ", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" ip: 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" ie: 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" edeleg: 0x%0h", 29'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" ideleg: 0x%0h", 12'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_scause[6] &&
	  rg_scause[5:0] != 6'd0 &&
	  rg_scause[5:0] != 6'd1 &&
	  rg_scause[5:0] != 6'd2 &&
	  rg_scause[5:0] != 6'd3 &&
	  rg_scause[5:0] != 6'd4 &&
	  rg_scause[5:0] != 6'd5 &&
	  rg_scause[5:0] != 6'd6 &&
	  rg_scause[5:0] != 6'd7 &&
	  rg_scause[5:0] != 6'd8 &&
	  rg_scause[5:0] != 6'd9 &&
	  rg_scause[5:0] != 6'd10 &&
	  rg_scause[5:0] != 6'd11)
	$write("unknown interrupt Exc_Code %d", rg_scause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] != 6'd0 &&
	  rg_scause[5:0] != 6'd1 &&
	  rg_scause[5:0] != 6'd2 &&
	  rg_scause[5:0] != 6'd3 &&
	  rg_scause[5:0] != 6'd4 &&
	  rg_scause[5:0] != 6'd5 &&
	  rg_scause[5:0] != 6'd6 &&
	  rg_scause[5:0] != 6'd7 &&
	  rg_scause[5:0] != 6'd8 &&
	  rg_scause[5:0] != 6'd9 &&
	  rg_scause[5:0] != 6'd11 &&
	  rg_scause[5:0] != 6'd12 &&
	  rg_scause[5:0] != 6'd13 &&
	  rg_scause[5:0] != 6'd15)
	$write("unknown trap Exc_Code %d", rg_scause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" status: 0x%0h",
	       { csr_mstatus_rg_mstatus[63],
		 29'd0,
		 csr_mstatus_rg_mstatus[33:32],
		 12'd0,
		 csr_mstatus_rg_mstatus[19:18],
		 1'd0,
		 csr_mstatus_rg_mstatus[16:13],
		 4'd0,
		 csr_mstatus_rg_mstatus[8],
		 2'd0,
		 csr_mstatus_rg_mstatus[5:4],
		 2'd0,
		 csr_mstatus_rg_mstatus[1:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" tvec: 0x%0h",
	       { SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250[63:2],
		 1'b0,
		 SEXT__0b0_CONCAT_rg_stcc_27_BITS_85_TO_72_28_2_ETC___d250[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" epc: 0x%0h",
	       SEXT__0b0_CONCAT_rg_sepcc_55_BITS_85_TO_72_56__ETC___d278);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" tval: 0x%0h", rg_stval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("    priv %0d: ", 2'b11);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" ip: 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" ie: 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" edeleg: 0x%0h", rg_medeleg);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" ideleg: 0x%0h", rg_mideleg);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] != 6'd0 &&
	  rg_mcause[5:0] != 6'd1 &&
	  rg_mcause[5:0] != 6'd2 &&
	  rg_mcause[5:0] != 6'd3 &&
	  rg_mcause[5:0] != 6'd4 &&
	  rg_mcause[5:0] != 6'd5 &&
	  rg_mcause[5:0] != 6'd6 &&
	  rg_mcause[5:0] != 6'd7 &&
	  rg_mcause[5:0] != 6'd8 &&
	  rg_mcause[5:0] != 6'd9 &&
	  rg_mcause[5:0] != 6'd10 &&
	  rg_mcause[5:0] != 6'd11)
	$write("unknown interrupt Exc_Code %d", rg_mcause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] != 6'd0 &&
	  rg_mcause[5:0] != 6'd1 &&
	  rg_mcause[5:0] != 6'd2 &&
	  rg_mcause[5:0] != 6'd3 &&
	  rg_mcause[5:0] != 6'd4 &&
	  rg_mcause[5:0] != 6'd5 &&
	  rg_mcause[5:0] != 6'd6 &&
	  rg_mcause[5:0] != 6'd7 &&
	  rg_mcause[5:0] != 6'd8 &&
	  rg_mcause[5:0] != 6'd9 &&
	  rg_mcause[5:0] != 6'd11 &&
	  rg_mcause[5:0] != 6'd12 &&
	  rg_mcause[5:0] != 6'd13 &&
	  rg_mcause[5:0] != 6'd15)
	$write("unknown trap Exc_Code %d", rg_mcause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" status: 0x%0h", csr_mstatus_rg_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" tvec: 0x%0h",
	       { SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320[63:2],
		 1'b0,
		 SEXT__0b0_CONCAT_rg_mtcc_97_BITS_85_TO_72_98_9_ETC___d320[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" epc: 0x%0h",
	       SEXT__0b0_CONCAT_rg_mepcc_27_BITS_85_TO_72_28__ETC___d350);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" tval: 0x%0h", rg_mtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("    Return: new pc 0x%0h  ", _theResult_____2__h32467);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" new mstatus:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("MStatus{",
	       "sd:%0d",
	       x__h35688[14:13] == 2'h3 || x__h35688[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" sxl:%0d uxl:%0d", x__h35688[35:34], x__h35688[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" tsr:%0d", x__h35688[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" tw:%0d", x__h35688[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" tvm:%0d", x__h35688[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" mxr:%0d", x__h35688[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" sum:%0d", x__h35688[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" mprv:%0d", x__h35688[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" xs:%0d", x__h35688[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" fs:%0d", x__h35688[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" mpp:%0d", x__h35688[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" spp:%0d", x__h35688[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" pies:%0d_%0d%0d", x__h35688[7], x__h35688[5], x__h35688[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" ies:%0d_%0d%0d", x__h35688[3], x__h35688[1], x__h35688[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" new xcause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h33277 == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h33277 == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h33277 == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h33277 == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h33277 == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h33277 == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h33277 == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h33277 == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h33277 == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h33277 == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h33277 == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h33277 == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  NOT_csr_trap_actions_nmi_843_AND_csr_trap_acti_ETC___d1957)
	$write("unknown interrupt Exc_Code %d", exc_code__h33277);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h33277 == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186 &&
	  csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d2008)
	$write("unknown trap Exc_Code %d", exc_code__h33277);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" new priv %0d", new_priv__h30923);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("%0d: ERROR: SCR-write addr 0x%0h val ",
	       rg_mcycle,
	       mav_scr_write_scr_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("valid:%b",
	       mav_scr_write_cap[150],
	       " perms:0x%x",
	       { 15'd0, mav_scr_write_cap[71:56] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" reserved:0x%x", mav_scr_write_cap[54:53]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" format:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1379)
	$write("EmbeddedExp");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1381)
	$write("Exp0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" bounds:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("Bounds { ", "exp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("%d", $unsigned(mav_scr_write_cap[33:28]));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(", ", "topBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("'h%h", mav_scr_write_cap[27:14]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(", ", "baseBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("'h%h", mav_scr_write_cap[13:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" address:0x%x", mav_scr_write_cap[149:86]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" addrBits:0x%x", mav_scr_write_cap[85:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" {bot:0x%x top:0x%x len:0x%x offset:0x%x}",
	       mav_scr_write_cap_BITS_149_TO_100_315_AND_1125_ETC___d1320,
	       IF_mav_scr_write_cap_BITS_33_TO_28_257_ULT_51__ETC___d1416,
	       (mav_scr_write_cap[33:28] < 6'd52) ?
		 length__h27691 :
		 65'h1FFFFFFFFFFFFFFFF,
	       SEXT__0b0_CONCAT_mav_scr_write_cap_BITS_85_TO__ETC___d1284);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" (TempFields: {");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("MetaInfo { ", "repBoundTopBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("'h%h", repBound__h27916);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(", ", "topHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1422)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1424)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(", ", "baseHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1425)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1427)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(", ", "addrHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1428)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_256_359_AND_N_ETC___d1429)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(", ", "topCorrection: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("%d", $signed(x__h27977));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(", ", "baseCorrection: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("%d", $signed(x__h27996), " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write("})");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$write(" not successful", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_m_external_interrupt_req &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$display("%0d: CSR_RegFile: m_external_interrupt_req: %x",
		 rg_mcycle,
		 m_external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_s_external_interrupt_req &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$display("%0d: CSR_RegFile: s_external_interrupt_req: %x",
		 rg_mcycle,
		 s_external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_timer_interrupt_req &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$display("%0d: CSR_RegFile: timer_interrupt_req: %x",
		 rg_mcycle,
		 timer_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_software_interrupt_req &&
	  NOT_cfg_verbosity_read__184_ULE_1_185___d1186)
	$display("%0d: CSR_RegFile: software_interrupt_req: %x",
		 rg_mcycle,
		 software_interrupt_req_set_not_clear);
  end
  // synopsys translate_on
endmodule  // mkCSR_RegFile

