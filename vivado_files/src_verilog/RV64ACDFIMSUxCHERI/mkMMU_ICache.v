//
// Generated by Bluespec Compiler, version untagged-g034050db (build 034050db)
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// cword_fst                      O     1
// cword_snd                      O   128
// st_amo_val_fst                 O     1 const
// st_amo_val_snd                 O   128 const
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_aw_canPeek          O     1 reg
// mem_master_aw_peek             O    98 reg
// RDY_mem_master_aw_peek         O     1 reg
// RDY_mem_master_aw_drop         O     1 reg
// mem_master_w_canPeek           O     1 reg
// mem_master_w_peek              O    74 reg
// RDY_mem_master_w_peek          O     1 reg
// RDY_mem_master_w_drop          O     1 reg
// mem_master_b_canPut            O     1 reg
// RDY_mem_master_b_put           O     1 reg
// mem_master_ar_canPeek          O     1 reg
// mem_master_ar_peek             O    98 reg
// RDY_mem_master_ar_peek         O     1 reg
// RDY_mem_master_ar_drop         O     1 reg
// mem_master_r_canPut            O     1 reg
// RDY_mem_master_r_put           O     1 reg
// events                         O    14 reg
// RDY_events                     O     1 const
// RDY_set_watch_tohost           O     1 const
// mv_tohost_value                O    64 reg
// RDY_mv_tohost_value            O     1 const
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct5                 I     5 reg
// req_addr                       I    64
// req_st_value                   I   129 reg
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    64 reg
// mem_master_b_put_val           I     7 reg
// mem_master_r_put_val           I    73 reg
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
// EN_mem_master_aw_drop          I     1
// EN_mem_master_w_drop           I     1
// EN_mem_master_b_put            I     1
// EN_mem_master_ar_drop          I     1
// EN_mem_master_r_put            I     1
// EN_set_watch_tohost            I     1
// EN_ma_ddr4_ready               I     1
//
// Combinational paths from inputs to outputs:
//   EN_commit -> valid
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_ICache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct5,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    cword_fst,

		    cword_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_aw_canPeek,

		    mem_master_aw_peek,
		    RDY_mem_master_aw_peek,

		    EN_mem_master_aw_drop,
		    RDY_mem_master_aw_drop,

		    mem_master_w_canPeek,

		    mem_master_w_peek,
		    RDY_mem_master_w_peek,

		    EN_mem_master_w_drop,
		    RDY_mem_master_w_drop,

		    mem_master_b_canPut,

		    mem_master_b_put_val,
		    EN_mem_master_b_put,
		    RDY_mem_master_b_put,

		    mem_master_ar_canPeek,

		    mem_master_ar_peek,
		    RDY_mem_master_ar_peek,

		    EN_mem_master_ar_drop,
		    RDY_mem_master_ar_drop,

		    mem_master_r_canPut,

		    mem_master_r_put_val,
		    EN_mem_master_r_put,
		    RDY_mem_master_r_put,

		    events,
		    RDY_events,

		    set_watch_tohost_watch_tohost,
		    set_watch_tohost_tohost_addr,
		    EN_set_watch_tohost,
		    RDY_set_watch_tohost,

		    mv_tohost_value,
		    RDY_mv_tohost_value,

		    EN_ma_ddr4_ready,
		    RDY_ma_ddr4_ready,

		    mv_status);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [4 : 0] req_amo_funct5;
  input  [63 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method cword_fst
  output cword_fst;

  // value method cword_snd
  output [127 : 0] cword_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_canPeek
  output mem_master_aw_canPeek;

  // value method mem_master_aw_peek
  output [97 : 0] mem_master_aw_peek;
  output RDY_mem_master_aw_peek;

  // action method mem_master_aw_drop
  input  EN_mem_master_aw_drop;
  output RDY_mem_master_aw_drop;

  // value method mem_master_w_canPeek
  output mem_master_w_canPeek;

  // value method mem_master_w_peek
  output [73 : 0] mem_master_w_peek;
  output RDY_mem_master_w_peek;

  // action method mem_master_w_drop
  input  EN_mem_master_w_drop;
  output RDY_mem_master_w_drop;

  // value method mem_master_b_canPut
  output mem_master_b_canPut;

  // action method mem_master_b_put
  input  [6 : 0] mem_master_b_put_val;
  input  EN_mem_master_b_put;
  output RDY_mem_master_b_put;

  // value method mem_master_ar_canPeek
  output mem_master_ar_canPeek;

  // value method mem_master_ar_peek
  output [97 : 0] mem_master_ar_peek;
  output RDY_mem_master_ar_peek;

  // action method mem_master_ar_drop
  input  EN_mem_master_ar_drop;
  output RDY_mem_master_ar_drop;

  // value method mem_master_r_canPut
  output mem_master_r_canPut;

  // action method mem_master_r_put
  input  [72 : 0] mem_master_r_put_val;
  input  EN_mem_master_r_put;
  output RDY_mem_master_r_put;

  // value method events
  output [13 : 0] events;
  output RDY_events;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [63 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [127 : 0] cword_snd, st_amo_val_snd;
  wire [97 : 0] mem_master_ar_peek, mem_master_aw_peek;
  wire [73 : 0] mem_master_w_peek;
  wire [63 : 0] addr, mv_tohost_value;
  wire [13 : 0] events;
  wire [7 : 0] mv_status;
  wire [5 : 0] exc_code;
  wire RDY_events,
       RDY_ma_ddr4_ready,
       RDY_mem_master_ar_drop,
       RDY_mem_master_ar_peek,
       RDY_mem_master_aw_drop,
       RDY_mem_master_aw_peek,
       RDY_mem_master_b_put,
       RDY_mem_master_r_put,
       RDY_mem_master_w_drop,
       RDY_mem_master_w_peek,
       RDY_mv_tohost_value,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_set_watch_tohost,
       RDY_tlb_flush,
       cword_fst,
       exc,
       mem_master_ar_canPeek,
       mem_master_aw_canPeek,
       mem_master_b_canPut,
       mem_master_r_canPut,
       mem_master_w_canPeek,
       st_amo_val_fst,
       valid;

  // inlined wires
  wire [128 : 0] cache_dw_output_ld_val$wget;
  wire [13 : 0] cache_aw_events_wires_ifc_ifc_wires_1$wget,
		cache_aw_events_wires_ifc_ifc_wires_3$wget,
		cache_aw_events_wires_ifc_ifc_wires_4$wget,
		cache_aw_events_wires_ifc_ifc_wires_6$wget,
		cache_aw_events_wires_ifc_ifc_wires_7$wget;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$port0__write_1,
	       cache_ctr_wr_rsps_pending_crg$port1__write_1,
	       cache_ctr_wr_rsps_pending_crg$port2__read,
	       cache_ctr_wr_rsps_pending_crg$port3__read;
  wire cache_ctr_wr_rsps_pending_crg$EN_port2__write,
       cache_dw_valid$wget,
       cache_dw_valid$whas,
       cache_rw_reset_req$whas;

  // register cache_aw_events_register
  reg [13 : 0] cache_aw_events_register;
  wire [13 : 0] cache_aw_events_register$D_IN;
  wire cache_aw_events_register$EN;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_ctr_wr_rsps_pending_crg
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$D_IN;
  wire cache_ctr_wr_rsps_pending_crg$EN;

  // register cache_rg_addr
  reg [63 : 0] cache_rg_addr;
  wire [63 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_allow_cap
  reg cache_rg_allow_cap;
  wire cache_rg_allow_cap$D_IN, cache_rg_allow_cap$EN;

  // register cache_rg_amo_funct5
  reg [4 : 0] cache_rg_amo_funct5;
  wire [4 : 0] cache_rg_amo_funct5$D_IN;
  wire cache_rg_amo_funct5$EN;

  // register cache_rg_cache_rereq_data
  reg cache_rg_cache_rereq_data;
  wire cache_rg_cache_rereq_data$D_IN, cache_rg_cache_rereq_data$EN;

  // register cache_rg_cset_cword_in_cache
  reg [7 : 0] cache_rg_cset_cword_in_cache;
  wire [7 : 0] cache_rg_cset_cword_in_cache$D_IN;
  wire cache_rg_cset_cword_in_cache$EN;

  // register cache_rg_cset_in_cache
  reg [5 : 0] cache_rg_cset_in_cache;
  wire [5 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_ddr4_ready
  reg cache_rg_ddr4_ready;
  wire cache_rg_ddr4_ready$D_IN, cache_rg_ddr4_ready$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  wire [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  wire cache_rg_lower_word64_full$D_IN, cache_rg_lower_word64_full$EN;

  // register cache_rg_lower_word64_user
  reg cache_rg_lower_word64_user;
  wire cache_rg_lower_word64_user$D_IN, cache_rg_lower_word64_user$EN;

  // register cache_rg_lrsc_pa
  reg [63 : 0] cache_rg_lrsc_pa;
  wire [63 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_mem_req_sent
  reg cache_rg_mem_req_sent;
  wire cache_rg_mem_req_sent$D_IN, cache_rg_mem_req_sent$EN;

  // register cache_rg_mstatus_MXR
  reg cache_rg_mstatus_MXR;
  wire cache_rg_mstatus_MXR$D_IN, cache_rg_mstatus_MXR$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [63 : 0] cache_rg_pa;
  wire [63 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_priv
  reg [1 : 0] cache_rg_priv;
  wire [1 : 0] cache_rg_priv$D_IN;
  wire cache_rg_priv$EN;

  // register cache_rg_pte_pa
  reg [63 : 0] cache_rg_pte_pa;
  reg [63 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_satp
  reg [63 : 0] cache_rg_satp;
  wire [63 : 0] cache_rg_satp$D_IN;
  wire cache_rg_satp$EN;

  // register cache_rg_sstatus_SUM
  reg cache_rg_sstatus_SUM;
  wire cache_rg_sstatus_SUM$D_IN, cache_rg_sstatus_SUM$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [4 : 0] cache_rg_state;
  reg [4 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_tlb_walk
  reg cache_rg_tlb_walk;
  wire cache_rg_tlb_walk$D_IN, cache_rg_tlb_walk$EN;

  // register cache_rg_tohost_addr
  reg [63 : 0] cache_rg_tohost_addr;
  wire [63 : 0] cache_rg_tohost_addr$D_IN;
  wire cache_rg_tohost_addr$EN;

  // register cache_rg_tohost_value
  reg [63 : 0] cache_rg_tohost_value;
  wire [63 : 0] cache_rg_tohost_value$D_IN;
  wire cache_rg_tohost_value$EN;

  // register cache_rg_victim_way
  reg cache_rg_victim_way;
  wire cache_rg_victim_way$D_IN, cache_rg_victim_way$EN;

  // register cache_rg_watch_tohost
  reg cache_rg_watch_tohost;
  wire cache_rg_watch_tohost$D_IN, cache_rg_watch_tohost$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_wr_rsp_err
  reg cache_rg_wr_rsp_err;
  wire cache_rg_wr_rsp_err$D_IN, cache_rg_wr_rsp_err$EN;

  // ports of submodule cache_f_fabric_second_write_reqs
  wire [73 : 0] cache_f_fabric_second_write_reqs$D_IN;
  wire cache_f_fabric_second_write_reqs$CLR,
       cache_f_fabric_second_write_reqs$DEQ,
       cache_f_fabric_second_write_reqs$ENQ,
       cache_f_fabric_second_write_reqs$FULL_N;

  // ports of submodule cache_f_fabric_write_reqs
  wire [195 : 0] cache_f_fabric_write_reqs$D_IN,
		 cache_f_fabric_write_reqs$D_OUT;
  wire cache_f_fabric_write_reqs$CLR,
       cache_f_fabric_write_reqs$DEQ,
       cache_f_fabric_write_reqs$EMPTY_N,
       cache_f_fabric_write_reqs$ENQ,
       cache_f_fabric_write_reqs$FULL_N;

  // ports of submodule cache_f_pte_writebacks
  wire [127 : 0] cache_f_pte_writebacks$D_IN, cache_f_pte_writebacks$D_OUT;
  wire cache_f_pte_writebacks$CLR,
       cache_f_pte_writebacks$DEQ,
       cache_f_pte_writebacks$EMPTY_N,
       cache_f_pte_writebacks$ENQ,
       cache_f_pte_writebacks$FULL_N;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_masterPortShim_arff
  reg [97 : 0] cache_masterPortShim_arff$D_IN;
  wire [97 : 0] cache_masterPortShim_arff$D_OUT;
  wire cache_masterPortShim_arff$CLR,
       cache_masterPortShim_arff$DEQ,
       cache_masterPortShim_arff$EMPTY_N,
       cache_masterPortShim_arff$ENQ,
       cache_masterPortShim_arff$FULL_N;

  // ports of submodule cache_masterPortShim_awff
  wire [97 : 0] cache_masterPortShim_awff$D_IN,
		cache_masterPortShim_awff$D_OUT;
  wire cache_masterPortShim_awff$CLR,
       cache_masterPortShim_awff$DEQ,
       cache_masterPortShim_awff$EMPTY_N,
       cache_masterPortShim_awff$ENQ,
       cache_masterPortShim_awff$FULL_N;

  // ports of submodule cache_masterPortShim_bff
  wire [6 : 0] cache_masterPortShim_bff$D_IN, cache_masterPortShim_bff$D_OUT;
  wire cache_masterPortShim_bff$CLR,
       cache_masterPortShim_bff$DEQ,
       cache_masterPortShim_bff$EMPTY_N,
       cache_masterPortShim_bff$ENQ,
       cache_masterPortShim_bff$FULL_N;

  // ports of submodule cache_masterPortShim_rff
  wire [72 : 0] cache_masterPortShim_rff$D_IN, cache_masterPortShim_rff$D_OUT;
  wire cache_masterPortShim_rff$CLR,
       cache_masterPortShim_rff$DEQ,
       cache_masterPortShim_rff$EMPTY_N,
       cache_masterPortShim_rff$ENQ,
       cache_masterPortShim_rff$FULL_N;

  // ports of submodule cache_masterPortShim_wff
  wire [73 : 0] cache_masterPortShim_wff$D_IN, cache_masterPortShim_wff$D_OUT;
  wire cache_masterPortShim_wff$CLR,
       cache_masterPortShim_wff$DEQ,
       cache_masterPortShim_wff$EMPTY_N,
       cache_masterPortShim_wff$ENQ,
       cache_masterPortShim_wff$FULL_N;

  // ports of submodule cache_ram_cword_set
  reg [257 : 0] cache_ram_cword_set$DIB;
  reg [7 : 0] cache_ram_cword_set$ADDRB;
  wire [257 : 0] cache_ram_cword_set$DIA, cache_ram_cword_set$DOB;
  wire [7 : 0] cache_ram_cword_set$ADDRA;
  wire cache_ram_cword_set$ENA,
       cache_ram_cword_set$ENB,
       cache_ram_cword_set$WEA,
       cache_ram_cword_set$WEB;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [105 : 0] cache_ram_state_and_ctag_cset$DIA,
		 cache_ram_state_and_ctag_cset$DIB,
		 cache_ram_state_and_ctag_cset$DOB;
  wire [5 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;

  // ports of submodule cache_tlb
  reg [1 : 0] cache_tlb$ma_insert_level;
  wire [203 : 0] cache_tlb$mv_vm_get_xlate;
  wire [63 : 0] cache_tlb$ma_insert_pte,
		cache_tlb$ma_insert_pte_pa,
		cache_tlb$mv_vm_get_xlate_satp,
		cache_tlb$mv_vm_put_va_full_va;
  wire [26 : 0] cache_tlb$ma_insert_vpn;
  wire [15 : 0] cache_tlb$ma_insert_asid;
  wire [1 : 0] cache_tlb$mv_vm_get_xlate_priv;
  wire cache_tlb$EN_ma_flush,
       cache_tlb$EN_ma_insert,
       cache_tlb$EN_mv_vm_put_va,
       cache_tlb$mv_vm_get_xlate_cap,
       cache_tlb$mv_vm_get_xlate_mstatus_MXR,
       cache_tlb$mv_vm_get_xlate_read_not_write,
       cache_tlb$mv_vm_get_xlate_sstatus_SUM;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_aw_events_update_reg,
       CAN_FIRE_RL_cache_do_req,
       CAN_FIRE_RL_cache_do_reset_req,
       CAN_FIRE_RL_cache_do_set_req_valid,
       CAN_FIRE_RL_cache_do_tlb_flush,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_count_miss_lat,
       CAN_FIRE_RL_cache_rl_count_tlb_latency,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_fabric_send_write_req,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_ptw_level_0,
       CAN_FIRE_RL_cache_rl_ptw_level_1,
       CAN_FIRE_RL_cache_rl_ptw_level_2,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_RL_cache_rl_start_tlb_refill,
       CAN_FIRE_RL_cache_rl_writeback_updated_PTE,
       CAN_FIRE___me_check_17,
       CAN_FIRE_commit,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_mem_master_ar_drop,
       CAN_FIRE_mem_master_aw_drop,
       CAN_FIRE_mem_master_b_put,
       CAN_FIRE_mem_master_r_put,
       CAN_FIRE_mem_master_w_drop,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_set_watch_tohost,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_aw_events_update_reg,
       WILL_FIRE_RL_cache_do_req,
       WILL_FIRE_RL_cache_do_reset_req,
       WILL_FIRE_RL_cache_do_set_req_valid,
       WILL_FIRE_RL_cache_do_tlb_flush,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_count_miss_lat,
       WILL_FIRE_RL_cache_rl_count_tlb_latency,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_fabric_send_write_req,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_ptw_level_0,
       WILL_FIRE_RL_cache_rl_ptw_level_1,
       WILL_FIRE_RL_cache_rl_ptw_level_2,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_RL_cache_rl_start_tlb_refill,
       WILL_FIRE_RL_cache_rl_writeback_updated_PTE,
       WILL_FIRE___me_check_17,
       WILL_FIRE_commit,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_mem_master_ar_drop,
       WILL_FIRE_mem_master_aw_drop,
       WILL_FIRE_mem_master_b_put,
       WILL_FIRE_mem_master_r_put,
       WILL_FIRE_mem_master_w_drop,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_set_watch_tohost,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [105 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [97 : 0] MUX_cache_masterPortShim_arff$enq_1__VAL_1,
		MUX_cache_masterPortShim_arff$enq_1__VAL_2,
		MUX_cache_masterPortShim_arff$enq_1__VAL_3,
		MUX_cache_masterPortShim_arff$enq_1__VAL_4;
  wire [7 : 0] MUX_cache_ram_cword_set$b_put_2__VAL_2,
	       MUX_cache_ram_cword_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_3,
	       MUX_cache_rg_exc_code$write_1__VAL_6;
  wire [4 : 0] MUX_cache_rg_state$write_1__VAL_11,
	       MUX_cache_rg_state$write_1__VAL_2,
	       MUX_cache_rg_state$write_1__VAL_5,
	       MUX_cache_rg_state$write_1__VAL_7,
	       MUX_cache_rg_state$write_1__VAL_8,
	       MUX_cache_rg_state$write_1__VAL_9;
  wire MUX_cache_dw_valid$wset_1__SEL_1,
       MUX_cache_masterPortShim_arff$enq_1__SEL_1,
       MUX_cache_masterPortShim_arff$enq_1__SEL_2,
       MUX_cache_ram_cword_set$b_put_1__SEL_1,
       MUX_cache_ram_cword_set$b_put_1__SEL_2,
       MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_exc_code$write_1__SEL_4,
       MUX_cache_rg_exc_code$write_1__SEL_5,
       MUX_cache_rg_pa$write_1__SEL_2,
       MUX_cache_rg_state$write_1__SEL_12,
       MUX_cache_rg_state$write_1__SEL_5,
       MUX_cache_tlb$ma_insert_1__SEL_1,
       MUX_cache_tlb$ma_insert_1__SEL_2,
       MUX_cache_tlb$ma_insert_1__SEL_3,
       MUX_cache_tlb$ma_insert_1__SEL_4;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h62242;
  reg [31 : 0] v__h7648;
  reg [31 : 0] v__h7745;
  reg [31 : 0] v__h7881;
  reg [31 : 0] v__h35891;
  reg [31 : 0] v__h62319;
  reg [31 : 0] v__h36702;
  reg [63 : 0] v__h36891;
  reg [31 : 0] v__h38779;
  reg [31 : 0] v__h38520;
  reg [63 : 0] v__h38933;
  reg [31 : 0] v__h39216;
  reg [31 : 0] v__h39099;
  reg [31 : 0] v__h38699;
  reg [31 : 0] v__h37663;
  reg [31 : 0] v__h37401;
  reg [63 : 0] v__h37818;
  reg [31 : 0] v__h37984;
  reg [31 : 0] v__h38101;
  reg [31 : 0] v__h37583;
  reg [31 : 0] v__h39735;
  reg [31 : 0] v__h39815;
  reg [31 : 0] v__h39906;
  reg [31 : 0] v__h39655;
  reg [31 : 0] v__h40225;
  reg [63 : 0] v__h40508;
  reg [31 : 0] v__h41239;
  reg [31 : 0] v__h41497;
  reg [31 : 0] v__h58043;
  reg [31 : 0] v__h58085;
  reg [31 : 0] v__h7171;
  reg [31 : 0] v__h59016;
  reg [31 : 0] v__h60772;
  reg [31 : 0] v__h7165;
  reg [31 : 0] v__h7642;
  reg [31 : 0] v__h7739;
  reg [31 : 0] v__h7875;
  reg [31 : 0] v__h35885;
  reg [31 : 0] v__h36696;
  reg [31 : 0] v__h37395;
  reg [31 : 0] v__h37577;
  reg [31 : 0] v__h37657;
  reg [31 : 0] v__h37978;
  reg [31 : 0] v__h38095;
  reg [31 : 0] v__h38514;
  reg [31 : 0] v__h38693;
  reg [31 : 0] v__h38773;
  reg [31 : 0] v__h39093;
  reg [31 : 0] v__h39210;
  reg [31 : 0] v__h39649;
  reg [31 : 0] v__h39729;
  reg [31 : 0] v__h39809;
  reg [31 : 0] v__h39900;
  reg [31 : 0] v__h40219;
  reg [31 : 0] v__h41233;
  reg [31 : 0] v__h41491;
  reg [31 : 0] v__h58037;
  reg [31 : 0] v__h58079;
  reg [31 : 0] v__h59010;
  reg [31 : 0] v__h60766;
  reg [31 : 0] v__h62236;
  reg [31 : 0] v__h62313;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] _theResult___snd_fst__h35702,
	       _theResult___snd_snd__h35703,
	       mem_req_wr_data_wdata__h5930;
  reg [7 : 0] fabric_strobe2__h5648, mem_req_wr_data_wstrb__h5931;
  reg [5 : 0] x1_avValue_snd_snd__h36231;
  reg [4 : 0] CASE_cache_tlbmv_vm_get_xlate_BITS_203_TO_202_ETC__q5;
  reg [2 : 0] _theResult___snd_snd_snd_val__h5894;
  reg CASE_cache_rg_victim_way_0_cache_ram_state_and_ETC__q6;
  wire [128 : 0] IF_cache_rg_victim_way_41_THEN_cache_masterPor_ETC___d1020,
		 IF_cache_rg_victim_way_41_THEN_cache_ram_cword_ETC___d1019,
		 cache_ram_cword_set_b_read__04_BITS_128_TO_0_0_ETC___d689,
		 x__h10261,
		 y__h10262,
		 y__h10315,
		 y__h23007;
  wire [127 : 0] IF_cache_rg_lower_word64_BIT_0_THEN_1_ELSE_0__q1,
		 b__h41839,
		 x__h35701,
		 x__h35708,
		 x__h35750;
  wire [63 : 0] cline_fabric_addr__h40415,
		lev_0_pte_pa__h38811,
		lev_0_pte_pa_w64_fa__h38813,
		lev_1_PTN_pa__h37693,
		lev_1_pte_pa__h37695,
		lev_1_pte_pa_w64_fa__h37697,
		lev_2_pte_pa__h36751,
		lev_2_pte_pa_w64_fa__h36753,
		result_lo__h35737,
		result_lo__h35776,
		result_lo__h35788,
		satp_pa__h2236,
		vpn_0_pa__h38810,
		vpn_1_pa__h37694,
		vpn_2_pa__h36750,
		word64__h5871;
  wire [55 : 0] x__h37770, x__h8017;
  wire [51 : 0] x__h50852, x__h50920;
  wire [31 : 0] x5750_BITS_31_TO_0__q2;
  wire [15 : 0] x5750_BITS_15_TO_0__q4;
  wire [12 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d344;
  wire [10 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d343;
  wire [8 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d342;
  wire [7 : 0] mem_req_wr_addr_awlen__h5851,
	       strobe64__h5872,
	       strobe64__h5879,
	       strobe64__h5883,
	       strobe64__h5887,
	       x5750_BITS_7_TO_0__q3;
  wire [6 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d341,
	       x__h57130,
	       x__h57171;
  wire [5 : 0] shift_bits__h5635;
  wire [4 : 0] IF_cache_ram_state_and_ctag_cset_b_read__93_BI_ETC___d744,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d340;
  wire [3 : 0] b__h36656;
  wire [2 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d339;
  wire [1 : 0] tmp__h40568, tmp__h40569;
  wire IF_cache_w_req_width_code_whas__050_THEN_cache_ETC___d1144,
       IF_cache_w_req_width_code_whas__050_THEN_cache_ETC___d1149,
       NOT_IF_cache_w_req_width_code_whas__050_THEN_c_ETC___d1128,
       NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404,
       NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950,
       NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538,
       NOT_cache_masterPortShim_rff_first__82_BIT_4_8_ETC___d812,
       NOT_cache_tlb_mv_vm_get_xlate_cache_rg_satp_51_ETC___d553,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d107,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d130,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d153,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d176,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d199,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d222,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d245,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d268,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d291,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d314,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d337,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d38,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d61,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d84,
       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d280,
       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d303,
       cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d856,
       cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d891,
       cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d897,
       cache_masterPortShim_rff_first__82_BIT_7_90_OR_ETC___d846,
       cache_masterPortShim_rff_first__82_BIT_7_90_OR_ETC___d858,
       cache_masterPortShim_rff_i_notEmpty__81_AND_NO_ETC___d796,
       cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d508,
       cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d510,
       cache_ram_state_and_ctag_cset_b_read__93_BIT_5_ETC___d730,
       cache_rg_mem_req_sent_52_AND_cache_rg_op_52_EQ_ETC___d755,
       mem_req_wr_second_data_wuser__h5744,
       tags__h41757;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas && cache_dw_valid$wget ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method cword_fst
  assign cword_fst =
	     MUX_cache_dw_valid$wset_1__SEL_1 &&
	     cache_dw_output_ld_val$wget[128] ;

  // value method cword_snd
  assign cword_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst = 1'b0 ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = 128'b0 ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_canPeek
  assign mem_master_aw_canPeek = cache_masterPortShim_awff$EMPTY_N ;

  // value method mem_master_aw_peek
  assign mem_master_aw_peek = cache_masterPortShim_awff$D_OUT ;
  assign RDY_mem_master_aw_peek = cache_masterPortShim_awff$EMPTY_N ;

  // action method mem_master_aw_drop
  assign RDY_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign CAN_FIRE_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_mem_master_aw_drop = EN_mem_master_aw_drop ;

  // value method mem_master_w_canPeek
  assign mem_master_w_canPeek = cache_masterPortShim_wff$EMPTY_N ;

  // value method mem_master_w_peek
  assign mem_master_w_peek = cache_masterPortShim_wff$D_OUT ;
  assign RDY_mem_master_w_peek = cache_masterPortShim_wff$EMPTY_N ;

  // action method mem_master_w_drop
  assign RDY_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign CAN_FIRE_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_mem_master_w_drop = EN_mem_master_w_drop ;

  // value method mem_master_b_canPut
  assign mem_master_b_canPut = cache_masterPortShim_bff$FULL_N ;

  // action method mem_master_b_put
  assign RDY_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign CAN_FIRE_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign WILL_FIRE_mem_master_b_put = EN_mem_master_b_put ;

  // value method mem_master_ar_canPeek
  assign mem_master_ar_canPeek = cache_masterPortShim_arff$EMPTY_N ;

  // value method mem_master_ar_peek
  assign mem_master_ar_peek = cache_masterPortShim_arff$D_OUT ;
  assign RDY_mem_master_ar_peek = cache_masterPortShim_arff$EMPTY_N ;

  // action method mem_master_ar_drop
  assign RDY_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign CAN_FIRE_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_mem_master_ar_drop = EN_mem_master_ar_drop ;

  // value method mem_master_r_canPut
  assign mem_master_r_canPut = cache_masterPortShim_rff$FULL_N ;

  // action method mem_master_r_put
  assign RDY_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign CAN_FIRE_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign WILL_FIRE_mem_master_r_put = EN_mem_master_r_put ;

  // value method events
  assign events = cache_aw_events_register ;
  assign RDY_events = 1'd1 ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = cache_rg_tohost_value ;
  assign RDY_mv_tohost_value = 1'd1 ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = cache_rg_wr_rsp_err ? 8'd1 : 8'd0 ;

  // submodule cache_f_fabric_second_write_reqs
  FIFO1 #(.width(32'd74),
	  .guarded(1'd1)) cache_f_fabric_second_write_reqs(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(cache_f_fabric_second_write_reqs$D_IN),
							   .ENQ(cache_f_fabric_second_write_reqs$ENQ),
							   .DEQ(cache_f_fabric_second_write_reqs$DEQ),
							   .CLR(cache_f_fabric_second_write_reqs$CLR),
							   .D_OUT(),
							   .FULL_N(cache_f_fabric_second_write_reqs$FULL_N),
							   .EMPTY_N());

  // submodule cache_f_fabric_write_reqs
  FIFO2 #(.width(32'd196),
	  .guarded(1'd1)) cache_f_fabric_write_reqs(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_f_fabric_write_reqs$D_IN),
						    .ENQ(cache_f_fabric_write_reqs$ENQ),
						    .DEQ(cache_f_fabric_write_reqs$DEQ),
						    .CLR(cache_f_fabric_write_reqs$CLR),
						    .D_OUT(cache_f_fabric_write_reqs$D_OUT),
						    .FULL_N(cache_f_fabric_write_reqs$FULL_N),
						    .EMPTY_N(cache_f_fabric_write_reqs$EMPTY_N));

  // submodule cache_f_pte_writebacks
  FIFO2 #(.width(32'd128), .guarded(1'd1)) cache_f_pte_writebacks(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(cache_f_pte_writebacks$D_IN),
								  .ENQ(cache_f_pte_writebacks$ENQ),
								  .DEQ(cache_f_pte_writebacks$DEQ),
								  .CLR(cache_f_pte_writebacks$CLR),
								  .D_OUT(cache_f_pte_writebacks$D_OUT),
								  .FULL_N(cache_f_pte_writebacks$FULL_N),
								  .EMPTY_N(cache_f_pte_writebacks$EMPTY_N));

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) cache_f_reset_reqs(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_reset_reqs$D_IN),
							    .ENQ(cache_f_reset_reqs$ENQ),
							    .DEQ(cache_f_reset_reqs$DEQ),
							    .CLR(cache_f_reset_reqs$CLR),
							    .D_OUT(cache_f_reset_reqs$D_OUT),
							    .FULL_N(cache_f_reset_reqs$FULL_N),
							    .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) cache_f_reset_rsps(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_reset_rsps$D_IN),
							    .ENQ(cache_f_reset_rsps$ENQ),
							    .DEQ(cache_f_reset_rsps$DEQ),
							    .CLR(cache_f_reset_rsps$CLR),
							    .D_OUT(cache_f_reset_rsps$D_OUT),
							    .FULL_N(cache_f_reset_rsps$FULL_N),
							    .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_masterPortShim_arff
  FIFO2 #(.width(32'd98),
	  .guarded(1'd1)) cache_masterPortShim_arff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_arff$D_IN),
						    .ENQ(cache_masterPortShim_arff$ENQ),
						    .DEQ(cache_masterPortShim_arff$DEQ),
						    .CLR(cache_masterPortShim_arff$CLR),
						    .D_OUT(cache_masterPortShim_arff$D_OUT),
						    .FULL_N(cache_masterPortShim_arff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_arff$EMPTY_N));

  // submodule cache_masterPortShim_awff
  FIFO2 #(.width(32'd98),
	  .guarded(1'd1)) cache_masterPortShim_awff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_awff$D_IN),
						    .ENQ(cache_masterPortShim_awff$ENQ),
						    .DEQ(cache_masterPortShim_awff$DEQ),
						    .CLR(cache_masterPortShim_awff$CLR),
						    .D_OUT(cache_masterPortShim_awff$D_OUT),
						    .FULL_N(cache_masterPortShim_awff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_awff$EMPTY_N));

  // submodule cache_masterPortShim_bff
  FIFO2 #(.width(32'd7), .guarded(1'd1)) cache_masterPortShim_bff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(cache_masterPortShim_bff$D_IN),
								  .ENQ(cache_masterPortShim_bff$ENQ),
								  .DEQ(cache_masterPortShim_bff$DEQ),
								  .CLR(cache_masterPortShim_bff$CLR),
								  .D_OUT(cache_masterPortShim_bff$D_OUT),
								  .FULL_N(cache_masterPortShim_bff$FULL_N),
								  .EMPTY_N(cache_masterPortShim_bff$EMPTY_N));

  // submodule cache_masterPortShim_rff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) cache_masterPortShim_rff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(cache_masterPortShim_rff$D_IN),
						   .ENQ(cache_masterPortShim_rff$ENQ),
						   .DEQ(cache_masterPortShim_rff$DEQ),
						   .CLR(cache_masterPortShim_rff$CLR),
						   .D_OUT(cache_masterPortShim_rff$D_OUT),
						   .FULL_N(cache_masterPortShim_rff$FULL_N),
						   .EMPTY_N(cache_masterPortShim_rff$EMPTY_N));

  // submodule cache_masterPortShim_wff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) cache_masterPortShim_wff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(cache_masterPortShim_wff$D_IN),
						   .ENQ(cache_masterPortShim_wff$ENQ),
						   .DEQ(cache_masterPortShim_wff$DEQ),
						   .CLR(cache_masterPortShim_wff$CLR),
						   .D_OUT(cache_masterPortShim_wff$D_OUT),
						   .FULL_N(cache_masterPortShim_wff$FULL_N),
						   .EMPTY_N(cache_masterPortShim_wff$EMPTY_N));

  // submodule cache_ram_cword_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd258),
	  .MEMSIZE(9'd256)) cache_ram_cword_set(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(cache_ram_cword_set$ADDRA),
						.ADDRB(cache_ram_cword_set$ADDRB),
						.DIA(cache_ram_cword_set$DIA),
						.DIB(cache_ram_cword_set$DIB),
						.WEA(cache_ram_cword_set$WEA),
						.WEB(cache_ram_cword_set$WEB),
						.ENA(cache_ram_cword_set$ENA),
						.ENB(cache_ram_cword_set$ENB),
						.DOA(),
						.DOB(cache_ram_cword_set$DOB));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd106),
	  .MEMSIZE(7'd64)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							 .CLKB(CLK),
							 .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							 .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							 .DIA(cache_ram_state_and_ctag_cset$DIA),
							 .DIB(cache_ram_state_and_ctag_cset$DIB),
							 .WEA(cache_ram_state_and_ctag_cset$WEA),
							 .WEB(cache_ram_state_and_ctag_cset$WEB),
							 .ENA(cache_ram_state_and_ctag_cset$ENA),
							 .ENB(cache_ram_state_and_ctag_cset$ENB),
							 .DOA(),
							 .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_near_mem_io_addr_range(),
			  .m_plic_addr_range(),
			  .m_uart0_addr_range(),
			  .m_other_peripherals_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_mem0_controller_addr_range(),
			  .m_tcm_addr_range(),
			  .m_is_mem_addr(),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value(),
			  .m_pcc_reset_value(),
			  .m_ddc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mepcc_reset_value());

  // submodule cache_tlb
  mkTLB #(.dmem_not_imem(1'd0), .verbosity(3'd2)) cache_tlb(.CLK(CLK),
							    .RST_N(RST_N),
							    .ma_insert_asid(cache_tlb$ma_insert_asid),
							    .ma_insert_level(cache_tlb$ma_insert_level),
							    .ma_insert_pte(cache_tlb$ma_insert_pte),
							    .ma_insert_pte_pa(cache_tlb$ma_insert_pte_pa),
							    .ma_insert_vpn(cache_tlb$ma_insert_vpn),
							    .mv_vm_get_xlate_cap(cache_tlb$mv_vm_get_xlate_cap),
							    .mv_vm_get_xlate_mstatus_MXR(cache_tlb$mv_vm_get_xlate_mstatus_MXR),
							    .mv_vm_get_xlate_priv(cache_tlb$mv_vm_get_xlate_priv),
							    .mv_vm_get_xlate_read_not_write(cache_tlb$mv_vm_get_xlate_read_not_write),
							    .mv_vm_get_xlate_satp(cache_tlb$mv_vm_get_xlate_satp),
							    .mv_vm_get_xlate_sstatus_SUM(cache_tlb$mv_vm_get_xlate_sstatus_SUM),
							    .mv_vm_put_va_full_va(cache_tlb$mv_vm_put_va_full_va),
							    .EN_mv_vm_put_va(cache_tlb$EN_mv_vm_put_va),
							    .EN_ma_insert(cache_tlb$EN_ma_insert),
							    .EN_ma_flush(cache_tlb$EN_ma_flush),
							    .RDY_mv_vm_put_va(),
							    .mv_vm_get_xlate(cache_tlb$mv_vm_get_xlate),
							    .RDY_mv_vm_get_xlate(),
							    .RDY_ma_insert(),
							    .RDY_ma_flush());

  // rule RL_cache_rl_fabric_send_write_req
  assign CAN_FIRE_RL_cache_rl_fabric_send_write_req =
	     cache_ctr_wr_rsps_pending_crg != 4'd15 &&
	     cache_masterPortShim_wff$FULL_N &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     cache_masterPortShim_awff$FULL_N &&
	     (cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100 ||
	      cache_f_fabric_second_write_reqs$FULL_N) ;
  assign WILL_FIRE_RL_cache_rl_fabric_send_write_req =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;

  // rule RL_cache_rl_writeback_updated_PTE
  assign CAN_FIRE_RL_cache_rl_writeback_updated_PTE =
	     cache_f_pte_writebacks$EMPTY_N &&
	     cache_f_fabric_write_reqs$FULL_N ;
  assign WILL_FIRE_RL_cache_rl_writeback_updated_PTE =
	     CAN_FIRE_RL_cache_rl_writeback_updated_PTE ;

  // rule RL_cache_rl_count_tlb_latency
  assign CAN_FIRE_RL_cache_rl_count_tlb_latency =
	     cache_rg_state == 5'd5 || cache_rg_tlb_walk ;
  assign WILL_FIRE_RL_cache_rl_count_tlb_latency =
	     CAN_FIRE_RL_cache_rl_count_tlb_latency ;

  // rule RL_cache_rl_count_miss_lat
  assign CAN_FIRE_RL_cache_rl_count_miss_lat =
	     !cache_f_reset_reqs$EMPTY_N &&
	     (cache_rg_state == 5'd9 || cache_rg_cache_rereq_data) ;
  assign WILL_FIRE_RL_cache_rl_count_miss_lat =
	     CAN_FIRE_RL_cache_rl_count_miss_lat ;

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     (cache_rg_cset_in_cache != 6'd63 ||
	      cache_f_reset_reqs$EMPTY_N && cache_f_reset_rsps$FULL_N) &&
	     cache_rg_state == 5'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (cache_tlb$mv_vm_get_xlate[203:202] == 2'd1 ||
	      cache_tlb$mv_vm_get_xlate[203:202] == 2'd2 ||
	      !cache_tlb$mv_vm_get_xlate[130] ||
	      cache_f_pte_writebacks$FULL_N) &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_ddr4_ready &&
	     cache_rg_state == 5'd3 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_start_tlb_refill
  assign CAN_FIRE_RL_cache_rl_start_tlb_refill =
	     cache_masterPortShim_arff$FULL_N && cache_rg_state == 5'd5 &&
	     b__h36656 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_tlb_refill =
	     CAN_FIRE_RL_cache_rl_start_tlb_refill &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_ptw_level_1
  assign CAN_FIRE_RL_cache_rl_ptw_level_1 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     cache_masterPortShim_rff_i_notEmpty__81_AND_NO_ETC___d796 &&
	     cache_rg_state == 5'd7 ;
  assign WILL_FIRE_RL_cache_rl_ptw_level_1 =
	     CAN_FIRE_RL_cache_rl_ptw_level_1 &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_ptw_level_2
  assign CAN_FIRE_RL_cache_rl_ptw_level_2 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     cache_masterPortShim_rff_i_notEmpty__81_AND_NO_ETC___d796 &&
	     cache_rg_state == 5'd6 ;
  assign WILL_FIRE_RL_cache_rl_ptw_level_2 =
	     CAN_FIRE_RL_cache_rl_ptw_level_2 &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_ptw_level_0
  assign CAN_FIRE_RL_cache_rl_ptw_level_0 =
	     cache_masterPortShim_rff$EMPTY_N && cache_rg_state == 5'd8 ;
  assign WILL_FIRE_RL_cache_rl_ptw_level_0 =
	     CAN_FIRE_RL_cache_rl_ptw_level_0 &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     cache_masterPortShim_arff$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd9 &&
	     b__h36656 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     cache_masterPortShim_rff$EMPTY_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd10 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd11 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     b__h36656 != 4'd0 && cache_masterPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 5'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_do_req
  assign CAN_FIRE_RL_cache_do_req = EN_req && !cache_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_cache_do_req =
	     CAN_FIRE_RL_cache_do_req && !WILL_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_do_set_req_valid
  assign CAN_FIRE_RL_cache_do_set_req_valid = 1'd1 ;
  assign WILL_FIRE_RL_cache_do_set_req_valid = 1'd1 ;

  // rule RL_cache_do_reset_req
  assign CAN_FIRE_RL_cache_do_reset_req =
	     cache_f_reset_reqs$FULL_N && cache_rw_reset_req$whas ;
  assign WILL_FIRE_RL_cache_do_reset_req = CAN_FIRE_RL_cache_do_reset_req ;

  // rule RL_cache_do_tlb_flush
  assign CAN_FIRE_RL_cache_do_tlb_flush = EN_tlb_flush ;
  assign WILL_FIRE_RL_cache_do_tlb_flush = EN_tlb_flush ;

  // rule __me_check_17
  assign CAN_FIRE___me_check_17 = 1'b1 ;
  assign WILL_FIRE___me_check_17 = 1'b1 ;

  // rule RL_cache_aw_events_update_reg
  assign CAN_FIRE_RL_cache_aw_events_update_reg = 1'd1 ;
  assign WILL_FIRE_RL_cache_aw_events_update_reg = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_cache_dw_valid$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_tlb_mv_vm_get_xlate_cache_rg_satp_51_ETC___d553 ;
  assign MUX_cache_masterPortShim_arff$enq_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ;
  assign MUX_cache_masterPortShim_arff$enq_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ;
  assign MUX_cache_ram_cword_set$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     (IF_cache_w_req_width_code_whas__050_THEN_cache_ETC___d1144 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_cword_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_IF_cache_w_req_width_code_whas__050_THEN_c_ETC___d1128 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	     (!cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      !cache_masterPortShim_rff$D_OUT[7] &&
	      !cache_masterPortShim_rff$D_OUT[5] ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     NOT_cache_masterPortShim_rff_first__82_BIT_4_8_ETC___d812 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     (!cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      (cache_masterPortShim_rff$D_OUT[7] ||
	       cache_masterPortShim_rff$D_OUT[5]) &&
	      cache_masterPortShim_rff$D_OUT[22:14] != 9'd0 ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ;
  assign MUX_cache_rg_pa$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 ;
  assign MUX_cache_rg_state$write_1__SEL_5 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign MUX_cache_tlb$ma_insert_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_tlb$mv_vm_get_xlate[130] ;
  assign MUX_cache_tlb$ma_insert_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d856 ;
  assign MUX_cache_tlb$ma_insert_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 ;
  assign MUX_cache_tlb$ma_insert_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_1 =
	     { 5'd0, lev_1_pte_pa_w64_fa__h37697, 29'd851968 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_2 =
	     { 5'd0, lev_0_pte_pa_w64_fa__h38813, 29'd851968 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_3 =
	     { 5'd0, lev_2_pte_pa_w64_fa__h36753, 29'd851968 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_4 =
	     { 5'd0, cline_fabric_addr__h40415, 29'd15532032 } ;
  assign MUX_cache_ram_cword_set$b_put_2__VAL_2 =
	     cache_rg_cset_cword_in_cache + 8'd1 ;
  assign MUX_cache_ram_cword_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:6], 2'd0 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { cache_rg_victim_way || cache_ram_state_and_ctag_cset$DOB[105],
	       x__h50852,
	       !cache_rg_victim_way || cache_ram_state_and_ctag_cset$DOB[52],
	       x__h50920 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_3 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ? 6'd12 : 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_6 =
	     EN_commit ? x1_avValue_snd_snd__h36231 : 6'd28 ;
  assign MUX_cache_rg_state$write_1__VAL_2 =
	     (NOT_IF_cache_w_req_width_code_whas__050_THEN_c_ETC___d1128 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       5'd4 :
	       5'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_5 =
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       5'd4 :
	       5'd11 ;
  assign MUX_cache_rg_state$write_1__VAL_7 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
	       ((!cache_masterPortShim_rff$D_OUT[4] ||
		 !cache_masterPortShim_rff$D_OUT[5] &&
		 cache_masterPortShim_rff$D_OUT[6] ||
		 !cache_masterPortShim_rff$D_OUT[7] &&
		 !cache_masterPortShim_rff$D_OUT[5]) ?
		  5'd4 :
		  5'd11) :
	       5'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_8 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
	       ((!cache_masterPortShim_rff$D_OUT[4] ||
		 !cache_masterPortShim_rff$D_OUT[5] &&
		 cache_masterPortShim_rff$D_OUT[6]) ?
		  5'd4 :
		  ((!cache_masterPortShim_rff$D_OUT[7] &&
		    !cache_masterPortShim_rff$D_OUT[5]) ?
		     5'd7 :
		     ((cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
		       cache_masterPortShim_rff$D_OUT[22:14] != 9'd0) ?
			5'd4 :
			5'd11))) :
	       5'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_9 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
	       ((!cache_masterPortShim_rff$D_OUT[4] ||
		 !cache_masterPortShim_rff$D_OUT[5] &&
		 cache_masterPortShim_rff$D_OUT[6]) ?
		  5'd4 :
		  ((!cache_masterPortShim_rff$D_OUT[7] &&
		    !cache_masterPortShim_rff$D_OUT[5]) ?
		     5'd8 :
		     ((cache_masterPortShim_rff$D_OUT[22:14] == 9'd0) ?
			5'd11 :
			5'd4))) :
	       5'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_11 =
	     EN_commit ?
	       CASE_cache_tlbmv_vm_get_xlate_BITS_203_TO_202_ETC__q5 :
	       5'd4 ;

  // inlined wires
  assign cache_rw_reset_req$whas =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_dw_valid$wget =
	     !MUX_cache_dw_valid$wset_1__SEL_1 || EN_commit ;
  assign cache_dw_valid$whas =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_tlb_mv_vm_get_xlate_cache_rg_satp_51_ETC___d553 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ;
  assign cache_dw_output_ld_val$wget =
	     { cache_tlb$mv_vm_get_xlate[201] &&
	       cache_rg_width_code == 3'b100 &&
	       cache_ram_cword_set_b_read__04_BITS_128_TO_0_0_ETC___d689[128],
	       x__h35701 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_1$wget =
	     { 7'd0,
	       cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	       cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	       cache_rg_mem_req_sent_52_AND_cache_rg_op_52_EQ_ETC___d755,
	       1'd0,
	       cache_rg_mem_req_sent,
	       cache_rg_mem_req_sent &&
	       cache_tlb$mv_vm_get_xlate[203:202] == 2'd1,
	       cache_rg_mem_req_sent &&
	       cache_tlb$mv_vm_get_xlate[203:202] == 2'd1,
	       2'd0 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_3$wget =
	     { 2'd0, cache_rg_op == 2'd0, 5'd0, cache_rg_op == 2'd2, 5'd0 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_4$wget =
	     { 13'd0,
	       CASE_cache_rg_victim_way_0_cache_ram_state_and_ETC__q6 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_6$wget =
	     { req_op == 2'd0,
	       2'd0,
	       req_op == 2'd1,
	       2'd0,
	       req_op == 2'd2,
	       7'd0 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_7$wget =
	     { 1'd0, cache_rg_op == 2'd0, 12'd0 } ;
  assign cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	     cache_ctr_wr_rsps_pending_crg + 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port1__write_1 = b__h36656 - 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       cache_ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h36656 ;
  assign cache_ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;
  assign cache_ctr_wr_rsps_pending_crg$port3__read =
	     cache_ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       cache_ctr_wr_rsps_pending_crg$port2__read ;

  // register cache_aw_events_register
  assign cache_aw_events_register$D_IN =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[13]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[13]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d38,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d344 } ;
  assign cache_aw_events_register$EN = 1'd1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_ctr_wr_rsps_pending_crg
  assign cache_ctr_wr_rsps_pending_crg$D_IN =
	     cache_ctr_wr_rsps_pending_crg$port3__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_allow_cap
  assign cache_rg_allow_cap$D_IN = cache_tlb$mv_vm_get_xlate[201] ;
  assign cache_rg_allow_cap$EN = MUX_cache_rg_pa$write_1__SEL_2 ;

  // register cache_rg_amo_funct5
  assign cache_rg_amo_funct5$D_IN = req_amo_funct5 ;
  assign cache_rg_amo_funct5$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_cache_rereq_data
  assign cache_rg_cache_rereq_data$D_IN = cache_rg_state != 5'd3 ;
  assign cache_rg_cache_rereq_data$EN = CAN_FIRE_RL_cache_rl_count_miss_lat ;

  // register cache_rg_cset_cword_in_cache
  assign cache_rg_cset_cword_in_cache$D_IN =
	     MUX_cache_ram_cword_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_cword_set$b_put_2__VAL_2 :
	       MUX_cache_ram_cword_set$b_put_2__VAL_4 ;
  assign cache_rg_cset_cword_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_ddr4_ready
  assign cache_rg_ddr4_ready$D_IN = 1'd1 ;
  assign cache_rg_ddr4_ready$EN = EN_ma_ddr4_ready ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_exc_code$write_1__VAL_3 or
	  MUX_cache_rg_exc_code$write_1__SEL_4 or
	  MUX_cache_rg_exc_code$write_1__SEL_5 or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_exc_code$write_1__VAL_6)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = 6'd1;
    MUX_cache_rg_exc_code$write_1__SEL_3:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_3;
    MUX_cache_rg_exc_code$write_1__SEL_4:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_3;
    MUX_cache_rg_exc_code$write_1__SEL_5:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_3;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_6;
    default: cache_rg_exc_code$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_IF_cache_w_req_width_code_whas__050_THEN_c_ETC___d1128 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ||
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     NOT_cache_masterPortShim_rff_first__82_BIT_4_8_ETC___d812 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     (!cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      (cache_masterPortShim_rff$D_OUT[7] ||
	       cache_masterPortShim_rff$D_OUT[5]) &&
	      cache_masterPortShim_rff$D_OUT[22:14] != 9'd0 ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	     (!cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      !cache_masterPortShim_rff$D_OUT[7] &&
	      !cache_masterPortShim_rff$D_OUT[5] ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_ld_val
  assign cache_rg_ld_val$D_IN = 129'h0 ;
  assign cache_rg_ld_val$EN = 1'b0 ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN = cache_masterPortShim_rff$D_OUT[67:4] ;
  assign cache_rg_lower_word64$EN = cache_rg_lower_word64_full$D_IN ;

  // register cache_rg_lower_word64_full
  assign cache_rg_lower_word64_full$D_IN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_lower_word64_user
  assign cache_rg_lower_word64_user$D_IN = cache_masterPortShim_rff$D_OUT[0] ;
  assign cache_rg_lower_word64_user$EN = cache_rg_lower_word64_full$D_IN ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = 64'h0 ;
  assign cache_rg_lrsc_pa$EN = 1'b0 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN = 1'd0 ;
  assign cache_rg_lrsc_valid$EN = CAN_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_mem_req_sent
  assign cache_rg_mem_req_sent$D_IN = EN_req ;
  assign cache_rg_mem_req_sent$EN = 1'd1 ;

  // register cache_rg_mstatus_MXR
  assign cache_rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign cache_rg_mstatus_MXR$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN =
	     WILL_FIRE_RL_cache_do_req ?
	       req_addr :
	       cache_tlb$mv_vm_get_xlate[200:137] ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 ||
	     WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_priv
  assign cache_rg_priv$D_IN = req_priv ;
  assign cache_rg_priv$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_pte_pa
  always@(MUX_cache_masterPortShim_arff$enq_1__SEL_1 or
	  lev_1_pte_pa__h37695 or
	  MUX_cache_masterPortShim_arff$enq_1__SEL_2 or
	  lev_0_pte_pa__h38811 or
	  WILL_FIRE_RL_cache_rl_start_tlb_refill or lev_2_pte_pa__h36751)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_masterPortShim_arff$enq_1__SEL_1:
	  cache_rg_pte_pa$D_IN = lev_1_pte_pa__h37695;
      MUX_cache_masterPortShim_arff$enq_1__SEL_2:
	  cache_rg_pte_pa$D_IN = lev_0_pte_pa__h38811;
      WILL_FIRE_RL_cache_rl_start_tlb_refill:
	  cache_rg_pte_pa$D_IN = lev_2_pte_pa__h36751;
      default: cache_rg_pte_pa$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_pte_pa$EN =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ||
	     WILL_FIRE_RL_cache_rl_start_tlb_refill ;

  // register cache_rg_satp
  assign cache_rg_satp$D_IN = req_satp ;
  assign cache_rg_satp$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_sstatus_SUM
  assign cache_rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign cache_rg_sstatus_SUM$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN = req_st_value ;
  assign cache_rg_st_amo_val$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_state
  always@(EN_tlb_flush or
	  WILL_FIRE_RL_cache_do_req or
	  MUX_cache_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_5 or
	  MUX_cache_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  WILL_FIRE_RL_cache_rl_ptw_level_0 or
	  MUX_cache_rg_state$write_1__VAL_7 or
	  WILL_FIRE_RL_cache_rl_ptw_level_2 or
	  MUX_cache_rg_state$write_1__VAL_8 or
	  WILL_FIRE_RL_cache_rl_ptw_level_1 or
	  MUX_cache_rg_state$write_1__VAL_9 or
	  WILL_FIRE_RL_cache_rl_start_tlb_refill or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_state$write_1__VAL_11 or
	  MUX_cache_rg_state$write_1__SEL_12)
  case (1'b1)
    EN_tlb_flush: cache_rg_state$D_IN = 5'd2;
    WILL_FIRE_RL_cache_do_req:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 5'd1;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 5'd3;
    MUX_cache_rg_state$write_1__SEL_5:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 5'd10;
    WILL_FIRE_RL_cache_rl_ptw_level_0:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_7;
    WILL_FIRE_RL_cache_rl_ptw_level_2:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_8;
    WILL_FIRE_RL_cache_rl_ptw_level_1:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_9;
    WILL_FIRE_RL_cache_rl_start_tlb_refill: cache_rg_state$D_IN = 5'd6;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_11;
    MUX_cache_rg_state$write_1__SEL_12: cache_rg_state$D_IN = 5'd2;
    default: cache_rg_state$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ||
	     WILL_FIRE_RL_cache_rl_ptw_level_2 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_0 ||
	     WILL_FIRE_RL_cache_do_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_tlb_refill ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_tlb_walk
  assign cache_rg_tlb_walk$D_IN = cache_rg_state != 5'd3 ;
  assign cache_rg_tlb_walk$EN = CAN_FIRE_RL_cache_rl_count_tlb_latency ;

  // register cache_rg_tohost_addr
  assign cache_rg_tohost_addr$D_IN = set_watch_tohost_tohost_addr ;
  assign cache_rg_tohost_addr$EN = EN_set_watch_tohost ;

  // register cache_rg_tohost_value
  assign cache_rg_tohost_value$D_IN = 64'h0 ;
  assign cache_rg_tohost_value$EN = 1'b0 ;

  // register cache_rg_victim_way
  assign cache_rg_victim_way$D_IN = tmp__h40569[0] ;
  assign cache_rg_victim_way$EN = CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_watch_tohost
  assign cache_rg_watch_tohost$D_IN = set_watch_tohost_watch_tohost ;
  assign cache_rg_watch_tohost$EN = EN_set_watch_tohost ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_wr_rsp_err
  assign cache_rg_wr_rsp_err$D_IN = 1'd1 ;
  assign cache_rg_wr_rsp_err$EN =
	     WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	     cache_masterPortShim_bff$D_OUT[1:0] != 2'd0 ;

  // submodule cache_f_fabric_second_write_reqs
  assign cache_f_fabric_second_write_reqs$D_IN =
	     { cache_f_fabric_write_reqs$D_OUT[127:64],
	       fabric_strobe2__h5648,
	       1'd1,
	       mem_req_wr_second_data_wuser__h5744 } ;
  assign cache_f_fabric_second_write_reqs$ENQ =
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	     cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100 ;
  assign cache_f_fabric_second_write_reqs$DEQ = 1'b0 ;
  assign cache_f_fabric_second_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_fabric_write_reqs
  assign cache_f_fabric_write_reqs$D_IN =
	     { 3'b011,
	       cache_f_pte_writebacks$D_OUT[127:64],
	       65'd0,
	       cache_f_pte_writebacks$D_OUT[63:0] } ;
  assign cache_f_fabric_write_reqs$ENQ =
	     CAN_FIRE_RL_cache_rl_writeback_updated_PTE ;
  assign cache_f_fabric_write_reqs$DEQ =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_pte_writebacks
  assign cache_f_pte_writebacks$D_IN =
	     { cache_tlb$mv_vm_get_xlate[63:0],
	       cache_tlb$mv_vm_get_xlate[129:66] } ;
  assign cache_f_pte_writebacks$ENQ = MUX_cache_tlb$ma_insert_1__SEL_1 ;
  assign cache_f_pte_writebacks$DEQ =
	     CAN_FIRE_RL_cache_rl_writeback_updated_PTE ;
  assign cache_f_pte_writebacks$CLR = 1'b0 ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ = CAN_FIRE_RL_cache_do_reset_req ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_12 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_12 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_masterPortShim_arff
  always@(MUX_cache_masterPortShim_arff$enq_1__SEL_1 or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_1 or
	  MUX_cache_masterPortShim_arff$enq_1__SEL_2 or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_start_tlb_refill or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_3 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_masterPortShim_arff$enq_1__SEL_1:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_1;
      MUX_cache_masterPortShim_arff$enq_1__SEL_2:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_2;
      WILL_FIRE_RL_cache_rl_start_tlb_refill:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_3;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_4;
      default: cache_masterPortShim_arff$D_IN =
		   98'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_masterPortShim_arff$ENQ =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ||
	     WILL_FIRE_RL_cache_rl_start_tlb_refill ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_masterPortShim_arff$DEQ = EN_mem_master_ar_drop ;
  assign cache_masterPortShim_arff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_awff
  assign cache_masterPortShim_awff$D_IN =
	     { 5'd0,
	       cache_f_fabric_write_reqs$D_OUT[192:129],
	       mem_req_wr_addr_awlen__h5851,
	       _theResult___snd_snd_snd_val__h5894,
	       18'd65536 } ;
  assign cache_masterPortShim_awff$ENQ =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_masterPortShim_awff$DEQ = EN_mem_master_aw_drop ;
  assign cache_masterPortShim_awff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_bff
  assign cache_masterPortShim_bff$D_IN = mem_master_b_put_val ;
  assign cache_masterPortShim_bff$ENQ = EN_mem_master_b_put ;
  assign cache_masterPortShim_bff$DEQ =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;
  assign cache_masterPortShim_bff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_rff
  assign cache_masterPortShim_rff$D_IN = mem_master_r_put_val ;
  assign cache_masterPortShim_rff$ENQ = EN_mem_master_r_put ;
  assign cache_masterPortShim_rff$DEQ =
	     WILL_FIRE_RL_cache_rl_ptw_level_0 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_2 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_masterPortShim_rff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_wff
  assign cache_masterPortShim_wff$D_IN =
	     { mem_req_wr_data_wdata__h5930,
	       mem_req_wr_data_wstrb__h5931,
	       cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100,
	       mem_req_wr_second_data_wuser__h5744 } ;
  assign cache_masterPortShim_wff$ENQ =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_masterPortShim_wff$DEQ = EN_mem_master_w_drop ;
  assign cache_masterPortShim_wff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_ram_cword_set
  assign cache_ram_cword_set$ADDRA = cache_rg_cset_cword_in_cache ;
  always@(MUX_cache_ram_cword_set$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_cword_set$b_put_1__SEL_2 or
	  MUX_cache_ram_cword_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_cword_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_cword_set$b_put_1__SEL_1:
	  cache_ram_cword_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_cword_set$b_put_1__SEL_2:
	  cache_ram_cword_set$ADDRB = MUX_cache_ram_cword_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_cword_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_cword_set$ADDRB = MUX_cache_ram_cword_set$b_put_2__VAL_4;
      default: cache_ram_cword_set$ADDRB =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_cword_set$DIA =
	     cache_rg_victim_way ?
	       { tags__h41757, b__h41839, cache_ram_cword_set$DOB[128:0] } :
	       { cache_ram_cword_set$DOB[257:129], tags__h41757, b__h41839 } ;
  always@(MUX_cache_ram_cword_set$b_put_1__SEL_1 or
	  MUX_cache_ram_cword_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_cword_set$b_put_1__SEL_1:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_cword_set$b_put_1__SEL_2:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_cword_set$DIB =
		   258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_cword_set$WEA = 1'd1 ;
  assign cache_ram_cword_set$WEB = 1'd0 ;
  assign cache_ram_cword_set$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign cache_ram_cword_set$ENB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       cache_rg_addr[11:6] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       cache_rg_addr[11:6] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       106'h15555555555554AAAAAAAAAAAAA ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ?
	       106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule cache_tlb
  assign cache_tlb$ma_insert_asid = cache_rg_satp[59:44] ;
  always@(MUX_cache_tlb$ma_insert_1__SEL_1 or
	  cache_tlb$mv_vm_get_xlate or
	  MUX_cache_tlb$ma_insert_1__SEL_2 or
	  MUX_cache_tlb$ma_insert_1__SEL_3 or
	  MUX_cache_tlb$ma_insert_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_tlb$ma_insert_1__SEL_1:
	  cache_tlb$ma_insert_level = cache_tlb$mv_vm_get_xlate[65:64];
      MUX_cache_tlb$ma_insert_1__SEL_2: cache_tlb$ma_insert_level = 2'd2;
      MUX_cache_tlb$ma_insert_1__SEL_3: cache_tlb$ma_insert_level = 2'd1;
      MUX_cache_tlb$ma_insert_1__SEL_4: cache_tlb$ma_insert_level = 2'd0;
      default: cache_tlb$ma_insert_level = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign cache_tlb$ma_insert_pte =
	     (MUX_cache_tlb$ma_insert_1__SEL_2 ||
	      MUX_cache_tlb$ma_insert_1__SEL_3 ||
	      MUX_cache_tlb$ma_insert_1__SEL_4) ?
	       cache_masterPortShim_rff$D_OUT[67:4] :
	       cache_tlb$mv_vm_get_xlate[129:66] ;
  assign cache_tlb$ma_insert_pte_pa =
	     MUX_cache_tlb$ma_insert_1__SEL_1 ?
	       cache_tlb$mv_vm_get_xlate[200:137] :
	       cache_rg_pte_pa ;
  assign cache_tlb$ma_insert_vpn = cache_rg_addr[38:12] ;
  assign cache_tlb$mv_vm_get_xlate_cap = cache_rg_st_amo_val[128] ;
  assign cache_tlb$mv_vm_get_xlate_mstatus_MXR = cache_rg_mstatus_MXR ;
  assign cache_tlb$mv_vm_get_xlate_priv = cache_rg_priv ;
  assign cache_tlb$mv_vm_get_xlate_read_not_write = cache_rg_op == 2'd0 ;
  assign cache_tlb$mv_vm_get_xlate_satp = cache_rg_satp ;
  assign cache_tlb$mv_vm_get_xlate_sstatus_SUM = cache_rg_sstatus_SUM ;
  assign cache_tlb$mv_vm_put_va_full_va = req_addr ;
  assign cache_tlb$EN_mv_vm_put_va = WILL_FIRE_RL_cache_do_req ;
  assign cache_tlb$EN_ma_insert =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_tlb$mv_vm_get_xlate[130] ||
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d856 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) ;
  assign cache_tlb$EN_ma_flush =
	     WILL_FIRE_RL_cache_rl_start_reset || EN_tlb_flush ;

  // remaining internal signals
  assign IF_cache_ram_state_and_ctag_cset_b_read__93_BI_ETC___d744 =
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d508 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d510) ?
	       cache_rg_state :
	       5'd9 ;
  assign IF_cache_rg_lower_word64_BIT_0_THEN_1_ELSE_0__q1 =
	     cache_rg_lower_word64[0] ? 128'd1 : 128'd0 ;
  assign IF_cache_rg_victim_way_41_THEN_cache_masterPor_ETC___d1020 =
	     cache_rg_victim_way ?
	       { tags__h41757, b__h41839 } :
	       cache_ram_cword_set$DOB[257:129] ;
  assign IF_cache_rg_victim_way_41_THEN_cache_ram_cword_ETC___d1019 =
	     cache_rg_victim_way ?
	       cache_ram_cword_set$DOB[128:0] :
	       { tags__h41757, b__h41839 } ;
  assign IF_cache_w_req_width_code_whas__050_THEN_cache_ETC___d1144 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign IF_cache_w_req_width_code_whas__050_THEN_cache_ETC___d1149 =
	     (IF_cache_w_req_width_code_whas__050_THEN_cache_ETC___d1144 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 ;
  assign NOT_IF_cache_w_req_width_code_whas__050_THEN_c_ETC___d1128 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 =
	     cache_cfg_verbosity > 4'd1 ;
  assign NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538 =
	     cache_cfg_verbosity >= 4'd2 ;
  assign NOT_cache_masterPortShim_rff_first__82_BIT_4_8_ETC___d812 =
	     !cache_masterPortShim_rff$D_OUT[4] ||
	     !cache_masterPortShim_rff$D_OUT[5] &&
	     cache_masterPortShim_rff$D_OUT[6] ||
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     (cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
	      cache_masterPortShim_rff$D_OUT[22:14] != 9'd0) ||
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign NOT_cache_tlb_mv_vm_get_xlate_cache_rg_satp_51_ETC___d553 =
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d508 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d510) ;
  assign b__h36656 =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ?
	       cache_ctr_wr_rsps_pending_crg$port0__write_1 :
	       cache_ctr_wr_rsps_pending_crg ;
  assign b__h41839 =
	     { cache_masterPortShim_rff$D_OUT[67:4],
	       cache_rg_lower_word64[63:1],
	       IF_cache_rg_lower_word64_BIT_0_THEN_1_ELSE_0__q1[0] } ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d107 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[10]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[10]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[10]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d130 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[9]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[9]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[9]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d153 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[8]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[8]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[8]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d176 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[7]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[7]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[7]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d199 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[6]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[6]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[6]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d222 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[5]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[5]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[5]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d245 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[4]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[4]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[4]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d268 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[3]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[3]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[3]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d291 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[2]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[2]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[2]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d314 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[1]) |
	     EN_tlb_flush |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[1]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[1]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d337 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[0]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[0]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[0]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d38 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[13]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[13]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[13]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d61 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[12]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[12]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[12]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d84 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[11]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[11]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[11]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d280 =
	     (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	      cache_aw_events_wires_ifc_ifc_wires_1$wget[2]) |
	     CAN_FIRE_RL_cache_rl_count_tlb_latency |
	     (CAN_FIRE_RL_cache_rl_count_miss_lat &&
	      cache_aw_events_wires_ifc_ifc_wires_3$wget[2]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d303 =
	     CAN_FIRE_RL_cache_rl_start_reset |
	     (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	      cache_aw_events_wires_ifc_ifc_wires_1$wget[1]) |
	     (CAN_FIRE_RL_cache_rl_count_miss_lat &&
	      cache_aw_events_wires_ifc_ifc_wires_3$wget[1]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d339 =
	     { cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d280 |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d291,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d303 |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d314,
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[0]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[0]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d337 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d340 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[4]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[4]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d245,
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[3]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[3]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d268,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d339 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d341 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[6]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[6]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d199,
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[5]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[5]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d222,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d340 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d342 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[8]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[8]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d153,
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[7]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[7]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d176,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d341 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d343 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[10]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[10]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d107,
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[9]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[9]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d130,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d342 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d344 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[12]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[12]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d61,
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[11]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[11]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d84,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d343 } ;
  assign cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d856 =
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[31:23] == 9'd0 &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 ;
  assign cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d891 =
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 &&
	     NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 ;
  assign cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d897 =
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[22:14] != 9'd0 &&
	     NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 ;
  assign cache_masterPortShim_rff_first__82_BIT_7_90_OR_ETC___d846 =
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     (cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
	      cache_masterPortShim_rff$D_OUT[22:14] != 9'd0) &&
	     NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 ;
  assign cache_masterPortShim_rff_first__82_BIT_7_90_OR_ETC___d858 =
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[31:23] == 9'd0 &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 &&
	     NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 ;
  assign cache_masterPortShim_rff_i_notEmpty__81_AND_NO_ETC___d796 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[4] ||
	      cache_masterPortShim_rff$D_OUT[6] ||
	      cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5] ||
	      cache_masterPortShim_arff$FULL_N) ;
  assign cache_ram_cword_set_b_read__04_BITS_128_TO_0_0_ETC___d689 =
	     x__h10261 | y__h10262 ;
  assign cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d508 =
	     cache_ram_state_and_ctag_cset$DOB[51:0] ==
	     cache_tlb$mv_vm_get_xlate[200:149] ;
  assign cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d510 =
	     cache_ram_state_and_ctag_cset$DOB[104:53] ==
	     cache_tlb$mv_vm_get_xlate[200:149] ;
  assign cache_ram_state_and_ctag_cset_b_read__93_BIT_5_ETC___d730 =
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d508 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d510) &&
	     NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 ;
  assign cache_rg_mem_req_sent_52_AND_cache_rg_op_52_EQ_ETC___d755 =
	     cache_rg_mem_req_sent && cache_rg_op == 2'd2 &&
	     (!cache_ram_state_and_ctag_cset$DOB[52] ||
	      !cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d508) &&
	     (!cache_ram_state_and_ctag_cset$DOB[105] ||
	      !cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d510) ;
  assign cline_fabric_addr__h40415 = { cache_rg_pa[63:6], 6'd0 } ;
  assign lev_0_pte_pa__h38811 = lev_1_PTN_pa__h37693 + vpn_0_pa__h38810 ;
  assign lev_0_pte_pa_w64_fa__h38813 = { lev_0_pte_pa__h38811[63:3], 3'b0 } ;
  assign lev_1_PTN_pa__h37693 = { 8'd0, x__h37770 } ;
  assign lev_1_pte_pa__h37695 = lev_1_PTN_pa__h37693 + vpn_1_pa__h37694 ;
  assign lev_1_pte_pa_w64_fa__h37697 = { lev_1_pte_pa__h37695[63:3], 3'b0 } ;
  assign lev_2_pte_pa__h36751 = satp_pa__h2236 + vpn_2_pa__h36750 ;
  assign lev_2_pte_pa_w64_fa__h36753 = { lev_2_pte_pa__h36751[63:3], 3'b0 } ;
  assign mem_req_wr_addr_awlen__h5851 =
	     (cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100) ?
	       8'd1 :
	       8'd0 ;
  assign mem_req_wr_second_data_wuser__h5744 =
	     cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100 &&
	     cache_f_fabric_write_reqs$D_OUT[128] ;
  assign result_lo__h35737 =
	     cache_rg_is_unsigned ?
	       { 56'd0, x__h35750[7:0] } :
	       { {56{x5750_BITS_7_TO_0__q3[7]}}, x5750_BITS_7_TO_0__q3 } ;
  assign result_lo__h35776 =
	     cache_rg_is_unsigned ?
	       { 48'd0, x__h35750[15:0] } :
	       { {48{x5750_BITS_15_TO_0__q4[15]}}, x5750_BITS_15_TO_0__q4 } ;
  assign result_lo__h35788 =
	     cache_rg_is_unsigned ?
	       { 32'd0, x__h35750[31:0] } :
	       { {32{x5750_BITS_31_TO_0__q2[31]}}, x5750_BITS_31_TO_0__q2 } ;
  assign satp_pa__h2236 = { 8'd0, x__h8017 } ;
  assign shift_bits__h5635 =
	     { cache_f_fabric_write_reqs$D_OUT[131:129], 3'b0 } ;
  assign strobe64__h5872 =
	     8'b00000001 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h5879 =
	     8'b00000011 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h5883 =
	     8'b00001111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h5887 =
	     8'b11111111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign tags__h41757 =
	     cache_masterPortShim_rff$D_OUT[0] & cache_rg_lower_word64_user ;
  assign tmp__h40568 = { 1'd0, cache_rg_victim_way } ;
  assign tmp__h40569 = tmp__h40568 + 2'd1 ;
  assign vpn_0_pa__h38810 = { 52'd0, cache_rg_addr[20:12], 3'd0 } ;
  assign vpn_1_pa__h37694 = { 52'd0, cache_rg_addr[29:21], 3'd0 } ;
  assign vpn_2_pa__h36750 = { 52'd0, cache_rg_addr[38:30], 3'd0 } ;
  assign word64__h5871 =
	     cache_f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h5635 ;
  assign x5750_BITS_15_TO_0__q4 = x__h35750[15:0] ;
  assign x5750_BITS_31_TO_0__q2 = x__h35750[31:0] ;
  assign x5750_BITS_7_TO_0__q3 = x__h35750[7:0] ;
  assign x__h10261 = cache_ram_cword_set$DOB[128:0] & y__h10315 ;
  assign x__h35701 =
	     { _theResult___snd_snd__h35703, _theResult___snd_fst__h35702 } ;
  assign x__h35708 =
	     cache_ram_cword_set_b_read__04_BITS_128_TO_0_0_ETC___d689[127:0] >>
	     x__h57130 ;
  assign x__h35750 =
	     cache_ram_cword_set_b_read__04_BITS_128_TO_0_0_ETC___d689[127:0] >>
	     x__h57171 ;
  assign x__h37770 = { cache_masterPortShim_rff$D_OUT[57:14], 12'b0 } ;
  assign x__h50852 =
	     cache_rg_victim_way ?
	       cache_rg_pa[63:12] :
	       cache_ram_state_and_ctag_cset$DOB[104:53] ;
  assign x__h50920 =
	     cache_rg_victim_way ?
	       cache_ram_state_and_ctag_cset$DOB[51:0] :
	       cache_rg_pa[63:12] ;
  assign x__h57130 = { cache_rg_addr[3:0] + 4'd8, 3'b0 } ;
  assign x__h57171 = { cache_rg_addr[3:0], 3'b0 } ;
  assign x__h8017 = { cache_rg_satp[43:0], 12'b0 } ;
  assign y__h10262 = cache_ram_cword_set$DOB[257:129] & y__h23007 ;
  assign y__h10315 =
	     {129{cache_ram_state_and_ctag_cset$DOB[52] &&
		  cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d508}} ;
  assign y__h23007 =
	     {129{cache_ram_state_and_ctag_cset$DOB[105] &&
		  cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d510}} ;
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010, 3'b011: fabric_strobe2__h5648 = 8'd0;
      3'b100: fabric_strobe2__h5648 = 8'b11111111;
      default: fabric_strobe2__h5648 = 8'd0;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010:
	  _theResult___snd_snd_snd_val__h5894 =
	      cache_f_fabric_write_reqs$D_OUT[195:193];
      3'b011, 3'b100: _theResult___snd_snd_snd_val__h5894 = 3'b011;
      default: _theResult___snd_snd_snd_val__h5894 = 3'b110;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or
	  strobe64__h5872 or
	  strobe64__h5879 or strobe64__h5883 or strobe64__h5887)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0: mem_req_wr_data_wstrb__h5931 = strobe64__h5872;
      3'b001: mem_req_wr_data_wstrb__h5931 = strobe64__h5879;
      3'b010: mem_req_wr_data_wstrb__h5931 = strobe64__h5883;
      3'b011: mem_req_wr_data_wstrb__h5931 = strobe64__h5887;
      3'b100: mem_req_wr_data_wstrb__h5931 = 8'b11111111;
      default: mem_req_wr_data_wstrb__h5931 = 8'd0;
    endcase
  end
  always@(cache_tlb$mv_vm_get_xlate or cache_rg_exc_code)
  begin
    case (cache_tlb$mv_vm_get_xlate[203:202])
      2'd1: x1_avValue_snd_snd__h36231 = cache_rg_exc_code;
      2'd2: x1_avValue_snd_snd__h36231 = cache_tlb$mv_vm_get_xlate[136:131];
      default: x1_avValue_snd_snd__h36231 = cache_rg_exc_code;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or word64__h5871)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010, 3'b011:
	  mem_req_wr_data_wdata__h5930 = word64__h5871;
      default: mem_req_wr_data_wdata__h5930 =
		   cache_f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(cache_rg_width_code or x__h35708)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'd3: _theResult___snd_snd__h35703 = 64'd0;
      3'b100: _theResult___snd_snd__h35703 = x__h35708[63:0];
      default: _theResult___snd_snd__h35703 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  x__h35750 or
	  result_lo__h35737 or result_lo__h35776 or result_lo__h35788)
  begin
    case (cache_rg_width_code)
      3'd0: _theResult___snd_fst__h35702 = result_lo__h35737;
      3'd1: _theResult___snd_fst__h35702 = result_lo__h35776;
      3'b010: _theResult___snd_fst__h35702 = result_lo__h35788;
      default: _theResult___snd_fst__h35702 = x__h35750[63:0];
    endcase
  end
  always@(cache_tlb$mv_vm_get_xlate or
	  IF_cache_ram_state_and_ctag_cset_b_read__93_BI_ETC___d744)
  begin
    case (cache_tlb$mv_vm_get_xlate[203:202])
      2'd1: CASE_cache_tlbmv_vm_get_xlate_BITS_203_TO_202_ETC__q5 = 5'd5;
      2'd2: CASE_cache_tlbmv_vm_get_xlate_BITS_203_TO_202_ETC__q5 = 5'd4;
      default: CASE_cache_tlbmv_vm_get_xlate_BITS_203_TO_202_ETC__q5 =
		   IF_cache_ram_state_and_ctag_cset_b_read__93_BI_ETC___d744;
    endcase
  end
  always@(cache_rg_victim_way or cache_ram_state_and_ctag_cset$DOB)
  begin
    case (cache_rg_victim_way)
      1'd0:
	  CASE_cache_rg_victim_way_0_cache_ram_state_and_ETC__q6 =
	      cache_ram_state_and_ctag_cset$DOB[52];
      1'd1:
	  CASE_cache_rg_victim_way_0_cache_ram_state_and_ETC__q6 =
	      cache_ram_state_and_ctag_cset$DOB[105];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_aw_events_register <= `BSV_ASSIGNMENT_DELAY 14'd0;
	cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd2;
	cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_rg_cache_rereq_data <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	cache_rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_mem_req_sent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
	cache_rg_tlb_walk <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_tohost_addr <= `BSV_ASSIGNMENT_DELAY 64'h0000000080001000;
	cache_rg_tohost_value <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cache_rg_watch_tohost <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_wr_rsp_err <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cache_aw_events_register$EN)
	  cache_aw_events_register <= `BSV_ASSIGNMENT_DELAY
	      cache_aw_events_register$D_IN;
	if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_ctr_wr_rsps_pending_crg$EN)
	  cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_crg$D_IN;
	if (cache_rg_cache_rereq_data$EN)
	  cache_rg_cache_rereq_data <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cache_rereq_data$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_ddr4_ready$EN)
	  cache_rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_ddr4_ready$D_IN;
	if (cache_rg_ld_val$EN)
	  cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_mem_req_sent$EN)
	  cache_rg_mem_req_sent <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_mem_req_sent$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
	if (cache_rg_tlb_walk$EN)
	  cache_rg_tlb_walk <= `BSV_ASSIGNMENT_DELAY cache_rg_tlb_walk$D_IN;
	if (cache_rg_tohost_addr$EN)
	  cache_rg_tohost_addr <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_tohost_addr$D_IN;
	if (cache_rg_tohost_value$EN)
	  cache_rg_tohost_value <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_tohost_value$D_IN;
	if (cache_rg_watch_tohost$EN)
	  cache_rg_watch_tohost <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_watch_tohost$D_IN;
	if (cache_rg_wr_rsp_err$EN)
	  cache_rg_wr_rsp_err <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_wr_rsp_err$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_allow_cap$EN)
      cache_rg_allow_cap <= `BSV_ASSIGNMENT_DELAY cache_rg_allow_cap$D_IN;
    if (cache_rg_amo_funct5$EN)
      cache_rg_amo_funct5 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct5$D_IN;
    if (cache_rg_cset_cword_in_cache$EN)
      cache_rg_cset_cword_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_cset_cword_in_cache$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lower_word64_user$EN)
      cache_rg_lower_word64_user <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64_user$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_mstatus_MXR$EN)
      cache_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY cache_rg_mstatus_MXR$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_priv$EN)
      cache_rg_priv <= `BSV_ASSIGNMENT_DELAY cache_rg_priv$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_satp$EN)
      cache_rg_satp <= `BSV_ASSIGNMENT_DELAY cache_rg_satp$D_IN;
    if (cache_rg_sstatus_SUM$EN)
      cache_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY cache_rg_sstatus_SUM$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_victim_way$EN)
      cache_rg_victim_way <= `BSV_ASSIGNMENT_DELAY cache_rg_victim_way$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_aw_events_register = 14'h2AAA;
    cache_cfg_verbosity = 4'hA;
    cache_ctr_wr_rsps_pending_crg = 4'hA;
    cache_rg_addr = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_allow_cap = 1'h0;
    cache_rg_amo_funct5 = 5'h0A;
    cache_rg_cache_rereq_data = 1'h0;
    cache_rg_cset_cword_in_cache = 8'hAA;
    cache_rg_cset_in_cache = 6'h2A;
    cache_rg_ddr4_ready = 1'h0;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lower_word64_user = 1'h0;
    cache_rg_lrsc_pa = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_mem_req_sent = 1'h0;
    cache_rg_mstatus_MXR = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_priv = 2'h2;
    cache_rg_pte_pa = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_satp = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_sstatus_SUM = 1'h0;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 5'h0A;
    cache_rg_tlb_walk = 1'h0;
    cache_rg_tohost_addr = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_tohost_value = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_victim_way = 1'h0;
    cache_rg_watch_tohost = 1'h0;
    cache_rg_width_code = 3'h2;
    cache_rg_wr_rsp_err = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req)
	$display("MMU_Cache req for addr %x, data_not_instruction %d, resetting %d",
		 req_addr,
		 1'd0,
		 cache_f_reset_reqs$EMPTY_N);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_watch_tohost)
	begin
	  v__h62242 = $stime;
	  #0;
	end
    v__h62236 = v__h62242 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_watch_tohost)
	$display("%0d: %m.set_watch_tohost: watch %0d, addr %0h",
		 v__h62236,
		 set_watch_tohost_watch_tohost,
		 set_watch_tohost_tohost_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", cache_f_fabric_write_reqs$D_OUT[192:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", mem_req_wr_addr_awlen__h5851);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", _theResult___snd_snd_snd_val__h5894, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", mem_req_wr_data_wdata__h5930);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", mem_req_wr_data_wstrb__h5931);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", mem_req_wr_second_data_wuser__h5744, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h7648 = $stime;
	  #0;
	end
    v__h7642 = v__h7648 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h7642,
		 "I_MMU_Cache",
		 $signed(32'd64),
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h7745 = $stime;
	  #0;
	end
    v__h7739 = v__h7745 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h7739, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h7881 = $stime;
	  #0;
	end
    v__h7875 = v__h7881 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h7875,
		 "I_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_rg_satp[63:60] != 4'd0)
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 cache_rg_priv,
		 cache_rg_satp[63:60],
		 cache_rg_satp[59:44],
		 satp_pa__h2236,
		 cache_rg_addr[29:21],
		 cache_rg_addr[20:12],
		 cache_rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  CWord 0x%0h  Byte 0x%0h}",
		 cache_rg_addr[63:12],
		 cache_rg_addr[11:6],
		 cache_rg_addr[5:4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  !cache_ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_ram_state_and_ctag_cset$DOB[52])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[51:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  !cache_ram_state_and_ctag_cset$DOB[52])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_ram_state_and_ctag_cset$DOB[105])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  !cache_ram_state_and_ctag_cset$DOB[105])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_ram_state_and_ctag_cset$DOB[105])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[104:53]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  !cache_ram_state_and_ctag_cset$DOB[105])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(" 0x%0x", cache_ram_cword_set$DOB[128:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(" 0x%0x", cache_ram_cword_set$DOB[257:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_ram_state_and_ctag_cset$DOB[52] &&
	  cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d508 &&
	  cache_ram_state_and_ctag_cset$DOB[105] &&
	  cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d510)
	$display("        ASSERTION ERROR: fn_test_cache_hit_or_miss: multiple hits in set at [%0d] and [%0d]",
		 $signed(32'd1),
		 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_tlb$mv_vm_get_xlate[203:202] == 2'd0)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_tlb$mv_vm_get_xlate[203:202] == 2'd1)
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd0 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "allow_cap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_tlb$mv_vm_get_xlate[201])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  !cache_tlb$mv_vm_get_xlate[201])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[200:137]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[136:131]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  cache_tlb$mv_vm_get_xlate[130])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  !cache_tlb$mv_vm_get_xlate[130])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "pte_level: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "pte_pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$display("    fa_record_pte_A_D_updates:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538 &&
	  cache_tlb$mv_vm_get_xlate[203:202] == 2'd0)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd0)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write(", ", "allow_cap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538 &&
	  cache_tlb$mv_vm_get_xlate[201])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538 &&
	  !cache_tlb$mv_vm_get_xlate[201])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[200:137]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[136:131]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write(", ", "pte_level: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write(", ", "pte_pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__02_ULT_2_37___d538)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_ram_state_and_ctag_cset_b_read__93_BIT_5_ETC___d730)
	begin
	  v__h35891 = $stime;
	  #0;
	end
    v__h35885 = v__h35891 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_ram_state_and_ctag_cset_b_read__93_BIT_5_ETC___d730)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h35885,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_cword_set_b_read__04_BITS_128_TO_0_0_ETC___d689,
		 129'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_ram_state_and_ctag_cset_b_read__93_BIT_5_ETC___d730)
	$display("        Read-hit: addr 0x%0h centry 0x%0h",
		 cache_rg_addr,
		 cache_ram_cword_set_b_read__04_BITS_128_TO_0_0_ETC___d689);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  (!cache_ram_state_and_ctag_cset$DOB[52] ||
	   !cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d508) &&
	  (!cache_ram_state_and_ctag_cset$DOB[105] ||
	   !cache_ram_state_and_ctag_cset_b_read__93_BITS__ETC___d510) &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	begin
	  v__h62319 = $stime;
	  #0;
	end
    v__h62313 = v__h62319 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	$display("%0d: %m.ma_ddr4_ready: Enabling MMU_Cache", v__h62313);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h36702 = $stime;
	  #0;
	end
    v__h36696 = v__h36702 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 2 PTE",
		 v__h36696,
		 "I_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h36891 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("%0t            To fabric: ", v__h36891);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", lev_2_pte_pa_w64_fa__h36753);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h38779 = $stime;
	  #0;
	end
    v__h38773 = v__h38779 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		 v__h38773,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa,
		 6'd12);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h38520 = $stime;
	  #0;
	end
    v__h38514 = v__h38520 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		 v__h38514,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("    Req for level 0 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h38933 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("%0t            To fabric: ", v__h38933);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", lev_0_pte_pa_w64_fa__h38813);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d891)
	begin
	  v__h39216 = $stime;
	  #0;
	end
    v__h39210 = v__h39216 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d891)
	$display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		 v__h39210,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d891)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h37693);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d897)
	begin
	  v__h39099 = $stime;
	  #0;
	end
    v__h39093 = v__h39099 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__82_BITS_3_TO_2_ETC___d897)
	$display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		 v__h39093,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  cache_masterPortShim_rff$D_OUT[22:14] != 9'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 6'd12);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h38699 = $stime;
	  #0;
	end
    v__h38693 = v__h38699 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		 v__h38693,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pte_pa,
		 6'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h37663 = $stime;
	  #0;
	end
    v__h37657 = v__h37663 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		 v__h37657,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa,
		 6'd12);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h37401 = $stime;
	  #0;
	end
    v__h37395 = v__h37401 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		 v__h37395,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("    Req for level 1 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h37818 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("%0t            To fabric: ", v__h37818);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", lev_1_pte_pa_w64_fa__h37697);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__82_BIT_7_90_OR_ETC___d846)
	begin
	  v__h37984 = $stime;
	  #0;
	end
    v__h37978 = v__h37984 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__82_BIT_7_90_OR_ETC___d846)
	$display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		 v__h37978,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  (cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
	   cache_masterPortShim_rff$D_OUT[22:14] != 9'd0))
	$display("    Invalid PTE: PPN[1] or PPN[0] is not zero; page fault %0d",
		 6'd12);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__82_BIT_7_90_OR_ETC___d858)
	begin
	  v__h38101 = $stime;
	  #0;
	end
    v__h38095 = v__h38101 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__82_BIT_7_90_OR_ETC___d858)
	$display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		 v__h38095,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__82_BIT_7_90_OR_ETC___d858)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h37693);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h37583 = $stime;
	  #0;
	end
    v__h37577 = v__h37583 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		 v__h37577,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pte_pa,
		 6'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h39735 = $stime;
	  #0;
	end
    v__h39729 = v__h39735 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		 v__h39729,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa,
		 6'd12);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h39815 = $stime;
	  #0;
	end
    v__h39809 = v__h39815 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		 v__h39809,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa,
		 6'd12);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h39906 = $stime;
	  #0;
	end
    v__h39900 = v__h39906 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		 v__h39900,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("    Addr Space page pa: 0x%0h", lev_1_PTN_pa__h37693);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h39655 = $stime;
	  #0;
	end
    v__h39649 = v__h39655 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		 v__h39649,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pte_pa,
		 6'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h40225 = $stime;
	  #0;
	end
    v__h40219 = v__h40225 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_start_cache_refill: ", v__h40219, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h40508 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("%0t            To fabric: ", v__h40508);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", cline_fabric_addr__h40415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 8'd7);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("    Victim way %0d; => CACHE_REFILL", tmp__h40569[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	begin
	  v__h41239 = $stime;
	  #0;
	end
    v__h41233 = v__h41239 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h41233,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[72:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h41497 = $stime;
	  #0;
	end
    v__h41491 = v__h41497 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h41491,
		 "I_MMU_Cache",
		 6'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$display("        64b fabric: concat with rg_lower_word64: new_centry 0x%0x",
		 { tags__h41757, b__h41839 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  !cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$display("        Recording rdata in rg_lower_word64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_cset_cword_in_cache[1:0] == 2'd3 &&
	  (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_cset_cword_in_cache[1:0] == 2'd3 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$display("        Updating Cache cword_set 0x%0h, cword_in_cline %0d) old => new",
		 cache_rg_cset_cword_in_cache,
		 cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write(" 0x%0x", cache_ram_cword_set$DOB[128:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write(" 0x%0x", cache_ram_cword_set$DOB[257:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write(" 0x%0x",
	       IF_cache_rg_victim_way_41_THEN_cache_ram_cword_ETC___d1019);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write(" 0x%0x",
	       IF_cache_rg_victim_way_41_THEN_cache_masterPor_ETC___d1020);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__02_ULE_2_49___d950)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("    fa_req_ram_B tagCSet [0x%0x] cword_set [0x%0d]",
		 cache_rg_addr[11:6],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h58043 = $stime;
	  #0;
	end
    v__h58037 = v__h58043 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h58037,
	       "I_MMU_Cache",
	       $unsigned(b__h36656));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	begin
	  v__h58085 = $stime;
	  #0;
	end
    v__h58079 = v__h58085 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h58079,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd1 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	begin
	  v__h7171 = $stime;
	  #0;
	end
    v__h7165 = v__h7171 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	$display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		 v__h7165,
		 "I_MMU_Cache",
		 $signed(32'd8),
		 $signed(32'd2),
		 $signed(32'd32),
		 $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h59016 = $stime;
	  #0;
	end
    v__h59010 = v__h59016 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("%0d: %m.req: op:", v__h59010);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(" width_code:%0d addr:0x%0h st_value:0x%0h",
	       req_width_code,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("    amo_funct5 = 0x%0h", req_amo_funct5);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  IF_cache_w_req_width_code_whas__050_THEN_cache_ETC___d1149)
	$display("    fa_req_ram_B tagCSet [0x%0x] cword_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	begin
	  v__h60772 = $stime;
	  #0;
	end
    v__h60766 = v__h60772 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && NOT_cache_cfg_verbosity_read__02_ULE_1_03___d404)
	$display("%0d: %s.tlb_flush", v__h60766, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && EN_tlb_flush)
	$display("Error: \"../..//src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2231, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_do_tlb_flush] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_do_reset_req)
	$display("Error: \"../..//src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2230, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_do_reset_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
	$display("Error: \"../..//src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2229, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_start_cache_refill] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_rl_rereq)
	$display("Error: \"../..//src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2228, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_rereq] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop)
	$display("Error: \"../..//src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2227, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_cache_refill_rsps_loop] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkMMU_ICache

