//
// Generated by Bluespec Compiler, version untagged-g034050db (build 034050db)
//
//
// Ports:
// Name                         I/O  size props
// RDY_reset                      O     1 const
// RDY_predict_req                O     1
// predict_rsp                    O    64
// RDY_bp_train                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// predict_req_pc                 I    64 reg
// predict_rsp_is_i32_not_i16     I     1
// predict_rsp_instr              I    32
// bp_train_pc                    I    64
// bp_train_is_i32_not_i16        I     1
// bp_train_instr                 I    32
// bp_train_cf_info               I   195
// EN_reset                       I     1
// EN_predict_req                 I     1
// EN_bp_train                    I     1
//
// Combinational paths from inputs to outputs:
//   (predict_rsp_is_i32_not_i16, predict_rsp_instr) -> predict_rsp
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBranch_Predictor(CLK,
			  RST_N,

			  EN_reset,
			  RDY_reset,

			  predict_req_pc,
			  EN_predict_req,
			  RDY_predict_req,

			  predict_rsp_is_i32_not_i16,
			  predict_rsp_instr,
			  predict_rsp,

			  bp_train_pc,
			  bp_train_is_i32_not_i16,
			  bp_train_instr,
			  bp_train_cf_info,
			  EN_bp_train,
			  RDY_bp_train);
  input  CLK;
  input  RST_N;

  // action method reset
  input  EN_reset;
  output RDY_reset;

  // action method predict_req
  input  [63 : 0] predict_req_pc;
  input  EN_predict_req;
  output RDY_predict_req;

  // value method predict_rsp
  input  predict_rsp_is_i32_not_i16;
  input  [31 : 0] predict_rsp_instr;
  output [63 : 0] predict_rsp;

  // action method bp_train
  input  [63 : 0] bp_train_pc;
  input  bp_train_is_i32_not_i16;
  input  [31 : 0] bp_train_instr;
  input  [194 : 0] bp_train_cf_info;
  input  EN_bp_train;
  output RDY_bp_train;

  // signals for module outputs
  wire [63 : 0] predict_rsp;
  wire RDY_bp_train, RDY_predict_req, RDY_reset;

  // register rg_index
  reg [8 : 0] rg_index;
  wire [8 : 0] rg_index$D_IN;
  wire rg_index$EN;

  // register rg_pc
  reg [63 : 0] rg_pc;
  wire [63 : 0] rg_pc$D_IN;
  wire rg_pc$EN;

  // register rg_ras
  reg [1039 : 0] rg_ras;
  wire [1039 : 0] rg_ras$D_IN;
  wire rg_ras$EN;

  // register rg_resetting
  reg rg_resetting;
  wire rg_resetting$D_IN, rg_resetting$EN;

  // ports of submodule btb_bramcore2
  wire [117 : 0] btb_bramcore2$DIA, btb_bramcore2$DIB, btb_bramcore2$DOA;
  wire [8 : 0] btb_bramcore2$ADDRA, btb_bramcore2$ADDRB;
  wire btb_bramcore2$ENA,
       btb_bramcore2$ENB,
       btb_bramcore2$WEA,
       btb_bramcore2$WEB;

  // ports of submodule rf_btb_fsms
  wire [8 : 0] rf_btb_fsms$ADDR_1,
	       rf_btb_fsms$ADDR_10,
	       rf_btb_fsms$ADDR_11,
	       rf_btb_fsms$ADDR_12,
	       rf_btb_fsms$ADDR_13,
	       rf_btb_fsms$ADDR_14,
	       rf_btb_fsms$ADDR_15,
	       rf_btb_fsms$ADDR_16,
	       rf_btb_fsms$ADDR_17,
	       rf_btb_fsms$ADDR_18,
	       rf_btb_fsms$ADDR_19,
	       rf_btb_fsms$ADDR_2,
	       rf_btb_fsms$ADDR_20,
	       rf_btb_fsms$ADDR_21,
	       rf_btb_fsms$ADDR_22,
	       rf_btb_fsms$ADDR_23,
	       rf_btb_fsms$ADDR_24,
	       rf_btb_fsms$ADDR_25,
	       rf_btb_fsms$ADDR_26,
	       rf_btb_fsms$ADDR_27,
	       rf_btb_fsms$ADDR_28,
	       rf_btb_fsms$ADDR_29,
	       rf_btb_fsms$ADDR_3,
	       rf_btb_fsms$ADDR_30,
	       rf_btb_fsms$ADDR_31,
	       rf_btb_fsms$ADDR_32,
	       rf_btb_fsms$ADDR_33,
	       rf_btb_fsms$ADDR_34,
	       rf_btb_fsms$ADDR_35,
	       rf_btb_fsms$ADDR_36,
	       rf_btb_fsms$ADDR_37,
	       rf_btb_fsms$ADDR_4,
	       rf_btb_fsms$ADDR_5,
	       rf_btb_fsms$ADDR_6,
	       rf_btb_fsms$ADDR_7,
	       rf_btb_fsms$ADDR_8,
	       rf_btb_fsms$ADDR_9,
	       rf_btb_fsms$ADDR_IN;
  wire [1 : 0] rf_btb_fsms$D_IN, rf_btb_fsms$D_OUT_1;
  wire rf_btb_fsms$WE;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_reset,
       CAN_FIRE_bp_train,
       CAN_FIRE_predict_req,
       CAN_FIRE_reset,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_bp_train,
       WILL_FIRE_predict_req,
       WILL_FIRE_reset;

  // inputs to muxes for submodule ports
  reg [1 : 0] MUX_rf_btb_fsms$upd_2__VAL_1;
  wire [117 : 0] MUX_btb_bramcore2$b_put_3__VAL_1;
  wire [8 : 0] MUX_rg_index$write_1__VAL_2;
  wire MUX_btb_bramcore2$b_put_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] _theResult_____1_fst__h9669;
  reg [1 : 0] _theResult_____1_snd__h9628, _theResult_____1_snd__h9670;
  wire [974 : 0] IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d229,
		 IF_IF_bp_train_is_i32_not_i16_THEN_bp_train_in_ETC___d294;
  wire [64 : 0] IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d260,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d262,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d265,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d267,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d270,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d272,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d275,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d277,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d280,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d282,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d285,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d287,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d290,
		IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d292;
  wire [63 : 0] IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d308,
		IF_IF_bp_train_is_i32_not_i16_THEN_bp_train_in_ETC___d309,
		IF_bp_train_cf_info_BITS_194_TO_193_EQ_0_THEN__ETC__q1,
		IF_btb_bramcore2_a_read__06_BIT_117_07_AND_btb_ETC___d117,
		_theResult_____1_fst__h9504,
		_theResult_____1_fst__h9627,
		pred_pc___1__h4362,
		pred_pc__h3213,
		ret_pc___1__h5117,
		ret_pc__h5078;
  wire [1 : 0] _theResult_____1_snd_snd__h9506;
  wire IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d301,
       IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d198,
       IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d201,
       IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d222,
       IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d249,
       IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d214,
       IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215,
       IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224,
       IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d244,
       IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d160,
       IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d161,
       IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182,
       IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d204,
       IF_predict_rsp_is_i32_not_i16_OR_predict_rsp_i_ETC___d81,
       IF_predict_rsp_is_i32_not_i16_OR_predict_rsp_i_ETC___d96,
       IF_predict_rsp_is_i32_not_i16_THEN_NOT_predict_ETC___d50,
       IF_predict_rsp_is_i32_not_i16_THEN_NOT_predict_ETC___d51,
       IF_predict_rsp_is_i32_not_i16_THEN_predict_rsp_ETC___d69,
       IF_predict_rsp_is_i32_not_i16_THEN_predict_rsp_ETC___d91,
       IF_predict_rsp_is_i32_not_i16_THEN_predict_rsp_ETC___d99,
       NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1000__ETC___d137,
       NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1000__ETC___d248,
       NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1001__ETC___d142,
       NOT_bp_train_instr_BITS_6_TO_0_18_EQ_0x5B_63_3_ETC___d239,
       NOT_predict_rsp_instr_BITS_11_TO_7_8_EQ_predic_ETC___d93,
       bp_train_instr_BITS_11_TO_7_28_EQ_bp_train_ins_ETC___d218,
       bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_A_ETC___d178,
       bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_A_ETC___d221,
       bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_O_ETC___d193,
       bp_train_instr_BITS_15_TO_12_25_EQ_0b1001_38_A_ETC___d156,
       bp_train_instr_BITS_6_TO_0_18_EQ_0x5B_63_AND_b_ETC___d174,
       predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1000_7__ETC___d26,
       predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1000_7__ETC___d95,
       predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1001_7__ETC___d30,
       predict_rsp_instr_BITS_6_TO_0_EQ_0x5B_3_AND_pr_ETC___d64;

  // action method reset
  assign RDY_reset = 1'd1 ;
  assign CAN_FIRE_reset = 1'd1 ;
  assign WILL_FIRE_reset = EN_reset ;

  // action method predict_req
  assign RDY_predict_req = !rg_resetting ;
  assign CAN_FIRE_predict_req = !rg_resetting ;
  assign WILL_FIRE_predict_req = EN_predict_req ;

  // value method predict_rsp
  assign predict_rsp =
	     (IF_predict_rsp_is_i32_not_i16_THEN_NOT_predict_ETC___d51 &&
	      IF_predict_rsp_is_i32_not_i16_THEN_predict_rsp_ETC___d99 &&
	      rg_ras[64]) ?
	       rg_ras[63:0] :
	       IF_btb_bramcore2_a_read__06_BIT_117_07_AND_btb_ETC___d117 ;

  // action method bp_train
  assign RDY_bp_train = 1'd1 ;
  assign CAN_FIRE_bp_train = 1'd1 ;
  assign WILL_FIRE_bp_train = EN_bp_train ;

  // submodule btb_bramcore2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd118),
	  .MEMSIZE(10'd512)) btb_bramcore2(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(btb_bramcore2$ADDRA),
					   .ADDRB(btb_bramcore2$ADDRB),
					   .DIA(btb_bramcore2$DIA),
					   .DIB(btb_bramcore2$DIB),
					   .WEA(btb_bramcore2$WEA),
					   .WEB(btb_bramcore2$WEB),
					   .ENA(btb_bramcore2$ENA),
					   .ENB(btb_bramcore2$ENB),
					   .DOA(btb_bramcore2$DOA),
					   .DOB());

  // submodule rf_btb_fsms
  RegFile #(.addr_width(32'd9),
	    .data_width(32'd2),
	    .lo(9'h0),
	    .hi(9'd511)) rf_btb_fsms(.CLK(CLK),
				     .ADDR_1(rf_btb_fsms$ADDR_1),
				     .ADDR_10(rf_btb_fsms$ADDR_10),
				     .ADDR_11(rf_btb_fsms$ADDR_11),
				     .ADDR_12(rf_btb_fsms$ADDR_12),
				     .ADDR_13(rf_btb_fsms$ADDR_13),
				     .ADDR_14(rf_btb_fsms$ADDR_14),
				     .ADDR_15(rf_btb_fsms$ADDR_15),
				     .ADDR_16(rf_btb_fsms$ADDR_16),
				     .ADDR_17(rf_btb_fsms$ADDR_17),
				     .ADDR_18(rf_btb_fsms$ADDR_18),
				     .ADDR_19(rf_btb_fsms$ADDR_19),
				     .ADDR_2(rf_btb_fsms$ADDR_2),
				     .ADDR_20(rf_btb_fsms$ADDR_20),
				     .ADDR_21(rf_btb_fsms$ADDR_21),
				     .ADDR_22(rf_btb_fsms$ADDR_22),
				     .ADDR_23(rf_btb_fsms$ADDR_23),
				     .ADDR_24(rf_btb_fsms$ADDR_24),
				     .ADDR_25(rf_btb_fsms$ADDR_25),
				     .ADDR_26(rf_btb_fsms$ADDR_26),
				     .ADDR_27(rf_btb_fsms$ADDR_27),
				     .ADDR_28(rf_btb_fsms$ADDR_28),
				     .ADDR_29(rf_btb_fsms$ADDR_29),
				     .ADDR_3(rf_btb_fsms$ADDR_3),
				     .ADDR_30(rf_btb_fsms$ADDR_30),
				     .ADDR_31(rf_btb_fsms$ADDR_31),
				     .ADDR_32(rf_btb_fsms$ADDR_32),
				     .ADDR_33(rf_btb_fsms$ADDR_33),
				     .ADDR_34(rf_btb_fsms$ADDR_34),
				     .ADDR_35(rf_btb_fsms$ADDR_35),
				     .ADDR_36(rf_btb_fsms$ADDR_36),
				     .ADDR_37(rf_btb_fsms$ADDR_37),
				     .ADDR_4(rf_btb_fsms$ADDR_4),
				     .ADDR_5(rf_btb_fsms$ADDR_5),
				     .ADDR_6(rf_btb_fsms$ADDR_6),
				     .ADDR_7(rf_btb_fsms$ADDR_7),
				     .ADDR_8(rf_btb_fsms$ADDR_8),
				     .ADDR_9(rf_btb_fsms$ADDR_9),
				     .ADDR_IN(rf_btb_fsms$ADDR_IN),
				     .D_IN(rf_btb_fsms$D_IN),
				     .WE(rf_btb_fsms$WE),
				     .D_OUT_1(rf_btb_fsms$D_OUT_1),
				     .D_OUT_2(),
				     .D_OUT_3(),
				     .D_OUT_4(),
				     .D_OUT_5(),
				     .D_OUT_6(),
				     .D_OUT_7(),
				     .D_OUT_8(),
				     .D_OUT_9(),
				     .D_OUT_10(),
				     .D_OUT_11(),
				     .D_OUT_12(),
				     .D_OUT_13(),
				     .D_OUT_14(),
				     .D_OUT_15(),
				     .D_OUT_16(),
				     .D_OUT_17(),
				     .D_OUT_18(),
				     .D_OUT_19(),
				     .D_OUT_20(),
				     .D_OUT_21(),
				     .D_OUT_22(),
				     .D_OUT_23(),
				     .D_OUT_24(),
				     .D_OUT_25(),
				     .D_OUT_26(),
				     .D_OUT_27(),
				     .D_OUT_28(),
				     .D_OUT_29(),
				     .D_OUT_30(),
				     .D_OUT_31(),
				     .D_OUT_32(),
				     .D_OUT_33(),
				     .D_OUT_34(),
				     .D_OUT_35(),
				     .D_OUT_36(),
				     .D_OUT_37());

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = rg_resetting ;
  assign WILL_FIRE_RL_rl_reset = rg_resetting && !EN_bp_train ;

  // inputs to muxes for submodule ports
  assign MUX_btb_bramcore2$b_put_1__SEL_1 =
	     EN_bp_train &&
	     (bp_train_cf_info[194:193] == 2'd0 ||
	      bp_train_cf_info[194:193] == 2'd1 ||
	      bp_train_cf_info[194:193] == 2'd2) ;
  assign MUX_btb_bramcore2$b_put_3__VAL_1 =
	     { 1'd1,
	       bp_train_cf_info[192:139],
	       IF_bp_train_cf_info_BITS_194_TO_193_EQ_0_THEN__ETC__q1[63:1] } ;
  always@(bp_train_cf_info or
	  rf_btb_fsms$D_OUT_1 or _theResult_____1_snd_snd__h9506)
  begin
    case (bp_train_cf_info[194:193])
      2'd0: MUX_rf_btb_fsms$upd_2__VAL_1 = _theResult_____1_snd_snd__h9506;
      2'd1, 2'd2: MUX_rf_btb_fsms$upd_2__VAL_1 = 2'b11;
      2'd3: MUX_rf_btb_fsms$upd_2__VAL_1 = rf_btb_fsms$D_OUT_1;
    endcase
  end
  assign MUX_rg_index$write_1__VAL_2 = rg_index + 9'd1 ;

  // register rg_index
  assign rg_index$D_IN = EN_reset ? 9'd0 : MUX_rg_index$write_1__VAL_2 ;
  assign rg_index$EN = WILL_FIRE_RL_rl_reset || EN_reset ;

  // register rg_pc
  assign rg_pc$D_IN = predict_req_pc ;
  assign rg_pc$EN = EN_predict_req ;

  // register rg_ras
  assign rg_ras$D_IN =
	     { IF_IF_bp_train_is_i32_not_i16_THEN_bp_train_in_ETC___d294,
	       IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d161 ||
	       IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	       IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d160 &&
	       (IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d198 ||
		IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d201) ||
	       IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d301,
	       IF_IF_bp_train_is_i32_not_i16_THEN_bp_train_in_ETC___d309 } ;
  assign rg_ras$EN = EN_bp_train ;

  // register rg_resetting
  assign rg_resetting$D_IN = EN_reset ;
  assign rg_resetting$EN =
	     WILL_FIRE_RL_rl_reset && rg_index == 9'd511 || EN_reset ;

  // submodule btb_bramcore2
  assign btb_bramcore2$ADDRA = predict_req_pc[9:1] ;
  assign btb_bramcore2$ADDRB =
	     MUX_btb_bramcore2$b_put_1__SEL_1 ?
	       bp_train_cf_info[138:130] :
	       rg_index ;
  assign btb_bramcore2$DIA =
	     118'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign btb_bramcore2$DIB =
	     MUX_btb_bramcore2$b_put_1__SEL_1 ?
	       MUX_btb_bramcore2$b_put_3__VAL_1 :
	       118'd0 ;
  assign btb_bramcore2$WEA = 1'd0 ;
  assign btb_bramcore2$WEB = 1'd1 ;
  assign btb_bramcore2$ENA = EN_predict_req ;
  assign btb_bramcore2$ENB =
	     EN_bp_train &&
	     (bp_train_cf_info[194:193] == 2'd0 ||
	      bp_train_cf_info[194:193] == 2'd1 ||
	      bp_train_cf_info[194:193] == 2'd2) ||
	     WILL_FIRE_RL_rl_reset ;

  // submodule rf_btb_fsms
  assign rf_btb_fsms$ADDR_1 = bp_train_cf_info[138:130] ;
  assign rf_btb_fsms$ADDR_10 = 9'h0 ;
  assign rf_btb_fsms$ADDR_11 = 9'h0 ;
  assign rf_btb_fsms$ADDR_12 = 9'h0 ;
  assign rf_btb_fsms$ADDR_13 = 9'h0 ;
  assign rf_btb_fsms$ADDR_14 = 9'h0 ;
  assign rf_btb_fsms$ADDR_15 = 9'h0 ;
  assign rf_btb_fsms$ADDR_16 = 9'h0 ;
  assign rf_btb_fsms$ADDR_17 = 9'h0 ;
  assign rf_btb_fsms$ADDR_18 = 9'h0 ;
  assign rf_btb_fsms$ADDR_19 = 9'h0 ;
  assign rf_btb_fsms$ADDR_2 = 9'h0 ;
  assign rf_btb_fsms$ADDR_20 = 9'h0 ;
  assign rf_btb_fsms$ADDR_21 = 9'h0 ;
  assign rf_btb_fsms$ADDR_22 = 9'h0 ;
  assign rf_btb_fsms$ADDR_23 = 9'h0 ;
  assign rf_btb_fsms$ADDR_24 = 9'h0 ;
  assign rf_btb_fsms$ADDR_25 = 9'h0 ;
  assign rf_btb_fsms$ADDR_26 = 9'h0 ;
  assign rf_btb_fsms$ADDR_27 = 9'h0 ;
  assign rf_btb_fsms$ADDR_28 = 9'h0 ;
  assign rf_btb_fsms$ADDR_29 = 9'h0 ;
  assign rf_btb_fsms$ADDR_3 = 9'h0 ;
  assign rf_btb_fsms$ADDR_30 = 9'h0 ;
  assign rf_btb_fsms$ADDR_31 = 9'h0 ;
  assign rf_btb_fsms$ADDR_32 = 9'h0 ;
  assign rf_btb_fsms$ADDR_33 = 9'h0 ;
  assign rf_btb_fsms$ADDR_34 = 9'h0 ;
  assign rf_btb_fsms$ADDR_35 = 9'h0 ;
  assign rf_btb_fsms$ADDR_36 = 9'h0 ;
  assign rf_btb_fsms$ADDR_37 = 9'h0 ;
  assign rf_btb_fsms$ADDR_4 = 9'h0 ;
  assign rf_btb_fsms$ADDR_5 = 9'h0 ;
  assign rf_btb_fsms$ADDR_6 = 9'h0 ;
  assign rf_btb_fsms$ADDR_7 = 9'h0 ;
  assign rf_btb_fsms$ADDR_8 = 9'h0 ;
  assign rf_btb_fsms$ADDR_9 = 9'h0 ;
  assign rf_btb_fsms$ADDR_IN =
	     MUX_btb_bramcore2$b_put_1__SEL_1 ?
	       bp_train_cf_info[138:130] :
	       rg_index ;
  assign rf_btb_fsms$D_IN =
	     MUX_btb_bramcore2$b_put_1__SEL_1 ?
	       MUX_rf_btb_fsms$upd_2__VAL_1 :
	       2'b0 ;
  assign rf_btb_fsms$WE =
	     EN_bp_train &&
	     (bp_train_cf_info[194:193] == 2'd0 ||
	      bp_train_cf_info[194:193] == 2'd1 ||
	      bp_train_cf_info[194:193] == 2'd2) ||
	     WILL_FIRE_RL_rl_reset ;

  // remaining internal signals
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d229 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[1039:65] :
	       rg_ras[974:0] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d260 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[1039:975] :
	       rg_ras[974:910] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d262 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[974:910] :
	       rg_ras[909:845] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d265 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[909:845] :
	       rg_ras[844:780] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d267 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[844:780] :
	       rg_ras[779:715] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d270 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[779:715] :
	       rg_ras[714:650] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d272 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[714:650] :
	       rg_ras[649:585] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d275 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[649:585] :
	       rg_ras[584:520] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d277 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[584:520] :
	       rg_ras[519:455] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d280 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[519:455] :
	       rg_ras[454:390] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d282 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[454:390] :
	       rg_ras[389:325] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d285 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[389:325] :
	       rg_ras[324:260] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d287 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[324:260] :
	       rg_ras[259:195] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d290 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[259:195] :
	       rg_ras[194:130] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d292 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[194:130] :
	       rg_ras[129:65] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d301 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[129] :
	       rg_ras[64] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d308 =
	     (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 &&
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	      IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224) ?
	       rg_ras[128:65] :
	       rg_ras[63:0] ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_bp_train_in_ETC___d294 =
	     (IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d161 ||
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d204) ?
	       IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d229 :
	       { (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d244 ||
		  (IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d160 ||
		   IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d198) &&
		  (IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d214 ||
		   IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d198 ||
		   IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d249)) &&
		 rg_ras[1039],
		 rg_ras[1038:975],
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d260,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d262,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d265,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d267,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d270,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d272,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d275,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d277,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d280,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d282,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d285,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d287,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d290,
		 IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d292 } ;
  assign IF_IF_bp_train_is_i32_not_i16_THEN_bp_train_in_ETC___d309 =
	     (IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d161 ||
	      IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d204) ?
	       (bp_train_is_i32_not_i16 ? ret_pc__h5078 : ret_pc___1__h5117) :
	       IF_IF_bp_train_is_i32_not_i16_THEN_NOT_bp_trai_ETC___d308 ;
  assign IF_bp_train_cf_info_BITS_194_TO_193_EQ_0_THEN__ETC__q1 =
	     (bp_train_cf_info[194:193] == 2'd0) ?
	       _theResult_____1_fst__h9504 :
	       bp_train_cf_info[63:0] ;
  assign IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d198 =
	     (bp_train_is_i32_not_i16 ||
	      bp_train_instr[15:13] == 3'b101 &&
	      bp_train_instr[1:0] == 2'b01) ?
	       bp_train_instr[19:15] != 5'd1 &&
	       bp_train_instr[19:15] != 5'd5 :
	       (bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_O_ETC___d193 ?
		  bp_train_instr[11:7] != 5'd1 &&
		  bp_train_instr[11:7] != 5'd5 :
		  bp_train_instr[19:15] != 5'd1 &&
		  bp_train_instr[19:15] != 5'd5) ;
  assign IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d201 =
	     (bp_train_is_i32_not_i16 ||
	      bp_train_instr[15:13] == 3'b101 &&
	      bp_train_instr[1:0] == 2'b01) ?
	       bp_train_instr[19:15] == 5'd1 ||
	       bp_train_instr[19:15] == 5'd5 :
	       (bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_O_ETC___d193 ?
		  bp_train_instr[11:7] == 5'd1 ||
		  bp_train_instr[11:7] == 5'd5 :
		  bp_train_instr[19:15] == 5'd1 ||
		  bp_train_instr[19:15] == 5'd5) ;
  assign IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d222 =
	     (bp_train_is_i32_not_i16 ||
	      bp_train_instr[15:13] == 3'b101 &&
	      bp_train_instr[1:0] == 2'b01) ?
	       !bp_train_instr_BITS_11_TO_7_28_EQ_bp_train_ins_ETC___d218 :
	       bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_A_ETC___d221 ;
  assign IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d249 =
	     (bp_train_is_i32_not_i16 ||
	      bp_train_instr[15:13] == 3'b101 &&
	      bp_train_instr[1:0] == 2'b01) ?
	       bp_train_instr_BITS_11_TO_7_28_EQ_bp_train_ins_ETC___d218 :
	       NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1000__ETC___d248 ;
  assign IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d214 =
	     bp_train_is_i32_not_i16 ?
	       bp_train_instr[11:7] != 5'd1 && bp_train_instr[11:7] != 5'd5 :
	       bp_train_instr[15:13] == 3'b101 &&
	       bp_train_instr[1:0] == 2'b01 ||
	       bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_A_ETC___d178 ||
	       NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1001__ETC___d142 &&
	       bp_train_instr[11:7] != 5'd1 &&
	       bp_train_instr[11:7] != 5'd5 ;
  assign IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d215 =
	     (bp_train_is_i32_not_i16 ?
		bp_train_instr[6:0] != 7'b1101111 :
		(bp_train_instr[15:13] != 3'b101 ||
		 bp_train_instr[1:0] != 2'b01) &&
		(bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_A_ETC___d178 ||
		 bp_train_instr_BITS_15_TO_12_25_EQ_0b1001_38_A_ETC___d156 ||
		 bp_train_instr[6:0] != 7'b1101111)) ||
	     IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d214 ;
  assign IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d224 =
	     IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d214 &&
	     IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d201 ||
	     IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d160 &&
	     IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d201 &&
	     IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d222 ;
  assign IF_bp_train_is_i32_not_i16_THEN_NOT_bp_train_i_ETC___d244 =
	     bp_train_is_i32_not_i16 ?
	       bp_train_instr[6:0] != 7'b1100111 &&
	       NOT_bp_train_instr_BITS_6_TO_0_18_EQ_0x5B_63_3_ETC___d239 :
	       bp_train_instr[15:13] == 3'b101 &&
	       bp_train_instr[1:0] == 2'b01 ||
	       NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1000__ETC___d137 &&
	       NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1001__ETC___d142 &&
	       bp_train_instr[6:0] != 7'b1100111 &&
	       NOT_bp_train_instr_BITS_6_TO_0_18_EQ_0x5B_63_3_ETC___d239 ;
  assign IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d160 =
	     bp_train_is_i32_not_i16 ?
	       bp_train_instr[11:7] == 5'd1 || bp_train_instr[11:7] == 5'd5 :
	       (bp_train_instr[15:13] != 3'b101 ||
		bp_train_instr[1:0] != 2'b01) &&
	       NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1000__ETC___d137 &&
	       (bp_train_instr_BITS_15_TO_12_25_EQ_0b1001_38_A_ETC___d156 ||
		bp_train_instr[11:7] == 5'd1 ||
		bp_train_instr[11:7] == 5'd5) ;
  assign IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d161 =
	     (bp_train_is_i32_not_i16 ?
		bp_train_instr[6:0] == 7'b1101111 :
		bp_train_instr[15:13] == 3'b101 &&
		bp_train_instr[1:0] == 2'b01 ||
		NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1000__ETC___d137 &&
		NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1001__ETC___d142 &&
		bp_train_instr[6:0] == 7'b1101111) &&
	     IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d160 ;
  assign IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 =
	     bp_train_is_i32_not_i16 ?
	       bp_train_instr[6:0] == 7'b1100111 ||
	       bp_train_instr_BITS_6_TO_0_18_EQ_0x5B_63_AND_b_ETC___d174 :
	       (bp_train_instr[15:13] != 3'b101 ||
		bp_train_instr[1:0] != 2'b01) &&
	       (bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_A_ETC___d178 ||
		bp_train_instr_BITS_15_TO_12_25_EQ_0b1001_38_A_ETC___d156 ||
		bp_train_instr[6:0] == 7'b1100111 ||
		bp_train_instr_BITS_6_TO_0_18_EQ_0x5B_63_AND_b_ETC___d174) ;
  assign IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d204 =
	     IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d182 &&
	     IF_bp_train_is_i32_not_i16_THEN_bp_train_instr_ETC___d160 &&
	     (IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d198 ||
	      IF_bp_train_is_i32_not_i16_OR_bp_train_instr_B_ETC___d201) ;
  assign IF_btb_bramcore2_a_read__06_BIT_117_07_AND_btb_ETC___d117 =
	     (btb_bramcore2$DOA[117] &&
	      btb_bramcore2$DOA[116:63] == rg_pc[63:10]) ?
	       pred_pc___1__h4362 :
	       pred_pc__h3213 ;
  assign IF_predict_rsp_is_i32_not_i16_OR_predict_rsp_i_ETC___d81 =
	     (predict_rsp_is_i32_not_i16 ||
	      predict_rsp_instr[15:13] == 3'b101 &&
	      predict_rsp_instr[1:0] == 2'b01) ?
	       predict_rsp_instr[19:15] == 5'd1 ||
	       predict_rsp_instr[19:15] == 5'd5 :
	       (((predict_rsp_instr[15:12] == 4'b1000 ||
		  predict_rsp_instr[15:12] == 4'b1001) &&
		 predict_rsp_instr[11:7] != 5'd0 &&
		 predict_rsp_instr[6:2] == 5'd0 &&
		 predict_rsp_instr[1:0] == 2'b10) ?
		  predict_rsp_instr[11:7] == 5'd1 ||
		  predict_rsp_instr[11:7] == 5'd5 :
		  predict_rsp_instr[19:15] == 5'd1 ||
		  predict_rsp_instr[19:15] == 5'd5) ;
  assign IF_predict_rsp_is_i32_not_i16_OR_predict_rsp_i_ETC___d96 =
	     (predict_rsp_is_i32_not_i16 ||
	      predict_rsp_instr[15:13] == 3'b101 &&
	      predict_rsp_instr[1:0] == 2'b01) ?
	       NOT_predict_rsp_instr_BITS_11_TO_7_8_EQ_predic_ETC___d93 :
	       predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1000_7__ETC___d95 ;
  assign IF_predict_rsp_is_i32_not_i16_THEN_NOT_predict_ETC___d50 =
	     predict_rsp_is_i32_not_i16 ?
	       predict_rsp_instr[11:7] != 5'd1 &&
	       predict_rsp_instr[11:7] != 5'd5 :
	       predict_rsp_instr[15:13] == 3'b101 &&
	       predict_rsp_instr[1:0] == 2'b01 ||
	       predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1000_7__ETC___d26 ||
	       (predict_rsp_instr[15:12] != 4'b1001 ||
		predict_rsp_instr[11:7] == 5'd0 ||
		predict_rsp_instr[6:2] != 5'd0 ||
		predict_rsp_instr[1:0] != 2'b10) &&
	       predict_rsp_instr[11:7] != 5'd1 &&
	       predict_rsp_instr[11:7] != 5'd5 ;
  assign IF_predict_rsp_is_i32_not_i16_THEN_NOT_predict_ETC___d51 =
	     (predict_rsp_is_i32_not_i16 ?
		predict_rsp_instr[6:0] != 7'b1101111 :
		(predict_rsp_instr[15:13] != 3'b101 ||
		 predict_rsp_instr[1:0] != 2'b01) &&
		(predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1000_7__ETC___d26 ||
		 predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1001_7__ETC___d30 ||
		 predict_rsp_instr[6:0] != 7'b1101111)) ||
	     IF_predict_rsp_is_i32_not_i16_THEN_NOT_predict_ETC___d50 ;
  assign IF_predict_rsp_is_i32_not_i16_THEN_predict_rsp_ETC___d69 =
	     predict_rsp_is_i32_not_i16 ?
	       predict_rsp_instr[6:0] == 7'b1100111 ||
	       predict_rsp_instr_BITS_6_TO_0_EQ_0x5B_3_AND_pr_ETC___d64 :
	       (predict_rsp_instr[15:13] != 3'b101 ||
		predict_rsp_instr[1:0] != 2'b01) &&
	       (predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1000_7__ETC___d26 ||
		predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1001_7__ETC___d30 ||
		predict_rsp_instr[6:0] == 7'b1100111 ||
		predict_rsp_instr_BITS_6_TO_0_EQ_0x5B_3_AND_pr_ETC___d64) ;
  assign IF_predict_rsp_is_i32_not_i16_THEN_predict_rsp_ETC___d91 =
	     (predict_rsp_is_i32_not_i16 ?
		predict_rsp_instr[11:7] == 5'd1 ||
		predict_rsp_instr[11:7] == 5'd5 :
		(predict_rsp_instr[15:13] != 3'b101 ||
		 predict_rsp_instr[1:0] != 2'b01) &&
		(predict_rsp_instr[15:12] != 4'b1000 ||
		 predict_rsp_instr[11:7] == 5'd0 ||
		 predict_rsp_instr[6:2] != 5'd0 ||
		 predict_rsp_instr[1:0] != 2'b10) &&
		(predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1001_7__ETC___d30 ||
		 predict_rsp_instr[11:7] == 5'd1 ||
		 predict_rsp_instr[11:7] == 5'd5)) &&
	     IF_predict_rsp_is_i32_not_i16_OR_predict_rsp_i_ETC___d81 ;
  assign IF_predict_rsp_is_i32_not_i16_THEN_predict_rsp_ETC___d99 =
	     IF_predict_rsp_is_i32_not_i16_THEN_predict_rsp_ETC___d69 &&
	     (IF_predict_rsp_is_i32_not_i16_THEN_NOT_predict_ETC___d50 &&
	      IF_predict_rsp_is_i32_not_i16_OR_predict_rsp_i_ETC___d81 ||
	      IF_predict_rsp_is_i32_not_i16_THEN_predict_rsp_ETC___d91 &&
	      IF_predict_rsp_is_i32_not_i16_OR_predict_rsp_i_ETC___d96) ;
  assign NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1000__ETC___d137 =
	     bp_train_instr[15:12] != 4'b1000 ||
	     bp_train_instr[11:7] == 5'd0 ||
	     bp_train_instr[6:2] != 5'd0 ||
	     bp_train_instr[1:0] != 2'b10 ;
  assign NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1000__ETC___d248 =
	     NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1000__ETC___d137 &&
	     (bp_train_instr_BITS_15_TO_12_25_EQ_0b1001_38_A_ETC___d156 ?
		bp_train_instr[11:7] == 5'd1 :
		bp_train_instr_BITS_11_TO_7_28_EQ_bp_train_ins_ETC___d218) ;
  assign NOT_bp_train_instr_BITS_15_TO_12_25_EQ_0b1001__ETC___d142 =
	     bp_train_instr[15:12] != 4'b1001 ||
	     bp_train_instr[11:7] == 5'd0 ||
	     bp_train_instr[6:2] != 5'd0 ||
	     bp_train_instr[1:0] != 2'b10 ;
  assign NOT_bp_train_instr_BITS_6_TO_0_18_EQ_0x5B_63_3_ETC___d239 =
	     bp_train_instr[6:0] != 7'h5B || bp_train_instr[14:12] != 3'h0 ||
	     bp_train_instr[31:25] != 7'h7F ||
	     bp_train_instr[24:20] != 5'h0C &&
	     bp_train_instr[24:20] != 5'h14 ;
  assign NOT_predict_rsp_instr_BITS_11_TO_7_8_EQ_predic_ETC___d93 =
	     predict_rsp_instr[11:7] != predict_rsp_instr[19:15] ;
  assign _theResult_____1_fst__h9504 =
	     bp_train_cf_info[128] ?
	       _theResult_____1_fst__h9627 :
	       _theResult_____1_fst__h9669 ;
  assign _theResult_____1_fst__h9627 =
	     (rf_btb_fsms$D_OUT_1 == 2'b0) ?
	       bp_train_cf_info[127:64] :
	       bp_train_cf_info[63:0] ;
  assign _theResult_____1_snd_snd__h9506 =
	     bp_train_cf_info[128] ?
	       _theResult_____1_snd__h9628 :
	       _theResult_____1_snd__h9670 ;
  assign bp_train_instr_BITS_11_TO_7_28_EQ_bp_train_ins_ETC___d218 =
	     bp_train_instr[11:7] == bp_train_instr[19:15] ;
  assign bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_A_ETC___d178 =
	     bp_train_instr[15:12] == 4'b1000 &&
	     bp_train_instr[11:7] != 5'd0 &&
	     bp_train_instr[6:2] == 5'd0 &&
	     bp_train_instr[1:0] == 2'b10 ;
  assign bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_A_ETC___d221 =
	     bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_A_ETC___d178 ||
	     (bp_train_instr_BITS_15_TO_12_25_EQ_0b1001_38_A_ETC___d156 ?
		bp_train_instr[11:7] != 5'd1 :
		!bp_train_instr_BITS_11_TO_7_28_EQ_bp_train_ins_ETC___d218) ;
  assign bp_train_instr_BITS_15_TO_12_25_EQ_0b1000_26_O_ETC___d193 =
	     (bp_train_instr[15:12] == 4'b1000 ||
	      bp_train_instr[15:12] == 4'b1001) &&
	     bp_train_instr[11:7] != 5'd0 &&
	     bp_train_instr[6:2] == 5'd0 &&
	     bp_train_instr[1:0] == 2'b10 ;
  assign bp_train_instr_BITS_15_TO_12_25_EQ_0b1001_38_A_ETC___d156 =
	     bp_train_instr[15:12] == 4'b1001 &&
	     bp_train_instr[11:7] != 5'd0 &&
	     bp_train_instr[6:2] == 5'd0 &&
	     bp_train_instr[1:0] == 2'b10 ;
  assign bp_train_instr_BITS_6_TO_0_18_EQ_0x5B_63_AND_b_ETC___d174 =
	     bp_train_instr[6:0] == 7'h5B && bp_train_instr[14:12] == 3'h0 &&
	     bp_train_instr[31:25] == 7'h7F &&
	     (bp_train_instr[24:20] == 5'h0C ||
	      bp_train_instr[24:20] == 5'h14) ;
  assign pred_pc___1__h4362 = { btb_bramcore2$DOA[62:0], 1'b0 } ;
  assign pred_pc__h3213 =
	     rg_pc + (predict_rsp_is_i32_not_i16 ? 64'd4 : 64'd2) ;
  assign predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1000_7__ETC___d26 =
	     predict_rsp_instr[15:12] == 4'b1000 &&
	     predict_rsp_instr[11:7] != 5'd0 &&
	     predict_rsp_instr[6:2] == 5'd0 &&
	     predict_rsp_instr[1:0] == 2'b10 ;
  assign predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1000_7__ETC___d95 =
	     predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1000_7__ETC___d26 ||
	     (predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1001_7__ETC___d30 ?
		predict_rsp_instr[11:7] != 5'd1 :
		NOT_predict_rsp_instr_BITS_11_TO_7_8_EQ_predic_ETC___d93) ;
  assign predict_rsp_instr_BITS_15_TO_12_6_EQ_0b1001_7__ETC___d30 =
	     predict_rsp_instr[15:12] == 4'b1001 &&
	     predict_rsp_instr[11:7] != 5'd0 &&
	     predict_rsp_instr[6:2] == 5'd0 &&
	     predict_rsp_instr[1:0] == 2'b10 ;
  assign predict_rsp_instr_BITS_6_TO_0_EQ_0x5B_3_AND_pr_ETC___d64 =
	     predict_rsp_instr[6:0] == 7'h5B &&
	     predict_rsp_instr[14:12] == 3'h0 &&
	     predict_rsp_instr[31:25] == 7'h7F &&
	     (predict_rsp_instr[24:20] == 5'h0C ||
	      predict_rsp_instr[24:20] == 5'h14) ;
  assign ret_pc___1__h5117 = bp_train_pc + 64'd2 ;
  assign ret_pc__h5078 = bp_train_pc + 64'd4 ;
  always@(rf_btb_fsms$D_OUT_1 or bp_train_cf_info)
  begin
    case (rf_btb_fsms$D_OUT_1)
      2'b0, 2'b01, 2'b10:
	  _theResult_____1_fst__h9669 = bp_train_cf_info[127:64];
      2'd3: _theResult_____1_fst__h9669 = bp_train_cf_info[63:0];
    endcase
  end
  always@(rf_btb_fsms$D_OUT_1)
  begin
    case (rf_btb_fsms$D_OUT_1)
      2'b0: _theResult_____1_snd__h9628 = 2'b01;
      2'b01: _theResult_____1_snd__h9628 = 2'b10;
      2'b10, 2'b11: _theResult_____1_snd__h9628 = 2'b11;
    endcase
  end
  always@(rf_btb_fsms$D_OUT_1)
  begin
    case (rf_btb_fsms$D_OUT_1)
      2'b0, 2'b01: _theResult_____1_snd__h9670 = 2'b0;
      2'b10: _theResult_____1_snd__h9670 = 2'b01;
      2'b11: _theResult_____1_snd__h9670 = 2'b10;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_index <= `BSV_ASSIGNMENT_DELAY 9'd0;
	rg_ras <= `BSV_ASSIGNMENT_DELAY
	    1040'h55555555555555552AAAAAAAAAAAAAAA95555555555555554AAAAAAAAAAAAAAAA55555555555555552AAAAAAAAAAAAAAA95555555555555554AAAAAAAAAAAAAAAA55555555555555552AAAAAAAAAAAAAAA95555555555555554AAAAAAAAAAAAAAAA55555555555555552AAAAAAAAAAAAAAA95555555555555554AAAAAAAAAAAAAAAA;
	rg_resetting <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (rg_index$EN) rg_index <= `BSV_ASSIGNMENT_DELAY rg_index$D_IN;
	if (rg_ras$EN) rg_ras <= `BSV_ASSIGNMENT_DELAY rg_ras$D_IN;
	if (rg_resetting$EN)
	  rg_resetting <= `BSV_ASSIGNMENT_DELAY rg_resetting$D_IN;
      end
    if (rg_pc$EN) rg_pc <= `BSV_ASSIGNMENT_DELAY rg_pc$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_index = 9'h0AA;
    rg_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_ras =
	1040'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_resetting = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkBranch_Predictor

