//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// cword_fst                      O     1
// cword_snd                      O   128
// st_amo_val_fst                 O     1
// st_amo_val_snd                 O   128
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_aw_canPeek          O     1 reg
// mem_master_aw_peek             O    97 reg
// RDY_mem_master_aw_peek         O     1 reg
// RDY_mem_master_aw_drop         O     1 reg
// mem_master_w_canPeek           O     1 reg
// mem_master_w_peek              O    74 reg
// RDY_mem_master_w_peek          O     1 reg
// RDY_mem_master_w_drop          O     1 reg
// mem_master_b_canPut            O     1 reg
// RDY_mem_master_b_put           O     1 reg
// mem_master_ar_canPeek          O     1 reg
// mem_master_ar_peek             O    97 reg
// RDY_mem_master_ar_peek         O     1 reg
// RDY_mem_master_ar_drop         O     1 reg
// mem_master_r_canPut            O     1 reg
// RDY_mem_master_r_put           O     1 reg
// events                         O    14 reg
// RDY_events                     O     1 const
// RDY_set_watch_tohost           O     1 const
// mv_tohost_value                O    64 reg
// RDY_mv_tohost_value            O     1 const
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct5                 I     5 reg
// req_addr                       I    64
// req_st_value                   I   129
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    64 reg
// mem_master_b_put_val           I     6 reg
// mem_master_r_put_val           I    72 reg
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
// EN_mem_master_aw_drop          I     1
// EN_mem_master_w_drop           I     1
// EN_mem_master_b_put            I     1
// EN_mem_master_ar_drop          I     1
// EN_mem_master_r_put            I     1
// EN_set_watch_tohost            I     1
// EN_ma_ddr4_ready               I     1
//
// Combinational paths from inputs to outputs:
//   EN_commit -> valid
//   EN_commit -> cword_fst
//   EN_commit -> cword_snd
//   EN_commit -> st_amo_val_fst
//   EN_commit -> st_amo_val_snd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_DCache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct5,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    cword_fst,

		    cword_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_aw_canPeek,

		    mem_master_aw_peek,
		    RDY_mem_master_aw_peek,

		    EN_mem_master_aw_drop,
		    RDY_mem_master_aw_drop,

		    mem_master_w_canPeek,

		    mem_master_w_peek,
		    RDY_mem_master_w_peek,

		    EN_mem_master_w_drop,
		    RDY_mem_master_w_drop,

		    mem_master_b_canPut,

		    mem_master_b_put_val,
		    EN_mem_master_b_put,
		    RDY_mem_master_b_put,

		    mem_master_ar_canPeek,

		    mem_master_ar_peek,
		    RDY_mem_master_ar_peek,

		    EN_mem_master_ar_drop,
		    RDY_mem_master_ar_drop,

		    mem_master_r_canPut,

		    mem_master_r_put_val,
		    EN_mem_master_r_put,
		    RDY_mem_master_r_put,

		    events,
		    RDY_events,

		    set_watch_tohost_watch_tohost,
		    set_watch_tohost_tohost_addr,
		    EN_set_watch_tohost,
		    RDY_set_watch_tohost,

		    mv_tohost_value,
		    RDY_mv_tohost_value,

		    EN_ma_ddr4_ready,
		    RDY_ma_ddr4_ready,

		    mv_status);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [4 : 0] req_amo_funct5;
  input  [63 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method cword_fst
  output cword_fst;

  // value method cword_snd
  output [127 : 0] cword_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_canPeek
  output mem_master_aw_canPeek;

  // value method mem_master_aw_peek
  output [96 : 0] mem_master_aw_peek;
  output RDY_mem_master_aw_peek;

  // action method mem_master_aw_drop
  input  EN_mem_master_aw_drop;
  output RDY_mem_master_aw_drop;

  // value method mem_master_w_canPeek
  output mem_master_w_canPeek;

  // value method mem_master_w_peek
  output [73 : 0] mem_master_w_peek;
  output RDY_mem_master_w_peek;

  // action method mem_master_w_drop
  input  EN_mem_master_w_drop;
  output RDY_mem_master_w_drop;

  // value method mem_master_b_canPut
  output mem_master_b_canPut;

  // action method mem_master_b_put
  input  [5 : 0] mem_master_b_put_val;
  input  EN_mem_master_b_put;
  output RDY_mem_master_b_put;

  // value method mem_master_ar_canPeek
  output mem_master_ar_canPeek;

  // value method mem_master_ar_peek
  output [96 : 0] mem_master_ar_peek;
  output RDY_mem_master_ar_peek;

  // action method mem_master_ar_drop
  input  EN_mem_master_ar_drop;
  output RDY_mem_master_ar_drop;

  // value method mem_master_r_canPut
  output mem_master_r_canPut;

  // action method mem_master_r_put
  input  [71 : 0] mem_master_r_put_val;
  input  EN_mem_master_r_put;
  output RDY_mem_master_r_put;

  // value method events
  output [13 : 0] events;
  output RDY_events;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [63 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [127 : 0] cword_snd, st_amo_val_snd;
  wire [96 : 0] mem_master_ar_peek, mem_master_aw_peek;
  wire [73 : 0] mem_master_w_peek;
  wire [63 : 0] addr, mv_tohost_value;
  wire [13 : 0] events;
  wire [7 : 0] mv_status;
  wire [5 : 0] exc_code;
  wire RDY_events,
       RDY_ma_ddr4_ready,
       RDY_mem_master_ar_drop,
       RDY_mem_master_ar_peek,
       RDY_mem_master_aw_drop,
       RDY_mem_master_aw_peek,
       RDY_mem_master_b_put,
       RDY_mem_master_r_put,
       RDY_mem_master_w_drop,
       RDY_mem_master_w_peek,
       RDY_mv_tohost_value,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_set_watch_tohost,
       RDY_tlb_flush,
       cword_fst,
       exc,
       mem_master_ar_canPeek,
       mem_master_aw_canPeek,
       mem_master_b_canPut,
       mem_master_r_canPut,
       mem_master_w_canPeek,
       st_amo_val_fst,
       valid;

  // inlined wires
  reg [128 : 0] cache_dw_output_ld_val$wget;
  wire [128 : 0] cache_dw_output_st_amo_val$wget;
  wire [13 : 0] cache_aw_events_wires_ifc_ifc_wires_1$wget,
		cache_aw_events_wires_ifc_ifc_wires_3$wget,
		cache_aw_events_wires_ifc_ifc_wires_4$wget,
		cache_aw_events_wires_ifc_ifc_wires_6$wget,
		cache_aw_events_wires_ifc_ifc_wires_7$wget;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$port0__write_1,
	       cache_ctr_wr_rsps_pending_crg$port1__read,
	       cache_ctr_wr_rsps_pending_crg$port1__write_1,
	       cache_ctr_wr_rsps_pending_crg$port2__read,
	       cache_ctr_wr_rsps_pending_crg$port3__read;
  wire cache_ctr_wr_rsps_pending_crg$EN_port2__write,
       cache_dw_output_ld_val$whas,
       cache_dw_output_st_amo_val$whas,
       cache_dw_valid$wget,
       cache_dw_valid$whas,
       cache_rw_reset_req$whas;

  // register cache_aw_events_register
  reg [13 : 0] cache_aw_events_register;
  wire [13 : 0] cache_aw_events_register$D_IN;
  wire cache_aw_events_register$EN;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_ctr_wr_rsps_pending_crg
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$D_IN;
  wire cache_ctr_wr_rsps_pending_crg$EN;

  // register cache_rg_addr
  reg [63 : 0] cache_rg_addr;
  wire [63 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_allow_cap
  reg cache_rg_allow_cap;
  wire cache_rg_allow_cap$D_IN, cache_rg_allow_cap$EN;

  // register cache_rg_amo_funct5
  reg [4 : 0] cache_rg_amo_funct5;
  wire [4 : 0] cache_rg_amo_funct5$D_IN;
  wire cache_rg_amo_funct5$EN;

  // register cache_rg_cache_rereq_data
  reg cache_rg_cache_rereq_data;
  wire cache_rg_cache_rereq_data$D_IN, cache_rg_cache_rereq_data$EN;

  // register cache_rg_cset_cword_in_cache
  reg [7 : 0] cache_rg_cset_cword_in_cache;
  wire [7 : 0] cache_rg_cset_cword_in_cache$D_IN;
  wire cache_rg_cset_cword_in_cache$EN;

  // register cache_rg_cset_in_cache
  reg [5 : 0] cache_rg_cset_in_cache;
  wire [5 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_ddr4_ready
  reg cache_rg_ddr4_ready;
  wire cache_rg_ddr4_ready$D_IN, cache_rg_ddr4_ready$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  reg [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  reg cache_rg_lower_word64_full$D_IN;
  wire cache_rg_lower_word64_full$EN;

  // register cache_rg_lower_word64_user
  reg cache_rg_lower_word64_user;
  wire cache_rg_lower_word64_user$D_IN, cache_rg_lower_word64_user$EN;

  // register cache_rg_lrsc_pa
  reg [63 : 0] cache_rg_lrsc_pa;
  wire [63 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_mem_req_sent
  reg cache_rg_mem_req_sent;
  wire cache_rg_mem_req_sent$D_IN, cache_rg_mem_req_sent$EN;

  // register cache_rg_mstatus_MXR
  reg cache_rg_mstatus_MXR;
  wire cache_rg_mstatus_MXR$D_IN, cache_rg_mstatus_MXR$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [63 : 0] cache_rg_pa;
  wire [63 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_priv
  reg [1 : 0] cache_rg_priv;
  wire [1 : 0] cache_rg_priv$D_IN;
  wire cache_rg_priv$EN;

  // register cache_rg_pte_pa
  reg [63 : 0] cache_rg_pte_pa;
  reg [63 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_satp
  reg [63 : 0] cache_rg_satp;
  wire [63 : 0] cache_rg_satp$D_IN;
  wire cache_rg_satp$EN;

  // register cache_rg_sstatus_SUM
  reg cache_rg_sstatus_SUM;
  wire cache_rg_sstatus_SUM$D_IN, cache_rg_sstatus_SUM$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [4 : 0] cache_rg_state;
  reg [4 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_tlb_walk
  reg cache_rg_tlb_walk;
  wire cache_rg_tlb_walk$D_IN, cache_rg_tlb_walk$EN;

  // register cache_rg_tohost_addr
  reg [63 : 0] cache_rg_tohost_addr;
  wire [63 : 0] cache_rg_tohost_addr$D_IN;
  wire cache_rg_tohost_addr$EN;

  // register cache_rg_tohost_value
  reg [63 : 0] cache_rg_tohost_value;
  wire [63 : 0] cache_rg_tohost_value$D_IN;
  wire cache_rg_tohost_value$EN;

  // register cache_rg_victim_way
  reg cache_rg_victim_way;
  wire cache_rg_victim_way$D_IN, cache_rg_victim_way$EN;

  // register cache_rg_watch_tohost
  reg cache_rg_watch_tohost;
  wire cache_rg_watch_tohost$D_IN, cache_rg_watch_tohost$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_wr_rsp_err
  reg cache_rg_wr_rsp_err;
  wire cache_rg_wr_rsp_err$D_IN, cache_rg_wr_rsp_err$EN;

  // ports of submodule cache_f_fabric_second_write_reqs
  wire [73 : 0] cache_f_fabric_second_write_reqs$D_IN,
		cache_f_fabric_second_write_reqs$D_OUT;
  wire cache_f_fabric_second_write_reqs$CLR,
       cache_f_fabric_second_write_reqs$DEQ,
       cache_f_fabric_second_write_reqs$EMPTY_N,
       cache_f_fabric_second_write_reqs$ENQ,
       cache_f_fabric_second_write_reqs$FULL_N;

  // ports of submodule cache_f_fabric_write_reqs
  reg [195 : 0] cache_f_fabric_write_reqs$D_IN;
  wire [195 : 0] cache_f_fabric_write_reqs$D_OUT;
  wire cache_f_fabric_write_reqs$CLR,
       cache_f_fabric_write_reqs$DEQ,
       cache_f_fabric_write_reqs$EMPTY_N,
       cache_f_fabric_write_reqs$ENQ,
       cache_f_fabric_write_reqs$FULL_N;

  // ports of submodule cache_f_pte_writebacks
  wire [127 : 0] cache_f_pte_writebacks$D_IN, cache_f_pte_writebacks$D_OUT;
  wire cache_f_pte_writebacks$CLR,
       cache_f_pte_writebacks$DEQ,
       cache_f_pte_writebacks$EMPTY_N,
       cache_f_pte_writebacks$ENQ,
       cache_f_pte_writebacks$FULL_N;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_masterPortShim_arff
  reg [96 : 0] cache_masterPortShim_arff$D_IN;
  wire [96 : 0] cache_masterPortShim_arff$D_OUT;
  wire cache_masterPortShim_arff$CLR,
       cache_masterPortShim_arff$DEQ,
       cache_masterPortShim_arff$EMPTY_N,
       cache_masterPortShim_arff$ENQ,
       cache_masterPortShim_arff$FULL_N;

  // ports of submodule cache_masterPortShim_awff
  wire [96 : 0] cache_masterPortShim_awff$D_IN,
		cache_masterPortShim_awff$D_OUT;
  wire cache_masterPortShim_awff$CLR,
       cache_masterPortShim_awff$DEQ,
       cache_masterPortShim_awff$EMPTY_N,
       cache_masterPortShim_awff$ENQ,
       cache_masterPortShim_awff$FULL_N;

  // ports of submodule cache_masterPortShim_bff
  wire [5 : 0] cache_masterPortShim_bff$D_IN, cache_masterPortShim_bff$D_OUT;
  wire cache_masterPortShim_bff$CLR,
       cache_masterPortShim_bff$DEQ,
       cache_masterPortShim_bff$EMPTY_N,
       cache_masterPortShim_bff$ENQ,
       cache_masterPortShim_bff$FULL_N;

  // ports of submodule cache_masterPortShim_rff
  wire [71 : 0] cache_masterPortShim_rff$D_IN, cache_masterPortShim_rff$D_OUT;
  wire cache_masterPortShim_rff$CLR,
       cache_masterPortShim_rff$DEQ,
       cache_masterPortShim_rff$EMPTY_N,
       cache_masterPortShim_rff$ENQ,
       cache_masterPortShim_rff$FULL_N;

  // ports of submodule cache_masterPortShim_wff
  wire [73 : 0] cache_masterPortShim_wff$D_IN, cache_masterPortShim_wff$D_OUT;
  wire cache_masterPortShim_wff$CLR,
       cache_masterPortShim_wff$DEQ,
       cache_masterPortShim_wff$EMPTY_N,
       cache_masterPortShim_wff$ENQ,
       cache_masterPortShim_wff$FULL_N;

  // ports of submodule cache_ram_cword_set
  reg [257 : 0] cache_ram_cword_set$DIB;
  reg [7 : 0] cache_ram_cword_set$ADDRB;
  wire [257 : 0] cache_ram_cword_set$DIA, cache_ram_cword_set$DOB;
  wire [7 : 0] cache_ram_cword_set$ADDRA;
  wire cache_ram_cword_set$ENA,
       cache_ram_cword_set$ENB,
       cache_ram_cword_set$WEA,
       cache_ram_cword_set$WEB;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [105 : 0] cache_ram_state_and_ctag_cset$DIA,
		 cache_ram_state_and_ctag_cset$DIB,
		 cache_ram_state_and_ctag_cset$DOB;
  wire [5 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;
  wire cache_soc_map$m_is_mem_addr;

  // ports of submodule cache_tlb
  reg [1 : 0] cache_tlb$ma_insert_level;
  wire [203 : 0] cache_tlb$mv_vm_get_xlate;
  wire [63 : 0] cache_tlb$ma_insert_pte,
		cache_tlb$ma_insert_pte_pa,
		cache_tlb$mv_vm_get_xlate_satp,
		cache_tlb$mv_vm_put_va_full_va;
  wire [26 : 0] cache_tlb$ma_insert_vpn;
  wire [15 : 0] cache_tlb$ma_insert_asid;
  wire [1 : 0] cache_tlb$mv_vm_get_xlate_priv;
  wire cache_tlb$EN_ma_flush,
       cache_tlb$EN_ma_insert,
       cache_tlb$EN_mv_vm_put_va,
       cache_tlb$mv_vm_get_xlate_cap,
       cache_tlb$mv_vm_get_xlate_mstatus_MXR,
       cache_tlb$mv_vm_get_xlate_read_not_write,
       cache_tlb$mv_vm_get_xlate_sstatus_SUM;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_aw_events_update_reg,
       CAN_FIRE_RL_cache_do_req,
       CAN_FIRE_RL_cache_do_reset_req,
       CAN_FIRE_RL_cache_do_set_req_valid,
       CAN_FIRE_RL_cache_do_tlb_flush,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_count_miss_lat,
       CAN_FIRE_RL_cache_rl_count_tlb_latency,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_fabric_send_second_write_req,
       CAN_FIRE_RL_cache_rl_fabric_send_write_req,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_ptw_level_0,
       CAN_FIRE_RL_cache_rl_ptw_level_1,
       CAN_FIRE_RL_cache_rl_ptw_level_2,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_RL_cache_rl_start_tlb_refill,
       CAN_FIRE_RL_cache_rl_writeback_updated_PTE,
       CAN_FIRE___me_check_26,
       CAN_FIRE_commit,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_mem_master_ar_drop,
       CAN_FIRE_mem_master_aw_drop,
       CAN_FIRE_mem_master_b_put,
       CAN_FIRE_mem_master_r_put,
       CAN_FIRE_mem_master_w_drop,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_set_watch_tohost,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_aw_events_update_reg,
       WILL_FIRE_RL_cache_do_req,
       WILL_FIRE_RL_cache_do_reset_req,
       WILL_FIRE_RL_cache_do_set_req_valid,
       WILL_FIRE_RL_cache_do_tlb_flush,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_count_miss_lat,
       WILL_FIRE_RL_cache_rl_count_tlb_latency,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_fabric_send_second_write_req,
       WILL_FIRE_RL_cache_rl_fabric_send_write_req,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_ptw_level_0,
       WILL_FIRE_RL_cache_rl_ptw_level_1,
       WILL_FIRE_RL_cache_rl_ptw_level_2,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_RL_cache_rl_start_tlb_refill,
       WILL_FIRE_RL_cache_rl_writeback_updated_PTE,
       WILL_FIRE___me_check_26,
       WILL_FIRE_commit,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_mem_master_ar_drop,
       WILL_FIRE_mem_master_aw_drop,
       WILL_FIRE_mem_master_b_put,
       WILL_FIRE_mem_master_r_put,
       WILL_FIRE_mem_master_w_drop,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_set_watch_tohost,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [257 : 0] MUX_cache_ram_cword_set$a_put_3__VAL_1,
		 MUX_cache_ram_cword_set$a_put_3__VAL_2;
  wire [195 : 0] MUX_cache_f_fabric_write_reqs$enq_1__VAL_1,
		 MUX_cache_f_fabric_write_reqs$enq_1__VAL_2,
		 MUX_cache_f_fabric_write_reqs$enq_1__VAL_3,
		 MUX_cache_f_fabric_write_reqs$enq_1__VAL_4;
  wire [128 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_2,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_4,
		 MUX_cache_rg_ld_val$write_1__VAL_1,
		 MUX_cache_rg_st_amo_val$write_1__VAL_2;
  wire [105 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [96 : 0] MUX_cache_masterPortShim_arff$enq_1__VAL_1,
		MUX_cache_masterPortShim_arff$enq_1__VAL_2,
		MUX_cache_masterPortShim_arff$enq_1__VAL_3,
		MUX_cache_masterPortShim_arff$enq_1__VAL_4,
		MUX_cache_masterPortShim_arff$enq_1__VAL_5;
  wire [73 : 0] MUX_cache_masterPortShim_wff$enq_1__VAL_2;
  wire [63 : 0] MUX_cache_rg_pte_pa$write_1__VAL_1,
		MUX_cache_rg_pte_pa$write_1__VAL_2,
		MUX_cache_rg_pte_pa$write_1__VAL_3;
  wire [7 : 0] MUX_cache_ram_cword_set$b_put_2__VAL_2,
	       MUX_cache_ram_cword_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_4,
	       MUX_cache_rg_exc_code$write_1__VAL_5,
	       MUX_cache_rg_exc_code$write_1__VAL_8;
  wire [4 : 0] MUX_cache_rg_state$write_1__VAL_11,
	       MUX_cache_rg_state$write_1__VAL_13,
	       MUX_cache_rg_state$write_1__VAL_14,
	       MUX_cache_rg_state$write_1__VAL_15,
	       MUX_cache_rg_state$write_1__VAL_17,
	       MUX_cache_rg_state$write_1__VAL_2,
	       MUX_cache_rg_state$write_1__VAL_4,
	       MUX_cache_rg_state$write_1__VAL_8;
  wire MUX_cache_dw_output_ld_val$wset_1__SEL_3,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_dw_valid$wset_1__SEL_1,
       MUX_cache_dw_valid$wset_1__SEL_2,
       MUX_cache_f_fabric_write_reqs$enq_1__SEL_1,
       MUX_cache_masterPortShim_arff$enq_1__SEL_1,
       MUX_cache_masterPortShim_arff$enq_1__SEL_2,
       MUX_cache_masterPortShim_arff$enq_1__SEL_3,
       MUX_cache_ram_cword_set$a_put_1__SEL_1,
       MUX_cache_ram_cword_set$b_put_1__SEL_1,
       MUX_cache_ram_cword_set$b_put_1__SEL_2,
       MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__PSEL_2,
       MUX_cache_rg_exc_code$write_1__PSEL_3,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_exc_code$write_1__SEL_5,
       MUX_cache_rg_exc_code$write_1__SEL_6,
       MUX_cache_rg_exc_code$write_1__SEL_7,
       MUX_cache_rg_ld_val$write_1__SEL_1,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lower_word64$write_1__SEL_2,
       MUX_cache_rg_lower_word64_full$write_1__SEL_1,
       MUX_cache_rg_lower_word64_full$write_1__SEL_2,
       MUX_cache_rg_lower_word64_full$write_1__SEL_4,
       MUX_cache_rg_lower_word64_full$write_1__VAL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_pa$write_1__SEL_2,
       MUX_cache_rg_state$write_1__SEL_11,
       MUX_cache_rg_state$write_1__SEL_18,
       MUX_cache_rg_state$write_1__SEL_4,
       MUX_cache_rg_state$write_1__SEL_5,
       MUX_cache_rg_state$write_1__SEL_6,
       MUX_cache_rg_state$write_1__SEL_7,
       MUX_cache_rg_state$write_1__SEL_8,
       MUX_cache_rg_state$write_1__SEL_9,
       MUX_cache_tlb$ma_insert_1__SEL_1,
       MUX_cache_tlb$ma_insert_1__SEL_2,
       MUX_cache_tlb$ma_insert_1__SEL_4,
       MUX_cache_tlb$ma_insert_2__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h7576;
  reg [31 : 0] v__h7671;
  reg [31 : 0] v__h7804;
  reg [31 : 0] v__h35873;
  reg [31 : 0] v__h42198;
  reg [31 : 0] v__h74105;
  reg [31 : 0] v__h48576;
  reg [63 : 0] v__h48765;
  reg [31 : 0] v__h49548;
  reg [31 : 0] v__h49286;
  reg [63 : 0] v__h49703;
  reg [31 : 0] v__h49869;
  reg [31 : 0] v__h49986;
  reg [31 : 0] v__h49468;
  reg [31 : 0] v__h50661;
  reg [31 : 0] v__h50402;
  reg [63 : 0] v__h50815;
  reg [31 : 0] v__h51098;
  reg [31 : 0] v__h50981;
  reg [31 : 0] v__h50581;
  reg [31 : 0] v__h51614;
  reg [31 : 0] v__h51694;
  reg [31 : 0] v__h51785;
  reg [31 : 0] v__h51534;
  reg [31 : 0] v__h52095;
  reg [63 : 0] v__h52378;
  reg [31 : 0] v__h53104;
  reg [31 : 0] v__h53362;
  reg [31 : 0] v__h74028;
  reg [31 : 0] v__h65430;
  reg [63 : 0] v__h65659;
  reg [63 : 0] v__h65760;
  reg [31 : 0] v__h65972;
  reg [31 : 0] v__h66651;
  reg [31 : 0] v__h66786;
  reg [31 : 0] v__h66481;
  reg [31 : 0] v__h66947;
  reg [31 : 0] v__h67057;
  reg [31 : 0] v__h67147;
  reg [31 : 0] v__h67383;
  reg [31 : 0] v__h67527;
  reg [63 : 0] v__h67732;
  reg [63 : 0] v__h67833;
  reg [31 : 0] v__h67993;
  reg [31 : 0] v__h68430;
  reg [31 : 0] v__h69200;
  reg [31 : 0] v__h68326;
  reg [31 : 0] v__h69840;
  reg [31 : 0] v__h69882;
  reg [31 : 0] v__h7111;
  reg [31 : 0] v__h70810;
  reg [31 : 0] v__h72562;
  reg [31 : 0] v__h7105;
  reg [31 : 0] v__h7570;
  reg [31 : 0] v__h7665;
  reg [31 : 0] v__h7798;
  reg [31 : 0] v__h35867;
  reg [31 : 0] v__h42192;
  reg [31 : 0] v__h48570;
  reg [31 : 0] v__h49280;
  reg [31 : 0] v__h49462;
  reg [31 : 0] v__h49542;
  reg [31 : 0] v__h49863;
  reg [31 : 0] v__h49980;
  reg [31 : 0] v__h50396;
  reg [31 : 0] v__h50575;
  reg [31 : 0] v__h50655;
  reg [31 : 0] v__h50975;
  reg [31 : 0] v__h51092;
  reg [31 : 0] v__h51528;
  reg [31 : 0] v__h51608;
  reg [31 : 0] v__h51688;
  reg [31 : 0] v__h51779;
  reg [31 : 0] v__h52089;
  reg [31 : 0] v__h53098;
  reg [31 : 0] v__h53356;
  reg [31 : 0] v__h65424;
  reg [31 : 0] v__h65966;
  reg [31 : 0] v__h66475;
  reg [31 : 0] v__h66645;
  reg [31 : 0] v__h66780;
  reg [31 : 0] v__h66941;
  reg [31 : 0] v__h67051;
  reg [31 : 0] v__h67141;
  reg [31 : 0] v__h67377;
  reg [31 : 0] v__h67521;
  reg [31 : 0] v__h67987;
  reg [31 : 0] v__h68320;
  reg [31 : 0] v__h68424;
  reg [31 : 0] v__h69194;
  reg [31 : 0] v__h69834;
  reg [31 : 0] v__h69876;
  reg [31 : 0] v__h70804;
  reg [31 : 0] v__h72556;
  reg [31 : 0] v__h74022;
  reg [31 : 0] v__h74099;
  // synopsys translate_on

  // remaining internal signals
  reg [127 : 0] b__h37112, b__h42718, new_cword__h37093;
  reg [63 : 0] IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d1605,
	       IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d980,
	       _theResult_____2__h43864,
	       _theResult_____2__h68553,
	       _theResult___snd_fst__h35684,
	       _theResult___snd_fst__h66279,
	       _theResult___snd_snd__h35685,
	       _theResult___snd_snd__h66280,
	       _theResult___snd_snd__h68737,
	       mem_req_wr_data_wdata__h5908,
	       w1__h42762,
	       w1__h42767,
	       w1__h68515,
	       w1__h68520;
  reg [7 : 0] fabric_strobe2__h5639, mem_req_wr_data_wstrb__h5909;
  reg [5 : 0] x1_avValue_snd_snd__h48092;
  reg [4 : 0] CASE_cache_tlbmv_vm_get_xlate_BITS_203_TO_202_ETC__q15;
  reg [2 : 0] _theResult___snd_snd_snd_val__h5872, size_val__h67707;
  reg CASE_cache_rg_victim_way_0_cache_ram_state_and_ETC__q1;
  wire [128 : 0] IF_NOT_cache_ram_state_and_ctag_cset_b_read__9_ETC___d1074,
		 IF_NOT_cache_ram_state_and_ctag_cset_b_read__9_ETC___d972,
		 IF_cache_ram_state_and_ctag_cset_b_read__97_BI_ETC___d1073,
		 IF_cache_ram_state_and_ctag_cset_b_read__97_BI_ETC___d971,
		 IF_cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_ETC___d1084,
		 IF_cache_rg_victim_way_353_THEN_cache_masterPo_ETC___d1432,
		 IF_cache_rg_victim_way_353_THEN_cache_ram_cwor_ETC___d1431,
		 cache_ram_cword_set_b_read__47_BITS_128_TO_0_4_ETC___d757,
		 x__h10243,
		 y__h10244,
		 y__h10297,
		 y__h22989;
  wire [127 : 0] IF_NOT_cache_rg_lower_word64_full_383_384_AND__ETC___d1519,
		 IF_cache_rg_lower_word64_BIT_0_THEN_1_ELSE_0__q2,
		 b__h53704,
		 centry__h66166,
		 centry__h68689,
		 new_cword__h37185,
		 new_cword__h39207,
		 new_cword__h40253,
		 new_cword__h40811,
		 new_cword__h42831,
		 new_cword__h45209,
		 new_cword__h46255,
		 new_cword__h46813,
		 new_st_val_cap__h43865,
		 new_st_val_cap__h68554,
		 test_num__h65273,
		 upd_val__h42836,
		 x__h35683,
		 x__h35690,
		 x__h35732,
		 x__h47918,
		 x__h66278,
		 x__h66285,
		 x__h66327,
		 x__h66458,
		 x__h68548,
		 x__h68747,
		 x__h68965,
		 x__h69178;
  wire [111 : 0] IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1039,
		 IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d903;
  wire [95 : 0] IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1036,
		IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1052,
		IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d896,
		IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d933;
  wire [79 : 0] IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1033,
		IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d889;
  wire [63 : 0] IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d982,
		IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1030,
		IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1049,
		IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d882,
		IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d926,
		SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d780,
		SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d784,
		SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d788,
		cline_fabric_addr__h52285,
		lev_0_pte_pa__h50693,
		lev_0_pte_pa_w64_fa__h50695,
		lev_1_PTN_pa__h49578,
		lev_1_pte_pa__h49580,
		lev_1_pte_pa_w64_fa__h49582,
		lev_2_pte_pa__h48625,
		lev_2_pte_pa_w64_fa__h48627,
		new_st_val__h43870,
		new_st_val__h43942,
		new_st_val__h44172,
		new_st_val__h44176,
		new_st_val__h44180,
		new_st_val__h44184,
		new_st_val__h44189,
		new_st_val__h44195,
		new_st_val__h44200,
		new_st_val__h68559,
		new_st_val__h68631,
		new_st_val__h69038,
		new_st_val__h69042,
		new_st_val__h69046,
		new_st_val__h69050,
		new_st_val__h69055,
		new_st_val__h69061,
		new_st_val__h69066,
		result_lo__h35719,
		result_lo__h35758,
		result_lo__h35770,
		result_lo__h66316,
		result_lo__h66353,
		result_lo__h66365,
		result_lo__h68954,
		result_lo__h68989,
		result_lo__h68999,
		satp_pa__h2227,
		vpn_0_pa__h50692,
		vpn_1_pa__h49579,
		vpn_2_pa__h48624,
		w1___1__h43909,
		w1___1__h68598,
		w2___1__h43910,
		w2__h42769,
		word64__h5852,
		x__h43868,
		x__h68557;
  wire [55 : 0] x__h49655, x__h7940;
  wire [47 : 0] IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1027,
		IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d875;
  wire [31 : 0] IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1024,
		IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d868,
		cache_rg_st_amo_val_BITS_31_TO_0__q13,
		w12762_BITS_31_TO_0__q12,
		w18515_BITS_31_TO_0__q14,
		x5732_BITS_31_TO_0__q11,
		x6327_BITS_31_TO_0__q3,
		x8965_BITS_31_TO_0__q6;
  wire [15 : 0] x5732_BITS_15_TO_0__q10,
		x6327_BITS_15_TO_0__q5,
		x8965_BITS_15_TO_0__q8;
  wire [12 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d344;
  wire [10 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d343;
  wire [8 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d342;
  wire [7 : 0] mem_req_wr_addr_awlen__h5832,
	       strobe64__h5853,
	       strobe64__h5857,
	       strobe64__h5861,
	       strobe64__h5865,
	       x5732_BITS_7_TO_0__q9,
	       x6327_BITS_7_TO_0__q4,
	       x8965_BITS_7_TO_0__q7;
  wire [6 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d341,
	       x__h68810,
	       x__h68875,
	       x__h68927,
	       x__h68968;
  wire [5 : 0] access_exc_code__h5359,
	       page_fault_exc_code__h5360,
	       shift_bits__h5626;
  wire [4 : 0] IF_NOT_cache_ram_state_and_ctag_cset_b_read__9_ETC___d1151,
	       IF_NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache__ETC___d1150,
	       IF_cache_ram_state_and_ctag_cset_b_read__97_BI_ETC___d1149,
	       IF_cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_ETC___d1153,
	       IF_cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_ETC___d1152,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d340;
  wire [3 : 0] addr_lsbs__h68257, b__h48530;
  wire [2 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d339;
  wire [1 : 0] tmp__h52438, tmp__h52439;
  wire IF_cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_ETC___d514,
       IF_cache_w_req_width_code_whas__672_THEN_cache_ETC___d1766,
       IF_cache_w_req_width_code_whas__672_THEN_cache_ETC___d1771,
       NOT_IF_cache_w_req_width_code_whas__672_THEN_c_ETC___d1750,
       NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407,
       NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362,
       NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577,
       NOT_cache_f_reset_reqs_notEmpty__19_19_AND_cac_ETC___d1457,
       NOT_cache_masterPortShim_rff_first__192_BIT_4__ETC___d1222,
       NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d512,
       NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d595,
       NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d814,
       NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d820,
       NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1107,
       NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1119,
       NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1144,
       NOT_cache_rg_op_55_EQ_1_79_06_AND_NOT_cache_rg_ETC___d1140,
       NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d1077,
       NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d1105,
       NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d1111,
       NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d1117,
       NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d840,
       NOT_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54_ETC___d1094,
       _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d107,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d130,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d153,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d176,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d199,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d222,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d245,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d268,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d291,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d314,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d337,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d38,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d61,
       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d84,
       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d280,
       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d303,
       cache_dw_commit_whas__90_AND_cache_dw_commit_w_ETC___d839,
       cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1268,
       cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1303,
       cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1309,
       cache_masterPortShim_rff_first__192_BIT_7_200__ETC___d1258,
       cache_masterPortShim_rff_first__192_BIT_7_200__ETC___d1270,
       cache_masterPortShim_rff_i_notEmpty__191_AND_N_ETC___d1206,
       cache_masterPortShim_rff_i_notEmpty__191_AND_N_ETC___d1574,
       cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502,
       cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508,
       cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d592,
       cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d611,
       cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d800,
       cache_rg_amo_funct5_58_EQ_0b10_59_AND_cache_ra_ETC___d806,
       cache_rg_lrsc_pa_85_EQ_cache_tlb_mv_vm_get_xla_ETC___d486,
       cache_rg_mem_req_sent_162_AND_cache_rg_op_55_E_ETC___d1164,
       cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d597,
       cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d616,
       cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d619,
       cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d622,
       cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_2__ETC___d1079,
       cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_2__ETC___d614,
       cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_2__ETC___d843,
       cache_rg_op_55_EQ_2_57_AND_cache_rg_amo_funct5_ETC___d1124,
       cache_rg_op_55_EQ_2_57_AND_cache_rg_amo_funct5_ETC___d496,
       cache_rg_watch_tohost_442_AND_cache_rg_pa_348__ETC___d1448,
       cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1081,
       cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1132,
       cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1137,
       cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d802,
       cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d816,
       cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d828,
       cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d845,
       cache_tlb_mv_vm_get_xlate_cache_rg_satp_54_cac_ETC___d593,
       lrsc_result__h36710,
       mem_req_wr_second_data_wuser__h5733,
       tags__h53622;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas && cache_dw_valid$wget ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method cword_fst
  assign cword_fst =
	     cache_dw_output_ld_val$whas && cache_dw_output_ld_val$wget[128] ;

  // value method cword_snd
  assign cword_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst =
	     cache_dw_output_st_amo_val$whas &&
	     cache_dw_output_st_amo_val$wget[128] ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = cache_dw_output_st_amo_val$wget[127:0] ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_canPeek
  assign mem_master_aw_canPeek = cache_masterPortShim_awff$EMPTY_N ;

  // value method mem_master_aw_peek
  assign mem_master_aw_peek = cache_masterPortShim_awff$D_OUT ;
  assign RDY_mem_master_aw_peek = cache_masterPortShim_awff$EMPTY_N ;

  // action method mem_master_aw_drop
  assign RDY_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign CAN_FIRE_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_mem_master_aw_drop = EN_mem_master_aw_drop ;

  // value method mem_master_w_canPeek
  assign mem_master_w_canPeek = cache_masterPortShim_wff$EMPTY_N ;

  // value method mem_master_w_peek
  assign mem_master_w_peek = cache_masterPortShim_wff$D_OUT ;
  assign RDY_mem_master_w_peek = cache_masterPortShim_wff$EMPTY_N ;

  // action method mem_master_w_drop
  assign RDY_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign CAN_FIRE_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_mem_master_w_drop = EN_mem_master_w_drop ;

  // value method mem_master_b_canPut
  assign mem_master_b_canPut = cache_masterPortShim_bff$FULL_N ;

  // action method mem_master_b_put
  assign RDY_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign CAN_FIRE_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign WILL_FIRE_mem_master_b_put = EN_mem_master_b_put ;

  // value method mem_master_ar_canPeek
  assign mem_master_ar_canPeek = cache_masterPortShim_arff$EMPTY_N ;

  // value method mem_master_ar_peek
  assign mem_master_ar_peek = cache_masterPortShim_arff$D_OUT ;
  assign RDY_mem_master_ar_peek = cache_masterPortShim_arff$EMPTY_N ;

  // action method mem_master_ar_drop
  assign RDY_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign CAN_FIRE_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_mem_master_ar_drop = EN_mem_master_ar_drop ;

  // value method mem_master_r_canPut
  assign mem_master_r_canPut = cache_masterPortShim_rff$FULL_N ;

  // action method mem_master_r_put
  assign RDY_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign CAN_FIRE_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign WILL_FIRE_mem_master_r_put = EN_mem_master_r_put ;

  // value method events
  assign events = cache_aw_events_register ;
  assign RDY_events = 1'd1 ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = cache_rg_tohost_value ;
  assign RDY_mv_tohost_value = 1'd1 ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = cache_rg_wr_rsp_err ? 8'd1 : 8'd0 ;

  // submodule cache_f_fabric_second_write_reqs
  FIFO1 #(.width(32'd74),
	  .guarded(1'd1)) cache_f_fabric_second_write_reqs(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(cache_f_fabric_second_write_reqs$D_IN),
							   .ENQ(cache_f_fabric_second_write_reqs$ENQ),
							   .DEQ(cache_f_fabric_second_write_reqs$DEQ),
							   .CLR(cache_f_fabric_second_write_reqs$CLR),
							   .D_OUT(cache_f_fabric_second_write_reqs$D_OUT),
							   .FULL_N(cache_f_fabric_second_write_reqs$FULL_N),
							   .EMPTY_N(cache_f_fabric_second_write_reqs$EMPTY_N));

  // submodule cache_f_fabric_write_reqs
  FIFO2 #(.width(32'd196),
	  .guarded(1'd1)) cache_f_fabric_write_reqs(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_f_fabric_write_reqs$D_IN),
						    .ENQ(cache_f_fabric_write_reqs$ENQ),
						    .DEQ(cache_f_fabric_write_reqs$DEQ),
						    .CLR(cache_f_fabric_write_reqs$CLR),
						    .D_OUT(cache_f_fabric_write_reqs$D_OUT),
						    .FULL_N(cache_f_fabric_write_reqs$FULL_N),
						    .EMPTY_N(cache_f_fabric_write_reqs$EMPTY_N));

  // submodule cache_f_pte_writebacks
  FIFO2 #(.width(32'd128), .guarded(1'd1)) cache_f_pte_writebacks(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(cache_f_pte_writebacks$D_IN),
								  .ENQ(cache_f_pte_writebacks$ENQ),
								  .DEQ(cache_f_pte_writebacks$DEQ),
								  .CLR(cache_f_pte_writebacks$CLR),
								  .D_OUT(cache_f_pte_writebacks$D_OUT),
								  .FULL_N(cache_f_pte_writebacks$FULL_N),
								  .EMPTY_N(cache_f_pte_writebacks$EMPTY_N));

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) cache_f_reset_reqs(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_reset_reqs$D_IN),
							    .ENQ(cache_f_reset_reqs$ENQ),
							    .DEQ(cache_f_reset_reqs$DEQ),
							    .CLR(cache_f_reset_reqs$CLR),
							    .D_OUT(cache_f_reset_reqs$D_OUT),
							    .FULL_N(cache_f_reset_reqs$FULL_N),
							    .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) cache_f_reset_rsps(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_reset_rsps$D_IN),
							    .ENQ(cache_f_reset_rsps$ENQ),
							    .DEQ(cache_f_reset_rsps$DEQ),
							    .CLR(cache_f_reset_rsps$CLR),
							    .D_OUT(cache_f_reset_rsps$D_OUT),
							    .FULL_N(cache_f_reset_rsps$FULL_N),
							    .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_masterPortShim_arff
  FIFO2 #(.width(32'd97),
	  .guarded(1'd1)) cache_masterPortShim_arff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_arff$D_IN),
						    .ENQ(cache_masterPortShim_arff$ENQ),
						    .DEQ(cache_masterPortShim_arff$DEQ),
						    .CLR(cache_masterPortShim_arff$CLR),
						    .D_OUT(cache_masterPortShim_arff$D_OUT),
						    .FULL_N(cache_masterPortShim_arff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_arff$EMPTY_N));

  // submodule cache_masterPortShim_awff
  FIFO2 #(.width(32'd97),
	  .guarded(1'd1)) cache_masterPortShim_awff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_awff$D_IN),
						    .ENQ(cache_masterPortShim_awff$ENQ),
						    .DEQ(cache_masterPortShim_awff$DEQ),
						    .CLR(cache_masterPortShim_awff$CLR),
						    .D_OUT(cache_masterPortShim_awff$D_OUT),
						    .FULL_N(cache_masterPortShim_awff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_awff$EMPTY_N));

  // submodule cache_masterPortShim_bff
  FIFO2 #(.width(32'd6), .guarded(1'd1)) cache_masterPortShim_bff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(cache_masterPortShim_bff$D_IN),
								  .ENQ(cache_masterPortShim_bff$ENQ),
								  .DEQ(cache_masterPortShim_bff$DEQ),
								  .CLR(cache_masterPortShim_bff$CLR),
								  .D_OUT(cache_masterPortShim_bff$D_OUT),
								  .FULL_N(cache_masterPortShim_bff$FULL_N),
								  .EMPTY_N(cache_masterPortShim_bff$EMPTY_N));

  // submodule cache_masterPortShim_rff
  FIFO2 #(.width(32'd72),
	  .guarded(1'd1)) cache_masterPortShim_rff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(cache_masterPortShim_rff$D_IN),
						   .ENQ(cache_masterPortShim_rff$ENQ),
						   .DEQ(cache_masterPortShim_rff$DEQ),
						   .CLR(cache_masterPortShim_rff$CLR),
						   .D_OUT(cache_masterPortShim_rff$D_OUT),
						   .FULL_N(cache_masterPortShim_rff$FULL_N),
						   .EMPTY_N(cache_masterPortShim_rff$EMPTY_N));

  // submodule cache_masterPortShim_wff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) cache_masterPortShim_wff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(cache_masterPortShim_wff$D_IN),
						   .ENQ(cache_masterPortShim_wff$ENQ),
						   .DEQ(cache_masterPortShim_wff$DEQ),
						   .CLR(cache_masterPortShim_wff$CLR),
						   .D_OUT(cache_masterPortShim_wff$D_OUT),
						   .FULL_N(cache_masterPortShim_wff$FULL_N),
						   .EMPTY_N(cache_masterPortShim_wff$EMPTY_N));

  // submodule cache_ram_cword_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd258),
	  .MEMSIZE(9'd256)) cache_ram_cword_set(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(cache_ram_cword_set$ADDRA),
						.ADDRB(cache_ram_cword_set$ADDRB),
						.DIA(cache_ram_cword_set$DIA),
						.DIB(cache_ram_cword_set$DIB),
						.WEA(cache_ram_cword_set$WEA),
						.WEB(cache_ram_cword_set$WEB),
						.ENA(cache_ram_cword_set$ENA),
						.ENB(cache_ram_cword_set$ENB),
						.DOA(),
						.DOB(cache_ram_cword_set$DOB));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd106),
	  .MEMSIZE(7'd64)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							 .CLKB(CLK),
							 .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							 .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							 .DIA(cache_ram_state_and_ctag_cset$DIA),
							 .DIB(cache_ram_state_and_ctag_cset$DIB),
							 .WEA(cache_ram_state_and_ctag_cset$WEA),
							 .WEB(cache_ram_state_and_ctag_cset$WEB),
							 .ENA(cache_ram_state_and_ctag_cset$ENA),
							 .ENB(cache_ram_state_and_ctag_cset$ENB),
							 .DOA(),
							 .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_near_mem_io_addr_range(),
			  .m_plic_addr_range(),
			  .m_uart0_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_mem0_controller_addr_range(),
			  .m_tcm_addr_range(),
			  .m_is_mem_addr(cache_soc_map$m_is_mem_addr),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value(),
			  .m_pcc_reset_value(),
			  .m_ddc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mepcc_reset_value());

  // submodule cache_tlb
  mkTLB #(.dmem_not_imem(1'd1), .verbosity(3'd2)) cache_tlb(.CLK(CLK),
							    .RST_N(RST_N),
							    .ma_insert_asid(cache_tlb$ma_insert_asid),
							    .ma_insert_level(cache_tlb$ma_insert_level),
							    .ma_insert_pte(cache_tlb$ma_insert_pte),
							    .ma_insert_pte_pa(cache_tlb$ma_insert_pte_pa),
							    .ma_insert_vpn(cache_tlb$ma_insert_vpn),
							    .mv_vm_get_xlate_cap(cache_tlb$mv_vm_get_xlate_cap),
							    .mv_vm_get_xlate_mstatus_MXR(cache_tlb$mv_vm_get_xlate_mstatus_MXR),
							    .mv_vm_get_xlate_priv(cache_tlb$mv_vm_get_xlate_priv),
							    .mv_vm_get_xlate_read_not_write(cache_tlb$mv_vm_get_xlate_read_not_write),
							    .mv_vm_get_xlate_satp(cache_tlb$mv_vm_get_xlate_satp),
							    .mv_vm_get_xlate_sstatus_SUM(cache_tlb$mv_vm_get_xlate_sstatus_SUM),
							    .mv_vm_put_va_full_va(cache_tlb$mv_vm_put_va_full_va),
							    .EN_mv_vm_put_va(cache_tlb$EN_mv_vm_put_va),
							    .EN_ma_insert(cache_tlb$EN_ma_insert),
							    .EN_ma_flush(cache_tlb$EN_ma_flush),
							    .RDY_mv_vm_put_va(),
							    .mv_vm_get_xlate(cache_tlb$mv_vm_get_xlate),
							    .RDY_mv_vm_get_xlate(),
							    .RDY_ma_insert(),
							    .RDY_ma_flush());

  // rule RL_cache_rl_fabric_send_second_write_req
  assign CAN_FIRE_RL_cache_rl_fabric_send_second_write_req =
	     cache_masterPortShim_wff$FULL_N &&
	     cache_f_fabric_second_write_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_cache_rl_fabric_send_second_write_req =
	     CAN_FIRE_RL_cache_rl_fabric_send_second_write_req ;

  // rule RL_cache_rl_fabric_send_write_req
  assign CAN_FIRE_RL_cache_rl_fabric_send_write_req =
	     cache_ctr_wr_rsps_pending_crg != 4'd15 &&
	     cache_masterPortShim_wff$FULL_N &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     cache_masterPortShim_awff$FULL_N &&
	     (cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100 ||
	      cache_f_fabric_second_write_reqs$FULL_N) ;
  assign WILL_FIRE_RL_cache_rl_fabric_send_write_req =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req &&
	     !WILL_FIRE_RL_cache_rl_fabric_send_second_write_req ;

  // rule RL_cache_rl_count_tlb_latency
  assign CAN_FIRE_RL_cache_rl_count_tlb_latency =
	     cache_rg_state == 5'd5 || cache_rg_tlb_walk ;
  assign WILL_FIRE_RL_cache_rl_count_tlb_latency =
	     CAN_FIRE_RL_cache_rl_count_tlb_latency ;

  // rule RL_cache_rl_count_miss_lat
  assign CAN_FIRE_RL_cache_rl_count_miss_lat =
	     !cache_f_reset_reqs$EMPTY_N &&
	     (cache_rg_state == 5'd9 || cache_rg_cache_rereq_data) ;
  assign WILL_FIRE_RL_cache_rl_count_miss_lat =
	     CAN_FIRE_RL_cache_rl_count_miss_lat ;

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     (cache_rg_cset_in_cache != 6'd63 ||
	      cache_f_reset_reqs$EMPTY_N && cache_f_reset_rsps$FULL_N) &&
	     cache_rg_state == 5'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (cache_tlb$mv_vm_get_xlate[203:202] == 2'd1 ||
	      cache_tlb$mv_vm_get_xlate[203:202] == 2'd2 ||
	      (!cache_tlb$mv_vm_get_xlate[130] ||
	       cache_f_pte_writebacks$FULL_N) &&
	      (!cache_soc_map$m_is_mem_addr || cache_rg_op == 2'd0 ||
	       cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010 ||
	       IF_cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_ETC___d514)) &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_ddr4_ready &&
	     cache_rg_state == 5'd3 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_start_tlb_refill
  assign CAN_FIRE_RL_cache_rl_start_tlb_refill =
	     cache_masterPortShim_arff$FULL_N && cache_rg_state == 5'd5 &&
	     b__h48530 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_tlb_refill =
	     CAN_FIRE_RL_cache_rl_start_tlb_refill &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_ptw_level_2
  assign CAN_FIRE_RL_cache_rl_ptw_level_2 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     cache_masterPortShim_rff_i_notEmpty__191_AND_N_ETC___d1206 &&
	     cache_rg_state == 5'd6 ;
  assign WILL_FIRE_RL_cache_rl_ptw_level_2 =
	     CAN_FIRE_RL_cache_rl_ptw_level_2 &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_ptw_level_1
  assign CAN_FIRE_RL_cache_rl_ptw_level_1 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     cache_masterPortShim_rff_i_notEmpty__191_AND_N_ETC___d1206 &&
	     cache_rg_state == 5'd7 ;
  assign WILL_FIRE_RL_cache_rl_ptw_level_1 =
	     CAN_FIRE_RL_cache_rl_ptw_level_1 &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_ptw_level_0
  assign CAN_FIRE_RL_cache_rl_ptw_level_0 =
	     cache_masterPortShim_rff$EMPTY_N && cache_rg_state == 5'd8 ;
  assign WILL_FIRE_RL_cache_rl_ptw_level_0 =
	     CAN_FIRE_RL_cache_rl_ptw_level_0 &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     cache_masterPortShim_arff$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd9 &&
	     b__h48530 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     cache_masterPortShim_rff$EMPTY_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd10 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd11 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 5'd12 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     MUX_cache_rg_state$write_1__SEL_9 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     MUX_cache_rg_state$write_1__SEL_9 ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     MUX_cache_rg_exc_code$write_1__PSEL_3 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     MUX_cache_rg_exc_code$write_1__PSEL_3 ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd15 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     MUX_cache_rg_state$write_1__SEL_7 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     MUX_cache_rg_state$write_1__SEL_7 ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     MUX_cache_rg_state$write_1__SEL_6 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     MUX_cache_rg_state$write_1__SEL_6 ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     MUX_cache_rg_state$write_1__SEL_5 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     MUX_cache_rg_state$write_1__SEL_5 ;

  // rule RL_cache_rl_writeback_updated_PTE
  assign CAN_FIRE_RL_cache_rl_writeback_updated_PTE =
	     cache_f_pte_writebacks$EMPTY_N &&
	     cache_f_fabric_write_reqs$FULL_N ;
  assign WILL_FIRE_RL_cache_rl_writeback_updated_PTE =
	     CAN_FIRE_RL_cache_rl_writeback_updated_PTE &&
	     !WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     !WILL_FIRE_RL_cache_rl_io_write_req &&
	     !WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     MUX_cache_rg_exc_code$write_1__PSEL_2 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     MUX_cache_rg_exc_code$write_1__PSEL_2 ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     b__h48530 != 4'd0 && cache_masterPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 5'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_do_req
  assign CAN_FIRE_RL_cache_do_req = EN_req && !cache_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_cache_do_req =
	     CAN_FIRE_RL_cache_do_req && !WILL_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_do_set_req_valid
  assign CAN_FIRE_RL_cache_do_set_req_valid = 1'd1 ;
  assign WILL_FIRE_RL_cache_do_set_req_valid = 1'd1 ;

  // rule RL_cache_do_reset_req
  assign CAN_FIRE_RL_cache_do_reset_req =
	     cache_f_reset_reqs$FULL_N && cache_rw_reset_req$whas ;
  assign WILL_FIRE_RL_cache_do_reset_req = CAN_FIRE_RL_cache_do_reset_req ;

  // rule RL_cache_do_tlb_flush
  assign CAN_FIRE_RL_cache_do_tlb_flush = EN_tlb_flush ;
  assign WILL_FIRE_RL_cache_do_tlb_flush = EN_tlb_flush ;

  // rule __me_check_26
  assign CAN_FIRE___me_check_26 = 1'b1 ;
  assign WILL_FIRE___me_check_26 = 1'b1 ;

  // rule RL_cache_aw_events_update_reg
  assign CAN_FIRE_RL_cache_aw_events_update_reg = 1'd1 ;
  assign WILL_FIRE_RL_cache_aw_events_update_reg = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1]) ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_dw_valid$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d622 ;
  assign MUX_cache_dw_valid$wset_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1081 ;
  assign MUX_cache_masterPortShim_arff$enq_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ;
  assign MUX_cache_masterPortShim_arff$enq_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ;
  assign MUX_cache_masterPortShim_arff$enq_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;
  assign MUX_cache_ram_cword_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d845 ;
  assign MUX_cache_ram_cword_set$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     (IF_cache_w_req_width_code_whas__672_THEN_cache_ETC___d1766 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_cword_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_IF_cache_w_req_width_code_whas__672_THEN_c_ETC___d1750 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__PSEL_2 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     cache_masterPortShim_rff_i_notEmpty__191_AND_N_ETC___d1574 &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd16 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__PSEL_3 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd14 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	     (!cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      !cache_masterPortShim_rff$D_OUT[7] &&
	      !cache_masterPortShim_rff$D_OUT[5] ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_6 =
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     (!cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      (cache_masterPortShim_rff$D_OUT[7] ||
	       cache_masterPortShim_rff$D_OUT[5]) &&
	      cache_masterPortShim_rff$D_OUT[22:14] != 9'd0 ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_7 =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     NOT_cache_masterPortShim_rff_first__192_BIT_4__ETC___d1222 ;
  assign MUX_cache_rg_ld_val$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d828 ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ;
  assign MUX_cache_rg_lower_word64$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      !cache_masterPortShim_rff$D_OUT[1]) &&
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[1]) ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (!cache_masterPortShim_rff$D_OUT[1] ||
	      cache_rg_lower_word64_full) ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d616 ;
  assign MUX_cache_rg_pa$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 ;
  assign MUX_cache_rg_state$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ;
  assign MUX_cache_rg_state$write_1__SEL_5 =
	     cache_masterPortShim_arff$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd13 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 != 5'b00010 &&
	     cache_rg_amo_funct5 != 5'b00011 ;
  assign MUX_cache_rg_state$write_1__SEL_6 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd13 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00011 ;
  assign MUX_cache_rg_state$write_1__SEL_7 =
	     cache_f_fabric_write_reqs$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd13 &&
	     cache_rg_op == 2'd1 ;
  assign MUX_cache_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ;
  assign MUX_cache_rg_state$write_1__SEL_9 =
	     cache_masterPortShim_arff$FULL_N &&
	     NOT_cache_f_reset_reqs_notEmpty__19_19_AND_cac_ETC___d1457 &&
	     b__h48530 == 4'd0 ;
  assign MUX_cache_rg_state$write_1__SEL_11 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_18 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign MUX_cache_tlb$ma_insert_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_tlb$mv_vm_get_xlate[130] ;
  assign MUX_cache_tlb$ma_insert_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1268 ;
  assign MUX_cache_tlb$ma_insert_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) ;
  assign MUX_cache_tlb$ma_insert_2__SEL_3 =
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ?
	       { cache_tlb$mv_vm_get_xlate[201] &&
		 cache_rg_width_code == 3'b100 &&
		 cache_ram_cword_set_b_read__47_BITS_128_TO_0_4_ETC___d757[128],
		 x__h35683 } :
	       129'd1 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	     { 1'd0,
	       IF_NOT_cache_rg_lower_word64_full_383_384_AND__ETC___d1519 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 = { 1'd0, x__h69178 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_4 =
	     { cache_rg_allow_cap && cache_rg_ld_val[128],
	       cache_rg_ld_val[127:0] } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_1 =
	     { cache_rg_width_code,
	       cache_tlb$mv_vm_get_xlate[200:137],
	       IF_cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_ETC___d1084 } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_2 =
	     { cache_rg_width_code,
	       cache_rg_pa,
	       cache_rg_width_code == 3'b100 && cache_rg_st_amo_val[128],
	       x__h68548 } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_3 =
	     { 3'b011,
	       cache_f_pte_writebacks$D_OUT[127:64],
	       65'd0,
	       cache_f_pte_writebacks$D_OUT[63:0] } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_4 =
	     { cache_rg_width_code, cache_rg_pa, cache_rg_st_amo_val } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_1 =
	     { 4'd0, lev_1_pte_pa_w64_fa__h49582, 29'd851968 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_2 =
	     { 4'd0, lev_0_pte_pa_w64_fa__h50695, 29'd851968 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_3 =
	     { 4'd0,
	       cache_rg_pa,
	       _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 ?
		 { 8'd0, size_val__h67707, 18'd65536 } :
		 29'd2949120 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_4 =
	     { 4'd0, lev_2_pte_pa_w64_fa__h48627, 29'd851968 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_5 =
	     { 4'd0, cline_fabric_addr__h52285, 29'd15532032 } ;
  assign MUX_cache_masterPortShim_wff$enq_1__VAL_2 =
	     { mem_req_wr_data_wdata__h5908,
	       mem_req_wr_data_wstrb__h5909,
	       cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100,
	       mem_req_wr_second_data_wuser__h5733 } ;
  assign MUX_cache_ram_cword_set$a_put_3__VAL_1 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       { IF_cache_ram_state_and_ctag_cset_b_read__97_BI_ETC___d971,
		 IF_NOT_cache_ram_state_and_ctag_cset_b_read__9_ETC___d972 } :
	       { IF_cache_ram_state_and_ctag_cset_b_read__97_BI_ETC___d1073,
		 IF_NOT_cache_ram_state_and_ctag_cset_b_read__9_ETC___d1074 } ;
  assign MUX_cache_ram_cword_set$a_put_3__VAL_2 =
	     cache_rg_victim_way ?
	       { tags__h53622, b__h53704, cache_ram_cword_set$DOB[128:0] } :
	       { cache_ram_cword_set$DOB[257:129], tags__h53622, b__h53704 } ;
  assign MUX_cache_ram_cword_set$b_put_2__VAL_2 =
	     cache_rg_cset_cword_in_cache + 8'd1 ;
  assign MUX_cache_ram_cword_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:6], 2'd0 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { cache_rg_victim_way || cache_ram_state_and_ctag_cset$DOB[105],
	       cache_rg_victim_way ?
		 cache_rg_pa[63:12] :
		 cache_ram_state_and_ctag_cset$DOB[104:53],
	       !cache_rg_victim_way || cache_ram_state_and_ctag_cset$DOB[52],
	       cache_rg_victim_way ?
		 cache_ram_state_and_ctag_cset$DOB[51:0] :
		 cache_rg_pa[63:12] } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_4 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ?
	       6'd5 :
	       6'd7 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_5 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
	       page_fault_exc_code__h5360 :
	       access_exc_code__h5359 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_8 =
	     EN_commit ? x1_avValue_snd_snd__h48092 : 6'd28 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_1 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       { 128'd0, lrsc_result__h36710 } :
	       { cache_rg_width_code == 3'b100 &&
		 cache_ram_cword_set_b_read__47_BITS_128_TO_0_4_ETC___d757[128],
		 x__h47918 } ;
  assign MUX_cache_rg_lower_word64_full$write_1__VAL_2 =
	     !cache_rg_lower_word64_full &&
	     !cache_masterPortShim_rff$D_OUT[1] ;
  assign MUX_cache_rg_pte_pa$write_1__VAL_1 =
	     lev_1_PTN_pa__h49578 + vpn_1_pa__h49579 ;
  assign MUX_cache_rg_pte_pa$write_1__VAL_2 =
	     lev_1_PTN_pa__h49578 + vpn_0_pa__h50692 ;
  assign MUX_cache_rg_pte_pa$write_1__VAL_3 =
	     satp_pa__h2227 + vpn_2_pa__h48624 ;
  assign MUX_cache_rg_st_amo_val$write_1__VAL_2 =
	     { cache_rg_width_code == 3'b100 && cache_rg_st_amo_val[128],
	       upd_val__h42836 } ;
  assign MUX_cache_rg_state$write_1__VAL_2 =
	     (NOT_IF_cache_w_req_width_code_whas__672_THEN_c_ETC___d1750 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       5'd4 :
	       5'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_4 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ? 5'd15 : 5'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_8 =
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1]) ?
	       ((cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
		  5'd15 :
		  5'd4) :
	       5'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_11 =
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       5'd4 :
	       5'd11 ;
  assign MUX_cache_rg_state$write_1__VAL_13 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
	       ((!cache_masterPortShim_rff$D_OUT[4] ||
		 !cache_masterPortShim_rff$D_OUT[5] &&
		 cache_masterPortShim_rff$D_OUT[6] ||
		 !cache_masterPortShim_rff$D_OUT[7] &&
		 !cache_masterPortShim_rff$D_OUT[5]) ?
		  5'd4 :
		  5'd11) :
	       5'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_14 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
	       ((!cache_masterPortShim_rff$D_OUT[4] ||
		 !cache_masterPortShim_rff$D_OUT[5] &&
		 cache_masterPortShim_rff$D_OUT[6]) ?
		  5'd4 :
		  ((!cache_masterPortShim_rff$D_OUT[7] &&
		    !cache_masterPortShim_rff$D_OUT[5]) ?
		     5'd8 :
		     ((cache_masterPortShim_rff$D_OUT[22:14] == 9'd0) ?
			5'd11 :
			5'd4))) :
	       5'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_15 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
	       ((!cache_masterPortShim_rff$D_OUT[4] ||
		 !cache_masterPortShim_rff$D_OUT[5] &&
		 cache_masterPortShim_rff$D_OUT[6]) ?
		  5'd4 :
		  ((!cache_masterPortShim_rff$D_OUT[7] &&
		    !cache_masterPortShim_rff$D_OUT[5]) ?
		     5'd7 :
		     ((cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
		       cache_masterPortShim_rff$D_OUT[22:14] != 9'd0) ?
			5'd4 :
			5'd11))) :
	       5'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_17 =
	     EN_commit ?
	       CASE_cache_tlbmv_vm_get_xlate_BITS_203_TO_202_ETC__q15 :
	       5'd4 ;

  // inlined wires
  assign cache_rw_reset_req$whas =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_dw_valid$wget =
	     !MUX_cache_dw_valid$wset_1__SEL_1 || EN_commit ;
  assign cache_dw_valid$whas =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d622 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1]) ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  always@(MUX_cache_dw_valid$wset_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_dw_valid$wset_1__SEL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_valid$wset_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_dw_valid$wset_1__SEL_2:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_4;
      default: cache_dw_output_ld_val$wget =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_dw_output_ld_val$whas =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d622 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1]) ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign cache_dw_output_st_amo_val$wget =
	     MUX_cache_dw_valid$wset_1__SEL_1 ? 129'd0 : cache_rg_st_amo_val ;
  assign cache_dw_output_st_amo_val$whas =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d622 ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign cache_aw_events_wires_ifc_ifc_wires_1$wget =
	     { 7'd0,
	       cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	       cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	       cache_soc_map$m_is_mem_addr &&
	       cache_rg_mem_req_sent_162_AND_cache_rg_op_55_E_ETC___d1164,
	       1'd0,
	       cache_rg_mem_req_sent,
	       cache_rg_mem_req_sent &&
	       cache_tlb$mv_vm_get_xlate[203:202] == 2'd1,
	       cache_rg_mem_req_sent &&
	       cache_tlb$mv_vm_get_xlate[203:202] == 2'd1,
	       2'd0 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_3$wget =
	     { 2'd0, cache_rg_op == 2'd0, 5'd0, cache_rg_op == 2'd2, 5'd0 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_4$wget =
	     { 13'd0,
	       CASE_cache_rg_victim_way_0_cache_ram_state_and_ETC__q1 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_6$wget =
	     { req_op == 2'd0,
	       2'd0,
	       req_op == 2'd1,
	       2'd0,
	       req_op == 2'd2,
	       7'd0 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_7$wget =
	     { 1'd0, cache_rg_op == 2'd0, 12'd0 } ;
  assign cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	     cache_ctr_wr_rsps_pending_crg + 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port1__read =
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req ?
	       cache_ctr_wr_rsps_pending_crg$port0__write_1 :
	       cache_ctr_wr_rsps_pending_crg ;
  assign cache_ctr_wr_rsps_pending_crg$port1__write_1 = b__h48530 - 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       cache_ctr_wr_rsps_pending_crg$port1__write_1 :
	       cache_ctr_wr_rsps_pending_crg$port1__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;
  assign cache_ctr_wr_rsps_pending_crg$port3__read =
	     cache_ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       cache_ctr_wr_rsps_pending_crg$port2__read ;

  // register cache_aw_events_register
  assign cache_aw_events_register$D_IN =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[13]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[13]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d38,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d344 } ;
  assign cache_aw_events_register$EN = 1'd1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_ctr_wr_rsps_pending_crg
  assign cache_ctr_wr_rsps_pending_crg$D_IN =
	     cache_ctr_wr_rsps_pending_crg$port3__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_allow_cap
  assign cache_rg_allow_cap$D_IN = cache_tlb$mv_vm_get_xlate[201] ;
  assign cache_rg_allow_cap$EN = MUX_cache_rg_pa$write_1__SEL_2 ;

  // register cache_rg_amo_funct5
  assign cache_rg_amo_funct5$D_IN = req_amo_funct5 ;
  assign cache_rg_amo_funct5$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_cache_rereq_data
  assign cache_rg_cache_rereq_data$D_IN = cache_rg_state != 5'd3 ;
  assign cache_rg_cache_rereq_data$EN = CAN_FIRE_RL_cache_rl_count_miss_lat ;

  // register cache_rg_cset_cword_in_cache
  assign cache_rg_cset_cword_in_cache$D_IN =
	     MUX_cache_ram_cword_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_cword_set$b_put_2__VAL_2 :
	       MUX_cache_ram_cword_set$b_put_2__VAL_4 ;
  assign cache_rg_cset_cword_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_ddr4_ready
  assign cache_rg_ddr4_ready$D_IN = 1'd1 ;
  assign cache_rg_ddr4_ready$EN = EN_ma_ddr4_ready ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_4 or
	  MUX_cache_rg_exc_code$write_1__SEL_5 or
	  MUX_cache_rg_exc_code$write_1__VAL_5 or
	  MUX_cache_rg_exc_code$write_1__SEL_6 or
	  MUX_cache_rg_exc_code$write_1__SEL_7 or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_exc_code$write_1__VAL_8)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2: cache_rg_exc_code$D_IN = 6'd7;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 6'd5;
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_4;
    MUX_cache_rg_exc_code$write_1__SEL_5:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_5;
    MUX_cache_rg_exc_code$write_1__SEL_6:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_5;
    MUX_cache_rg_exc_code$write_1__SEL_7:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_8;
    default: cache_rg_exc_code$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_IF_cache_w_req_width_code_whas__672_THEN_c_ETC___d1750 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ||
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     NOT_cache_masterPortShim_rff_first__192_BIT_4__ETC___d1222 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     (!cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      (cache_masterPortShim_rff$D_OUT[7] ||
	       cache_masterPortShim_rff$D_OUT[5]) &&
	      cache_masterPortShim_rff$D_OUT[22:14] != 9'd0 ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	     (!cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      !cache_masterPortShim_rff$D_OUT[7] &&
	      !cache_masterPortShim_rff$D_OUT[5] ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_rg_ld_val$write_1__SEL_1 or
	  MUX_cache_rg_ld_val$write_1__VAL_1 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_rg_ld_val$write_1__SEL_1:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_1;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 129'd1;
      default: cache_rg_ld_val$D_IN =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d828 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1]) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN = cache_masterPortShim_rff$D_OUT[67:4] ;
  assign cache_rg_lower_word64$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     !cache_masterPortShim_rff$D_OUT[1] ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     !cache_rg_lower_word64_full &&
	     !cache_masterPortShim_rff$D_OUT[1] ;

  // register cache_rg_lower_word64_full
  always@(MUX_cache_rg_lower_word64_full$write_1__SEL_1 or
	  cache_masterPortShim_rff$D_OUT or
	  MUX_cache_rg_lower_word64_full$write_1__SEL_2 or
	  MUX_cache_rg_lower_word64_full$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop or
	  cache_rg_lower_word64_full or
	  MUX_cache_rg_lower_word64_full$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_rg_lower_word64_full$write_1__SEL_1:
	  cache_rg_lower_word64_full$D_IN =
	      !cache_masterPortShim_rff$D_OUT[1];
      MUX_cache_rg_lower_word64_full$write_1__SEL_2:
	  cache_rg_lower_word64_full$D_IN =
	      MUX_cache_rg_lower_word64_full$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop:
	  cache_rg_lower_word64_full$D_IN = !cache_rg_lower_word64_full;
      MUX_cache_rg_lower_word64_full$write_1__SEL_4:
	  cache_rg_lower_word64_full$D_IN = 1'd0;
      default: cache_rg_lower_word64_full$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      !cache_masterPortShim_rff$D_OUT[1]) &&
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[1]) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (!cache_masterPortShim_rff$D_OUT[1] ||
	      cache_rg_lower_word64_full) ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_lower_word64_user
  assign cache_rg_lower_word64_user$D_IN =
	     MUX_cache_rg_lower_word64$write_1__SEL_2 &&
	     cache_masterPortShim_rff$D_OUT[0] ;
  assign cache_rg_lower_word64_user$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     !cache_masterPortShim_rff$D_OUT[1] ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     !cache_rg_lower_word64_full &&
	     !cache_masterPortShim_rff$D_OUT[1] ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_tlb$mv_vm_get_xlate[200:137] ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5_58_EQ_0b10_59_AND_cache_ra_ETC___d806 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d619 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d616 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_mem_req_sent
  assign cache_rg_mem_req_sent$D_IN = EN_req ;
  assign cache_rg_mem_req_sent$EN = 1'd1 ;

  // register cache_rg_mstatus_MXR
  assign cache_rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign cache_rg_mstatus_MXR$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN =
	     WILL_FIRE_RL_cache_do_req ?
	       req_addr :
	       cache_tlb$mv_vm_get_xlate[200:137] ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 ||
	     WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_priv
  assign cache_rg_priv$D_IN = req_priv ;
  assign cache_rg_priv$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_pte_pa
  always@(MUX_cache_masterPortShim_arff$enq_1__SEL_1 or
	  MUX_cache_rg_pte_pa$write_1__VAL_1 or
	  MUX_cache_masterPortShim_arff$enq_1__SEL_2 or
	  MUX_cache_rg_pte_pa$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_start_tlb_refill or
	  MUX_cache_rg_pte_pa$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_masterPortShim_arff$enq_1__SEL_1:
	  cache_rg_pte_pa$D_IN = MUX_cache_rg_pte_pa$write_1__VAL_1;
      MUX_cache_masterPortShim_arff$enq_1__SEL_2:
	  cache_rg_pte_pa$D_IN = MUX_cache_rg_pte_pa$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_start_tlb_refill:
	  cache_rg_pte_pa$D_IN = MUX_cache_rg_pte_pa$write_1__VAL_3;
      default: cache_rg_pte_pa$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_pte_pa$EN =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ||
	     WILL_FIRE_RL_cache_rl_start_tlb_refill ;

  // register cache_rg_satp
  assign cache_rg_satp$D_IN = req_satp ;
  assign cache_rg_satp$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_sstatus_SUM
  assign cache_rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign cache_rg_sstatus_SUM$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     WILL_FIRE_RL_cache_do_req ?
	       req_st_value :
	       MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1144 ||
	     WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_state
  always@(EN_tlb_flush or
	  WILL_FIRE_RL_cache_do_req or
	  MUX_cache_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  MUX_cache_rg_state$write_1__SEL_4 or
	  MUX_cache_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_rg_state$write_1__SEL_8 or
	  MUX_cache_rg_state$write_1__VAL_8 or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_11 or
	  MUX_cache_rg_state$write_1__VAL_11 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  WILL_FIRE_RL_cache_rl_ptw_level_0 or
	  MUX_cache_rg_state$write_1__VAL_13 or
	  WILL_FIRE_RL_cache_rl_ptw_level_1 or
	  MUX_cache_rg_state$write_1__VAL_14 or
	  WILL_FIRE_RL_cache_rl_ptw_level_2 or
	  MUX_cache_rg_state$write_1__VAL_15 or
	  WILL_FIRE_RL_cache_rl_start_tlb_refill or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_state$write_1__VAL_17 or
	  MUX_cache_rg_state$write_1__SEL_18)
  case (1'b1)
    EN_tlb_flush: cache_rg_state$D_IN = 5'd2;
    WILL_FIRE_RL_cache_do_req:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 5'd1;
    MUX_cache_rg_state$write_1__SEL_4:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 5'd16;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 5'd12;
    MUX_cache_rg_state$write_1__SEL_8:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_8;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 5'd14;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 5'd3;
    MUX_cache_rg_state$write_1__SEL_11:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_11;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 5'd10;
    WILL_FIRE_RL_cache_rl_ptw_level_0:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_13;
    WILL_FIRE_RL_cache_rl_ptw_level_1:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_14;
    WILL_FIRE_RL_cache_rl_ptw_level_2:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_15;
    WILL_FIRE_RL_cache_rl_start_tlb_refill: cache_rg_state$D_IN = 5'd6;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_17;
    MUX_cache_rg_state$write_1__SEL_18: cache_rg_state$D_IN = 5'd2;
    default: cache_rg_state$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ||
	     WILL_FIRE_RL_cache_rl_ptw_level_2 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_0 ||
	     WILL_FIRE_RL_cache_do_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_tlb_refill ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_tlb_walk
  assign cache_rg_tlb_walk$D_IN = cache_rg_state != 5'd3 ;
  assign cache_rg_tlb_walk$EN = CAN_FIRE_RL_cache_rl_count_tlb_latency ;

  // register cache_rg_tohost_addr
  assign cache_rg_tohost_addr$D_IN = set_watch_tohost_tohost_addr ;
  assign cache_rg_tohost_addr$EN = EN_set_watch_tohost ;

  // register cache_rg_tohost_value
  assign cache_rg_tohost_value$D_IN = cache_rg_st_amo_val[63:0] ;
  assign cache_rg_tohost_value$EN =
	     WILL_FIRE_RL_cache_rl_ST_AMO_response &&
	     cache_rg_watch_tohost_442_AND_cache_rg_pa_348__ETC___d1448 ;

  // register cache_rg_victim_way
  assign cache_rg_victim_way$D_IN = tmp__h52439[0] ;
  assign cache_rg_victim_way$EN = CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_watch_tohost
  assign cache_rg_watch_tohost$D_IN = set_watch_tohost_watch_tohost ;
  assign cache_rg_watch_tohost$EN = EN_set_watch_tohost ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_wr_rsp_err
  assign cache_rg_wr_rsp_err$D_IN = 1'd1 ;
  assign cache_rg_wr_rsp_err$EN =
	     WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	     cache_masterPortShim_bff$D_OUT[1:0] != 2'd0 ;

  // submodule cache_f_fabric_second_write_reqs
  assign cache_f_fabric_second_write_reqs$D_IN =
	     { cache_f_fabric_write_reqs$D_OUT[127:64],
	       fabric_strobe2__h5639,
	       1'd1,
	       mem_req_wr_second_data_wuser__h5733 } ;
  assign cache_f_fabric_second_write_reqs$ENQ =
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	     cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100 ;
  assign cache_f_fabric_second_write_reqs$DEQ =
	     cache_masterPortShim_wff$FULL_N &&
	     cache_f_fabric_second_write_reqs$EMPTY_N ;
  assign cache_f_fabric_second_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_fabric_write_reqs
  always@(MUX_cache_f_fabric_write_reqs$enq_1__SEL_1 or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_writeback_updated_PTE or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_3 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_f_fabric_write_reqs$enq_1__SEL_1:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_1;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_cache_rl_writeback_updated_PTE:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_3;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_4;
      default: cache_f_fabric_write_reqs$D_IN =
		   196'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1081 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1]) ||
	     WILL_FIRE_RL_cache_rl_writeback_updated_PTE ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  assign cache_f_fabric_write_reqs$DEQ =
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_pte_writebacks
  assign cache_f_pte_writebacks$D_IN =
	     { cache_tlb$mv_vm_get_xlate[63:0],
	       cache_tlb$mv_vm_get_xlate[129:66] } ;
  assign cache_f_pte_writebacks$ENQ = MUX_cache_tlb$ma_insert_1__SEL_1 ;
  assign cache_f_pte_writebacks$DEQ =
	     WILL_FIRE_RL_cache_rl_writeback_updated_PTE ;
  assign cache_f_pte_writebacks$CLR = 1'b0 ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ = CAN_FIRE_RL_cache_do_reset_req ;
  assign cache_f_reset_reqs$DEQ =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_masterPortShim_arff
  always@(MUX_cache_masterPortShim_arff$enq_1__SEL_1 or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_1 or
	  MUX_cache_masterPortShim_arff$enq_1__SEL_2 or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_2 or
	  MUX_cache_masterPortShim_arff$enq_1__SEL_3 or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_3 or
	  WILL_FIRE_RL_cache_rl_start_tlb_refill or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_masterPortShim_arff$enq_1__SEL_1:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_1;
      MUX_cache_masterPortShim_arff$enq_1__SEL_2:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_2;
      MUX_cache_masterPortShim_arff$enq_1__SEL_3:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_3;
      WILL_FIRE_RL_cache_rl_start_tlb_refill:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_4;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_5;
      default: cache_masterPortShim_arff$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_masterPortShim_arff$ENQ =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_start_tlb_refill ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_masterPortShim_arff$DEQ = EN_mem_master_ar_drop ;
  assign cache_masterPortShim_arff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_awff
  assign cache_masterPortShim_awff$D_IN =
	     { 4'd0,
	       cache_f_fabric_write_reqs$D_OUT[192:129],
	       mem_req_wr_addr_awlen__h5832,
	       _theResult___snd_snd_snd_val__h5872,
	       18'd65536 } ;
  assign cache_masterPortShim_awff$ENQ =
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_masterPortShim_awff$DEQ = EN_mem_master_aw_drop ;
  assign cache_masterPortShim_awff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_bff
  assign cache_masterPortShim_bff$D_IN = mem_master_b_put_val ;
  assign cache_masterPortShim_bff$ENQ = EN_mem_master_b_put ;
  assign cache_masterPortShim_bff$DEQ =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;
  assign cache_masterPortShim_bff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_rff
  assign cache_masterPortShim_rff$D_IN = mem_master_r_put_val ;
  assign cache_masterPortShim_rff$ENQ = EN_mem_master_r_put ;
  assign cache_masterPortShim_rff$DEQ =
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ptw_level_0 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_2 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ;
  assign cache_masterPortShim_rff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_wff
  assign cache_masterPortShim_wff$D_IN =
	     WILL_FIRE_RL_cache_rl_fabric_send_second_write_req ?
	       cache_f_fabric_second_write_reqs$D_OUT :
	       MUX_cache_masterPortShim_wff$enq_1__VAL_2 ;
  assign cache_masterPortShim_wff$ENQ =
	     WILL_FIRE_RL_cache_rl_fabric_send_second_write_req ||
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_masterPortShim_wff$DEQ = EN_mem_master_w_drop ;
  assign cache_masterPortShim_wff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_ram_cword_set
  assign cache_ram_cword_set$ADDRA =
	     MUX_cache_ram_cword_set$a_put_1__SEL_1 ?
	       cache_rg_addr[11:4] :
	       cache_rg_cset_cword_in_cache ;
  always@(MUX_cache_ram_cword_set$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_cword_set$b_put_1__SEL_2 or
	  MUX_cache_ram_cword_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_cword_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_cword_set$b_put_1__SEL_1:
	  cache_ram_cword_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_cword_set$b_put_1__SEL_2:
	  cache_ram_cword_set$ADDRB = MUX_cache_ram_cword_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_cword_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_cword_set$ADDRB = MUX_cache_ram_cword_set$b_put_2__VAL_4;
      default: cache_ram_cword_set$ADDRB =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_cword_set$DIA =
	     MUX_cache_ram_cword_set$a_put_1__SEL_1 ?
	       MUX_cache_ram_cword_set$a_put_3__VAL_1 :
	       MUX_cache_ram_cword_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_cword_set$b_put_1__SEL_1 or
	  MUX_cache_ram_cword_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_cword_set$b_put_1__SEL_1:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_cword_set$b_put_1__SEL_2:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_cword_set$DIB =
	      258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_cword_set$DIB =
		   258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_cword_set$WEA = 1'd1 ;
  assign cache_ram_cword_set$WEB = 1'd0 ;
  assign cache_ram_cword_set$ENA =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d845 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign cache_ram_cword_set$ENB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       cache_rg_addr[11:6] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       cache_rg_addr[11:6] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       106'h15555555555554AAAAAAAAAAAAA ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ?
	       106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr =
	     cache_tlb$mv_vm_get_xlate[200:137] ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule cache_tlb
  assign cache_tlb$ma_insert_asid = cache_rg_satp[59:44] ;
  always@(MUX_cache_tlb$ma_insert_1__SEL_1 or
	  cache_tlb$mv_vm_get_xlate or
	  MUX_cache_tlb$ma_insert_1__SEL_2 or
	  MUX_cache_tlb$ma_insert_2__SEL_3 or
	  MUX_cache_tlb$ma_insert_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_tlb$ma_insert_1__SEL_1:
	  cache_tlb$ma_insert_level = cache_tlb$mv_vm_get_xlate[65:64];
      MUX_cache_tlb$ma_insert_1__SEL_2: cache_tlb$ma_insert_level = 2'd2;
      MUX_cache_tlb$ma_insert_2__SEL_3: cache_tlb$ma_insert_level = 2'd1;
      MUX_cache_tlb$ma_insert_1__SEL_4: cache_tlb$ma_insert_level = 2'd0;
      default: cache_tlb$ma_insert_level = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign cache_tlb$ma_insert_pte =
	     (MUX_cache_tlb$ma_insert_1__SEL_2 ||
	      MUX_cache_tlb$ma_insert_2__SEL_3 ||
	      MUX_cache_tlb$ma_insert_1__SEL_4) ?
	       cache_masterPortShim_rff$D_OUT[67:4] :
	       cache_tlb$mv_vm_get_xlate[129:66] ;
  assign cache_tlb$ma_insert_pte_pa =
	     MUX_cache_tlb$ma_insert_1__SEL_1 ?
	       cache_tlb$mv_vm_get_xlate[200:137] :
	       cache_rg_pte_pa ;
  assign cache_tlb$ma_insert_vpn = cache_rg_addr[38:12] ;
  assign cache_tlb$mv_vm_get_xlate_cap = cache_rg_st_amo_val[128] ;
  assign cache_tlb$mv_vm_get_xlate_mstatus_MXR = cache_rg_mstatus_MXR ;
  assign cache_tlb$mv_vm_get_xlate_priv = cache_rg_priv ;
  assign cache_tlb$mv_vm_get_xlate_read_not_write =
	     cache_rg_op == 2'd0 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010 ;
  assign cache_tlb$mv_vm_get_xlate_satp = cache_rg_satp ;
  assign cache_tlb$mv_vm_get_xlate_sstatus_SUM = cache_rg_sstatus_SUM ;
  assign cache_tlb$mv_vm_put_va_full_va = req_addr ;
  assign cache_tlb$EN_mv_vm_put_va = WILL_FIRE_RL_cache_do_req ;
  assign cache_tlb$EN_ma_insert =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_tlb$mv_vm_get_xlate[130] ||
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1268 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) ;
  assign cache_tlb$EN_ma_flush =
	     WILL_FIRE_RL_cache_rl_start_reset || EN_tlb_flush ;

  // remaining internal signals
  assign IF_NOT_cache_ram_state_and_ctag_cset_b_read__9_ETC___d1074 =
	     (!cache_ram_state_and_ctag_cset$DOB[105] ||
	      !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) ?
	       { cache_rg_width_code == 3'b100 && cache_rg_st_amo_val[128],
		 b__h42718 } :
	       cache_ram_cword_set$DOB[128:0] ;
  assign IF_NOT_cache_ram_state_and_ctag_cset_b_read__9_ETC___d1151 =
	     ((!cache_ram_state_and_ctag_cset$DOB[52] ||
	       !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502) &&
	      (!cache_ram_state_and_ctag_cset$DOB[105] ||
	       !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508)) ?
	       5'd9 :
	       5'd12 ;
  assign IF_NOT_cache_ram_state_and_ctag_cset_b_read__9_ETC___d972 =
	     (!cache_ram_state_and_ctag_cset$DOB[105] ||
	      !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) ?
	       { cache_rg_width_code == 3'b100 && cache_rg_st_amo_val[128],
		 b__h37112 } :
	       cache_ram_cword_set$DOB[128:0] ;
  assign IF_NOT_cache_rg_lower_word64_full_383_384_AND__ETC___d1519 =
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1]) ?
	       x__h66278 :
	       x__h66458 ;
  assign IF_NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache__ETC___d1150 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_85_EQ_cache_tlb_mv_vm_get_xla_ETC___d486) ?
	       5'd12 :
	       cache_rg_state ;
  assign IF_cache_ram_state_and_ctag_cset_b_read__97_BI_ETC___d1073 =
	     (cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) ?
	       { cache_rg_width_code == 3'b100 && cache_rg_st_amo_val[128],
		 b__h42718 } :
	       cache_ram_cword_set$DOB[257:129] ;
  assign IF_cache_ram_state_and_ctag_cset_b_read__97_BI_ETC___d1149 =
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) ?
	       cache_rg_state :
	       5'd9 ;
  assign IF_cache_ram_state_and_ctag_cset_b_read__97_BI_ETC___d971 =
	     (cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) ?
	       { cache_rg_width_code == 3'b100 && cache_rg_st_amo_val[128],
		 b__h37112 } :
	       cache_ram_cword_set$DOB[257:129] ;
  assign IF_cache_rg_lower_word64_BIT_0_THEN_1_ELSE_0__q2 =
	     cache_rg_lower_word64[0] ? 128'd1 : 128'd0 ;
  assign IF_cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_ETC___d1153 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ?
	       IF_cache_ram_state_and_ctag_cset_b_read__97_BI_ETC___d1149 :
	       IF_cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_ETC___d1152 ;
  assign IF_cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_ETC___d1084 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       cache_rg_st_amo_val :
	       { cache_rg_width_code == 3'b100 && cache_rg_st_amo_val[128],
		 upd_val__h42836 } ;
  assign IF_cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_ETC___d1152 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       IF_NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache__ETC___d1150 :
	       IF_NOT_cache_ram_state_and_ctag_cset_b_read__9_ETC___d1151 ;
  assign IF_cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_ETC___d514 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       cache_rg_op_55_EQ_2_57_AND_cache_rg_amo_funct5_ETC___d496 :
	       NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d512 ||
	       cache_f_fabric_write_reqs$FULL_N ;
  assign IF_cache_rg_victim_way_353_THEN_cache_masterPo_ETC___d1432 =
	     cache_rg_victim_way ?
	       { tags__h53622, b__h53704 } :
	       cache_ram_cword_set$DOB[257:129] ;
  assign IF_cache_rg_victim_way_353_THEN_cache_ram_cwor_ETC___d1431 =
	     cache_rg_victim_way ?
	       cache_ram_cword_set$DOB[128:0] :
	       { tags__h53622, b__h53704 } ;
  assign IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d982 =
	     (cache_rg_width_code == 3'b010) ?
	       { {32{cache_rg_st_amo_val_BITS_31_TO_0__q13[31]}},
		 cache_rg_st_amo_val_BITS_31_TO_0__q13 } :
	       cache_rg_st_amo_val[63:0] ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1024 =
	     { (cache_tlb$mv_vm_get_xlate[140:137] == 4'd15) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[127:120],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd14) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[119:112],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd13) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[111:104],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd12) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[103:96] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1027 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1024,
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd11) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[95:88],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd10) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[87:80] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1030 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1027,
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd9) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[79:72],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd8) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[71:64] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1033 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1030,
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd7) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[63:56],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd6) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[55:48] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1036 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1033,
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd5) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[47:40],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd4) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[39:32] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1039 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1036,
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd3) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[31:24],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd2) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[23:16] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1049 =
	     { (cache_tlb$mv_vm_get_xlate[140:138] == 3'd7) ?
		 upd_val__h42836[15:0] :
		 new_cword__h37093[127:112],
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd6) ?
		 upd_val__h42836[15:0] :
		 new_cword__h37093[111:96],
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd5) ?
		 upd_val__h42836[15:0] :
		 new_cword__h37093[95:80],
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd4) ?
		 upd_val__h42836[15:0] :
		 new_cword__h37093[79:64] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1052 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1049,
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd3) ?
		 upd_val__h42836[15:0] :
		 new_cword__h37093[63:48],
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd2) ?
		 upd_val__h42836[15:0] :
		 new_cword__h37093[47:32] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d868 =
	     { (cache_tlb$mv_vm_get_xlate[140:137] == 4'd15) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[127:120],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd14) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[119:112],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd13) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[111:104],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd12) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[103:96] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d875 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d868,
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd11) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[95:88],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd10) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[87:80] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d882 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d875,
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd9) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[79:72],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd8) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[71:64] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d889 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d882,
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd7) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[63:56],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd6) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[55:48] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d896 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d889,
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd5) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[47:40],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd4) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[39:32] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d903 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d896,
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd3) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[31:24],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd2) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[23:16] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d926 =
	     { (cache_tlb$mv_vm_get_xlate[140:138] == 3'd7) ?
		 cache_rg_st_amo_val[15:0] :
		 new_cword__h37093[127:112],
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd6) ?
		 cache_rg_st_amo_val[15:0] :
		 new_cword__h37093[111:96],
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd5) ?
		 cache_rg_st_amo_val[15:0] :
		 new_cword__h37093[95:80],
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd4) ?
		 cache_rg_st_amo_val[15:0] :
		 new_cword__h37093[79:64] } ;
  assign IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d933 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d926,
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd3) ?
		 cache_rg_st_amo_val[15:0] :
		 new_cword__h37093[63:48],
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd2) ?
		 cache_rg_st_amo_val[15:0] :
		 new_cword__h37093[47:32] } ;
  assign IF_cache_w_req_width_code_whas__672_THEN_cache_ETC___d1766 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign IF_cache_w_req_width_code_whas__672_THEN_cache_ETC___d1771 =
	     (IF_cache_w_req_width_code_whas__672_THEN_cache_ETC___d1766 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign NOT_IF_cache_w_req_width_code_whas__672_THEN_c_ETC___d1750 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 =
	     cache_cfg_verbosity > 4'd1 ;
  assign NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577 =
	     cache_cfg_verbosity >= 4'd2 ;
  assign NOT_cache_f_reset_reqs_notEmpty__19_19_AND_cac_ETC___d1457 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd13 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ;
  assign NOT_cache_masterPortShim_rff_first__192_BIT_4__ETC___d1222 =
	     !cache_masterPortShim_rff$D_OUT[4] ||
	     !cache_masterPortShim_rff$D_OUT[5] &&
	     cache_masterPortShim_rff$D_OUT[6] ||
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     (cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
	      cache_masterPortShim_rff$D_OUT[22:14] != 9'd0) ||
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d512 =
	     (!cache_ram_state_and_ctag_cset$DOB[52] ||
	      !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502) &&
	     (!cache_ram_state_and_ctag_cset$DOB[105] ||
	      !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) ||
	     !EN_commit ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d595 =
	     (!cache_ram_state_and_ctag_cset$DOB[52] ||
	      !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502) &&
	     (!cache_ram_state_and_ctag_cset$DOB[105] ||
	      !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00010 &&
	     cache_tlb_mv_vm_get_xlate_cache_rg_satp_54_cac_ETC___d593 ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d814 =
	     (!cache_ram_state_and_ctag_cset$DOB[52] ||
	      !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502) &&
	     (!cache_ram_state_and_ctag_cset$DOB[105] ||
	      !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d820 =
	     (!cache_ram_state_and_ctag_cset$DOB[52] ||
	      !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502) &&
	     (!cache_ram_state_and_ctag_cset$DOB[105] ||
	      !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) &&
	     cache_tlb_mv_vm_get_xlate_cache_rg_satp_54_cac_ETC___d593 &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1107 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	     NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d1105 ;
  assign NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1119 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	     NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d1117 ;
  assign NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1144 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d611 ;
  assign NOT_cache_rg_op_55_EQ_1_79_06_AND_NOT_cache_rg_ETC___d1140 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d611 &&
	     cache_tlb_mv_vm_get_xlate_cache_rg_satp_54_cac_ETC___d593 &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d1077 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_85_EQ_cache_tlb_mv_vm_get_xla_ETC___d486) &&
	     EN_commit ;
  assign NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d1105 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_85_EQ_cache_tlb_mv_vm_get_xla_ETC___d486) &&
	     EN_commit &&
	     cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d800 ;
  assign NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d1111 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_85_EQ_cache_tlb_mv_vm_get_xla_ETC___d486) &&
	     EN_commit &&
	     NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d814 ;
  assign NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d1117 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_85_EQ_cache_tlb_mv_vm_get_xla_ETC___d486) &&
	     EN_commit &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d840 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_85_EQ_cache_tlb_mv_vm_get_xla_ETC___d486) &&
	     cache_dw_commit_whas__90_AND_cache_dw_commit_w_ETC___d839 ;
  assign NOT_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54_ETC___d1094 =
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	     cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00011 &&
	     cache_rg_lrsc_valid &&
	     !cache_rg_lrsc_pa_85_EQ_cache_tlb_mv_vm_get_xla_ETC___d486 &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d780 =
	     { {56{x5732_BITS_7_TO_0__q9[7]}}, x5732_BITS_7_TO_0__q9 } ;
  assign SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d784 =
	     { {48{x5732_BITS_15_TO_0__q10[15]}}, x5732_BITS_15_TO_0__q10 } ;
  assign SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d788 =
	     { {32{x5732_BITS_31_TO_0__q11[31]}}, x5732_BITS_31_TO_0__q11 } ;
  assign _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 =
	     8'd1 << size_val__h67707 <= 8'd8 ;
  assign access_exc_code__h5359 = MUX_cache_rg_exc_code$write_1__VAL_4 ;
  assign addr_lsbs__h68257 = { 1'd0, cache_rg_addr[2:0] } ;
  assign b__h48530 = cache_ctr_wr_rsps_pending_crg$port1__read ;
  assign b__h53704 =
	     { cache_masterPortShim_rff$D_OUT[67:4],
	       cache_rg_lower_word64[63:1],
	       IF_cache_rg_lower_word64_BIT_0_THEN_1_ELSE_0__q2[0] } ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d107 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[10]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[10]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[10]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d130 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[9]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[9]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[9]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d153 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[8]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[8]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[8]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d176 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[7]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[7]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[7]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d199 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[6]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[6]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[6]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d222 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[5]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[5]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[5]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d245 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[4]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[4]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[4]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d268 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[3]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[3]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[3]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d291 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[2]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[2]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[2]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d314 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[1]) |
	     EN_tlb_flush |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[1]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[1]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d337 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[0]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[0]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[0]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d38 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[13]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[13]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[13]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d61 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[12]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[12]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[12]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d84 =
	     (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
	      cache_aw_events_wires_ifc_ifc_wires_4$wget[11]) |
	     (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[11]) |
	     (CAN_FIRE_RL_cache_rl_start_cache_refill &&
	      cache_aw_events_wires_ifc_ifc_wires_7$wget[11]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d280 =
	     (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	      cache_aw_events_wires_ifc_ifc_wires_1$wget[2]) |
	     CAN_FIRE_RL_cache_rl_count_tlb_latency |
	     (CAN_FIRE_RL_cache_rl_count_miss_lat &&
	      cache_aw_events_wires_ifc_ifc_wires_3$wget[2]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d303 =
	     CAN_FIRE_RL_cache_rl_start_reset |
	     (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	      cache_aw_events_wires_ifc_ifc_wires_1$wget[1]) |
	     (CAN_FIRE_RL_cache_rl_count_miss_lat &&
	      cache_aw_events_wires_ifc_ifc_wires_3$wget[1]) ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d339 =
	     { cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d280 |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d291,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d303 |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d314,
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[0]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[0]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d337 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d340 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[4]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[4]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d245,
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[3]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[3]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d268,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d339 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d341 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[6]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[6]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d199,
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[5]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[5]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d222,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d340 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d342 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[8]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[8]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d153,
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[7]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[7]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d176,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d341 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d343 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[10]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[10]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d107,
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[9]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[9]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d130,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d342 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d344 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[12]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[12]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d61,
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[11]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[11]) |
	       cache_aw_events_wires_ifc_ifc_wires_4_whas__0__ETC___d84,
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d343 } ;
  assign cache_dw_commit_whas__90_AND_cache_dw_commit_w_ETC___d839 =
	     EN_commit &&
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) ;
  assign cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1268 =
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[31:23] == 9'd0 &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 ;
  assign cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1303 =
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1309 =
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[22:14] != 9'd0 &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign cache_masterPortShim_rff_first__192_BIT_7_200__ETC___d1258 =
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     (cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
	      cache_masterPortShim_rff$D_OUT[22:14] != 9'd0) &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign cache_masterPortShim_rff_first__192_BIT_7_200__ETC___d1270 =
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[31:23] == 9'd0 &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign cache_masterPortShim_rff_i_notEmpty__191_AND_N_ETC___d1206 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[4] ||
	      cache_masterPortShim_rff$D_OUT[6] ||
	      cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5] ||
	      cache_masterPortShim_arff$FULL_N) ;
  assign cache_masterPortShim_rff_i_notEmpty__191_AND_N_ETC___d1574 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      !cache_rg_lower_word64_full &&
	      !cache_masterPortShim_rff$D_OUT[1] ||
	      cache_f_fabric_write_reqs$FULL_N) ;
  assign cache_ram_cword_set_b_read__47_BITS_128_TO_0_4_ETC___d757 =
	     x__h10243 | y__h10244 ;
  assign cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502 =
	     cache_ram_state_and_ctag_cset$DOB[51:0] ==
	     cache_tlb$mv_vm_get_xlate[200:149] ;
  assign cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508 =
	     cache_ram_state_and_ctag_cset$DOB[104:53] ==
	     cache_tlb$mv_vm_get_xlate[200:149] ;
  assign cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d592 =
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00010 ;
  assign cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d611 =
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) &&
	     EN_commit ;
  assign cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d800 =
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign cache_rg_amo_funct5_58_EQ_0b10_59_AND_cache_ra_ETC___d806 =
	     cache_rg_amo_funct5 == 5'b00010 &&
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) ;
  assign cache_rg_lrsc_pa_85_EQ_cache_tlb_mv_vm_get_xla_ETC___d486 =
	     cache_rg_lrsc_pa == cache_tlb$mv_vm_get_xlate[200:137] ;
  assign cache_rg_mem_req_sent_162_AND_cache_rg_op_55_E_ETC___d1164 =
	     cache_rg_mem_req_sent && cache_rg_op == 2'd2 &&
	     (!cache_ram_state_and_ctag_cset$DOB[52] ||
	      !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502) &&
	     (!cache_ram_state_and_ctag_cset$DOB[105] ||
	      !cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) ;
  assign cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d597 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) &&
	     (cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d592 ||
	      NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d595) ;
  assign cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d616 =
	     cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d597 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_2__ETC___d614 ;
  assign cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d619 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) &&
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508) ;
  assign cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d622 =
	     cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_2__ETC___d619 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 &&
	     lrsc_result__h36710 ;
  assign cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_2__ETC___d1079 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	     NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d1077 ||
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d611 ;
  assign cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_2__ETC___d614 =
	     cache_rg_op == 2'd1 &&
	     cache_tlb_mv_vm_get_xlate_cache_rg_satp_54_cac_ETC___d593 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 ||
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d611 &&
	     cache_tlb_mv_vm_get_xlate_cache_rg_satp_54_cac_ETC___d593 ;
  assign cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_2__ETC___d843 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	     NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d840 ||
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d611 ;
  assign cache_rg_op_55_EQ_2_57_AND_cache_rg_amo_funct5_ETC___d1124 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 &&
	     lrsc_result__h36710 &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign cache_rg_op_55_EQ_2_57_AND_cache_rg_amo_funct5_ETC___d496 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 &&
	     lrsc_result__h36710 ||
	     !EN_commit ||
	     cache_f_fabric_write_reqs$FULL_N ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q13 = cache_rg_st_amo_val[31:0] ;
  assign cache_rg_watch_tohost_442_AND_cache_rg_pa_348__ETC___d1448 =
	     cache_rg_watch_tohost && cache_rg_pa == cache_rg_tohost_addr &&
	     cache_rg_st_amo_val[127:0] != 128'd0 ;
  assign cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1081 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_2__ETC___d1079 ;
  assign cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1132 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d512 &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1137 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d611 &&
	     NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 ;
  assign cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d802 =
	     cache_soc_map$m_is_mem_addr &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d800 ;
  assign cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d816 =
	     cache_soc_map$m_is_mem_addr &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) &&
	     NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d814 ;
  assign cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d828 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     (cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 ||
	      cache_rg_op != 2'd1 &&
	      cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d611) ;
  assign cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d845 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op_55_EQ_1_79_OR_cache_rg_op_55_EQ_2__ETC___d843 ;
  assign cache_tlb_mv_vm_get_xlate_cache_rg_satp_54_cac_ETC___d593 =
	     cache_tlb$mv_vm_get_xlate[200:137] == cache_rg_lrsc_pa ;
  assign centry__h66166 = { 64'd0, cache_masterPortShim_rff$D_OUT[67:4] } ;
  assign centry__h68689 = cache_rg_lower_word64_full ? x__h66458 : x__h66278 ;
  assign cline_fabric_addr__h52285 = { cache_rg_pa[63:6], 6'd0 } ;
  assign lev_0_pte_pa__h50693 = MUX_cache_rg_pte_pa$write_1__VAL_2 ;
  assign lev_0_pte_pa_w64_fa__h50695 = { lev_0_pte_pa__h50693[63:3], 3'b0 } ;
  assign lev_1_PTN_pa__h49578 = { 8'd0, x__h49655 } ;
  assign lev_1_pte_pa__h49580 = MUX_cache_rg_pte_pa$write_1__VAL_1 ;
  assign lev_1_pte_pa_w64_fa__h49582 = { lev_1_pte_pa__h49580[63:3], 3'b0 } ;
  assign lev_2_pte_pa__h48625 = MUX_cache_rg_pte_pa$write_1__VAL_3 ;
  assign lev_2_pte_pa_w64_fa__h48627 = { lev_2_pte_pa__h48625[63:3], 3'b0 } ;
  assign lrsc_result__h36710 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_85_EQ_cache_tlb_mv_vm_get_xla_ETC___d486 ;
  assign mem_req_wr_addr_awlen__h5832 =
	     (cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100) ?
	       8'd1 :
	       8'd0 ;
  assign mem_req_wr_second_data_wuser__h5733 =
	     cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100 &&
	     cache_f_fabric_write_reqs$D_OUT[128] ;
  assign new_cword__h37185 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d903,
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd1) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[15:8],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd0) ?
		 cache_rg_st_amo_val[7:0] :
		 new_cword__h37093[7:0] } ;
  assign new_cword__h39207 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d933,
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd1) ?
		 cache_rg_st_amo_val[15:0] :
		 new_cword__h37093[31:16],
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd0) ?
		 cache_rg_st_amo_val[15:0] :
		 new_cword__h37093[15:0] } ;
  assign new_cword__h40253 =
	     { (cache_tlb$mv_vm_get_xlate[140:139] == 2'd3) ?
		 cache_rg_st_amo_val[31:0] :
		 new_cword__h37093[127:96],
	       (cache_tlb$mv_vm_get_xlate[140:139] == 2'd2) ?
		 cache_rg_st_amo_val[31:0] :
		 new_cword__h37093[95:64],
	       (cache_tlb$mv_vm_get_xlate[140:139] == 2'd1) ?
		 cache_rg_st_amo_val[31:0] :
		 new_cword__h37093[63:32],
	       (cache_tlb$mv_vm_get_xlate[140:139] == 2'd0) ?
		 cache_rg_st_amo_val[31:0] :
		 new_cword__h37093[31:0] } ;
  assign new_cword__h40811 =
	     cache_tlb$mv_vm_get_xlate[140] ?
	       { cache_rg_st_amo_val[63:0], new_cword__h37093[63:0] } :
	       { new_cword__h37093[127:64], cache_rg_st_amo_val[63:0] } ;
  assign new_cword__h42831 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1039,
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd1) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[15:8],
	       (cache_tlb$mv_vm_get_xlate[140:137] == 4'd0) ?
		 upd_val__h42836[7:0] :
		 new_cword__h37093[7:0] } ;
  assign new_cword__h45209 =
	     { IF_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54__ETC___d1052,
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd1) ?
		 upd_val__h42836[15:0] :
		 new_cword__h37093[31:16],
	       (cache_tlb$mv_vm_get_xlate[140:138] == 3'd0) ?
		 upd_val__h42836[15:0] :
		 new_cword__h37093[15:0] } ;
  assign new_cword__h46255 =
	     { (cache_tlb$mv_vm_get_xlate[140:139] == 2'd3) ?
		 upd_val__h42836[31:0] :
		 new_cword__h37093[127:96],
	       (cache_tlb$mv_vm_get_xlate[140:139] == 2'd2) ?
		 upd_val__h42836[31:0] :
		 new_cword__h37093[95:64],
	       (cache_tlb$mv_vm_get_xlate[140:139] == 2'd1) ?
		 upd_val__h42836[31:0] :
		 new_cword__h37093[63:32],
	       (cache_tlb$mv_vm_get_xlate[140:139] == 2'd0) ?
		 upd_val__h42836[31:0] :
		 new_cword__h37093[31:0] } ;
  assign new_cword__h46813 =
	     cache_tlb$mv_vm_get_xlate[140] ?
	       { upd_val__h42836[63:0], new_cword__h37093[63:0] } :
	       { new_cword__h37093[127:64], upd_val__h42836[63:0] } ;
  assign new_st_val__h43870 = { 32'd0, _theResult_____2__h43864[31:0] } ;
  assign new_st_val__h43942 =
	     IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d980 +
	     IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d982 ;
  assign new_st_val__h44172 = w1__h42767 ^ w2__h42769 ;
  assign new_st_val__h44176 = w1__h42767 & w2__h42769 ;
  assign new_st_val__h44180 = w1__h42767 | w2__h42769 ;
  assign new_st_val__h44184 =
	     (w1__h42767 < w2__h42769) ? w1__h42767 : w2__h42769 ;
  assign new_st_val__h44189 =
	     (w1__h42767 <= w2__h42769) ? w2__h42769 : w1__h42767 ;
  assign new_st_val__h44195 =
	     ((IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d980 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d982 ^
	       64'h8000000000000000)) ?
	       w1__h42767 :
	       w2__h42769 ;
  assign new_st_val__h44200 =
	     ((IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d980 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d982 ^
	       64'h8000000000000000)) ?
	       w2__h42769 :
	       w1__h42767 ;
  assign new_st_val__h68559 = { 32'd0, _theResult_____2__h68553[31:0] } ;
  assign new_st_val__h68631 =
	     IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d1605 +
	     IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d982 ;
  assign new_st_val__h69038 = w1__h68520 ^ w2__h42769 ;
  assign new_st_val__h69042 = w1__h68520 & w2__h42769 ;
  assign new_st_val__h69046 = w1__h68520 | w2__h42769 ;
  assign new_st_val__h69050 =
	     (w1__h68520 < w2__h42769) ? w1__h68520 : w2__h42769 ;
  assign new_st_val__h69055 =
	     (w1__h68520 <= w2__h42769) ? w2__h42769 : w1__h68520 ;
  assign new_st_val__h69061 =
	     ((IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d1605 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d982 ^
	       64'h8000000000000000)) ?
	       w1__h68520 :
	       w2__h42769 ;
  assign new_st_val__h69066 =
	     ((IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d1605 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d982 ^
	       64'h8000000000000000)) ?
	       w2__h42769 :
	       w1__h68520 ;
  assign new_st_val_cap__h43865 = { 64'd0, x__h43868 } ;
  assign new_st_val_cap__h68554 = { 64'd0, x__h68557 } ;
  assign page_fault_exc_code__h5360 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ?
	       6'd13 :
	       6'd15 ;
  assign result_lo__h35719 =
	     cache_rg_is_unsigned ?
	       { 56'd0, x__h35732[7:0] } :
	       SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d780 ;
  assign result_lo__h35758 =
	     cache_rg_is_unsigned ?
	       { 48'd0, x__h35732[15:0] } :
	       SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d784 ;
  assign result_lo__h35770 =
	     cache_rg_is_unsigned ?
	       { 32'd0, x__h35732[31:0] } :
	       SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d788 ;
  assign result_lo__h66316 =
	     cache_rg_is_unsigned ?
	       { 56'd0, x__h66327[7:0] } :
	       { {56{x6327_BITS_7_TO_0__q4[7]}}, x6327_BITS_7_TO_0__q4 } ;
  assign result_lo__h66353 =
	     cache_rg_is_unsigned ?
	       { 48'd0, x__h66327[15:0] } :
	       { {48{x6327_BITS_15_TO_0__q5[15]}}, x6327_BITS_15_TO_0__q5 } ;
  assign result_lo__h66365 =
	     cache_rg_is_unsigned ?
	       { 32'd0, x__h66327[31:0] } :
	       { {32{x6327_BITS_31_TO_0__q3[31]}}, x6327_BITS_31_TO_0__q3 } ;
  assign result_lo__h68954 =
	     { {56{x8965_BITS_7_TO_0__q7[7]}}, x8965_BITS_7_TO_0__q7 } ;
  assign result_lo__h68989 =
	     { {48{x8965_BITS_15_TO_0__q8[15]}}, x8965_BITS_15_TO_0__q8 } ;
  assign result_lo__h68999 =
	     { {32{x8965_BITS_31_TO_0__q6[31]}}, x8965_BITS_31_TO_0__q6 } ;
  assign satp_pa__h2227 = { 8'd0, x__h7940 } ;
  assign shift_bits__h5626 =
	     { cache_f_fabric_write_reqs$D_OUT[131:129], 3'b0 } ;
  assign strobe64__h5853 =
	     8'b00000001 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h5857 =
	     8'b00000011 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h5861 =
	     8'b00001111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h5865 =
	     8'b11111111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign tags__h53622 =
	     cache_masterPortShim_rff$D_OUT[0] & cache_rg_lower_word64_user ;
  assign test_num__h65273 = { 1'd0, cache_rg_st_amo_val[127:1] } ;
  assign tmp__h52438 = { 1'd0, cache_rg_victim_way } ;
  assign tmp__h52439 = tmp__h52438 + 2'd1 ;
  assign upd_val__h42836 =
	     (cache_rg_width_code == 3'b100) ?
	       cache_rg_st_amo_val[127:0] :
	       new_st_val_cap__h43865 ;
  assign vpn_0_pa__h50692 = { 52'd0, cache_rg_addr[20:12], 3'd0 } ;
  assign vpn_1_pa__h49579 = { 52'd0, cache_rg_addr[29:21], 3'd0 } ;
  assign vpn_2_pa__h48624 = { 52'd0, cache_rg_addr[38:30], 3'd0 } ;
  assign w12762_BITS_31_TO_0__q12 = w1__h42762[31:0] ;
  assign w18515_BITS_31_TO_0__q14 = w1__h68515[31:0] ;
  assign w1___1__h43909 = { 32'd0, w1__h42762[31:0] } ;
  assign w1___1__h68598 = { 32'd0, w1__h68515[31:0] } ;
  assign w2___1__h43910 = { 32'd0, cache_rg_st_amo_val[31:0] } ;
  assign w2__h42769 =
	     (cache_rg_width_code == 3'b010) ?
	       w2___1__h43910 :
	       cache_rg_st_amo_val[63:0] ;
  assign word64__h5852 =
	     cache_f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h5626 ;
  assign x5732_BITS_15_TO_0__q10 = x__h35732[15:0] ;
  assign x5732_BITS_31_TO_0__q11 = x__h35732[31:0] ;
  assign x5732_BITS_7_TO_0__q9 = x__h35732[7:0] ;
  assign x6327_BITS_15_TO_0__q5 = x__h66327[15:0] ;
  assign x6327_BITS_31_TO_0__q3 = x__h66327[31:0] ;
  assign x6327_BITS_7_TO_0__q4 = x__h66327[7:0] ;
  assign x8965_BITS_15_TO_0__q8 = x__h68965[15:0] ;
  assign x8965_BITS_31_TO_0__q6 = x__h68965[31:0] ;
  assign x8965_BITS_7_TO_0__q7 = x__h68965[7:0] ;
  assign x__h10243 = cache_ram_cword_set$DOB[128:0] & y__h10297 ;
  assign x__h35683 =
	     { _theResult___snd_snd__h35685, _theResult___snd_fst__h35684 } ;
  assign x__h35690 =
	     cache_ram_cword_set_b_read__47_BITS_128_TO_0_4_ETC___d757[127:0] >>
	     x__h68927 ;
  assign x__h35732 =
	     cache_ram_cword_set_b_read__47_BITS_128_TO_0_4_ETC___d757[127:0] >>
	     x__h68968 ;
  assign x__h43868 =
	     (cache_rg_width_code == 3'b010) ?
	       new_st_val__h43870 :
	       _theResult_____2__h43864 ;
  assign x__h47918 = { _theResult___snd_snd__h35685, w1__h42762 } ;
  assign x__h49655 = { cache_masterPortShim_rff$D_OUT[57:14], 12'b0 } ;
  assign x__h66278 =
	     { _theResult___snd_snd__h66280, _theResult___snd_fst__h66279 } ;
  assign x__h66285 = centry__h66166 >> x__h68810 ;
  assign x__h66327 = centry__h66166 >> x__h68875 ;
  assign x__h66458 =
	     { cache_masterPortShim_rff$D_OUT[67:4], cache_rg_lower_word64 } ;
  assign x__h68548 =
	     (cache_rg_width_code == 3'b100) ?
	       cache_rg_st_amo_val[127:0] :
	       new_st_val_cap__h68554 ;
  assign x__h68557 =
	     (cache_rg_width_code == 3'b010) ?
	       new_st_val__h68559 :
	       _theResult_____2__h68553 ;
  assign x__h68747 = centry__h68689 >> x__h68927 ;
  assign x__h68810 = { addr_lsbs__h68257 + 4'd8, 3'b0 } ;
  assign x__h68875 = { addr_lsbs__h68257, 3'b0 } ;
  assign x__h68927 = { cache_rg_addr[3:0] + 4'd8, 3'b0 } ;
  assign x__h68965 = centry__h68689 >> x__h68968 ;
  assign x__h68968 = { cache_rg_addr[3:0], 3'b0 } ;
  assign x__h69178 = { _theResult___snd_snd__h68737, w1__h68515 } ;
  assign x__h7940 = { cache_rg_satp[43:0], 12'b0 } ;
  assign y__h10244 = cache_ram_cword_set$DOB[257:129] & y__h22989 ;
  assign y__h10297 =
	     {129{cache_ram_state_and_ctag_cset$DOB[52] &&
		  cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502}} ;
  assign y__h22989 =
	     {129{cache_ram_state_and_ctag_cset$DOB[105] &&
		  cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508}} ;
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010, 3'b011: fabric_strobe2__h5639 = 8'd0;
      3'b100: fabric_strobe2__h5639 = 8'b11111111;
      default: fabric_strobe2__h5639 = 8'd0;
    endcase
  end
  always@(cache_rg_victim_way or cache_ram_state_and_ctag_cset$DOB)
  begin
    case (cache_rg_victim_way)
      1'd0:
	  CASE_cache_rg_victim_way_0_cache_ram_state_and_ETC__q1 =
	      cache_ram_state_and_ctag_cset$DOB[52];
      1'd1:
	  CASE_cache_rg_victim_way_0_cache_ram_state_and_ETC__q1 =
	      cache_ram_state_and_ctag_cset$DOB[105];
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010:
	  _theResult___snd_snd_snd_val__h5872 =
	      cache_f_fabric_write_reqs$D_OUT[195:193];
      3'b011, 3'b100: _theResult___snd_snd_snd_val__h5872 = 3'b011;
      default: _theResult___snd_snd_snd_val__h5872 = 3'b110;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'd3: size_val__h67707 = cache_rg_width_code;
      default: size_val__h67707 = 3'b100;
    endcase
  end
  always@(cache_tlb$mv_vm_get_xlate or cache_rg_exc_code)
  begin
    case (cache_tlb$mv_vm_get_xlate[203:202])
      2'd1: x1_avValue_snd_snd__h48092 = cache_rg_exc_code;
      2'd2: x1_avValue_snd_snd__h48092 = cache_tlb$mv_vm_get_xlate[136:131];
      default: x1_avValue_snd_snd__h48092 = cache_rg_exc_code;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or word64__h5852)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010, 3'b011:
	  mem_req_wr_data_wdata__h5908 = word64__h5852;
      default: mem_req_wr_data_wdata__h5908 =
		   cache_f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or
	  strobe64__h5853 or
	  strobe64__h5857 or strobe64__h5861 or strobe64__h5865)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0: mem_req_wr_data_wstrb__h5909 = strobe64__h5853;
      3'b001: mem_req_wr_data_wstrb__h5909 = strobe64__h5857;
      3'b010: mem_req_wr_data_wstrb__h5909 = strobe64__h5861;
      3'b011: mem_req_wr_data_wstrb__h5909 = strobe64__h5865;
      3'b100: mem_req_wr_data_wstrb__h5909 = 8'b11111111;
      default: mem_req_wr_data_wstrb__h5909 = 8'd0;
    endcase
  end
  always@(cache_rg_width_code or x__h66285)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'd3: _theResult___snd_snd__h66280 = 64'd0;
      3'b100: _theResult___snd_snd__h66280 = x__h66285[63:0];
      default: _theResult___snd_snd__h66280 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  x__h66327 or
	  result_lo__h66316 or result_lo__h66353 or result_lo__h66365)
  begin
    case (cache_rg_width_code)
      3'd0: _theResult___snd_fst__h66279 = result_lo__h66316;
      3'd1: _theResult___snd_fst__h66279 = result_lo__h66353;
      3'b010: _theResult___snd_fst__h66279 = result_lo__h66365;
      default: _theResult___snd_fst__h66279 = x__h66327[63:0];
    endcase
  end
  always@(cache_rg_width_code or x__h68747)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'd3: _theResult___snd_snd__h68737 = 64'd0;
      3'b100: _theResult___snd_snd__h68737 = x__h68747[63:0];
      default: _theResult___snd_snd__h68737 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  x__h68965 or
	  result_lo__h68954 or result_lo__h68989 or result_lo__h68999)
  begin
    case (cache_rg_width_code)
      3'd0: w1__h68515 = result_lo__h68954;
      3'd1: w1__h68515 = result_lo__h68989;
      3'b010: w1__h68515 = result_lo__h68999;
      default: w1__h68515 = x__h68965[63:0];
    endcase
  end
  always@(cache_rg_width_code or
	  x__h68965 or
	  result_lo__h68954 or result_lo__h68989 or w1___1__h68598)
  begin
    case (cache_rg_width_code)
      3'd0: w1__h68520 = result_lo__h68954;
      3'd1: w1__h68520 = result_lo__h68989;
      3'b010: w1__h68520 = w1___1__h68598;
      default: w1__h68520 = x__h68965[63:0];
    endcase
  end
  always@(cache_ram_state_and_ctag_cset$DOB or
	  cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508 or
	  cache_ram_cword_set$DOB)
  begin
    case (cache_ram_state_and_ctag_cset$DOB[105] &&
	  cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508)
      1'd0: new_cword__h37093 = cache_ram_cword_set$DOB[127:0];
      1'd1: new_cword__h37093 = cache_ram_cword_set$DOB[256:129];
    endcase
  end
  always@(cache_rg_width_code or x__h35690)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'd3: _theResult___snd_snd__h35685 = 64'd0;
      3'b100: _theResult___snd_snd__h35685 = x__h35690[63:0];
      default: _theResult___snd_snd__h35685 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  x__h35732 or
	  SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d780 or
	  SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d784 or
	  SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d788)
  begin
    case (cache_rg_width_code)
      3'd0:
	  w1__h42762 =
	      SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d780;
      3'd1:
	  w1__h42762 =
	      SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d784;
      3'b010:
	  w1__h42762 =
	      SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d788;
      default: w1__h42762 = x__h35732[63:0];
    endcase
  end
  always@(cache_rg_width_code or
	  x__h35732 or
	  result_lo__h35719 or result_lo__h35758 or result_lo__h35770)
  begin
    case (cache_rg_width_code)
      3'd0: _theResult___snd_fst__h35684 = result_lo__h35719;
      3'd1: _theResult___snd_fst__h35684 = result_lo__h35758;
      3'b010: _theResult___snd_fst__h35684 = result_lo__h35770;
      default: _theResult___snd_fst__h35684 = x__h35732[63:0];
    endcase
  end
  always@(cache_rg_width_code or
	  x__h35732 or
	  SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d780 or
	  SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d784 or
	  w1___1__h43909)
  begin
    case (cache_rg_width_code)
      3'd0:
	  w1__h42767 =
	      SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d780;
      3'd1:
	  w1__h42767 =
	      SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d784;
      3'b010: w1__h42767 = w1___1__h43909;
      default: w1__h42767 = x__h35732[63:0];
    endcase
  end
  always@(cache_rg_width_code or
	  x__h35732 or
	  SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d780 or
	  SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d784 or
	  w12762_BITS_31_TO_0__q12)
  begin
    case (cache_rg_width_code)
      3'd0:
	  IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d980 =
	      SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d780;
      3'd1:
	  IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d980 =
	      SEXT_cache_ram_cword_set_b_read__47_BITS_128_T_ETC___d784;
      3'b010:
	  IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d980 =
	      { {32{w12762_BITS_31_TO_0__q12[31]}},
		w12762_BITS_31_TO_0__q12 };
      default: IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d980 =
		   x__h35732[63:0];
    endcase
  end
  always@(cache_rg_amo_funct5 or
	  new_st_val__h44200 or
	  new_st_val__h43942 or
	  w2__h42769 or
	  new_st_val__h44172 or
	  new_st_val__h44180 or
	  new_st_val__h44176 or
	  new_st_val__h44195 or new_st_val__h44184 or new_st_val__h44189)
  begin
    case (cache_rg_amo_funct5)
      5'b0: _theResult_____2__h43864 = new_st_val__h43942;
      5'b00001: _theResult_____2__h43864 = w2__h42769;
      5'b00100: _theResult_____2__h43864 = new_st_val__h44172;
      5'b01000: _theResult_____2__h43864 = new_st_val__h44180;
      5'b01100: _theResult_____2__h43864 = new_st_val__h44176;
      5'b10000: _theResult_____2__h43864 = new_st_val__h44195;
      5'b11000: _theResult_____2__h43864 = new_st_val__h44184;
      5'b11100: _theResult_____2__h43864 = new_st_val__h44189;
      default: _theResult_____2__h43864 = new_st_val__h44200;
    endcase
  end
  always@(cache_rg_width_code or
	  new_cword__h37093 or
	  new_cword__h42831 or
	  new_cword__h45209 or
	  new_cword__h46255 or new_cword__h46813 or upd_val__h42836)
  begin
    case (cache_rg_width_code)
      3'd0: b__h42718 = new_cword__h42831;
      3'd1: b__h42718 = new_cword__h45209;
      3'b010: b__h42718 = new_cword__h46255;
      3'd3: b__h42718 = new_cword__h46813;
      3'b100: b__h42718 = upd_val__h42836;
      default: b__h42718 = new_cword__h37093;
    endcase
  end
  always@(cache_rg_width_code or
	  new_cword__h37093 or
	  new_cword__h37185 or
	  new_cword__h39207 or
	  new_cword__h40253 or new_cword__h40811 or cache_rg_st_amo_val)
  begin
    case (cache_rg_width_code)
      3'd0: b__h37112 = new_cword__h37185;
      3'd1: b__h37112 = new_cword__h39207;
      3'b010: b__h37112 = new_cword__h40253;
      3'd3: b__h37112 = new_cword__h40811;
      3'b100: b__h37112 = cache_rg_st_amo_val[127:0];
      default: b__h37112 = new_cword__h37093;
    endcase
  end
  always@(cache_rg_width_code or
	  x__h68965 or
	  result_lo__h68954 or result_lo__h68989 or w18515_BITS_31_TO_0__q14)
  begin
    case (cache_rg_width_code)
      3'd0:
	  IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d1605 =
	      result_lo__h68954;
      3'd1:
	  IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d1605 =
	      result_lo__h68989;
      3'b010:
	  IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d1605 =
	      { {32{w18515_BITS_31_TO_0__q14[31]}},
		w18515_BITS_31_TO_0__q14 };
      default: IF_cache_rg_width_code_25_EQ_0b10_63_THEN_SEXT_ETC___d1605 =
		   x__h68965[63:0];
    endcase
  end
  always@(cache_rg_amo_funct5 or
	  new_st_val__h69066 or
	  new_st_val__h68631 or
	  w2__h42769 or
	  new_st_val__h69038 or
	  new_st_val__h69046 or
	  new_st_val__h69042 or
	  new_st_val__h69061 or new_st_val__h69050 or new_st_val__h69055)
  begin
    case (cache_rg_amo_funct5)
      5'b0: _theResult_____2__h68553 = new_st_val__h68631;
      5'b00001: _theResult_____2__h68553 = w2__h42769;
      5'b00100: _theResult_____2__h68553 = new_st_val__h69038;
      5'b01000: _theResult_____2__h68553 = new_st_val__h69046;
      5'b01100: _theResult_____2__h68553 = new_st_val__h69042;
      5'b10000: _theResult_____2__h68553 = new_st_val__h69061;
      5'b11000: _theResult_____2__h68553 = new_st_val__h69050;
      5'b11100: _theResult_____2__h68553 = new_st_val__h69055;
      default: _theResult_____2__h68553 = new_st_val__h69066;
    endcase
  end
  always@(cache_tlb$mv_vm_get_xlate or
	  cache_soc_map$m_is_mem_addr or
	  IF_cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_ETC___d1153)
  begin
    case (cache_tlb$mv_vm_get_xlate[203:202])
      2'd1: CASE_cache_tlbmv_vm_get_xlate_BITS_203_TO_202_ETC__q15 = 5'd5;
      2'd2: CASE_cache_tlbmv_vm_get_xlate_BITS_203_TO_202_ETC__q15 = 5'd4;
      default: CASE_cache_tlbmv_vm_get_xlate_BITS_203_TO_202_ETC__q15 =
		   cache_soc_map$m_is_mem_addr ?
		     IF_cache_rg_op_55_EQ_0_56_OR_cache_rg_op_55_EQ_ETC___d1153 :
		     5'd13;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_aw_events_register <= `BSV_ASSIGNMENT_DELAY 14'd0;
	cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd2;
	cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_rg_cache_rereq_data <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	cache_rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_mem_req_sent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
	cache_rg_tlb_walk <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_tohost_addr <= `BSV_ASSIGNMENT_DELAY 64'h0000000080001000;
	cache_rg_tohost_value <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cache_rg_watch_tohost <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_wr_rsp_err <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cache_aw_events_register$EN)
	  cache_aw_events_register <= `BSV_ASSIGNMENT_DELAY
	      cache_aw_events_register$D_IN;
	if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_ctr_wr_rsps_pending_crg$EN)
	  cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_crg$D_IN;
	if (cache_rg_cache_rereq_data$EN)
	  cache_rg_cache_rereq_data <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cache_rereq_data$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_ddr4_ready$EN)
	  cache_rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_ddr4_ready$D_IN;
	if (cache_rg_ld_val$EN)
	  cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_mem_req_sent$EN)
	  cache_rg_mem_req_sent <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_mem_req_sent$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
	if (cache_rg_tlb_walk$EN)
	  cache_rg_tlb_walk <= `BSV_ASSIGNMENT_DELAY cache_rg_tlb_walk$D_IN;
	if (cache_rg_tohost_addr$EN)
	  cache_rg_tohost_addr <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_tohost_addr$D_IN;
	if (cache_rg_tohost_value$EN)
	  cache_rg_tohost_value <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_tohost_value$D_IN;
	if (cache_rg_watch_tohost$EN)
	  cache_rg_watch_tohost <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_watch_tohost$D_IN;
	if (cache_rg_wr_rsp_err$EN)
	  cache_rg_wr_rsp_err <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_wr_rsp_err$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_allow_cap$EN)
      cache_rg_allow_cap <= `BSV_ASSIGNMENT_DELAY cache_rg_allow_cap$D_IN;
    if (cache_rg_amo_funct5$EN)
      cache_rg_amo_funct5 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct5$D_IN;
    if (cache_rg_cset_cword_in_cache$EN)
      cache_rg_cset_cword_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_cset_cword_in_cache$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lower_word64_user$EN)
      cache_rg_lower_word64_user <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64_user$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_mstatus_MXR$EN)
      cache_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY cache_rg_mstatus_MXR$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_priv$EN)
      cache_rg_priv <= `BSV_ASSIGNMENT_DELAY cache_rg_priv$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_satp$EN)
      cache_rg_satp <= `BSV_ASSIGNMENT_DELAY cache_rg_satp$D_IN;
    if (cache_rg_sstatus_SUM$EN)
      cache_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY cache_rg_sstatus_SUM$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_victim_way$EN)
      cache_rg_victim_way <= `BSV_ASSIGNMENT_DELAY cache_rg_victim_way$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_aw_events_register = 14'h2AAA;
    cache_cfg_verbosity = 4'hA;
    cache_ctr_wr_rsps_pending_crg = 4'hA;
    cache_rg_addr = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_allow_cap = 1'h0;
    cache_rg_amo_funct5 = 5'h0A;
    cache_rg_cache_rereq_data = 1'h0;
    cache_rg_cset_cword_in_cache = 8'hAA;
    cache_rg_cset_in_cache = 6'h2A;
    cache_rg_ddr4_ready = 1'h0;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lower_word64_user = 1'h0;
    cache_rg_lrsc_pa = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_mem_req_sent = 1'h0;
    cache_rg_mstatus_MXR = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_priv = 2'h2;
    cache_rg_pte_pa = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_satp = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_sstatus_SUM = 1'h0;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 5'h0A;
    cache_rg_tlb_walk = 1'h0;
    cache_rg_tohost_addr = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_tohost_value = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_victim_way = 1'h0;
    cache_rg_watch_tohost = 1'h0;
    cache_rg_width_code = 3'h2;
    cache_rg_wr_rsp_err = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req)
	$display("MMU_Cache req for addr %x, data_not_instruction %d, resetting %d",
		 req_addr,
		 1'd1,
		 cache_f_reset_reqs$EMPTY_N);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_f_fabric_write_reqs$D_OUT[192:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", mem_req_wr_addr_awlen__h5832);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", _theResult___snd_snd_snd_val__h5872, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", mem_req_wr_data_wdata__h5908);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", mem_req_wr_data_wstrb__h5909);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", mem_req_wr_second_data_wuser__h5733, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h7576 = $stime;
	  #0;
	end
    v__h7570 = v__h7576 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h7570,
		 "D_MMU_Cache",
		 $signed(32'd64),
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h7671 = $stime;
	  #0;
	end
    v__h7665 = v__h7671 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h7665, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h7804 = $stime;
	  #0;
	end
    v__h7798 = v__h7804 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h7798,
		 "D_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_rg_satp[63:60] != 4'd0)
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 cache_rg_priv,
		 cache_rg_satp[63:60],
		 cache_rg_satp[59:44],
		 satp_pa__h2227,
		 cache_rg_addr[29:21],
		 cache_rg_addr[20:12],
		 cache_rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  CWord 0x%0h  Byte 0x%0h}",
		 cache_rg_addr[63:12],
		 cache_rg_addr[11:6],
		 cache_rg_addr[5:4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  !cache_ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_ram_state_and_ctag_cset$DOB[52])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[51:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  !cache_ram_state_and_ctag_cset$DOB[52])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_ram_state_and_ctag_cset$DOB[105])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  !cache_ram_state_and_ctag_cset$DOB[105])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_ram_state_and_ctag_cset$DOB[105])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[104:53]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  !cache_ram_state_and_ctag_cset$DOB[105])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(" 0x%0x", cache_ram_cword_set$DOB[128:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(" 0x%0x", cache_ram_cword_set$DOB[257:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_ram_state_and_ctag_cset$DOB[52] &&
	  cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d502 &&
	  cache_ram_state_and_ctag_cset$DOB[105] &&
	  cache_ram_state_and_ctag_cset_b_read__97_BITS__ETC___d508)
	$display("        ASSERTION ERROR: fn_test_cache_hit_or_miss: multiple hits in set at [%0d] and [%0d]",
		 $signed(32'd1),
		 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_tlb$mv_vm_get_xlate[203:202] == 2'd0)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_tlb$mv_vm_get_xlate[203:202] == 2'd1)
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd0 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "allow_cap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_tlb$mv_vm_get_xlate[201])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  !cache_tlb$mv_vm_get_xlate[201])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[200:137]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[136:131]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_tlb$mv_vm_get_xlate[130])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  !cache_tlb$mv_vm_get_xlate[130])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "pte_level: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "pte_pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$display("    fa_record_pte_A_D_updates:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577 &&
	  cache_tlb$mv_vm_get_xlate[203:202] == 2'd0)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd0)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write(", ", "allow_cap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577 &&
	  cache_tlb$mv_vm_get_xlate[201])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577 &&
	  !cache_tlb$mv_vm_get_xlate[201])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[200:137]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[136:131]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write(", ", "pte_level: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write(", ", "pte_pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write("'h%h", cache_tlb$mv_vm_get_xlate[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_tlb$mv_vm_get_xlate[130] &&
	  NOT_cache_cfg_verbosity_read__05_ULT_2_76___d577)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d802)
	begin
	  v__h35873 = $stime;
	  #0;
	end
    v__h35867 = v__h35873 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d802)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h35867,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_cword_set_b_read__47_BITS_128_TO_0_4_ETC___d757,
		 129'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5 == 5'b00010 &&
	  cache_ram_state_and_ctag_cset_b_read__97_BIT_5_ETC___d800)
	$display("        AMO LR: reserving PA 0x%0h",
		 cache_tlb$mv_vm_get_xlate[200:137]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d802)
	$display("        Read-hit: addr 0x%0h centry 0x%0h",
		 cache_rg_addr,
		 cache_ram_cword_set_b_read__47_BITS_128_TO_0_4_ETC___d757);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d816)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5 == 5'b00010 &&
	  NOT_cache_ram_state_and_ctag_cset_b_read__97_B_ETC___d820)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd1 &&
	  cache_tlb_mv_vm_get_xlate_cache_rg_satp_54_cac_ETC___d593 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_tlb$mv_vm_get_xlate[200:137]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_tlb_mv_vm_get_xlate_cache_rg_satp_54_ETC___d1094)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_tlb$mv_vm_get_xlate[200:137]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5 == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5 == 5'b00011 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("        AMO SC result = %0d", lrsc_result__h36710);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1107)
	$display("        Write-Cache-Hit: pa 0x%0h word128 0x%0h",
		 cache_tlb$mv_vm_get_xlate[200:137],
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1107)
	$write("        New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1107)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1107)
	$write(" 0x%0x",
	       IF_NOT_cache_ram_state_and_ctag_cset_b_read__9_ETC___d972);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1107)
	$write(" 0x%0x",
	       IF_cache_ram_state_and_ctag_cset_b_read__97_BI_ETC___d971);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1107)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	  NOT_cache_rg_op_55_EQ_2_57_99_OR_NOT_cache_rg__ETC___d1111)
	$display("        Write-Cache-Miss: pa 0x%0h word128 0x%0h",
		 cache_tlb$mv_vm_get_xlate[200:137],
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1119)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_55_EQ_0_56_98_AND_NOT_cache_rg_ETC___d1119)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_55_EQ_2_57_AND_cache_rg_amo_funct5_ETC___d1124)
	begin
	  v__h42198 = $stime;
	  #0;
	end
    v__h42192 = v__h42198 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_55_EQ_2_57_AND_cache_rg_amo_funct5_ETC___d1124)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h42192,
		 "D_MMU_Cache",
		 64'd0,
		 129'd1,
		 129'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_55_EQ_2_57_AND_cache_rg_amo_funct5_ETC___d1124)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1132)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1137)
	$display("        AMO: addr 0x%0h amo_f5 0x%0h width_code %0d is_unsigned %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct5,
		 cache_rg_width_code,
		 cache_rg_is_unsigned,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1137)
	$display("          PA 0x%0h ", cache_tlb$mv_vm_get_xlate[200:137]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1137)
	$display("          Cache word 0x%0h, load-result 0x%0h",
		 cache_ram_cword_set_b_read__47_BITS_128_TO_0_4_ETC___d757,
		 cache_ram_cword_set_b_read__47_BITS_128_TO_0_4_ETC___d757);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1137)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 cache_ram_cword_set_b_read__47_BITS_128_TO_0_4_ETC___d757,
		 cache_ram_cword_set_b_read__47_BITS_128_TO_0_4_ETC___d757,
		 { cache_rg_width_code == 3'b100 && cache_rg_st_amo_val[128],
		   upd_val__h42836 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1137)
	$write("          New CWord_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1137)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1137)
	$write(" 0x%0x",
	       IF_NOT_cache_ram_state_and_ctag_cset_b_read__9_ETC___d1074);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1137)
	$write(" 0x%0x",
	       IF_cache_ram_state_and_ctag_cset_b_read__97_BI_ETC___d1073);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map_m_is_mem_addr_cache_tlb_mv_vm_ge_ETC___d1137)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	  NOT_cache_rg_op_55_EQ_1_79_06_AND_NOT_cache_rg_ETC___d1140)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_tlb$mv_vm_get_xlate[200:137]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd1 &&
	  cache_tlb$mv_vm_get_xlate[203:202] != 2'd2 &&
	  !cache_soc_map$m_is_mem_addr &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	begin
	  v__h74105 = $stime;
	  #0;
	end
    v__h74099 = v__h74105 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	$display("%0d: %m.ma_ddr4_ready: Enabling MMU_Cache", v__h74099);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h48576 = $stime;
	  #0;
	end
    v__h48570 = v__h48576 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 2 PTE",
		 v__h48570,
		 "D_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h48765 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("%0t            To fabric: ", v__h48765);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", lev_2_pte_pa_w64_fa__h48627);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h49548 = $stime;
	  #0;
	end
    v__h49542 = v__h49548 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		 v__h49542,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa,
		 page_fault_exc_code__h5360);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h49286 = $stime;
	  #0;
	end
    v__h49280 = v__h49286 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		 v__h49280,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    Req for level 1 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h49703 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("%0t            To fabric: ", v__h49703);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", lev_1_pte_pa_w64_fa__h49582);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__192_BIT_7_200__ETC___d1258)
	begin
	  v__h49869 = $stime;
	  #0;
	end
    v__h49863 = v__h49869 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__192_BIT_7_200__ETC___d1258)
	$display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		 v__h49863,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  (cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
	   cache_masterPortShim_rff$D_OUT[22:14] != 9'd0))
	$display("    Invalid PTE: PPN[1] or PPN[0] is not zero; page fault %0d",
		 page_fault_exc_code__h5360);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__192_BIT_7_200__ETC___d1270)
	begin
	  v__h49986 = $stime;
	  #0;
	end
    v__h49980 = v__h49986 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__192_BIT_7_200__ETC___d1270)
	$display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		 v__h49980,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__192_BIT_7_200__ETC___d1270)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h49578);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h49468 = $stime;
	  #0;
	end
    v__h49462 = v__h49468 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		 v__h49462,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pte_pa,
		 access_exc_code__h5359);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h50661 = $stime;
	  #0;
	end
    v__h50655 = v__h50661 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		 v__h50655,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa,
		 page_fault_exc_code__h5360);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h50402 = $stime;
	  #0;
	end
    v__h50396 = v__h50402 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		 v__h50396,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    Req for level 0 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h50815 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("%0t            To fabric: ", v__h50815);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", lev_0_pte_pa_w64_fa__h50695);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1303)
	begin
	  v__h51098 = $stime;
	  #0;
	end
    v__h51092 = v__h51098 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1303)
	$display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		 v__h51092,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1303)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h49578);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1309)
	begin
	  v__h50981 = $stime;
	  #0;
	end
    v__h50975 = v__h50981 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__192_BITS_3_TO__ETC___d1309)
	$display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		 v__h50975,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  cache_masterPortShim_rff$D_OUT[22:14] != 9'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 page_fault_exc_code__h5360);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h50581 = $stime;
	  #0;
	end
    v__h50575 = v__h50581 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		 v__h50575,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pte_pa,
		 access_exc_code__h5359);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h51614 = $stime;
	  #0;
	end
    v__h51608 = v__h51614 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		 v__h51608,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa,
		 page_fault_exc_code__h5360);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h51694 = $stime;
	  #0;
	end
    v__h51688 = v__h51694 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		 v__h51688,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa,
		 page_fault_exc_code__h5360);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h51785 = $stime;
	  #0;
	end
    v__h51779 = v__h51785 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		 v__h51779,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    Addr Space page pa: 0x%0h", lev_1_PTN_pa__h49578);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h51534 = $stime;
	  #0;
	end
    v__h51528 = v__h51534 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		 v__h51528,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pte_pa,
		 access_exc_code__h5359);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h52095 = $stime;
	  #0;
	end
    v__h52089 = v__h52095 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_start_cache_refill: ", v__h52089, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h52378 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("%0t            To fabric: ", v__h52378);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cline_fabric_addr__h52285);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 8'd7);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    Victim way %0d; => CACHE_REFILL", tmp__h52439[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	begin
	  v__h53104 = $stime;
	  #0;
	end
    v__h53098 = v__h53104 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h53098,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h53362 = $stime;
	  #0;
	end
    v__h53356 = v__h53362 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h53356,
		 "D_MMU_Cache",
		 access_exc_code__h5359);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$display("        64b fabric: concat with rg_lower_word64: new_centry 0x%0x",
		 { tags__h53622, b__h53704 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  !cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$display("        Recording rdata in rg_lower_word64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_cset_cword_in_cache[1:0] == 2'd3 &&
	  (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_cset_cword_in_cache[1:0] == 2'd3 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$display("        Updating Cache cword_set 0x%0h, cword_in_cline %0d) old => new",
		 cache_rg_cset_cword_in_cache,
		 cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write(" 0x%0x", cache_ram_cword_set$DOB[128:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write(" 0x%0x", cache_ram_cword_set$DOB[257:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write(" 0x%0x",
	       IF_cache_rg_victim_way_353_THEN_cache_ram_cwor_ETC___d1431);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write(" 0x%0x",
	       IF_cache_rg_victim_way_353_THEN_cache_masterPo_ETC___d1432);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__05_ULE_2_361___d1362)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    fa_req_ram_B tagCSet [0x%0x] cword_set [0x%0d]",
		 cache_rg_addr[11:6],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ST_AMO_response &&
	  cache_rg_watch_tohost_442_AND_cache_rg_pa_348__ETC___d1448 &&
	  cache_rg_st_amo_val[127:1] == 127'd0)
	$display("PASS:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ST_AMO_response &&
	  cache_rg_watch_tohost_442_AND_cache_rg_pa_348__ETC___d1448 &&
	  cache_rg_st_amo_val[127:1] != 127'd0)
	$display("FAIL <test_%0d>:", test_num__h65273);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ST_AMO_response &&
	  cache_rg_watch_tohost_442_AND_cache_rg_pa_348__ETC___d1448)
	$display("  (<tohost>  addr %0h  data %0h)",
		 cache_rg_tohost_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_watch_tohost)
	begin
	  v__h74028 = $stime;
	  #0;
	end
    v__h74022 = v__h74028 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_watch_tohost)
	$display("%0d: %m.set_watch_tohost: watch %0d, addr %0h",
		 v__h74022,
		 set_watch_tohost_watch_tohost,
		 set_watch_tohost_tohost_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h65430 = $stime;
	  #0;
	end
    v__h65424 = v__h65430 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_io_read_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h65424,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h65659 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("%0t            To fabric: ", v__h65659);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", size_val__h67707, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h65760 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("%0t            To fabric: ", v__h65760);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 8'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h65972 = $stime;
	  #0;
	end
    v__h65966 = v__h65972 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h65966,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h66651 = $stime;
	  #0;
	end
    v__h66645 = v__h66651 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h66645,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h66278 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h66786 = $stime;
	  #0;
	end
    v__h66780 = v__h66786 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h66780,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h66481 = $stime;
	  #0;
	end
    v__h66475 = v__h66481 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h66475,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h66458 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h66947 = $stime;
	  #0;
	end
    v__h66941 = v__h66947 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h66941,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h67057 = $stime;
	  #0;
	end
    v__h67051 = v__h67057 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h67051,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { cache_rg_allow_cap && cache_rg_ld_val[128],
		   cache_rg_ld_val[127:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h67147 = $stime;
	  #0;
	end
    v__h67141 = v__h67147 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s: rl_io_write_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h67141,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h67383 = $stime;
	  #0;
	end
    v__h67377 = v__h67383 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s: rl_io_AMO_SC_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h67377,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h67527 = $stime;
	  #0;
	end
    v__h67521 = v__h67527 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_io_AMO_op_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h67521,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h67732 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("%0t            To fabric: ", v__h67732);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", size_val__h67707, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h67833 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("%0t            To fabric: ", v__h67833);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 8'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_25_EQ_0_61_OR_cach_ETC___d1467 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h67993 = $stime;
	  #0;
	end
    v__h67987 = v__h67993 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h67987,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full || cache_masterPortShim_rff$D_OUT[1]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h68430 = $stime;
	  #0;
	end
    v__h68424 = v__h68430 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full || cache_masterPortShim_rff$D_OUT[1]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s: rl_io_AMO_read_rsp; width_code 0x%0h  vaddr %0h  paddr %0h  word128 0x%0h",
		 v__h68424,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full || cache_masterPortShim_rff$D_OUT[1]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h69200 = $stime;
	  #0;
	end
    v__h69194 = v__h69200 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full || cache_masterPortShim_rff$D_OUT[1]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h69194,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h69178 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full || cache_masterPortShim_rff$D_OUT[1]) &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h68326 = $stime;
	  #0;
	end
    v__h68320 = v__h68326 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h68320,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h69840 = $stime;
	  #0;
	end
    v__h69834 = v__h69840 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h69834,
	       "D_MMU_Cache",
	       $unsigned(b__h48530));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	begin
	  v__h69882 = $stime;
	  #0;
	end
    v__h69876 = v__h69882 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h69876,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd1 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	begin
	  v__h7111 = $stime;
	  #0;
	end
    v__h7105 = v__h7111 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	$display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		 v__h7105,
		 "D_MMU_Cache",
		 $signed(32'd8),
		 $signed(32'd2),
		 $signed(32'd32),
		 $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h70810 = $stime;
	  #0;
	end
    v__h70804 = v__h70810 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("%0d: %m.req: op:", v__h70804);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(" width_code:%0d addr:0x%0h st_value:0x%0h",
	       req_width_code,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("    amo_funct5 = 0x%0h", req_amo_funct5);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  IF_cache_w_req_width_code_whas__672_THEN_cache_ETC___d1771)
	$display("    fa_req_ram_B tagCSet [0x%0x] cword_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	begin
	  v__h72562 = $stime;
	  #0;
	end
    v__h72556 = v__h72562 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && NOT_cache_cfg_verbosity_read__05_ULE_1_06___d407)
	$display("%0d: %s.tlb_flush", v__h72556, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && EN_tlb_flush)
	$display("Error: \"../..//src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2231, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_do_tlb_flush] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_do_reset_req)
	$display("Error: \"../..//src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2230, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_do_reset_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
	$display("Error: \"../..//src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2229, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_start_cache_refill] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_rl_rereq)
	$display("Error: \"../..//src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2228, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_rereq] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop)
	$display("Error: \"../..//src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 2227, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_cache_refill_rsps_loop] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkMMU_DCache

