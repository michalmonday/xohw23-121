//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1
// RDY_server_reset_response_get  O     1 reg
// imem_valid                     O     1
// imem_is_i32_not_i16            O     1 const
// imem_pc                        O    64 reg
// imem_instr                     O    32
// imem_exc                       O     1
// imem_exc_code                  O     6 reg
// imem_tval                      O    64 reg
// imem_events                    O   448
// RDY_imem_events                O     1 const
// imem_master_aw_canPeek         O     1 reg
// imem_master_aw_peek            O    98 reg
// RDY_imem_master_aw_peek        O     1 reg
// RDY_imem_master_aw_drop        O     1 reg
// imem_master_w_canPeek          O     1 reg
// imem_master_w_peek             O    74 reg
// RDY_imem_master_w_peek         O     1 reg
// RDY_imem_master_w_drop         O     1 reg
// imem_master_b_canPut           O     1 reg
// RDY_imem_master_b_put          O     1 reg
// imem_master_ar_canPeek         O     1 reg
// imem_master_ar_peek            O    98 reg
// RDY_imem_master_ar_peek        O     1 reg
// RDY_imem_master_ar_drop        O     1 reg
// imem_master_r_canPut           O     1 reg
// RDY_imem_master_r_put          O     1 reg
// dmem_valid                     O     1
// dmem_word128_fst               O     1
// dmem_word128_snd               O   128
// dmem_st_amo_val                O   128
// dmem_exc                       O     1
// dmem_exc_code                  O     6 reg
// dmem_events                    O   896
// RDY_dmem_events                O     1 const
// mem_master_aw_canPeek          O     1 reg
// mem_master_aw_peek             O    97 reg
// RDY_mem_master_aw_peek         O     1 reg
// RDY_mem_master_aw_drop         O     1 reg
// mem_master_w_canPeek           O     1 reg
// mem_master_w_peek              O    74 reg
// RDY_mem_master_w_peek          O     1 reg
// RDY_mem_master_w_drop          O     1 reg
// mem_master_b_canPut            O     1 reg
// RDY_mem_master_b_put           O     1 reg
// mem_master_ar_canPeek          O     1 reg
// mem_master_ar_peek             O    97 reg
// RDY_mem_master_ar_peek         O     1 reg
// RDY_mem_master_ar_drop         O     1 reg
// mem_master_r_canPut            O     1 reg
// RDY_mem_master_r_put           O     1 reg
// RDY_server_fence_i_request_put  O     1
// RDY_server_fence_i_response_get  O     1
// RDY_server_fence_request_put   O     1 reg
// RDY_server_fence_response_get  O     1
// RDY_sfence_vma_server_request_put  O     1 reg
// RDY_sfence_vma_server_response_get  O     1 reg
// dma_server_aw_canPut           O     1 const
// RDY_dma_server_aw_put          O     1 const
// dma_server_w_canPut            O     1 const
// RDY_dma_server_w_put           O     1 const
// dma_server_b_canPeek           O     1 const
// dma_server_b_peek              O     8 const
// RDY_dma_server_b_peek          O     1 const
// RDY_dma_server_b_drop          O     1 const
// dma_server_ar_canPut           O     1 const
// RDY_dma_server_ar_put          O     1 const
// dma_server_r_canPeek           O     1 const
// dma_server_r_peek              O   521 const
// RDY_dma_server_r_peek          O     1 const
// RDY_dma_server_r_drop          O     1 const
// RDY_set_watch_tohost           O     1 const
// mv_tohost_value                O    64 reg
// RDY_mv_tohost_value            O     1 const
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_req_f3                    I     3
// imem_req_addr                  I    64
// imem_req_priv                  I     2 reg
// imem_req_sstatus_SUM           I     1 reg
// imem_req_mstatus_MXR           I     1 reg
// imem_req_satp                  I    64 reg
// imem_master_b_put_val          I     7 reg
// imem_master_r_put_val          I    73 reg
// dmem_req_op                    I     2
// dmem_req_f3                    I     3
// dmem_req_is_unsigned           I     1 reg
// dmem_req_amo_funct5            I     5 reg
// dmem_req_addr                  I    64
// dmem_req_store_value           I   129
// dmem_req_priv                  I     2 reg
// dmem_req_sstatus_SUM           I     1 reg
// dmem_req_mstatus_MXR           I     1 reg
// dmem_req_satp                  I    64 reg
// mem_master_b_put_val           I     6 reg
// mem_master_r_put_val           I    72 reg
// server_fence_request_put       I     8 unused
// dma_server_aw_put_val          I    99 unused
// dma_server_w_put_val           I   577 unused
// dma_server_ar_put_val          I    99 unused
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_imem_req                    I     1
// EN_imem_commit                 I     1
// EN_imem_master_aw_drop         I     1
// EN_imem_master_w_drop          I     1
// EN_imem_master_b_put           I     1
// EN_imem_master_ar_drop         I     1
// EN_imem_master_r_put           I     1
// EN_dmem_req                    I     1
// EN_dmem_commit                 I     1
// EN_mem_master_aw_drop          I     1
// EN_mem_master_w_drop           I     1
// EN_mem_master_b_put            I     1
// EN_mem_master_ar_drop          I     1
// EN_mem_master_r_put            I     1
// EN_server_fence_i_request_put  I     1
// EN_server_fence_i_response_get  I     1
// EN_server_fence_request_put    I     1
// EN_server_fence_response_get   I     1
// EN_sfence_vma_server_request_put  I     1
// EN_sfence_vma_server_response_get  I     1
// EN_dma_server_aw_put           I     1 unused
// EN_dma_server_w_put            I     1 unused
// EN_dma_server_b_drop           I     1 unused
// EN_dma_server_ar_put           I     1 unused
// EN_dma_server_r_drop           I     1 unused
// EN_set_watch_tohost            I     1
// EN_ma_ddr4_ready               I     1
//
// Combinational paths from inputs to outputs:
//   EN_imem_commit -> imem_valid
//   EN_dmem_commit -> dmem_valid
//   EN_dmem_commit -> dmem_word128_fst
//   EN_dmem_commit -> dmem_word128_snd
//   EN_dmem_commit -> dmem_st_amo_val
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkNear_Mem(CLK,
		  RST_N,

		  EN_server_reset_request_put,
		  RDY_server_reset_request_put,

		  EN_server_reset_response_get,
		  RDY_server_reset_response_get,

		  imem_req_f3,
		  imem_req_addr,
		  imem_req_priv,
		  imem_req_sstatus_SUM,
		  imem_req_mstatus_MXR,
		  imem_req_satp,
		  EN_imem_req,

		  EN_imem_commit,

		  imem_valid,

		  imem_is_i32_not_i16,

		  imem_pc,

		  imem_instr,

		  imem_exc,

		  imem_exc_code,

		  imem_tval,

		  imem_events,
		  RDY_imem_events,

		  imem_master_aw_canPeek,

		  imem_master_aw_peek,
		  RDY_imem_master_aw_peek,

		  EN_imem_master_aw_drop,
		  RDY_imem_master_aw_drop,

		  imem_master_w_canPeek,

		  imem_master_w_peek,
		  RDY_imem_master_w_peek,

		  EN_imem_master_w_drop,
		  RDY_imem_master_w_drop,

		  imem_master_b_canPut,

		  imem_master_b_put_val,
		  EN_imem_master_b_put,
		  RDY_imem_master_b_put,

		  imem_master_ar_canPeek,

		  imem_master_ar_peek,
		  RDY_imem_master_ar_peek,

		  EN_imem_master_ar_drop,
		  RDY_imem_master_ar_drop,

		  imem_master_r_canPut,

		  imem_master_r_put_val,
		  EN_imem_master_r_put,
		  RDY_imem_master_r_put,

		  dmem_req_op,
		  dmem_req_f3,
		  dmem_req_is_unsigned,
		  dmem_req_amo_funct5,
		  dmem_req_addr,
		  dmem_req_store_value,
		  dmem_req_priv,
		  dmem_req_sstatus_SUM,
		  dmem_req_mstatus_MXR,
		  dmem_req_satp,
		  EN_dmem_req,

		  EN_dmem_commit,

		  dmem_valid,

		  dmem_word128_fst,

		  dmem_word128_snd,

		  dmem_st_amo_val,

		  dmem_exc,

		  dmem_exc_code,

		  dmem_events,
		  RDY_dmem_events,

		  mem_master_aw_canPeek,

		  mem_master_aw_peek,
		  RDY_mem_master_aw_peek,

		  EN_mem_master_aw_drop,
		  RDY_mem_master_aw_drop,

		  mem_master_w_canPeek,

		  mem_master_w_peek,
		  RDY_mem_master_w_peek,

		  EN_mem_master_w_drop,
		  RDY_mem_master_w_drop,

		  mem_master_b_canPut,

		  mem_master_b_put_val,
		  EN_mem_master_b_put,
		  RDY_mem_master_b_put,

		  mem_master_ar_canPeek,

		  mem_master_ar_peek,
		  RDY_mem_master_ar_peek,

		  EN_mem_master_ar_drop,
		  RDY_mem_master_ar_drop,

		  mem_master_r_canPut,

		  mem_master_r_put_val,
		  EN_mem_master_r_put,
		  RDY_mem_master_r_put,

		  EN_server_fence_i_request_put,
		  RDY_server_fence_i_request_put,

		  EN_server_fence_i_response_get,
		  RDY_server_fence_i_response_get,

		  server_fence_request_put,
		  EN_server_fence_request_put,
		  RDY_server_fence_request_put,

		  EN_server_fence_response_get,
		  RDY_server_fence_response_get,

		  EN_sfence_vma_server_request_put,
		  RDY_sfence_vma_server_request_put,

		  EN_sfence_vma_server_response_get,
		  RDY_sfence_vma_server_response_get,

		  dma_server_aw_canPut,

		  dma_server_aw_put_val,
		  EN_dma_server_aw_put,
		  RDY_dma_server_aw_put,

		  dma_server_w_canPut,

		  dma_server_w_put_val,
		  EN_dma_server_w_put,
		  RDY_dma_server_w_put,

		  dma_server_b_canPeek,

		  dma_server_b_peek,
		  RDY_dma_server_b_peek,

		  EN_dma_server_b_drop,
		  RDY_dma_server_b_drop,

		  dma_server_ar_canPut,

		  dma_server_ar_put_val,
		  EN_dma_server_ar_put,
		  RDY_dma_server_ar_put,

		  dma_server_r_canPeek,

		  dma_server_r_peek,
		  RDY_dma_server_r_peek,

		  EN_dma_server_r_drop,
		  RDY_dma_server_r_drop,

		  set_watch_tohost_watch_tohost,
		  set_watch_tohost_tohost_addr,
		  EN_set_watch_tohost,
		  RDY_set_watch_tohost,

		  mv_tohost_value,
		  RDY_mv_tohost_value,

		  EN_ma_ddr4_ready,
		  RDY_ma_ddr4_ready,

		  mv_status);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method imem_req
  input  [2 : 0] imem_req_f3;
  input  [63 : 0] imem_req_addr;
  input  [1 : 0] imem_req_priv;
  input  imem_req_sstatus_SUM;
  input  imem_req_mstatus_MXR;
  input  [63 : 0] imem_req_satp;
  input  EN_imem_req;

  // action method imem_commit
  input  EN_imem_commit;

  // value method imem_valid
  output imem_valid;

  // value method imem_is_i32_not_i16
  output imem_is_i32_not_i16;

  // value method imem_pc
  output [63 : 0] imem_pc;

  // value method imem_instr
  output [31 : 0] imem_instr;

  // value method imem_exc
  output imem_exc;

  // value method imem_exc_code
  output [5 : 0] imem_exc_code;

  // value method imem_tval
  output [63 : 0] imem_tval;

  // value method imem_events
  output [447 : 0] imem_events;
  output RDY_imem_events;

  // value method imem_master_aw_canPeek
  output imem_master_aw_canPeek;

  // value method imem_master_aw_peek
  output [97 : 0] imem_master_aw_peek;
  output RDY_imem_master_aw_peek;

  // action method imem_master_aw_drop
  input  EN_imem_master_aw_drop;
  output RDY_imem_master_aw_drop;

  // value method imem_master_w_canPeek
  output imem_master_w_canPeek;

  // value method imem_master_w_peek
  output [73 : 0] imem_master_w_peek;
  output RDY_imem_master_w_peek;

  // action method imem_master_w_drop
  input  EN_imem_master_w_drop;
  output RDY_imem_master_w_drop;

  // value method imem_master_b_canPut
  output imem_master_b_canPut;

  // action method imem_master_b_put
  input  [6 : 0] imem_master_b_put_val;
  input  EN_imem_master_b_put;
  output RDY_imem_master_b_put;

  // value method imem_master_ar_canPeek
  output imem_master_ar_canPeek;

  // value method imem_master_ar_peek
  output [97 : 0] imem_master_ar_peek;
  output RDY_imem_master_ar_peek;

  // action method imem_master_ar_drop
  input  EN_imem_master_ar_drop;
  output RDY_imem_master_ar_drop;

  // value method imem_master_r_canPut
  output imem_master_r_canPut;

  // action method imem_master_r_put
  input  [72 : 0] imem_master_r_put_val;
  input  EN_imem_master_r_put;
  output RDY_imem_master_r_put;

  // action method dmem_req
  input  [1 : 0] dmem_req_op;
  input  [2 : 0] dmem_req_f3;
  input  dmem_req_is_unsigned;
  input  [4 : 0] dmem_req_amo_funct5;
  input  [63 : 0] dmem_req_addr;
  input  [128 : 0] dmem_req_store_value;
  input  [1 : 0] dmem_req_priv;
  input  dmem_req_sstatus_SUM;
  input  dmem_req_mstatus_MXR;
  input  [63 : 0] dmem_req_satp;
  input  EN_dmem_req;

  // action method dmem_commit
  input  EN_dmem_commit;

  // value method dmem_valid
  output dmem_valid;

  // value method dmem_word128_fst
  output dmem_word128_fst;

  // value method dmem_word128_snd
  output [127 : 0] dmem_word128_snd;

  // value method dmem_st_amo_val
  output [127 : 0] dmem_st_amo_val;

  // value method dmem_exc
  output dmem_exc;

  // value method dmem_exc_code
  output [5 : 0] dmem_exc_code;

  // value method dmem_events
  output [895 : 0] dmem_events;
  output RDY_dmem_events;

  // value method mem_master_aw_canPeek
  output mem_master_aw_canPeek;

  // value method mem_master_aw_peek
  output [96 : 0] mem_master_aw_peek;
  output RDY_mem_master_aw_peek;

  // action method mem_master_aw_drop
  input  EN_mem_master_aw_drop;
  output RDY_mem_master_aw_drop;

  // value method mem_master_w_canPeek
  output mem_master_w_canPeek;

  // value method mem_master_w_peek
  output [73 : 0] mem_master_w_peek;
  output RDY_mem_master_w_peek;

  // action method mem_master_w_drop
  input  EN_mem_master_w_drop;
  output RDY_mem_master_w_drop;

  // value method mem_master_b_canPut
  output mem_master_b_canPut;

  // action method mem_master_b_put
  input  [5 : 0] mem_master_b_put_val;
  input  EN_mem_master_b_put;
  output RDY_mem_master_b_put;

  // value method mem_master_ar_canPeek
  output mem_master_ar_canPeek;

  // value method mem_master_ar_peek
  output [96 : 0] mem_master_ar_peek;
  output RDY_mem_master_ar_peek;

  // action method mem_master_ar_drop
  input  EN_mem_master_ar_drop;
  output RDY_mem_master_ar_drop;

  // value method mem_master_r_canPut
  output mem_master_r_canPut;

  // action method mem_master_r_put
  input  [71 : 0] mem_master_r_put_val;
  input  EN_mem_master_r_put;
  output RDY_mem_master_r_put;

  // action method server_fence_i_request_put
  input  EN_server_fence_i_request_put;
  output RDY_server_fence_i_request_put;

  // action method server_fence_i_response_get
  input  EN_server_fence_i_response_get;
  output RDY_server_fence_i_response_get;

  // action method server_fence_request_put
  input  [7 : 0] server_fence_request_put;
  input  EN_server_fence_request_put;
  output RDY_server_fence_request_put;

  // action method server_fence_response_get
  input  EN_server_fence_response_get;
  output RDY_server_fence_response_get;

  // action method sfence_vma_server_request_put
  input  EN_sfence_vma_server_request_put;
  output RDY_sfence_vma_server_request_put;

  // action method sfence_vma_server_response_get
  input  EN_sfence_vma_server_response_get;
  output RDY_sfence_vma_server_response_get;

  // value method dma_server_aw_canPut
  output dma_server_aw_canPut;

  // action method dma_server_aw_put
  input  [98 : 0] dma_server_aw_put_val;
  input  EN_dma_server_aw_put;
  output RDY_dma_server_aw_put;

  // value method dma_server_w_canPut
  output dma_server_w_canPut;

  // action method dma_server_w_put
  input  [576 : 0] dma_server_w_put_val;
  input  EN_dma_server_w_put;
  output RDY_dma_server_w_put;

  // value method dma_server_b_canPeek
  output dma_server_b_canPeek;

  // value method dma_server_b_peek
  output [7 : 0] dma_server_b_peek;
  output RDY_dma_server_b_peek;

  // action method dma_server_b_drop
  input  EN_dma_server_b_drop;
  output RDY_dma_server_b_drop;

  // value method dma_server_ar_canPut
  output dma_server_ar_canPut;

  // action method dma_server_ar_put
  input  [98 : 0] dma_server_ar_put_val;
  input  EN_dma_server_ar_put;
  output RDY_dma_server_ar_put;

  // value method dma_server_r_canPeek
  output dma_server_r_canPeek;

  // value method dma_server_r_peek
  output [520 : 0] dma_server_r_peek;
  output RDY_dma_server_r_peek;

  // action method dma_server_r_drop
  input  EN_dma_server_r_drop;
  output RDY_dma_server_r_drop;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [63 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [895 : 0] dmem_events;
  wire [520 : 0] dma_server_r_peek;
  wire [447 : 0] imem_events;
  wire [127 : 0] dmem_st_amo_val, dmem_word128_snd;
  wire [97 : 0] imem_master_ar_peek, imem_master_aw_peek;
  wire [96 : 0] mem_master_ar_peek, mem_master_aw_peek;
  wire [73 : 0] imem_master_w_peek, mem_master_w_peek;
  wire [63 : 0] imem_pc, imem_tval, mv_tohost_value;
  wire [31 : 0] imem_instr;
  wire [7 : 0] dma_server_b_peek, mv_status;
  wire [5 : 0] dmem_exc_code, imem_exc_code;
  wire RDY_dma_server_ar_put,
       RDY_dma_server_aw_put,
       RDY_dma_server_b_drop,
       RDY_dma_server_b_peek,
       RDY_dma_server_r_drop,
       RDY_dma_server_r_peek,
       RDY_dma_server_w_put,
       RDY_dmem_events,
       RDY_imem_events,
       RDY_imem_master_ar_drop,
       RDY_imem_master_ar_peek,
       RDY_imem_master_aw_drop,
       RDY_imem_master_aw_peek,
       RDY_imem_master_b_put,
       RDY_imem_master_r_put,
       RDY_imem_master_w_drop,
       RDY_imem_master_w_peek,
       RDY_ma_ddr4_ready,
       RDY_mem_master_ar_drop,
       RDY_mem_master_ar_peek,
       RDY_mem_master_aw_drop,
       RDY_mem_master_aw_peek,
       RDY_mem_master_b_put,
       RDY_mem_master_r_put,
       RDY_mem_master_w_drop,
       RDY_mem_master_w_peek,
       RDY_mv_tohost_value,
       RDY_server_fence_i_request_put,
       RDY_server_fence_i_response_get,
       RDY_server_fence_request_put,
       RDY_server_fence_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_watch_tohost,
       RDY_sfence_vma_server_request_put,
       RDY_sfence_vma_server_response_get,
       dma_server_ar_canPut,
       dma_server_aw_canPut,
       dma_server_b_canPeek,
       dma_server_r_canPeek,
       dma_server_w_canPut,
       dmem_exc,
       dmem_valid,
       dmem_word128_fst,
       imem_exc,
       imem_is_i32_not_i16,
       imem_master_ar_canPeek,
       imem_master_aw_canPeek,
       imem_master_b_canPut,
       imem_master_r_canPut,
       imem_master_w_canPeek,
       imem_valid,
       mem_master_ar_canPeek,
       mem_master_aw_canPeek,
       mem_master_b_canPut,
       mem_master_r_canPut,
       mem_master_w_canPeek;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  reg [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule dcache
  wire [128 : 0] dcache$req_st_value;
  wire [127 : 0] dcache$cword_snd, dcache$st_amo_val_snd;
  wire [96 : 0] dcache$mem_master_ar_peek, dcache$mem_master_aw_peek;
  wire [73 : 0] dcache$mem_master_w_peek;
  wire [71 : 0] dcache$mem_master_r_put_val;
  wire [63 : 0] dcache$mv_tohost_value,
		dcache$req_addr,
		dcache$req_satp,
		dcache$set_watch_tohost_tohost_addr;
  wire [13 : 0] dcache$events;
  wire [7 : 0] dcache$mv_status;
  wire [5 : 0] dcache$exc_code, dcache$mem_master_b_put_val;
  wire [4 : 0] dcache$req_amo_funct5;
  wire [3 : 0] dcache$set_verbosity_verbosity;
  wire [2 : 0] dcache$req_width_code;
  wire [1 : 0] dcache$req_op, dcache$req_priv;
  wire dcache$EN_commit,
       dcache$EN_ma_ddr4_ready,
       dcache$EN_mem_master_ar_drop,
       dcache$EN_mem_master_aw_drop,
       dcache$EN_mem_master_b_put,
       dcache$EN_mem_master_r_put,
       dcache$EN_mem_master_w_drop,
       dcache$EN_req,
       dcache$EN_server_flush_request_put,
       dcache$EN_server_flush_response_get,
       dcache$EN_server_reset_request_put,
       dcache$EN_server_reset_response_get,
       dcache$EN_set_verbosity,
       dcache$EN_set_watch_tohost,
       dcache$EN_tlb_flush,
       dcache$RDY_mem_master_ar_drop,
       dcache$RDY_mem_master_ar_peek,
       dcache$RDY_mem_master_aw_drop,
       dcache$RDY_mem_master_aw_peek,
       dcache$RDY_mem_master_b_put,
       dcache$RDY_mem_master_r_put,
       dcache$RDY_mem_master_w_drop,
       dcache$RDY_mem_master_w_peek,
       dcache$RDY_server_flush_request_put,
       dcache$RDY_server_flush_response_get,
       dcache$RDY_server_reset_request_put,
       dcache$RDY_server_reset_response_get,
       dcache$cword_fst,
       dcache$exc,
       dcache$mem_master_ar_canPeek,
       dcache$mem_master_aw_canPeek,
       dcache$mem_master_b_canPut,
       dcache$mem_master_r_canPut,
       dcache$mem_master_w_canPeek,
       dcache$req_is_unsigned,
       dcache$req_mstatus_MXR,
       dcache$req_sstatus_SUM,
       dcache$set_watch_tohost_watch_tohost,
       dcache$valid;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_sfence_vma_reqs
  wire f_sfence_vma_reqs$CLR,
       f_sfence_vma_reqs$DEQ,
       f_sfence_vma_reqs$EMPTY_N,
       f_sfence_vma_reqs$ENQ,
       f_sfence_vma_reqs$FULL_N;

  // ports of submodule f_sfence_vma_rsps
  wire f_sfence_vma_rsps$CLR,
       f_sfence_vma_rsps$DEQ,
       f_sfence_vma_rsps$EMPTY_N,
       f_sfence_vma_rsps$ENQ,
       f_sfence_vma_rsps$FULL_N;

  // ports of submodule icache
  wire [128 : 0] icache$req_st_value;
  wire [127 : 0] icache$cword_snd;
  wire [97 : 0] icache$mem_master_ar_peek, icache$mem_master_aw_peek;
  wire [73 : 0] icache$mem_master_w_peek;
  wire [72 : 0] icache$mem_master_r_put_val;
  wire [63 : 0] icache$addr,
		icache$req_addr,
		icache$req_satp,
		icache$set_watch_tohost_tohost_addr;
  wire [13 : 0] icache$events;
  wire [6 : 0] icache$mem_master_b_put_val;
  wire [5 : 0] icache$exc_code;
  wire [4 : 0] icache$req_amo_funct5;
  wire [3 : 0] icache$set_verbosity_verbosity;
  wire [2 : 0] icache$req_width_code;
  wire [1 : 0] icache$req_op, icache$req_priv;
  wire icache$EN_commit,
       icache$EN_ma_ddr4_ready,
       icache$EN_mem_master_ar_drop,
       icache$EN_mem_master_aw_drop,
       icache$EN_mem_master_b_put,
       icache$EN_mem_master_r_put,
       icache$EN_mem_master_w_drop,
       icache$EN_req,
       icache$EN_server_flush_request_put,
       icache$EN_server_flush_response_get,
       icache$EN_server_reset_request_put,
       icache$EN_server_reset_response_get,
       icache$EN_set_verbosity,
       icache$EN_set_watch_tohost,
       icache$EN_tlb_flush,
       icache$RDY_mem_master_ar_drop,
       icache$RDY_mem_master_ar_peek,
       icache$RDY_mem_master_aw_drop,
       icache$RDY_mem_master_aw_peek,
       icache$RDY_mem_master_b_put,
       icache$RDY_mem_master_r_put,
       icache$RDY_mem_master_w_drop,
       icache$RDY_mem_master_w_peek,
       icache$RDY_server_flush_request_put,
       icache$RDY_server_flush_response_get,
       icache$RDY_server_reset_request_put,
       icache$RDY_server_reset_response_get,
       icache$exc,
       icache$mem_master_ar_canPeek,
       icache$mem_master_aw_canPeek,
       icache$mem_master_b_canPut,
       icache$mem_master_r_canPut,
       icache$mem_master_w_canPeek,
       icache$req_is_unsigned,
       icache$req_mstatus_MXR,
       icache$req_sstatus_SUM,
       icache$set_watch_tohost_watch_tohost,
       icache$valid;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_sfence_vma,
       CAN_FIRE_dma_server_ar_put,
       CAN_FIRE_dma_server_aw_put,
       CAN_FIRE_dma_server_b_drop,
       CAN_FIRE_dma_server_r_drop,
       CAN_FIRE_dma_server_w_put,
       CAN_FIRE_dmem_commit,
       CAN_FIRE_dmem_req,
       CAN_FIRE_imem_commit,
       CAN_FIRE_imem_master_ar_drop,
       CAN_FIRE_imem_master_aw_drop,
       CAN_FIRE_imem_master_b_put,
       CAN_FIRE_imem_master_r_put,
       CAN_FIRE_imem_master_w_drop,
       CAN_FIRE_imem_req,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_mem_master_ar_drop,
       CAN_FIRE_mem_master_aw_drop,
       CAN_FIRE_mem_master_b_put,
       CAN_FIRE_mem_master_r_put,
       CAN_FIRE_mem_master_w_drop,
       CAN_FIRE_server_fence_i_request_put,
       CAN_FIRE_server_fence_i_response_get,
       CAN_FIRE_server_fence_request_put,
       CAN_FIRE_server_fence_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_watch_tohost,
       CAN_FIRE_sfence_vma_server_request_put,
       CAN_FIRE_sfence_vma_server_response_get,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_sfence_vma,
       WILL_FIRE_dma_server_ar_put,
       WILL_FIRE_dma_server_aw_put,
       WILL_FIRE_dma_server_b_drop,
       WILL_FIRE_dma_server_r_drop,
       WILL_FIRE_dma_server_w_put,
       WILL_FIRE_dmem_commit,
       WILL_FIRE_dmem_req,
       WILL_FIRE_imem_commit,
       WILL_FIRE_imem_master_ar_drop,
       WILL_FIRE_imem_master_aw_drop,
       WILL_FIRE_imem_master_b_put,
       WILL_FIRE_imem_master_r_put,
       WILL_FIRE_imem_master_w_drop,
       WILL_FIRE_imem_req,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_mem_master_ar_drop,
       WILL_FIRE_mem_master_aw_drop,
       WILL_FIRE_mem_master_b_put,
       WILL_FIRE_mem_master_r_put,
       WILL_FIRE_mem_master_w_drop,
       WILL_FIRE_server_fence_i_request_put,
       WILL_FIRE_server_fence_i_response_get,
       WILL_FIRE_server_fence_request_put,
       WILL_FIRE_server_fence_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_watch_tohost,
       WILL_FIRE_sfence_vma_server_request_put,
       WILL_FIRE_sfence_vma_server_response_get;

  // inputs to muxes for submodule ports
  wire MUX_rg_state$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1168;
  reg [31 : 0] v__h1322;
  reg [31 : 0] v__h1162;
  reg [31 : 0] v__h1316;
  // synopsys translate_on

  // remaining internal signals
  wire [63 : 0] x__h1955,
		x__h2002,
		x__h2009,
		x__h2016,
		x__h2035,
		x__h2042,
		x__h2049,
		x__h2598,
		x__h2649,
		x__h2656,
		x__h2663,
		x__h2670,
		x__h2677,
		x__h2684,
		x__h2691,
		x__h2698,
		x__h2705,
		x__h2712,
		x__h2719,
		x__h2726,
		x__h2733;
  wire NOT_cfg_verbosity_read_ULE_1___d9;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = rg_state == 2'd2 ;
  assign CAN_FIRE_server_reset_request_put = rg_state == 2'd2 ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method imem_req
  assign CAN_FIRE_imem_req = 1'd1 ;
  assign WILL_FIRE_imem_req = EN_imem_req ;

  // action method imem_commit
  assign CAN_FIRE_imem_commit = 1'd1 ;
  assign WILL_FIRE_imem_commit = EN_imem_commit ;

  // value method imem_valid
  assign imem_valid = icache$valid ;

  // value method imem_is_i32_not_i16
  assign imem_is_i32_not_i16 = 1'd1 ;

  // value method imem_pc
  assign imem_pc = icache$addr ;

  // value method imem_instr
  assign imem_instr = icache$cword_snd[31:0] ;

  // value method imem_exc
  assign imem_exc = icache$exc ;

  // value method imem_exc_code
  assign imem_exc_code = icache$exc_code ;

  // value method imem_tval
  assign imem_tval = icache$addr ;

  // value method imem_events
  assign imem_events =
	     { x__h1955,
	       x__h2002,
	       x__h2009,
	       x__h2016,
	       x__h2035,
	       x__h2042,
	       x__h2049 } ;
  assign RDY_imem_events = 1'd1 ;

  // value method imem_master_aw_canPeek
  assign imem_master_aw_canPeek = icache$mem_master_aw_canPeek ;

  // value method imem_master_aw_peek
  assign imem_master_aw_peek = icache$mem_master_aw_peek ;
  assign RDY_imem_master_aw_peek = icache$RDY_mem_master_aw_peek ;

  // action method imem_master_aw_drop
  assign RDY_imem_master_aw_drop = icache$RDY_mem_master_aw_drop ;
  assign CAN_FIRE_imem_master_aw_drop = icache$RDY_mem_master_aw_drop ;
  assign WILL_FIRE_imem_master_aw_drop = EN_imem_master_aw_drop ;

  // value method imem_master_w_canPeek
  assign imem_master_w_canPeek = icache$mem_master_w_canPeek ;

  // value method imem_master_w_peek
  assign imem_master_w_peek = icache$mem_master_w_peek ;
  assign RDY_imem_master_w_peek = icache$RDY_mem_master_w_peek ;

  // action method imem_master_w_drop
  assign RDY_imem_master_w_drop = icache$RDY_mem_master_w_drop ;
  assign CAN_FIRE_imem_master_w_drop = icache$RDY_mem_master_w_drop ;
  assign WILL_FIRE_imem_master_w_drop = EN_imem_master_w_drop ;

  // value method imem_master_b_canPut
  assign imem_master_b_canPut = icache$mem_master_b_canPut ;

  // action method imem_master_b_put
  assign RDY_imem_master_b_put = icache$RDY_mem_master_b_put ;
  assign CAN_FIRE_imem_master_b_put = icache$RDY_mem_master_b_put ;
  assign WILL_FIRE_imem_master_b_put = EN_imem_master_b_put ;

  // value method imem_master_ar_canPeek
  assign imem_master_ar_canPeek = icache$mem_master_ar_canPeek ;

  // value method imem_master_ar_peek
  assign imem_master_ar_peek = icache$mem_master_ar_peek ;
  assign RDY_imem_master_ar_peek = icache$RDY_mem_master_ar_peek ;

  // action method imem_master_ar_drop
  assign RDY_imem_master_ar_drop = icache$RDY_mem_master_ar_drop ;
  assign CAN_FIRE_imem_master_ar_drop = icache$RDY_mem_master_ar_drop ;
  assign WILL_FIRE_imem_master_ar_drop = EN_imem_master_ar_drop ;

  // value method imem_master_r_canPut
  assign imem_master_r_canPut = icache$mem_master_r_canPut ;

  // action method imem_master_r_put
  assign RDY_imem_master_r_put = icache$RDY_mem_master_r_put ;
  assign CAN_FIRE_imem_master_r_put = icache$RDY_mem_master_r_put ;
  assign WILL_FIRE_imem_master_r_put = EN_imem_master_r_put ;

  // action method dmem_req
  assign CAN_FIRE_dmem_req = 1'd1 ;
  assign WILL_FIRE_dmem_req = EN_dmem_req ;

  // action method dmem_commit
  assign CAN_FIRE_dmem_commit = 1'd1 ;
  assign WILL_FIRE_dmem_commit = EN_dmem_commit ;

  // value method dmem_valid
  assign dmem_valid = dcache$valid ;

  // value method dmem_word128_fst
  assign dmem_word128_fst = dcache$cword_fst ;

  // value method dmem_word128_snd
  assign dmem_word128_snd = dcache$cword_snd ;

  // value method dmem_st_amo_val
  assign dmem_st_amo_val = dcache$st_amo_val_snd ;

  // value method dmem_exc
  assign dmem_exc = dcache$exc ;

  // value method dmem_exc_code
  assign dmem_exc_code = dcache$exc_code ;

  // value method dmem_events
  assign dmem_events =
	     { x__h2598,
	       x__h2649,
	       x__h2656,
	       x__h2663,
	       x__h2670,
	       x__h2677,
	       x__h2684,
	       x__h2691,
	       x__h2698,
	       x__h2705,
	       x__h2712,
	       x__h2719,
	       x__h2726,
	       x__h2733 } ;
  assign RDY_dmem_events = 1'd1 ;

  // value method mem_master_aw_canPeek
  assign mem_master_aw_canPeek = dcache$mem_master_aw_canPeek ;

  // value method mem_master_aw_peek
  assign mem_master_aw_peek = dcache$mem_master_aw_peek ;
  assign RDY_mem_master_aw_peek = dcache$RDY_mem_master_aw_peek ;

  // action method mem_master_aw_drop
  assign RDY_mem_master_aw_drop = dcache$RDY_mem_master_aw_drop ;
  assign CAN_FIRE_mem_master_aw_drop = dcache$RDY_mem_master_aw_drop ;
  assign WILL_FIRE_mem_master_aw_drop = EN_mem_master_aw_drop ;

  // value method mem_master_w_canPeek
  assign mem_master_w_canPeek = dcache$mem_master_w_canPeek ;

  // value method mem_master_w_peek
  assign mem_master_w_peek = dcache$mem_master_w_peek ;
  assign RDY_mem_master_w_peek = dcache$RDY_mem_master_w_peek ;

  // action method mem_master_w_drop
  assign RDY_mem_master_w_drop = dcache$RDY_mem_master_w_drop ;
  assign CAN_FIRE_mem_master_w_drop = dcache$RDY_mem_master_w_drop ;
  assign WILL_FIRE_mem_master_w_drop = EN_mem_master_w_drop ;

  // value method mem_master_b_canPut
  assign mem_master_b_canPut = dcache$mem_master_b_canPut ;

  // action method mem_master_b_put
  assign RDY_mem_master_b_put = dcache$RDY_mem_master_b_put ;
  assign CAN_FIRE_mem_master_b_put = dcache$RDY_mem_master_b_put ;
  assign WILL_FIRE_mem_master_b_put = EN_mem_master_b_put ;

  // value method mem_master_ar_canPeek
  assign mem_master_ar_canPeek = dcache$mem_master_ar_canPeek ;

  // value method mem_master_ar_peek
  assign mem_master_ar_peek = dcache$mem_master_ar_peek ;
  assign RDY_mem_master_ar_peek = dcache$RDY_mem_master_ar_peek ;

  // action method mem_master_ar_drop
  assign RDY_mem_master_ar_drop = dcache$RDY_mem_master_ar_drop ;
  assign CAN_FIRE_mem_master_ar_drop = dcache$RDY_mem_master_ar_drop ;
  assign WILL_FIRE_mem_master_ar_drop = EN_mem_master_ar_drop ;

  // value method mem_master_r_canPut
  assign mem_master_r_canPut = dcache$mem_master_r_canPut ;

  // action method mem_master_r_put
  assign RDY_mem_master_r_put = dcache$RDY_mem_master_r_put ;
  assign CAN_FIRE_mem_master_r_put = dcache$RDY_mem_master_r_put ;
  assign WILL_FIRE_mem_master_r_put = EN_mem_master_r_put ;

  // action method server_fence_i_request_put
  assign RDY_server_fence_i_request_put =
	     icache$RDY_server_flush_request_put &&
	     dcache$RDY_server_flush_request_put ;
  assign CAN_FIRE_server_fence_i_request_put =
	     icache$RDY_server_flush_request_put &&
	     dcache$RDY_server_flush_request_put ;
  assign WILL_FIRE_server_fence_i_request_put =
	     EN_server_fence_i_request_put ;

  // action method server_fence_i_response_get
  assign RDY_server_fence_i_response_get =
	     icache$RDY_server_flush_response_get &&
	     dcache$RDY_server_flush_response_get ;
  assign CAN_FIRE_server_fence_i_response_get =
	     icache$RDY_server_flush_response_get &&
	     dcache$RDY_server_flush_response_get ;
  assign WILL_FIRE_server_fence_i_response_get =
	     EN_server_fence_i_response_get ;

  // action method server_fence_request_put
  assign RDY_server_fence_request_put = dcache$RDY_server_flush_request_put ;
  assign CAN_FIRE_server_fence_request_put =
	     dcache$RDY_server_flush_request_put ;
  assign WILL_FIRE_server_fence_request_put = EN_server_fence_request_put ;

  // action method server_fence_response_get
  assign RDY_server_fence_response_get =
	     dcache$RDY_server_flush_response_get ;
  assign CAN_FIRE_server_fence_response_get =
	     dcache$RDY_server_flush_response_get ;
  assign WILL_FIRE_server_fence_response_get = EN_server_fence_response_get ;

  // action method sfence_vma_server_request_put
  assign RDY_sfence_vma_server_request_put = f_sfence_vma_reqs$FULL_N ;
  assign CAN_FIRE_sfence_vma_server_request_put = f_sfence_vma_reqs$FULL_N ;
  assign WILL_FIRE_sfence_vma_server_request_put =
	     EN_sfence_vma_server_request_put ;

  // action method sfence_vma_server_response_get
  assign RDY_sfence_vma_server_response_get = f_sfence_vma_rsps$EMPTY_N ;
  assign CAN_FIRE_sfence_vma_server_response_get = f_sfence_vma_rsps$EMPTY_N ;
  assign WILL_FIRE_sfence_vma_server_response_get =
	     EN_sfence_vma_server_response_get ;

  // value method dma_server_aw_canPut
  assign dma_server_aw_canPut = 1'd1 ;

  // action method dma_server_aw_put
  assign RDY_dma_server_aw_put = 1'd1 ;
  assign CAN_FIRE_dma_server_aw_put = 1'd1 ;
  assign WILL_FIRE_dma_server_aw_put = EN_dma_server_aw_put ;

  // value method dma_server_w_canPut
  assign dma_server_w_canPut = 1'd1 ;

  // action method dma_server_w_put
  assign RDY_dma_server_w_put = 1'd1 ;
  assign CAN_FIRE_dma_server_w_put = 1'd1 ;
  assign WILL_FIRE_dma_server_w_put = EN_dma_server_w_put ;

  // value method dma_server_b_canPeek
  assign dma_server_b_canPeek = 1'd0 ;

  // value method dma_server_b_peek
  assign dma_server_b_peek = 8'hAA ;
  assign RDY_dma_server_b_peek = 1'd0 ;

  // action method dma_server_b_drop
  assign RDY_dma_server_b_drop = 1'd0 ;
  assign CAN_FIRE_dma_server_b_drop = 1'd0 ;
  assign WILL_FIRE_dma_server_b_drop = EN_dma_server_b_drop ;

  // value method dma_server_ar_canPut
  assign dma_server_ar_canPut = 1'd1 ;

  // action method dma_server_ar_put
  assign RDY_dma_server_ar_put = 1'd1 ;
  assign CAN_FIRE_dma_server_ar_put = 1'd1 ;
  assign WILL_FIRE_dma_server_ar_put = EN_dma_server_ar_put ;

  // value method dma_server_r_canPeek
  assign dma_server_r_canPeek = 1'd0 ;

  // value method dma_server_r_peek
  assign dma_server_r_peek =
	     521'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign RDY_dma_server_r_peek = 1'd0 ;

  // action method dma_server_r_drop
  assign RDY_dma_server_r_drop = 1'd0 ;
  assign CAN_FIRE_dma_server_r_drop = 1'd0 ;
  assign WILL_FIRE_dma_server_r_drop = EN_dma_server_r_drop ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = dcache$mv_tohost_value ;
  assign RDY_mv_tohost_value = 1'd1 ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = dcache$mv_status ;

  // submodule dcache
  mkMMU_DCache dcache(.CLK(CLK),
		      .RST_N(RST_N),
		      .mem_master_b_put_val(dcache$mem_master_b_put_val),
		      .mem_master_r_put_val(dcache$mem_master_r_put_val),
		      .req_addr(dcache$req_addr),
		      .req_amo_funct5(dcache$req_amo_funct5),
		      .req_is_unsigned(dcache$req_is_unsigned),
		      .req_mstatus_MXR(dcache$req_mstatus_MXR),
		      .req_op(dcache$req_op),
		      .req_priv(dcache$req_priv),
		      .req_satp(dcache$req_satp),
		      .req_sstatus_SUM(dcache$req_sstatus_SUM),
		      .req_st_value(dcache$req_st_value),
		      .req_width_code(dcache$req_width_code),
		      .set_verbosity_verbosity(dcache$set_verbosity_verbosity),
		      .set_watch_tohost_tohost_addr(dcache$set_watch_tohost_tohost_addr),
		      .set_watch_tohost_watch_tohost(dcache$set_watch_tohost_watch_tohost),
		      .EN_set_verbosity(dcache$EN_set_verbosity),
		      .EN_server_reset_request_put(dcache$EN_server_reset_request_put),
		      .EN_server_reset_response_get(dcache$EN_server_reset_response_get),
		      .EN_req(dcache$EN_req),
		      .EN_commit(dcache$EN_commit),
		      .EN_server_flush_request_put(dcache$EN_server_flush_request_put),
		      .EN_server_flush_response_get(dcache$EN_server_flush_response_get),
		      .EN_tlb_flush(dcache$EN_tlb_flush),
		      .EN_mem_master_aw_drop(dcache$EN_mem_master_aw_drop),
		      .EN_mem_master_w_drop(dcache$EN_mem_master_w_drop),
		      .EN_mem_master_b_put(dcache$EN_mem_master_b_put),
		      .EN_mem_master_ar_drop(dcache$EN_mem_master_ar_drop),
		      .EN_mem_master_r_put(dcache$EN_mem_master_r_put),
		      .EN_set_watch_tohost(dcache$EN_set_watch_tohost),
		      .EN_ma_ddr4_ready(dcache$EN_ma_ddr4_ready),
		      .RDY_set_verbosity(),
		      .RDY_server_reset_request_put(dcache$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(dcache$RDY_server_reset_response_get),
		      .valid(dcache$valid),
		      .addr(),
		      .cword_fst(dcache$cword_fst),
		      .cword_snd(dcache$cword_snd),
		      .st_amo_val_fst(),
		      .st_amo_val_snd(dcache$st_amo_val_snd),
		      .exc(dcache$exc),
		      .exc_code(dcache$exc_code),
		      .RDY_server_flush_request_put(dcache$RDY_server_flush_request_put),
		      .RDY_server_flush_response_get(dcache$RDY_server_flush_response_get),
		      .RDY_tlb_flush(),
		      .mem_master_aw_canPeek(dcache$mem_master_aw_canPeek),
		      .mem_master_aw_peek(dcache$mem_master_aw_peek),
		      .RDY_mem_master_aw_peek(dcache$RDY_mem_master_aw_peek),
		      .RDY_mem_master_aw_drop(dcache$RDY_mem_master_aw_drop),
		      .mem_master_w_canPeek(dcache$mem_master_w_canPeek),
		      .mem_master_w_peek(dcache$mem_master_w_peek),
		      .RDY_mem_master_w_peek(dcache$RDY_mem_master_w_peek),
		      .RDY_mem_master_w_drop(dcache$RDY_mem_master_w_drop),
		      .mem_master_b_canPut(dcache$mem_master_b_canPut),
		      .RDY_mem_master_b_put(dcache$RDY_mem_master_b_put),
		      .mem_master_ar_canPeek(dcache$mem_master_ar_canPeek),
		      .mem_master_ar_peek(dcache$mem_master_ar_peek),
		      .RDY_mem_master_ar_peek(dcache$RDY_mem_master_ar_peek),
		      .RDY_mem_master_ar_drop(dcache$RDY_mem_master_ar_drop),
		      .mem_master_r_canPut(dcache$mem_master_r_canPut),
		      .RDY_mem_master_r_put(dcache$RDY_mem_master_r_put),
		      .events(dcache$events),
		      .RDY_events(),
		      .RDY_set_watch_tohost(),
		      .mv_tohost_value(dcache$mv_tohost_value),
		      .RDY_mv_tohost_value(),
		      .RDY_ma_ddr4_ready(),
		      .mv_status(dcache$mv_status));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(1'd1)) f_reset_rsps(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_rsps$ENQ),
					.DEQ(f_reset_rsps$DEQ),
					.CLR(f_reset_rsps$CLR),
					.FULL_N(f_reset_rsps$FULL_N),
					.EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_sfence_vma_reqs
  FIFO20 #(.guarded(1'd1)) f_sfence_vma_reqs(.RST(RST_N),
					     .CLK(CLK),
					     .ENQ(f_sfence_vma_reqs$ENQ),
					     .DEQ(f_sfence_vma_reqs$DEQ),
					     .CLR(f_sfence_vma_reqs$CLR),
					     .FULL_N(f_sfence_vma_reqs$FULL_N),
					     .EMPTY_N(f_sfence_vma_reqs$EMPTY_N));

  // submodule f_sfence_vma_rsps
  FIFO20 #(.guarded(1'd1)) f_sfence_vma_rsps(.RST(RST_N),
					     .CLK(CLK),
					     .ENQ(f_sfence_vma_rsps$ENQ),
					     .DEQ(f_sfence_vma_rsps$DEQ),
					     .CLR(f_sfence_vma_rsps$CLR),
					     .FULL_N(f_sfence_vma_rsps$FULL_N),
					     .EMPTY_N(f_sfence_vma_rsps$EMPTY_N));

  // submodule icache
  mkMMU_ICache icache(.CLK(CLK),
		      .RST_N(RST_N),
		      .mem_master_b_put_val(icache$mem_master_b_put_val),
		      .mem_master_r_put_val(icache$mem_master_r_put_val),
		      .req_addr(icache$req_addr),
		      .req_amo_funct5(icache$req_amo_funct5),
		      .req_is_unsigned(icache$req_is_unsigned),
		      .req_mstatus_MXR(icache$req_mstatus_MXR),
		      .req_op(icache$req_op),
		      .req_priv(icache$req_priv),
		      .req_satp(icache$req_satp),
		      .req_sstatus_SUM(icache$req_sstatus_SUM),
		      .req_st_value(icache$req_st_value),
		      .req_width_code(icache$req_width_code),
		      .set_verbosity_verbosity(icache$set_verbosity_verbosity),
		      .set_watch_tohost_tohost_addr(icache$set_watch_tohost_tohost_addr),
		      .set_watch_tohost_watch_tohost(icache$set_watch_tohost_watch_tohost),
		      .EN_set_verbosity(icache$EN_set_verbosity),
		      .EN_server_reset_request_put(icache$EN_server_reset_request_put),
		      .EN_server_reset_response_get(icache$EN_server_reset_response_get),
		      .EN_req(icache$EN_req),
		      .EN_commit(icache$EN_commit),
		      .EN_server_flush_request_put(icache$EN_server_flush_request_put),
		      .EN_server_flush_response_get(icache$EN_server_flush_response_get),
		      .EN_tlb_flush(icache$EN_tlb_flush),
		      .EN_mem_master_aw_drop(icache$EN_mem_master_aw_drop),
		      .EN_mem_master_w_drop(icache$EN_mem_master_w_drop),
		      .EN_mem_master_b_put(icache$EN_mem_master_b_put),
		      .EN_mem_master_ar_drop(icache$EN_mem_master_ar_drop),
		      .EN_mem_master_r_put(icache$EN_mem_master_r_put),
		      .EN_set_watch_tohost(icache$EN_set_watch_tohost),
		      .EN_ma_ddr4_ready(icache$EN_ma_ddr4_ready),
		      .RDY_set_verbosity(),
		      .RDY_server_reset_request_put(icache$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(icache$RDY_server_reset_response_get),
		      .valid(icache$valid),
		      .addr(icache$addr),
		      .cword_fst(),
		      .cword_snd(icache$cword_snd),
		      .st_amo_val_fst(),
		      .st_amo_val_snd(),
		      .exc(icache$exc),
		      .exc_code(icache$exc_code),
		      .RDY_server_flush_request_put(icache$RDY_server_flush_request_put),
		      .RDY_server_flush_response_get(icache$RDY_server_flush_response_get),
		      .RDY_tlb_flush(),
		      .mem_master_aw_canPeek(icache$mem_master_aw_canPeek),
		      .mem_master_aw_peek(icache$mem_master_aw_peek),
		      .RDY_mem_master_aw_peek(icache$RDY_mem_master_aw_peek),
		      .RDY_mem_master_aw_drop(icache$RDY_mem_master_aw_drop),
		      .mem_master_w_canPeek(icache$mem_master_w_canPeek),
		      .mem_master_w_peek(icache$mem_master_w_peek),
		      .RDY_mem_master_w_peek(icache$RDY_mem_master_w_peek),
		      .RDY_mem_master_w_drop(icache$RDY_mem_master_w_drop),
		      .mem_master_b_canPut(icache$mem_master_b_canPut),
		      .RDY_mem_master_b_put(icache$RDY_mem_master_b_put),
		      .mem_master_ar_canPeek(icache$mem_master_ar_canPeek),
		      .mem_master_ar_peek(icache$mem_master_ar_peek),
		      .RDY_mem_master_ar_peek(icache$RDY_mem_master_ar_peek),
		      .RDY_mem_master_ar_drop(icache$RDY_mem_master_ar_drop),
		      .mem_master_r_canPut(icache$mem_master_r_canPut),
		      .RDY_mem_master_r_put(icache$RDY_mem_master_r_put),
		      .events(icache$events),
		      .RDY_events(),
		      .RDY_set_watch_tohost(),
		      .mv_tohost_value(),
		      .RDY_mv_tohost_value(),
		      .RDY_ma_ddr4_ready(),
		      .mv_status());

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_range(),
		    .m_plic_addr_range(),
		    .m_uart0_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_mem0_controller_addr_range(),
		    .m_tcm_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value(),
		    .m_pcc_reset_value(),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(),
		    .m_mepcc_reset_value());

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     icache$RDY_server_reset_request_put &&
	     dcache$RDY_server_reset_request_put &&
	     rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_reset = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     icache$RDY_server_reset_response_get &&
	     dcache$RDY_server_reset_response_get &&
	     f_reset_rsps$FULL_N &&
	     rg_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = CAN_FIRE_RL_rl_reset_complete ;

  // rule RL_rl_sfence_vma
  assign CAN_FIRE_RL_rl_sfence_vma =
	     f_sfence_vma_reqs$EMPTY_N && f_sfence_vma_rsps$FULL_N ;
  assign WILL_FIRE_RL_rl_sfence_vma = CAN_FIRE_RL_rl_sfence_vma ;

  // inputs to muxes for submodule ports
  assign MUX_rg_state$write_1__SEL_2 =
	     CAN_FIRE_RL_rl_reset && !EN_server_fence_request_put &&
	     !EN_server_fence_i_request_put ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register rg_state
  always@(EN_server_reset_request_put or
	  WILL_FIRE_RL_rl_reset or WILL_FIRE_RL_rl_reset_complete)
  begin
    case (1'b1) // synopsys parallel_case
      EN_server_reset_request_put: rg_state$D_IN = 2'd0;
      WILL_FIRE_RL_rl_reset: rg_state$D_IN = 2'd1;
      WILL_FIRE_RL_rl_reset_complete: rg_state$D_IN = 2'd2;
      default: rg_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     EN_server_reset_request_put || WILL_FIRE_RL_rl_reset ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // submodule dcache
  assign dcache$mem_master_b_put_val = mem_master_b_put_val ;
  assign dcache$mem_master_r_put_val = mem_master_r_put_val ;
  assign dcache$req_addr = dmem_req_addr ;
  assign dcache$req_amo_funct5 = dmem_req_amo_funct5 ;
  assign dcache$req_is_unsigned = dmem_req_is_unsigned ;
  assign dcache$req_mstatus_MXR = dmem_req_mstatus_MXR ;
  assign dcache$req_op = dmem_req_op ;
  assign dcache$req_priv = dmem_req_priv ;
  assign dcache$req_satp = dmem_req_satp ;
  assign dcache$req_sstatus_SUM = dmem_req_sstatus_SUM ;
  assign dcache$req_st_value = dmem_req_store_value ;
  assign dcache$req_width_code = dmem_req_f3 ;
  assign dcache$set_verbosity_verbosity = 4'h0 ;
  assign dcache$set_watch_tohost_tohost_addr = set_watch_tohost_tohost_addr ;
  assign dcache$set_watch_tohost_watch_tohost =
	     set_watch_tohost_watch_tohost ;
  assign dcache$EN_set_verbosity = 1'b0 ;
  assign dcache$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_2 ;
  assign dcache$EN_server_reset_response_get = CAN_FIRE_RL_rl_reset_complete ;
  assign dcache$EN_req = EN_dmem_req ;
  assign dcache$EN_commit = EN_dmem_commit ;
  assign dcache$EN_server_flush_request_put =
	     EN_server_fence_i_request_put || EN_server_fence_request_put ;
  assign dcache$EN_server_flush_response_get =
	     EN_server_fence_i_response_get || EN_server_fence_response_get ;
  assign dcache$EN_tlb_flush = CAN_FIRE_RL_rl_sfence_vma ;
  assign dcache$EN_mem_master_aw_drop = EN_mem_master_aw_drop ;
  assign dcache$EN_mem_master_w_drop = EN_mem_master_w_drop ;
  assign dcache$EN_mem_master_b_put = EN_mem_master_b_put ;
  assign dcache$EN_mem_master_ar_drop = EN_mem_master_ar_drop ;
  assign dcache$EN_mem_master_r_put = EN_mem_master_r_put ;
  assign dcache$EN_set_watch_tohost = EN_set_watch_tohost ;
  assign dcache$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ =
	     icache$RDY_server_reset_response_get &&
	     dcache$RDY_server_reset_response_get &&
	     f_reset_rsps$FULL_N &&
	     rg_state == 2'd1 ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_sfence_vma_reqs
  assign f_sfence_vma_reqs$ENQ = EN_sfence_vma_server_request_put ;
  assign f_sfence_vma_reqs$DEQ = CAN_FIRE_RL_rl_sfence_vma ;
  assign f_sfence_vma_reqs$CLR = 1'b0 ;

  // submodule f_sfence_vma_rsps
  assign f_sfence_vma_rsps$ENQ = CAN_FIRE_RL_rl_sfence_vma ;
  assign f_sfence_vma_rsps$DEQ = EN_sfence_vma_server_response_get ;
  assign f_sfence_vma_rsps$CLR = 1'b0 ;

  // submodule icache
  assign icache$mem_master_b_put_val = imem_master_b_put_val ;
  assign icache$mem_master_r_put_val = imem_master_r_put_val ;
  assign icache$req_addr = imem_req_addr ;
  assign icache$req_amo_funct5 = 5'b01010 /* unspecified value */  ;
  assign icache$req_is_unsigned = 1'd1 ;
  assign icache$req_mstatus_MXR = imem_req_mstatus_MXR ;
  assign icache$req_op = 2'd0 ;
  assign icache$req_priv = imem_req_priv ;
  assign icache$req_satp = imem_req_satp ;
  assign icache$req_sstatus_SUM = imem_req_sstatus_SUM ;
  assign icache$req_st_value = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign icache$req_width_code = imem_req_f3 ;
  assign icache$set_verbosity_verbosity = 4'h0 ;
  assign icache$set_watch_tohost_tohost_addr = 64'h0 ;
  assign icache$set_watch_tohost_watch_tohost = 1'b0 ;
  assign icache$EN_set_verbosity = 1'b0 ;
  assign icache$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_2 ;
  assign icache$EN_server_reset_response_get = CAN_FIRE_RL_rl_reset_complete ;
  assign icache$EN_req = EN_imem_req ;
  assign icache$EN_commit = EN_imem_commit ;
  assign icache$EN_server_flush_request_put = EN_server_fence_i_request_put ;
  assign icache$EN_server_flush_response_get =
	     EN_server_fence_i_response_get ;
  assign icache$EN_tlb_flush = CAN_FIRE_RL_rl_sfence_vma ;
  assign icache$EN_mem_master_aw_drop = EN_imem_master_aw_drop ;
  assign icache$EN_mem_master_w_drop = EN_imem_master_w_drop ;
  assign icache$EN_mem_master_b_put = EN_imem_master_b_put ;
  assign icache$EN_mem_master_ar_drop = EN_imem_master_ar_drop ;
  assign icache$EN_mem_master_r_put = EN_imem_master_r_put ;
  assign icache$EN_set_watch_tohost = 1'b0 ;
  assign icache$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign NOT_cfg_verbosity_read_ULE_1___d9 = cfg_verbosity > 4'd1 ;
  assign x__h1955 = { 63'd0, icache$events[13] } ;
  assign x__h2002 = { 63'd0, icache$events[12] } ;
  assign x__h2009 = { 63'd0, icache$events[11] } ;
  assign x__h2016 = { 63'd0, icache$events[4] } ;
  assign x__h2035 = { 63'd0, icache$events[3] } ;
  assign x__h2042 = { 63'd0, icache$events[2] } ;
  assign x__h2049 = { 63'd0, icache$events[1] } ;
  assign x__h2598 = { 63'd0, dcache$events[13] } ;
  assign x__h2649 = { 63'd0, dcache$events[12] } ;
  assign x__h2656 = { 63'd0, dcache$events[11] } ;
  assign x__h2663 = { 63'd0, dcache$events[10] } ;
  assign x__h2670 = { 63'd0, dcache$events[9] } ;
  assign x__h2677 = { 63'd0, dcache$events[8] } ;
  assign x__h2684 = { 63'd0, dcache$events[7] } ;
  assign x__h2691 = { 63'd0, dcache$events[6] } ;
  assign x__h2698 = { 63'd0, dcache$events[5] } ;
  assign x__h2705 = { 63'd0, dcache$events[4] } ;
  assign x__h2712 = { 63'd0, dcache$events[3] } ;
  assign x__h2719 = { 63'd0, dcache$events[2] } ;
  assign x__h2726 = { 63'd0, dcache$events[1] } ;
  assign x__h2733 = { 63'd0, dcache$events[0] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd2;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd2;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && NOT_cfg_verbosity_read_ULE_1___d9)
	begin
	  v__h1168 = $stime;
	  #0;
	end
    v__h1162 = v__h1168 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && NOT_cfg_verbosity_read_ULE_1___d9)
	$display("%0d: Near_Mem.rl_reset", v__h1162);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && NOT_cfg_verbosity_read_ULE_1___d9)
	begin
	  v__h1322 = $stime;
	  #0;
	end
    v__h1316 = v__h1322 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && NOT_cfg_verbosity_read_ULE_1___d9)
	$display("%0d: Near_Mem.rl_reset_complete", v__h1316);
  end
  // synopsys translate_on
endmodule  // mkNear_Mem

