//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
//
// Ports:
// Name                         I/O  size props
// RDY_cpu_reset_server_request_put  O     1 reg
// cpu_reset_server_response_get  O     1 reg
// RDY_cpu_reset_server_response_get  O     1 reg
// cpu_imem_master_aw_canPeek     O     1 reg
// cpu_imem_master_aw_peek        O    98 reg
// RDY_cpu_imem_master_aw_peek    O     1 reg
// RDY_cpu_imem_master_aw_drop    O     1 reg
// cpu_imem_master_w_canPeek      O     1 reg
// cpu_imem_master_w_peek         O    73 reg
// RDY_cpu_imem_master_w_peek     O     1 reg
// RDY_cpu_imem_master_w_drop     O     1 reg
// cpu_imem_master_b_canPut       O     1 reg
// RDY_cpu_imem_master_b_put      O     1 reg
// cpu_imem_master_ar_canPeek     O     1 reg
// cpu_imem_master_ar_peek        O    98 reg
// RDY_cpu_imem_master_ar_peek    O     1 reg
// RDY_cpu_imem_master_ar_drop    O     1 reg
// cpu_imem_master_r_canPut       O     1 reg
// RDY_cpu_imem_master_r_put      O     1 reg
// core_mem_master_aw_canPeek     O     1
// core_mem_master_aw_peek        O    99
// RDY_core_mem_master_aw_peek    O     1
// RDY_core_mem_master_aw_drop    O     1
// core_mem_master_w_canPeek      O     1
// core_mem_master_w_peek         O    73
// RDY_core_mem_master_w_peek     O     1
// RDY_core_mem_master_w_drop     O     1
// core_mem_master_b_canPut       O     1
// RDY_core_mem_master_b_put      O     1
// core_mem_master_ar_canPeek     O     1
// core_mem_master_ar_peek        O    99
// RDY_core_mem_master_ar_peek    O     1
// RDY_core_mem_master_ar_drop    O     1
// core_mem_master_r_canPut       O     1
// RDY_core_mem_master_r_put      O     1
// dma_server_aw_canPut           O     1 const
// RDY_dma_server_aw_put          O     1 const
// dma_server_w_canPut            O     1 const
// RDY_dma_server_w_put           O     1 const
// dma_server_b_canPeek           O     1 const
// dma_server_b_peek              O     8 const
// RDY_dma_server_b_peek          O     1 const
// RDY_dma_server_b_drop          O     1 const
// dma_server_ar_canPut           O     1 const
// RDY_dma_server_ar_put          O     1 const
// dma_server_r_canPeek           O     1 const
// dma_server_r_peek              O   521 const
// RDY_dma_server_r_peek          O     1 const
// RDY_dma_server_r_drop          O     1 const
// RDY_set_verbosity              O     1 const
// RDY_set_watch_tohost           O     1 const
// mv_tohost_value                O    64 reg
// RDY_mv_tohost_value            O     1 const
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// cms                            O    97 const
// cms_ifc_pc                     O    64
// cms_ifc_instr                  O    32 reg
// cms_ifc_pc_valid               O     9
// cms_ifc_stage1_ostatus         O     2
// cms_ifc_stage1_control         O     4
// cms_ifc_stage2_ostatus         O     2
// cms_ifc_performance_events     O    37
// CLK                            I     1 clock
// RST_N                          I     1 reset
// cpu_reset_server_request_put   I     1 reg
// cpu_imem_master_b_put_val      I     7 reg
// cpu_imem_master_r_put_val      I    72 reg
// core_mem_master_b_put_val      I     8
// core_mem_master_r_put_val      I    73
// dma_server_aw_put_val          I    99 unused
// dma_server_w_put_val           I   577 unused
// dma_server_ar_put_val          I    99 unused
// core_external_interrupt_sources_0_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_1_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_2_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_3_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_4_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_5_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_6_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_7_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_8_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_9_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_10_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_11_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_12_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_13_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_14_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_15_m_interrupt_req_set_not_clear  I     1
// nmi_req_set_not_clear          I     1
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// EN_cpu_reset_server_request_put  I     1
// EN_cpu_imem_master_aw_drop     I     1
// EN_cpu_imem_master_w_drop      I     1
// EN_cpu_imem_master_b_put       I     1
// EN_cpu_imem_master_ar_drop     I     1
// EN_cpu_imem_master_r_put       I     1
// EN_core_mem_master_aw_drop     I     1
// EN_core_mem_master_w_drop      I     1
// EN_core_mem_master_b_put       I     1
// EN_core_mem_master_ar_drop     I     1
// EN_core_mem_master_r_put       I     1
// EN_dma_server_aw_put           I     1 unused
// EN_dma_server_w_put            I     1 unused
// EN_dma_server_b_drop           I     1 unused
// EN_dma_server_ar_put           I     1 unused
// EN_dma_server_r_drop           I     1 unused
// EN_set_verbosity               I     1
// EN_set_watch_tohost            I     1
// EN_ma_ddr4_ready               I     1
// EN_cpu_reset_server_response_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCore(CLK,
	      RST_N,

	      cpu_reset_server_request_put,
	      EN_cpu_reset_server_request_put,
	      RDY_cpu_reset_server_request_put,

	      EN_cpu_reset_server_response_get,
	      cpu_reset_server_response_get,
	      RDY_cpu_reset_server_response_get,

	      cpu_imem_master_aw_canPeek,

	      cpu_imem_master_aw_peek,
	      RDY_cpu_imem_master_aw_peek,

	      EN_cpu_imem_master_aw_drop,
	      RDY_cpu_imem_master_aw_drop,

	      cpu_imem_master_w_canPeek,

	      cpu_imem_master_w_peek,
	      RDY_cpu_imem_master_w_peek,

	      EN_cpu_imem_master_w_drop,
	      RDY_cpu_imem_master_w_drop,

	      cpu_imem_master_b_canPut,

	      cpu_imem_master_b_put_val,
	      EN_cpu_imem_master_b_put,
	      RDY_cpu_imem_master_b_put,

	      cpu_imem_master_ar_canPeek,

	      cpu_imem_master_ar_peek,
	      RDY_cpu_imem_master_ar_peek,

	      EN_cpu_imem_master_ar_drop,
	      RDY_cpu_imem_master_ar_drop,

	      cpu_imem_master_r_canPut,

	      cpu_imem_master_r_put_val,
	      EN_cpu_imem_master_r_put,
	      RDY_cpu_imem_master_r_put,

	      core_mem_master_aw_canPeek,

	      core_mem_master_aw_peek,
	      RDY_core_mem_master_aw_peek,

	      EN_core_mem_master_aw_drop,
	      RDY_core_mem_master_aw_drop,

	      core_mem_master_w_canPeek,

	      core_mem_master_w_peek,
	      RDY_core_mem_master_w_peek,

	      EN_core_mem_master_w_drop,
	      RDY_core_mem_master_w_drop,

	      core_mem_master_b_canPut,

	      core_mem_master_b_put_val,
	      EN_core_mem_master_b_put,
	      RDY_core_mem_master_b_put,

	      core_mem_master_ar_canPeek,

	      core_mem_master_ar_peek,
	      RDY_core_mem_master_ar_peek,

	      EN_core_mem_master_ar_drop,
	      RDY_core_mem_master_ar_drop,

	      core_mem_master_r_canPut,

	      core_mem_master_r_put_val,
	      EN_core_mem_master_r_put,
	      RDY_core_mem_master_r_put,

	      dma_server_aw_canPut,

	      dma_server_aw_put_val,
	      EN_dma_server_aw_put,
	      RDY_dma_server_aw_put,

	      dma_server_w_canPut,

	      dma_server_w_put_val,
	      EN_dma_server_w_put,
	      RDY_dma_server_w_put,

	      dma_server_b_canPeek,

	      dma_server_b_peek,
	      RDY_dma_server_b_peek,

	      EN_dma_server_b_drop,
	      RDY_dma_server_b_drop,

	      dma_server_ar_canPut,

	      dma_server_ar_put_val,
	      EN_dma_server_ar_put,
	      RDY_dma_server_ar_put,

	      dma_server_r_canPeek,

	      dma_server_r_peek,
	      RDY_dma_server_r_peek,

	      EN_dma_server_r_drop,
	      RDY_dma_server_r_drop,

	      core_external_interrupt_sources_0_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_1_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_2_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_3_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_4_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_5_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_6_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_7_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_8_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_9_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_10_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_11_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_12_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_13_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_14_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_15_m_interrupt_req_set_not_clear,

	      nmi_req_set_not_clear,

	      set_verbosity_verbosity,
	      set_verbosity_logdelay,
	      EN_set_verbosity,
	      RDY_set_verbosity,

	      set_watch_tohost_watch_tohost,
	      set_watch_tohost_tohost_addr,
	      EN_set_watch_tohost,
	      RDY_set_watch_tohost,

	      mv_tohost_value,
	      RDY_mv_tohost_value,

	      EN_ma_ddr4_ready,
	      RDY_ma_ddr4_ready,

	      mv_status,

	      cms,

	      cms_ifc_pc,

	      cms_ifc_instr,

	      cms_ifc_pc_valid,

	      cms_ifc_stage1_ostatus,

	      cms_ifc_stage1_control,

	      cms_ifc_stage2_ostatus,

	      cms_ifc_performance_events);
  input  CLK;
  input  RST_N;

  // action method cpu_reset_server_request_put
  input  cpu_reset_server_request_put;
  input  EN_cpu_reset_server_request_put;
  output RDY_cpu_reset_server_request_put;

  // actionvalue method cpu_reset_server_response_get
  input  EN_cpu_reset_server_response_get;
  output cpu_reset_server_response_get;
  output RDY_cpu_reset_server_response_get;

  // value method cpu_imem_master_aw_canPeek
  output cpu_imem_master_aw_canPeek;

  // value method cpu_imem_master_aw_peek
  output [97 : 0] cpu_imem_master_aw_peek;
  output RDY_cpu_imem_master_aw_peek;

  // action method cpu_imem_master_aw_drop
  input  EN_cpu_imem_master_aw_drop;
  output RDY_cpu_imem_master_aw_drop;

  // value method cpu_imem_master_w_canPeek
  output cpu_imem_master_w_canPeek;

  // value method cpu_imem_master_w_peek
  output [72 : 0] cpu_imem_master_w_peek;
  output RDY_cpu_imem_master_w_peek;

  // action method cpu_imem_master_w_drop
  input  EN_cpu_imem_master_w_drop;
  output RDY_cpu_imem_master_w_drop;

  // value method cpu_imem_master_b_canPut
  output cpu_imem_master_b_canPut;

  // action method cpu_imem_master_b_put
  input  [6 : 0] cpu_imem_master_b_put_val;
  input  EN_cpu_imem_master_b_put;
  output RDY_cpu_imem_master_b_put;

  // value method cpu_imem_master_ar_canPeek
  output cpu_imem_master_ar_canPeek;

  // value method cpu_imem_master_ar_peek
  output [97 : 0] cpu_imem_master_ar_peek;
  output RDY_cpu_imem_master_ar_peek;

  // action method cpu_imem_master_ar_drop
  input  EN_cpu_imem_master_ar_drop;
  output RDY_cpu_imem_master_ar_drop;

  // value method cpu_imem_master_r_canPut
  output cpu_imem_master_r_canPut;

  // action method cpu_imem_master_r_put
  input  [71 : 0] cpu_imem_master_r_put_val;
  input  EN_cpu_imem_master_r_put;
  output RDY_cpu_imem_master_r_put;

  // value method core_mem_master_aw_canPeek
  output core_mem_master_aw_canPeek;

  // value method core_mem_master_aw_peek
  output [98 : 0] core_mem_master_aw_peek;
  output RDY_core_mem_master_aw_peek;

  // action method core_mem_master_aw_drop
  input  EN_core_mem_master_aw_drop;
  output RDY_core_mem_master_aw_drop;

  // value method core_mem_master_w_canPeek
  output core_mem_master_w_canPeek;

  // value method core_mem_master_w_peek
  output [72 : 0] core_mem_master_w_peek;
  output RDY_core_mem_master_w_peek;

  // action method core_mem_master_w_drop
  input  EN_core_mem_master_w_drop;
  output RDY_core_mem_master_w_drop;

  // value method core_mem_master_b_canPut
  output core_mem_master_b_canPut;

  // action method core_mem_master_b_put
  input  [7 : 0] core_mem_master_b_put_val;
  input  EN_core_mem_master_b_put;
  output RDY_core_mem_master_b_put;

  // value method core_mem_master_ar_canPeek
  output core_mem_master_ar_canPeek;

  // value method core_mem_master_ar_peek
  output [98 : 0] core_mem_master_ar_peek;
  output RDY_core_mem_master_ar_peek;

  // action method core_mem_master_ar_drop
  input  EN_core_mem_master_ar_drop;
  output RDY_core_mem_master_ar_drop;

  // value method core_mem_master_r_canPut
  output core_mem_master_r_canPut;

  // action method core_mem_master_r_put
  input  [72 : 0] core_mem_master_r_put_val;
  input  EN_core_mem_master_r_put;
  output RDY_core_mem_master_r_put;

  // value method dma_server_aw_canPut
  output dma_server_aw_canPut;

  // action method dma_server_aw_put
  input  [98 : 0] dma_server_aw_put_val;
  input  EN_dma_server_aw_put;
  output RDY_dma_server_aw_put;

  // value method dma_server_w_canPut
  output dma_server_w_canPut;

  // action method dma_server_w_put
  input  [576 : 0] dma_server_w_put_val;
  input  EN_dma_server_w_put;
  output RDY_dma_server_w_put;

  // value method dma_server_b_canPeek
  output dma_server_b_canPeek;

  // value method dma_server_b_peek
  output [7 : 0] dma_server_b_peek;
  output RDY_dma_server_b_peek;

  // action method dma_server_b_drop
  input  EN_dma_server_b_drop;
  output RDY_dma_server_b_drop;

  // value method dma_server_ar_canPut
  output dma_server_ar_canPut;

  // action method dma_server_ar_put
  input  [98 : 0] dma_server_ar_put_val;
  input  EN_dma_server_ar_put;
  output RDY_dma_server_ar_put;

  // value method dma_server_r_canPeek
  output dma_server_r_canPeek;

  // value method dma_server_r_peek
  output [520 : 0] dma_server_r_peek;
  output RDY_dma_server_r_peek;

  // action method dma_server_r_drop
  input  EN_dma_server_r_drop;
  output RDY_dma_server_r_drop;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  input  core_external_interrupt_sources_0_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  input  core_external_interrupt_sources_1_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  input  core_external_interrupt_sources_2_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  input  core_external_interrupt_sources_3_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  input  core_external_interrupt_sources_4_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  input  core_external_interrupt_sources_5_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  input  core_external_interrupt_sources_6_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  input  core_external_interrupt_sources_7_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  input  core_external_interrupt_sources_8_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  input  core_external_interrupt_sources_9_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  input  core_external_interrupt_sources_10_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  input  core_external_interrupt_sources_11_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  input  core_external_interrupt_sources_12_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  input  core_external_interrupt_sources_13_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  input  core_external_interrupt_sources_14_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  input  core_external_interrupt_sources_15_m_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [63 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // value method cms
  output [96 : 0] cms;

  // value method cms_ifc_pc
  output [63 : 0] cms_ifc_pc;

  // value method cms_ifc_instr
  output [31 : 0] cms_ifc_instr;

  // value method cms_ifc_pc_valid
  output [8 : 0] cms_ifc_pc_valid;

  // value method cms_ifc_stage1_ostatus
  output [1 : 0] cms_ifc_stage1_ostatus;

  // value method cms_ifc_stage1_control
  output [3 : 0] cms_ifc_stage1_control;

  // value method cms_ifc_stage2_ostatus
  output [1 : 0] cms_ifc_stage2_ostatus;

  // value method cms_ifc_performance_events
  output [36 : 0] cms_ifc_performance_events;

  // signals for module outputs
  wire [520 : 0] dma_server_r_peek;
  wire [98 : 0] core_mem_master_ar_peek, core_mem_master_aw_peek;
  wire [97 : 0] cpu_imem_master_ar_peek, cpu_imem_master_aw_peek;
  wire [96 : 0] cms;
  wire [72 : 0] core_mem_master_w_peek, cpu_imem_master_w_peek;
  wire [63 : 0] cms_ifc_pc, mv_tohost_value;
  wire [36 : 0] cms_ifc_performance_events;
  wire [31 : 0] cms_ifc_instr;
  wire [8 : 0] cms_ifc_pc_valid;
  wire [7 : 0] dma_server_b_peek, mv_status;
  wire [3 : 0] cms_ifc_stage1_control;
  wire [1 : 0] cms_ifc_stage1_ostatus, cms_ifc_stage2_ostatus;
  wire RDY_core_mem_master_ar_drop,
       RDY_core_mem_master_ar_peek,
       RDY_core_mem_master_aw_drop,
       RDY_core_mem_master_aw_peek,
       RDY_core_mem_master_b_put,
       RDY_core_mem_master_r_put,
       RDY_core_mem_master_w_drop,
       RDY_core_mem_master_w_peek,
       RDY_cpu_imem_master_ar_drop,
       RDY_cpu_imem_master_ar_peek,
       RDY_cpu_imem_master_aw_drop,
       RDY_cpu_imem_master_aw_peek,
       RDY_cpu_imem_master_b_put,
       RDY_cpu_imem_master_r_put,
       RDY_cpu_imem_master_w_drop,
       RDY_cpu_imem_master_w_peek,
       RDY_cpu_reset_server_request_put,
       RDY_cpu_reset_server_response_get,
       RDY_dma_server_ar_put,
       RDY_dma_server_aw_put,
       RDY_dma_server_b_drop,
       RDY_dma_server_b_peek,
       RDY_dma_server_r_drop,
       RDY_dma_server_r_peek,
       RDY_dma_server_w_put,
       RDY_ma_ddr4_ready,
       RDY_mv_tohost_value,
       RDY_set_verbosity,
       RDY_set_watch_tohost,
       core_mem_master_ar_canPeek,
       core_mem_master_aw_canPeek,
       core_mem_master_b_canPut,
       core_mem_master_r_canPut,
       core_mem_master_w_canPeek,
       cpu_imem_master_ar_canPeek,
       cpu_imem_master_aw_canPeek,
       cpu_imem_master_b_canPut,
       cpu_imem_master_r_canPut,
       cpu_imem_master_w_canPeek,
       cpu_reset_server_response_get,
       dma_server_ar_canPut,
       dma_server_aw_canPut,
       dma_server_b_canPeek,
       dma_server_r_canPeek,
       dma_server_w_canPut;

  // inlined wires
  reg [172 : 0] toDfltOutput$wget,
		toOutput_0$wget,
		toOutput_1$wget,
		toOutput_2$wget;
  reg [72 : 0] toOutput_1_0_1$wget;
  reg [6 : 0] toOutput_0_1$wget;
  wire [172 : 0] split_0_doPut$wget, split_1_doPut$wget, split_2_doPut$wget;
  wire [171 : 0] merged_0_outflit$wget, merged_1_outflit$wget;
  wire [99 : 0] axi4_mem_shim_tmp_shimMaster_arff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read,
		axi4_mem_shim_tmp_shimMaster_arff_rv$port2__read,
		axi4_mem_shim_tmp_shimMaster_arff_rv$port3__read,
		axi4_mem_shim_tmp_shimMaster_awff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read,
		axi4_mem_shim_tmp_shimMaster_awff_rv$port2__read,
		axi4_mem_shim_tmp_shimMaster_awff_rv$port3__read;
  wire [98 : 0] axi4_mem_shim_tmp_shimSlave_arff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read,
		axi4_mem_shim_tmp_shimSlave_arff_rv$port2__read,
		axi4_mem_shim_tmp_shimSlave_arff_rv$port3__read,
		axi4_mem_shim_tmp_shimSlave_awff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimSlave_awff_rv$port1__read,
		axi4_mem_shim_tmp_shimSlave_awff_rv$port2__read,
		axi4_mem_shim_tmp_shimSlave_awff_rv$port3__read;
  wire [97 : 0] toDfltOutput_1_1$wget,
		toOutput_1_0$wget,
		toOutput_1_1_1$wget,
		toOutput_1_2$wget;
  wire [74 : 0] axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read,
		axi4_mem_shim_tmp_shimSlave_wff_rv$port2__read,
		axi4_mem_shim_tmp_shimSlave_wff_rv$port3__read;
  wire [73 : 0] axi4_mem_shim_tmp_shimMaster_rff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read,
		axi4_mem_shim_tmp_shimMaster_rff_rv$port2__read,
		axi4_mem_shim_tmp_shimMaster_rff_rv$port3__read,
		axi4_mem_shim_tmp_shimMaster_wff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read,
		axi4_mem_shim_tmp_shimMaster_wff_rv$port2__read,
		axi4_mem_shim_tmp_shimMaster_wff_rv$port3__read,
		axi4_mem_shim_tmp_shimSlave_rff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read,
		axi4_mem_shim_tmp_shimSlave_rff_rv$port2__read,
		axi4_mem_shim_tmp_shimSlave_rff_rv$port3__read,
		split_1_wug_putWire$wget,
		split_2_wug_putWire$wget;
  wire [8 : 0] axi4_mem_shim_tmp_shimMaster_bff_rv$port0__write_1,
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read,
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port2__read,
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port3__read;
  wire [7 : 0] axi4_mem_shim_tmp_shimSlave_bff_rv$port0__write_1,
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read,
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port2__read,
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port3__read;
  wire [2 : 0] inputDest_0$wget, inputDest_1$wget, inputDest_1_0$wget;
  wire [1 : 0] axi4_mem_shim_master_monitor_rMonitor_evt$wget,
	       axi4_mem_shim_master_monitor_wMonitor_evt$wget,
	       axi4_mem_shim_slave_monitor_rMonitor_evt$wget,
	       axi4_mem_shim_slave_monitor_wMonitor_evt$wget,
	       inputDest_0_1$wget,
	       inputDest_1_0_1$wget,
	       inputDest_1_1$wget,
	       inputDest_1_1_2$wget,
	       inputDest_1_2$wget,
	       inputDest_1_3$wget,
	       inputDest_2$wget,
	       inputDest_3$wget;
  wire axi4_mem_shim_slave_monitor_rMonitor_evt$whas,
       axi4_mem_shim_tmp_shimMaster_arff_rv$EN_port0__write,
       axi4_mem_shim_tmp_shimMaster_awff_rv$EN_port0__write,
       axi4_mem_shim_tmp_shimMaster_wff_rv$EN_port0__write,
       axi4_mem_shim_tmp_shimSlave_bff_rv$EN_port0__write,
       axi4_mem_shim_tmp_shimSlave_rff_rv$EN_port0__write,
       axi4_mem_shim_tmp_shimSlave_rff_rv$EN_port1__write,
       merged_0_doDrop$whas,
       merged_1_doDrop$whas,
       selectInput_0$wget,
       selectInput_0_1$wget,
       selectInput_1$wget,
       selectInput_1_0$wget,
       selectInput_1_0_1$wget,
       selectInput_1_1$wget,
       selectInput_1_1_1$wget,
       selectInput_1_1_2$wget,
       selectInput_1_2$wget,
       selectInput_1_3$wget,
       selectInput_2$wget,
       selectInput_3$wget,
       split_0_wug_putWire$whas,
       split_1_wug_putWire$whas,
       split_2_wug_putWire$whas,
       toDfltOutput$whas,
       toDfltOutput_1_1$whas,
       toOutput_0$whas,
       toOutput_0_1$whas,
       toOutput_1$whas,
       toOutput_1_0$whas,
       toOutput_1_0_1$whas,
       toOutput_1_1_1$whas,
       toOutput_1_2$whas,
       toOutput_2$whas;

  // register arbiter_1_firstHot
  reg arbiter_1_firstHot;
  wire arbiter_1_firstHot$D_IN, arbiter_1_firstHot$EN;

  // register arbiter_1_firstHot_1
  reg arbiter_1_firstHot_1;
  wire arbiter_1_firstHot_1$D_IN, arbiter_1_firstHot_1$EN;

  // register arbiter_1_lastSelect
  reg arbiter_1_lastSelect;
  wire arbiter_1_lastSelect$D_IN, arbiter_1_lastSelect$EN;

  // register arbiter_1_lastSelect_1
  reg arbiter_1_lastSelect_1;
  wire arbiter_1_lastSelect_1$D_IN, arbiter_1_lastSelect_1$EN;

  // register arbiter_1_lastSelect_1_1
  reg arbiter_1_lastSelect_1_1;
  wire arbiter_1_lastSelect_1_1$D_IN, arbiter_1_lastSelect_1_1$EN;

  // register arbiter_1_lastSelect_2
  reg arbiter_1_lastSelect_2;
  wire arbiter_1_lastSelect_2$D_IN, arbiter_1_lastSelect_2$EN;

  // register arbiter_firstHot
  reg arbiter_firstHot;
  wire arbiter_firstHot$D_IN, arbiter_firstHot$EN;

  // register arbiter_firstHot_1
  reg arbiter_firstHot_1;
  wire arbiter_firstHot_1$D_IN, arbiter_firstHot_1$EN;

  // register arbiter_lastSelect
  reg arbiter_lastSelect;
  wire arbiter_lastSelect$D_IN, arbiter_lastSelect$EN;

  // register arbiter_lastSelect_1
  reg arbiter_lastSelect_1;
  wire arbiter_lastSelect_1$D_IN, arbiter_lastSelect_1$EN;

  // register arbiter_lastSelect_1_1
  reg arbiter_lastSelect_1_1;
  wire arbiter_lastSelect_1_1$D_IN, arbiter_lastSelect_1_1$EN;

  // register arbiter_lastSelect_2
  reg arbiter_lastSelect_2;
  wire arbiter_lastSelect_2$D_IN, arbiter_lastSelect_2$EN;

  // register axi4_mem_shim_tmp_addrOffset
  reg [63 : 0] axi4_mem_shim_tmp_addrOffset;
  wire [63 : 0] axi4_mem_shim_tmp_addrOffset$D_IN;
  wire axi4_mem_shim_tmp_addrOffset$EN;

  // register axi4_mem_shim_tmp_doneSendingAW
  reg axi4_mem_shim_tmp_doneSendingAW;
  wire axi4_mem_shim_tmp_doneSendingAW$D_IN,
       axi4_mem_shim_tmp_doneSendingAW$EN;

  // register axi4_mem_shim_tmp_reset_done
  reg axi4_mem_shim_tmp_reset_done;
  wire axi4_mem_shim_tmp_reset_done$D_IN, axi4_mem_shim_tmp_reset_done$EN;

  // register axi4_mem_shim_tmp_shimMaster_arff_rv
  reg [99 : 0] axi4_mem_shim_tmp_shimMaster_arff_rv;
  wire [99 : 0] axi4_mem_shim_tmp_shimMaster_arff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimMaster_arff_rv$EN;

  // register axi4_mem_shim_tmp_shimMaster_awff_rv
  reg [99 : 0] axi4_mem_shim_tmp_shimMaster_awff_rv;
  wire [99 : 0] axi4_mem_shim_tmp_shimMaster_awff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimMaster_awff_rv$EN;

  // register axi4_mem_shim_tmp_shimMaster_bff_rv
  reg [8 : 0] axi4_mem_shim_tmp_shimMaster_bff_rv;
  wire [8 : 0] axi4_mem_shim_tmp_shimMaster_bff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimMaster_bff_rv$EN;

  // register axi4_mem_shim_tmp_shimMaster_rff_rv
  reg [73 : 0] axi4_mem_shim_tmp_shimMaster_rff_rv;
  wire [73 : 0] axi4_mem_shim_tmp_shimMaster_rff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimMaster_rff_rv$EN;

  // register axi4_mem_shim_tmp_shimMaster_wff_rv
  reg [73 : 0] axi4_mem_shim_tmp_shimMaster_wff_rv;
  wire [73 : 0] axi4_mem_shim_tmp_shimMaster_wff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimMaster_wff_rv$EN;

  // register axi4_mem_shim_tmp_shimSlave_arff_rv
  reg [98 : 0] axi4_mem_shim_tmp_shimSlave_arff_rv;
  wire [98 : 0] axi4_mem_shim_tmp_shimSlave_arff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimSlave_arff_rv$EN;

  // register axi4_mem_shim_tmp_shimSlave_awff_rv
  reg [98 : 0] axi4_mem_shim_tmp_shimSlave_awff_rv;
  wire [98 : 0] axi4_mem_shim_tmp_shimSlave_awff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimSlave_awff_rv$EN;

  // register axi4_mem_shim_tmp_shimSlave_bff_rv
  reg [7 : 0] axi4_mem_shim_tmp_shimSlave_bff_rv;
  wire [7 : 0] axi4_mem_shim_tmp_shimSlave_bff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimSlave_bff_rv$EN;

  // register axi4_mem_shim_tmp_shimSlave_rff_rv
  reg [73 : 0] axi4_mem_shim_tmp_shimSlave_rff_rv;
  wire [73 : 0] axi4_mem_shim_tmp_shimSlave_rff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimSlave_rff_rv$EN;

  // register axi4_mem_shim_tmp_shimSlave_wff_rv
  reg [74 : 0] axi4_mem_shim_tmp_shimSlave_wff_rv;
  wire [74 : 0] axi4_mem_shim_tmp_shimSlave_wff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimSlave_wff_rv$EN;

  // register axi4_mem_shim_tmp_writeBurst
  reg axi4_mem_shim_tmp_writeBurst;
  wire axi4_mem_shim_tmp_writeBurst$D_IN, axi4_mem_shim_tmp_writeBurst$EN;

  // register merged_0_flitLeft
  reg [7 : 0] merged_0_flitLeft;
  wire [7 : 0] merged_0_flitLeft$D_IN;
  wire merged_0_flitLeft$EN;

  // register merged_1_flitLeft
  reg [7 : 0] merged_1_flitLeft;
  wire [7 : 0] merged_1_flitLeft$D_IN;
  wire merged_1_flitLeft$EN;

  // register moreFlits
  reg [5 : 0] moreFlits;
  reg [5 : 0] moreFlits$D_IN;
  wire moreFlits$EN;

  // register moreFlits_1
  reg [6 : 0] moreFlits_1;
  wire [6 : 0] moreFlits_1$D_IN;
  wire moreFlits_1$EN;

  // register moreFlits_1_1
  reg [5 : 0] moreFlits_1_1;
  wire [5 : 0] moreFlits_1_1$D_IN;
  wire moreFlits_1_1$EN;

  // register moreFlits_1_2
  reg [6 : 0] moreFlits_1_2;
  reg [6 : 0] moreFlits_1_2$D_IN;
  wire moreFlits_1_2$EN;

  // register noRouteSlv_1_currentReq
  reg [97 : 0] noRouteSlv_1_currentReq;
  wire [97 : 0] noRouteSlv_1_currentReq$D_IN;
  wire noRouteSlv_1_currentReq$EN;

  // register noRouteSlv_1_flitCount
  reg [8 : 0] noRouteSlv_1_flitCount;
  wire [8 : 0] noRouteSlv_1_flitCount$D_IN;
  wire noRouteSlv_1_flitCount$EN;

  // register noRouteSlv_awidReg
  reg [4 : 0] noRouteSlv_awidReg;
  wire [4 : 0] noRouteSlv_awidReg$D_IN;
  wire noRouteSlv_awidReg$EN;

  // register split_0_flitLeft
  reg [7 : 0] split_0_flitLeft;
  wire [7 : 0] split_0_flitLeft$D_IN;
  wire split_0_flitLeft$EN;

  // register split_1_flitLeft
  reg [7 : 0] split_1_flitLeft;
  wire [7 : 0] split_1_flitLeft$D_IN;
  wire split_1_flitLeft$EN;

  // register split_2_flitLeft
  reg [7 : 0] split_2_flitLeft;
  wire [7 : 0] split_2_flitLeft$D_IN;
  wire split_2_flitLeft$EN;

  // ports of submodule axi4_mem_shim_tmp_awreqff
  wire [97 : 0] axi4_mem_shim_tmp_awreqff$D_IN,
		axi4_mem_shim_tmp_awreqff$D_OUT;
  wire axi4_mem_shim_tmp_awreqff$CLR,
       axi4_mem_shim_tmp_awreqff$DEQ,
       axi4_mem_shim_tmp_awreqff$EMPTY_N,
       axi4_mem_shim_tmp_awreqff$ENQ,
       axi4_mem_shim_tmp_awreqff$FULL_N;

  // ports of submodule axi4_mem_shim_tmp_newRst
  wire axi4_mem_shim_tmp_newRst$ASSERT_IN, axi4_mem_shim_tmp_newRst$OUT_RST;

  // ports of submodule axi4_mem_shim_tmp_tagCon
  wire [140 : 0] axi4_mem_shim_tmp_tagCon$cache_request_put_val,
		 axi4_mem_shim_tmp_tagCon$memory_request_get;
  wire [76 : 0] axi4_mem_shim_tmp_tagCon$cache_response_get,
		axi4_mem_shim_tmp_tagCon$memory_response_put_val;
  wire [6 : 0] axi4_mem_shim_tmp_tagCon$events;
  wire axi4_mem_shim_tmp_tagCon$EN_cache_request_put,
       axi4_mem_shim_tmp_tagCon$EN_cache_response_get,
       axi4_mem_shim_tmp_tagCon$EN_memory_request_get,
       axi4_mem_shim_tmp_tagCon$EN_memory_response_put,
       axi4_mem_shim_tmp_tagCon$RDY_cache_request_put,
       axi4_mem_shim_tmp_tagCon$RDY_cache_response_get,
       axi4_mem_shim_tmp_tagCon$RDY_memory_request_get,
       axi4_mem_shim_tmp_tagCon$RDY_memory_response_put;

  // ports of submodule cpu
  wire [576 : 0] cpu$dma_server_w_put_val;
  wire [520 : 0] cpu$dma_server_r_peek;
  wire [447 : 0] cpu$relay_external_events_master_evts,
		 cpu$relay_external_events_slave_evts,
		 cpu$relay_external_events_tag_cache_evts;
  wire [98 : 0] cpu$dma_server_ar_put_val, cpu$dma_server_aw_put_val;
  wire [97 : 0] cpu$imem_master_ar_peek, cpu$imem_master_aw_peek;
  wire [96 : 0] cpu$mem_master_ar_peek, cpu$mem_master_aw_peek;
  wire [73 : 0] cpu$imem_master_w_peek, cpu$mem_master_w_peek;
  wire [72 : 0] cpu$imem_master_r_put_val;
  wire [71 : 0] cpu$mem_master_r_put_val;
  wire [63 : 0] cpu$cms_ifc_pc,
		cpu$mv_tohost_value,
		cpu$set_verbosity_logdelay,
		cpu$set_watch_tohost_tohost_addr;
  wire [36 : 0] cpu$cms_ifc_performance_events;
  wire [31 : 0] cpu$cms_ifc_instr;
  wire [8 : 0] cpu$cms_ifc_pc_valid;
  wire [7 : 0] cpu$dma_server_b_peek, cpu$mv_status;
  wire [6 : 0] cpu$imem_master_b_put_val;
  wire [5 : 0] cpu$mem_master_b_put_val;
  wire [3 : 0] cpu$cms_ifc_stage1_control, cpu$set_verbosity_verbosity;
  wire [1 : 0] cpu$cms_ifc_stage1_ostatus, cpu$cms_ifc_stage2_ostatus;
  wire cpu$EN_dma_server_ar_put,
       cpu$EN_dma_server_aw_put,
       cpu$EN_dma_server_b_drop,
       cpu$EN_dma_server_r_drop,
       cpu$EN_dma_server_w_put,
       cpu$EN_hart0_server_reset_request_put,
       cpu$EN_hart0_server_reset_response_get,
       cpu$EN_imem_master_ar_drop,
       cpu$EN_imem_master_aw_drop,
       cpu$EN_imem_master_b_put,
       cpu$EN_imem_master_r_put,
       cpu$EN_imem_master_w_drop,
       cpu$EN_ma_ddr4_ready,
       cpu$EN_mem_master_ar_drop,
       cpu$EN_mem_master_aw_drop,
       cpu$EN_mem_master_b_put,
       cpu$EN_mem_master_r_put,
       cpu$EN_mem_master_w_drop,
       cpu$EN_relay_external_events,
       cpu$EN_set_verbosity,
       cpu$EN_set_watch_tohost,
       cpu$RDY_dma_server_b_drop,
       cpu$RDY_dma_server_b_peek,
       cpu$RDY_dma_server_r_drop,
       cpu$RDY_dma_server_r_peek,
       cpu$RDY_hart0_server_reset_request_put,
       cpu$RDY_hart0_server_reset_response_get,
       cpu$RDY_imem_master_ar_drop,
       cpu$RDY_imem_master_ar_peek,
       cpu$RDY_imem_master_aw_drop,
       cpu$RDY_imem_master_aw_peek,
       cpu$RDY_imem_master_b_put,
       cpu$RDY_imem_master_r_put,
       cpu$RDY_imem_master_w_drop,
       cpu$RDY_imem_master_w_peek,
       cpu$RDY_mem_master_ar_drop,
       cpu$RDY_mem_master_ar_peek,
       cpu$RDY_mem_master_aw_drop,
       cpu$RDY_mem_master_aw_peek,
       cpu$RDY_mem_master_b_put,
       cpu$RDY_mem_master_r_put,
       cpu$RDY_mem_master_w_drop,
       cpu$RDY_mem_master_w_peek,
       cpu$dma_server_ar_canPut,
       cpu$dma_server_aw_canPut,
       cpu$dma_server_b_canPeek,
       cpu$dma_server_r_canPeek,
       cpu$dma_server_w_canPut,
       cpu$hart0_server_reset_request_put,
       cpu$hart0_server_reset_response_get,
       cpu$imem_master_ar_canPeek,
       cpu$imem_master_aw_canPeek,
       cpu$imem_master_b_canPut,
       cpu$imem_master_r_canPut,
       cpu$imem_master_w_canPeek,
       cpu$m_external_interrupt_req_set_not_clear,
       cpu$mem_master_ar_canPeek,
       cpu$mem_master_aw_canPeek,
       cpu$mem_master_b_canPut,
       cpu$mem_master_r_canPut,
       cpu$mem_master_w_canPeek,
       cpu$nmi_req_set_not_clear,
       cpu$s_external_interrupt_req_set_not_clear,
       cpu$set_watch_tohost_watch_tohost,
       cpu$software_interrupt_req_set_not_clear,
       cpu$timer_interrupt_req_set_not_clear;

  // ports of submodule delay_shim_arff
  wire [97 : 0] delay_shim_arff$D_IN, delay_shim_arff$D_OUT;
  wire delay_shim_arff$CLR,
       delay_shim_arff$DEQ,
       delay_shim_arff$EMPTY_N,
       delay_shim_arff$ENQ,
       delay_shim_arff$FULL_N;

  // ports of submodule delay_shim_awff
  wire [97 : 0] delay_shim_awff$D_IN, delay_shim_awff$D_OUT;
  wire delay_shim_awff$CLR,
       delay_shim_awff$DEQ,
       delay_shim_awff$EMPTY_N,
       delay_shim_awff$ENQ,
       delay_shim_awff$FULL_N;

  // ports of submodule delay_shim_bff
  wire [6 : 0] delay_shim_bff$D_IN, delay_shim_bff$D_OUT;
  wire delay_shim_bff$CLR,
       delay_shim_bff$DEQ,
       delay_shim_bff$EMPTY_N,
       delay_shim_bff$ENQ,
       delay_shim_bff$FULL_N;

  // ports of submodule delay_shim_rff
  wire [72 : 0] delay_shim_rff$D_IN, delay_shim_rff$D_OUT;
  wire delay_shim_rff$CLR,
       delay_shim_rff$DEQ,
       delay_shim_rff$EMPTY_N,
       delay_shim_rff$ENQ,
       delay_shim_rff$FULL_N;

  // ports of submodule delay_shim_wff
  wire [73 : 0] delay_shim_wff$D_IN, delay_shim_wff$D_OUT;
  wire delay_shim_wff$CLR,
       delay_shim_wff$DEQ,
       delay_shim_wff$EMPTY_N,
       delay_shim_wff$ENQ,
       delay_shim_wff$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule merged_0_awff
  wire [96 : 0] merged_0_awff$D_IN, merged_0_awff$D_OUT;
  wire merged_0_awff$CLR,
       merged_0_awff$DEQ,
       merged_0_awff$EMPTY_N,
       merged_0_awff$ENQ,
       merged_0_awff$FULL_N;

  // ports of submodule merged_0_wff
  wire [73 : 0] merged_0_wff$D_IN, merged_0_wff$D_OUT;
  wire merged_0_wff$CLR,
       merged_0_wff$DEQ,
       merged_0_wff$EMPTY_N,
       merged_0_wff$ENQ,
       merged_0_wff$FULL_N;

  // ports of submodule merged_1_awff
  wire [96 : 0] merged_1_awff$D_IN, merged_1_awff$D_OUT;
  wire merged_1_awff$CLR,
       merged_1_awff$DEQ,
       merged_1_awff$EMPTY_N,
       merged_1_awff$ENQ;

  // ports of submodule merged_1_wff
  wire [73 : 0] merged_1_wff$D_IN, merged_1_wff$D_OUT;
  wire merged_1_wff$CLR,
       merged_1_wff$DEQ,
       merged_1_wff$EMPTY_N,
       merged_1_wff$ENQ;

  // ports of submodule near_mem_io
  wire [97 : 0] near_mem_io$axi4_slave_ar_put_val,
		near_mem_io$axi4_slave_aw_put_val;
  wire [72 : 0] near_mem_io$axi4_slave_w_put_val;
  wire [71 : 0] near_mem_io$axi4_slave_r_peek;
  wire [63 : 0] near_mem_io$set_addr_map_addr_base,
		near_mem_io$set_addr_map_addr_lim;
  wire [6 : 0] near_mem_io$axi4_slave_b_peek;
  wire near_mem_io$EN_axi4_slave_ar_put,
       near_mem_io$EN_axi4_slave_aw_put,
       near_mem_io$EN_axi4_slave_b_drop,
       near_mem_io$EN_axi4_slave_r_drop,
       near_mem_io$EN_axi4_slave_w_put,
       near_mem_io$EN_get_sw_interrupt_req_get,
       near_mem_io$EN_get_timer_interrupt_req_get,
       near_mem_io$EN_server_reset_request_put,
       near_mem_io$EN_server_reset_response_get,
       near_mem_io$EN_set_addr_map,
       near_mem_io$RDY_axi4_slave_ar_put,
       near_mem_io$RDY_axi4_slave_aw_put,
       near_mem_io$RDY_axi4_slave_b_drop,
       near_mem_io$RDY_axi4_slave_b_peek,
       near_mem_io$RDY_axi4_slave_r_drop,
       near_mem_io$RDY_axi4_slave_r_peek,
       near_mem_io$RDY_axi4_slave_w_put,
       near_mem_io$RDY_get_sw_interrupt_req_get,
       near_mem_io$RDY_get_timer_interrupt_req_get,
       near_mem_io$RDY_server_reset_request_put,
       near_mem_io$RDY_server_reset_response_get,
       near_mem_io$axi4_slave_ar_canPut,
       near_mem_io$axi4_slave_aw_canPut,
       near_mem_io$axi4_slave_b_canPeek,
       near_mem_io$axi4_slave_r_canPeek,
       near_mem_io$axi4_slave_w_canPut,
       near_mem_io$get_sw_interrupt_req_get,
       near_mem_io$get_timer_interrupt_req_get;

  // ports of submodule noRouteSlv_rspFF
  wire [6 : 0] noRouteSlv_rspFF$D_IN, noRouteSlv_rspFF$D_OUT;
  wire noRouteSlv_rspFF$CLR,
       noRouteSlv_rspFF$DEQ,
       noRouteSlv_rspFF$EMPTY_N,
       noRouteSlv_rspFF$ENQ,
       noRouteSlv_rspFF$FULL_N;

  // ports of submodule plic
  wire [97 : 0] plic$axi4_slave_ar_put_val, plic$axi4_slave_aw_put_val;
  wire [72 : 0] plic$axi4_slave_w_put_val;
  wire [71 : 0] plic$axi4_slave_r_peek;
  wire [63 : 0] plic$set_addr_map_addr_base, plic$set_addr_map_addr_lim;
  wire [6 : 0] plic$axi4_slave_b_peek;
  wire [3 : 0] plic$set_verbosity_verbosity;
  wire plic$EN_axi4_slave_ar_put,
       plic$EN_axi4_slave_aw_put,
       plic$EN_axi4_slave_b_drop,
       plic$EN_axi4_slave_r_drop,
       plic$EN_axi4_slave_w_put,
       plic$EN_server_reset_request_put,
       plic$EN_server_reset_response_get,
       plic$EN_set_addr_map,
       plic$EN_set_verbosity,
       plic$EN_show_PLIC_state,
       plic$RDY_axi4_slave_ar_put,
       plic$RDY_axi4_slave_aw_put,
       plic$RDY_axi4_slave_b_drop,
       plic$RDY_axi4_slave_b_peek,
       plic$RDY_axi4_slave_r_drop,
       plic$RDY_axi4_slave_r_peek,
       plic$RDY_axi4_slave_w_put,
       plic$RDY_server_reset_request_put,
       plic$RDY_server_reset_response_get,
       plic$axi4_slave_ar_canPut,
       plic$axi4_slave_aw_canPut,
       plic$axi4_slave_b_canPeek,
       plic$axi4_slave_r_canPeek,
       plic$axi4_slave_w_canPut,
       plic$v_sources_0_m_interrupt_req_set_not_clear,
       plic$v_sources_10_m_interrupt_req_set_not_clear,
       plic$v_sources_11_m_interrupt_req_set_not_clear,
       plic$v_sources_12_m_interrupt_req_set_not_clear,
       plic$v_sources_13_m_interrupt_req_set_not_clear,
       plic$v_sources_14_m_interrupt_req_set_not_clear,
       plic$v_sources_15_m_interrupt_req_set_not_clear,
       plic$v_sources_1_m_interrupt_req_set_not_clear,
       plic$v_sources_2_m_interrupt_req_set_not_clear,
       plic$v_sources_3_m_interrupt_req_set_not_clear,
       plic$v_sources_4_m_interrupt_req_set_not_clear,
       plic$v_sources_5_m_interrupt_req_set_not_clear,
       plic$v_sources_6_m_interrupt_req_set_not_clear,
       plic$v_sources_7_m_interrupt_req_set_not_clear,
       plic$v_sources_8_m_interrupt_req_set_not_clear,
       plic$v_sources_9_m_interrupt_req_set_not_clear,
       plic$v_targets_0_m_eip,
       plic$v_targets_1_m_eip;

  // ports of submodule soc_map
  wire [127 : 0] soc_map$m_near_mem_io_addr_range, soc_map$m_plic_addr_range;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_arbitrate,
       CAN_FIRE_RL_arbitrate_1,
       CAN_FIRE_RL_arbitrate_2,
       CAN_FIRE_RL_arbitrate_3,
       CAN_FIRE_RL_arbitration_fail,
       CAN_FIRE_RL_arbitration_fail_1,
       CAN_FIRE_RL_arbitration_fail_10,
       CAN_FIRE_RL_arbitration_fail_11,
       CAN_FIRE_RL_arbitration_fail_2,
       CAN_FIRE_RL_arbitration_fail_3,
       CAN_FIRE_RL_arbitration_fail_4,
       CAN_FIRE_RL_arbitration_fail_5,
       CAN_FIRE_RL_arbitration_fail_6,
       CAN_FIRE_RL_arbitration_fail_7,
       CAN_FIRE_RL_arbitration_fail_8,
       CAN_FIRE_RL_arbitration_fail_9,
       CAN_FIRE_RL_axi4_mem_shim_tmp_getCacheAW,
       CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheRead,
       CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse,
       CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite,
       CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest,
       CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead,
       CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite,
       CAN_FIRE_RL_axi4_mem_shim_tmp_propagateReset,
       CAN_FIRE_RL_connect,
       CAN_FIRE_RL_connect_1,
       CAN_FIRE_RL_connect_2,
       CAN_FIRE_RL_connect_3,
       CAN_FIRE_RL_connect_4,
       CAN_FIRE_RL_dflt_output_selected,
       CAN_FIRE_RL_dflt_output_selected_1,
       CAN_FIRE_RL_input_first_flit,
       CAN_FIRE_RL_input_first_flit_1,
       CAN_FIRE_RL_input_first_flit_10,
       CAN_FIRE_RL_input_first_flit_11,
       CAN_FIRE_RL_input_first_flit_2,
       CAN_FIRE_RL_input_first_flit_3,
       CAN_FIRE_RL_input_first_flit_4,
       CAN_FIRE_RL_input_first_flit_5,
       CAN_FIRE_RL_input_first_flit_6,
       CAN_FIRE_RL_input_first_flit_8,
       CAN_FIRE_RL_input_first_flit_9,
       CAN_FIRE_RL_input_follow_flit,
       CAN_FIRE_RL_input_follow_flit_1,
       CAN_FIRE_RL_input_follow_flit_10,
       CAN_FIRE_RL_input_follow_flit_11,
       CAN_FIRE_RL_input_follow_flit_2,
       CAN_FIRE_RL_input_follow_flit_3,
       CAN_FIRE_RL_input_follow_flit_4,
       CAN_FIRE_RL_input_follow_flit_5,
       CAN_FIRE_RL_input_follow_flit_6,
       CAN_FIRE_RL_input_follow_flit_8,
       CAN_FIRE_RL_input_follow_flit_9,
       CAN_FIRE_RL_legal_destination_fail_10,
       CAN_FIRE_RL_legal_destination_fail_11,
       CAN_FIRE_RL_legal_destination_fail_2,
       CAN_FIRE_RL_legal_destination_fail_3,
       CAN_FIRE_RL_legal_destination_fail_4,
       CAN_FIRE_RL_legal_destination_fail_5,
       CAN_FIRE_RL_legal_destination_fail_8,
       CAN_FIRE_RL_legal_destination_fail_9,
       CAN_FIRE_RL_merged_0_awFlit,
       CAN_FIRE_RL_merged_0_awug_doDrop,
       CAN_FIRE_RL_merged_0_awug_setCanPeek,
       CAN_FIRE_RL_merged_0_awug_setPeek,
       CAN_FIRE_RL_merged_0_awug_warnDoDrop,
       CAN_FIRE_RL_merged_0_genFirst,
       CAN_FIRE_RL_merged_0_genOther,
       CAN_FIRE_RL_merged_0_passFlit,
       CAN_FIRE_RL_merged_0_wFlit,
       CAN_FIRE_RL_merged_0_wug_doDrop,
       CAN_FIRE_RL_merged_0_wug_setCanPeek,
       CAN_FIRE_RL_merged_0_wug_setPeek,
       CAN_FIRE_RL_merged_0_wug_warnDoDrop,
       CAN_FIRE_RL_merged_1_awFlit,
       CAN_FIRE_RL_merged_1_awug_setCanPeek,
       CAN_FIRE_RL_merged_1_awug_warnDoDrop,
       CAN_FIRE_RL_merged_1_genFirst,
       CAN_FIRE_RL_merged_1_genOther,
       CAN_FIRE_RL_merged_1_passFlit,
       CAN_FIRE_RL_merged_1_wFlit,
       CAN_FIRE_RL_merged_1_wug_setCanPeek,
       CAN_FIRE_RL_merged_1_wug_warnDoDrop,
       CAN_FIRE_RL_output_selected,
       CAN_FIRE_RL_output_selected_1,
       CAN_FIRE_RL_output_selected_2,
       CAN_FIRE_RL_output_selected_3,
       CAN_FIRE_RL_output_selected_5,
       CAN_FIRE_RL_output_selected_6,
       CAN_FIRE_RL_output_selected_7,
       CAN_FIRE_RL_output_selected_8,
       CAN_FIRE_RL_rl_cpu_hart0_reset_complete,
       CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       CAN_FIRE_RL_rl_relay_external_events,
       CAN_FIRE_RL_rl_relay_external_interrupts,
       CAN_FIRE_RL_rl_relay_sw_interrupts,
       CAN_FIRE_RL_rl_relay_timer_interrupts,
       CAN_FIRE_RL_set_dflt_output_canPut_wire,
       CAN_FIRE_RL_set_dflt_output_canPut_wire_1,
       CAN_FIRE_RL_set_input_canPeek_wire,
       CAN_FIRE_RL_set_input_canPeek_wire_1,
       CAN_FIRE_RL_set_input_canPeek_wire_10,
       CAN_FIRE_RL_set_input_canPeek_wire_11,
       CAN_FIRE_RL_set_input_canPeek_wire_2,
       CAN_FIRE_RL_set_input_canPeek_wire_3,
       CAN_FIRE_RL_set_input_canPeek_wire_4,
       CAN_FIRE_RL_set_input_canPeek_wire_5,
       CAN_FIRE_RL_set_input_canPeek_wire_6,
       CAN_FIRE_RL_set_input_canPeek_wire_7,
       CAN_FIRE_RL_set_input_canPeek_wire_8,
       CAN_FIRE_RL_set_input_canPeek_wire_9,
       CAN_FIRE_RL_set_input_peek_wires,
       CAN_FIRE_RL_set_input_peek_wires_1,
       CAN_FIRE_RL_set_input_peek_wires_10,
       CAN_FIRE_RL_set_input_peek_wires_11,
       CAN_FIRE_RL_set_input_peek_wires_2,
       CAN_FIRE_RL_set_input_peek_wires_3,
       CAN_FIRE_RL_set_input_peek_wires_4,
       CAN_FIRE_RL_set_input_peek_wires_5,
       CAN_FIRE_RL_set_input_peek_wires_6,
       CAN_FIRE_RL_set_input_peek_wires_8,
       CAN_FIRE_RL_set_input_peek_wires_9,
       CAN_FIRE_RL_set_output_canPut_wire,
       CAN_FIRE_RL_set_output_canPut_wire_1,
       CAN_FIRE_RL_set_output_canPut_wire_2,
       CAN_FIRE_RL_set_output_canPut_wire_3,
       CAN_FIRE_RL_set_output_canPut_wire_4,
       CAN_FIRE_RL_set_output_canPut_wire_5,
       CAN_FIRE_RL_set_output_canPut_wire_6,
       CAN_FIRE_RL_set_output_canPut_wire_7,
       CAN_FIRE_RL_set_output_canPut_wire_8,
       CAN_FIRE_RL_set_output_canPut_wire_9,
       CAN_FIRE_RL_split_0_awug_doPut,
       CAN_FIRE_RL_split_0_awug_setCanPut,
       CAN_FIRE_RL_split_0_awug_warnDoPut,
       CAN_FIRE_RL_split_0_putFirst,
       CAN_FIRE_RL_split_0_putOther,
       CAN_FIRE_RL_split_0_wug_doPut,
       CAN_FIRE_RL_split_0_wug_setCanPut,
       CAN_FIRE_RL_split_0_wug_warnDoPut,
       CAN_FIRE_RL_split_1_awug_doPut,
       CAN_FIRE_RL_split_1_awug_setCanPut,
       CAN_FIRE_RL_split_1_awug_warnDoPut,
       CAN_FIRE_RL_split_1_putFirst,
       CAN_FIRE_RL_split_1_putOther,
       CAN_FIRE_RL_split_1_wug_doPut,
       CAN_FIRE_RL_split_1_wug_setCanPut,
       CAN_FIRE_RL_split_1_wug_warnDoPut,
       CAN_FIRE_RL_split_2_awug_doPut,
       CAN_FIRE_RL_split_2_awug_setCanPut,
       CAN_FIRE_RL_split_2_awug_warnDoPut,
       CAN_FIRE_RL_split_2_putFirst,
       CAN_FIRE_RL_split_2_putOther,
       CAN_FIRE_RL_split_2_wug_doPut,
       CAN_FIRE_RL_split_2_wug_setCanPut,
       CAN_FIRE_RL_split_2_wug_warnDoPut,
       CAN_FIRE_RL_ug_snk_1_doPut,
       CAN_FIRE_RL_ug_snk_1_setCanPut,
       CAN_FIRE_RL_ug_snk_1_warnDoPut,
       CAN_FIRE_RL_ug_snk_2_doPut,
       CAN_FIRE_RL_ug_snk_2_setCanPut,
       CAN_FIRE_RL_ug_snk_2_warnDoPut,
       CAN_FIRE_RL_ug_snk_3_doPut,
       CAN_FIRE_RL_ug_snk_3_setCanPut,
       CAN_FIRE_RL_ug_snk_3_warnDoPut,
       CAN_FIRE_RL_ug_snk_4_doPut,
       CAN_FIRE_RL_ug_snk_4_setCanPut,
       CAN_FIRE_RL_ug_snk_4_warnDoPut,
       CAN_FIRE_RL_ug_snk_doPut,
       CAN_FIRE_RL_ug_snk_setCanPut,
       CAN_FIRE_RL_ug_snk_warnDoPut,
       CAN_FIRE_RL_ug_src_1_doDrop,
       CAN_FIRE_RL_ug_src_1_setCanPeek,
       CAN_FIRE_RL_ug_src_1_setPeek,
       CAN_FIRE_RL_ug_src_1_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_doDrop,
       CAN_FIRE_RL_ug_src_2_setCanPeek,
       CAN_FIRE_RL_ug_src_2_setPeek,
       CAN_FIRE_RL_ug_src_2_warnDoDrop,
       CAN_FIRE_RL_ug_src_3_doDrop,
       CAN_FIRE_RL_ug_src_3_setCanPeek,
       CAN_FIRE_RL_ug_src_3_setPeek,
       CAN_FIRE_RL_ug_src_3_warnDoDrop,
       CAN_FIRE_RL_ug_src_4_doDrop,
       CAN_FIRE_RL_ug_src_4_setCanPeek,
       CAN_FIRE_RL_ug_src_4_setPeek,
       CAN_FIRE_RL_ug_src_4_warnDoDrop,
       CAN_FIRE_RL_ug_src_doDrop,
       CAN_FIRE_RL_ug_src_setCanPeek,
       CAN_FIRE_RL_ug_src_setPeek,
       CAN_FIRE_RL_ug_src_warnDoDrop,
       CAN_FIRE___me_check_107,
       CAN_FIRE___me_check_109,
       CAN_FIRE___me_check_111,
       CAN_FIRE___me_check_134,
       CAN_FIRE___me_check_136,
       CAN_FIRE___me_check_138,
       CAN_FIRE___me_check_140,
       CAN_FIRE___me_check_153,
       CAN_FIRE___me_check_155,
       CAN_FIRE___me_check_178,
       CAN_FIRE___me_check_180,
       CAN_FIRE___me_check_182,
       CAN_FIRE___me_check_184,
       CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       CAN_FIRE_core_mem_master_ar_drop,
       CAN_FIRE_core_mem_master_aw_drop,
       CAN_FIRE_core_mem_master_b_put,
       CAN_FIRE_core_mem_master_r_put,
       CAN_FIRE_core_mem_master_w_drop,
       CAN_FIRE_cpu_imem_master_ar_drop,
       CAN_FIRE_cpu_imem_master_aw_drop,
       CAN_FIRE_cpu_imem_master_b_put,
       CAN_FIRE_cpu_imem_master_r_put,
       CAN_FIRE_cpu_imem_master_w_drop,
       CAN_FIRE_cpu_reset_server_request_put,
       CAN_FIRE_cpu_reset_server_response_get,
       CAN_FIRE_dma_server_ar_put,
       CAN_FIRE_dma_server_aw_put,
       CAN_FIRE_dma_server_b_drop,
       CAN_FIRE_dma_server_r_drop,
       CAN_FIRE_dma_server_w_put,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_nmi_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_set_watch_tohost,
       WILL_FIRE_RL_arbitrate,
       WILL_FIRE_RL_arbitrate_1,
       WILL_FIRE_RL_arbitrate_2,
       WILL_FIRE_RL_arbitrate_3,
       WILL_FIRE_RL_arbitration_fail,
       WILL_FIRE_RL_arbitration_fail_1,
       WILL_FIRE_RL_arbitration_fail_10,
       WILL_FIRE_RL_arbitration_fail_11,
       WILL_FIRE_RL_arbitration_fail_2,
       WILL_FIRE_RL_arbitration_fail_3,
       WILL_FIRE_RL_arbitration_fail_4,
       WILL_FIRE_RL_arbitration_fail_5,
       WILL_FIRE_RL_arbitration_fail_6,
       WILL_FIRE_RL_arbitration_fail_7,
       WILL_FIRE_RL_arbitration_fail_8,
       WILL_FIRE_RL_arbitration_fail_9,
       WILL_FIRE_RL_axi4_mem_shim_tmp_getCacheAW,
       WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheRead,
       WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse,
       WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite,
       WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest,
       WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead,
       WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite,
       WILL_FIRE_RL_axi4_mem_shim_tmp_propagateReset,
       WILL_FIRE_RL_connect,
       WILL_FIRE_RL_connect_1,
       WILL_FIRE_RL_connect_2,
       WILL_FIRE_RL_connect_3,
       WILL_FIRE_RL_connect_4,
       WILL_FIRE_RL_dflt_output_selected,
       WILL_FIRE_RL_dflt_output_selected_1,
       WILL_FIRE_RL_input_first_flit,
       WILL_FIRE_RL_input_first_flit_1,
       WILL_FIRE_RL_input_first_flit_10,
       WILL_FIRE_RL_input_first_flit_11,
       WILL_FIRE_RL_input_first_flit_2,
       WILL_FIRE_RL_input_first_flit_3,
       WILL_FIRE_RL_input_first_flit_4,
       WILL_FIRE_RL_input_first_flit_5,
       WILL_FIRE_RL_input_first_flit_6,
       WILL_FIRE_RL_input_first_flit_8,
       WILL_FIRE_RL_input_first_flit_9,
       WILL_FIRE_RL_input_follow_flit,
       WILL_FIRE_RL_input_follow_flit_1,
       WILL_FIRE_RL_input_follow_flit_10,
       WILL_FIRE_RL_input_follow_flit_11,
       WILL_FIRE_RL_input_follow_flit_2,
       WILL_FIRE_RL_input_follow_flit_3,
       WILL_FIRE_RL_input_follow_flit_4,
       WILL_FIRE_RL_input_follow_flit_5,
       WILL_FIRE_RL_input_follow_flit_6,
       WILL_FIRE_RL_input_follow_flit_8,
       WILL_FIRE_RL_input_follow_flit_9,
       WILL_FIRE_RL_legal_destination_fail_10,
       WILL_FIRE_RL_legal_destination_fail_11,
       WILL_FIRE_RL_legal_destination_fail_2,
       WILL_FIRE_RL_legal_destination_fail_3,
       WILL_FIRE_RL_legal_destination_fail_4,
       WILL_FIRE_RL_legal_destination_fail_5,
       WILL_FIRE_RL_legal_destination_fail_8,
       WILL_FIRE_RL_legal_destination_fail_9,
       WILL_FIRE_RL_merged_0_awFlit,
       WILL_FIRE_RL_merged_0_awug_doDrop,
       WILL_FIRE_RL_merged_0_awug_setCanPeek,
       WILL_FIRE_RL_merged_0_awug_setPeek,
       WILL_FIRE_RL_merged_0_awug_warnDoDrop,
       WILL_FIRE_RL_merged_0_genFirst,
       WILL_FIRE_RL_merged_0_genOther,
       WILL_FIRE_RL_merged_0_passFlit,
       WILL_FIRE_RL_merged_0_wFlit,
       WILL_FIRE_RL_merged_0_wug_doDrop,
       WILL_FIRE_RL_merged_0_wug_setCanPeek,
       WILL_FIRE_RL_merged_0_wug_setPeek,
       WILL_FIRE_RL_merged_0_wug_warnDoDrop,
       WILL_FIRE_RL_merged_1_awFlit,
       WILL_FIRE_RL_merged_1_awug_setCanPeek,
       WILL_FIRE_RL_merged_1_awug_warnDoDrop,
       WILL_FIRE_RL_merged_1_genFirst,
       WILL_FIRE_RL_merged_1_genOther,
       WILL_FIRE_RL_merged_1_passFlit,
       WILL_FIRE_RL_merged_1_wFlit,
       WILL_FIRE_RL_merged_1_wug_setCanPeek,
       WILL_FIRE_RL_merged_1_wug_warnDoDrop,
       WILL_FIRE_RL_output_selected,
       WILL_FIRE_RL_output_selected_1,
       WILL_FIRE_RL_output_selected_2,
       WILL_FIRE_RL_output_selected_3,
       WILL_FIRE_RL_output_selected_5,
       WILL_FIRE_RL_output_selected_6,
       WILL_FIRE_RL_output_selected_7,
       WILL_FIRE_RL_output_selected_8,
       WILL_FIRE_RL_rl_cpu_hart0_reset_complete,
       WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       WILL_FIRE_RL_rl_relay_external_events,
       WILL_FIRE_RL_rl_relay_external_interrupts,
       WILL_FIRE_RL_rl_relay_sw_interrupts,
       WILL_FIRE_RL_rl_relay_timer_interrupts,
       WILL_FIRE_RL_set_dflt_output_canPut_wire,
       WILL_FIRE_RL_set_dflt_output_canPut_wire_1,
       WILL_FIRE_RL_set_input_canPeek_wire,
       WILL_FIRE_RL_set_input_canPeek_wire_1,
       WILL_FIRE_RL_set_input_canPeek_wire_10,
       WILL_FIRE_RL_set_input_canPeek_wire_11,
       WILL_FIRE_RL_set_input_canPeek_wire_2,
       WILL_FIRE_RL_set_input_canPeek_wire_3,
       WILL_FIRE_RL_set_input_canPeek_wire_4,
       WILL_FIRE_RL_set_input_canPeek_wire_5,
       WILL_FIRE_RL_set_input_canPeek_wire_6,
       WILL_FIRE_RL_set_input_canPeek_wire_7,
       WILL_FIRE_RL_set_input_canPeek_wire_8,
       WILL_FIRE_RL_set_input_canPeek_wire_9,
       WILL_FIRE_RL_set_input_peek_wires,
       WILL_FIRE_RL_set_input_peek_wires_1,
       WILL_FIRE_RL_set_input_peek_wires_10,
       WILL_FIRE_RL_set_input_peek_wires_11,
       WILL_FIRE_RL_set_input_peek_wires_2,
       WILL_FIRE_RL_set_input_peek_wires_3,
       WILL_FIRE_RL_set_input_peek_wires_4,
       WILL_FIRE_RL_set_input_peek_wires_5,
       WILL_FIRE_RL_set_input_peek_wires_6,
       WILL_FIRE_RL_set_input_peek_wires_8,
       WILL_FIRE_RL_set_input_peek_wires_9,
       WILL_FIRE_RL_set_output_canPut_wire,
       WILL_FIRE_RL_set_output_canPut_wire_1,
       WILL_FIRE_RL_set_output_canPut_wire_2,
       WILL_FIRE_RL_set_output_canPut_wire_3,
       WILL_FIRE_RL_set_output_canPut_wire_4,
       WILL_FIRE_RL_set_output_canPut_wire_5,
       WILL_FIRE_RL_set_output_canPut_wire_6,
       WILL_FIRE_RL_set_output_canPut_wire_7,
       WILL_FIRE_RL_set_output_canPut_wire_8,
       WILL_FIRE_RL_set_output_canPut_wire_9,
       WILL_FIRE_RL_split_0_awug_doPut,
       WILL_FIRE_RL_split_0_awug_setCanPut,
       WILL_FIRE_RL_split_0_awug_warnDoPut,
       WILL_FIRE_RL_split_0_putFirst,
       WILL_FIRE_RL_split_0_putOther,
       WILL_FIRE_RL_split_0_wug_doPut,
       WILL_FIRE_RL_split_0_wug_setCanPut,
       WILL_FIRE_RL_split_0_wug_warnDoPut,
       WILL_FIRE_RL_split_1_awug_doPut,
       WILL_FIRE_RL_split_1_awug_setCanPut,
       WILL_FIRE_RL_split_1_awug_warnDoPut,
       WILL_FIRE_RL_split_1_putFirst,
       WILL_FIRE_RL_split_1_putOther,
       WILL_FIRE_RL_split_1_wug_doPut,
       WILL_FIRE_RL_split_1_wug_setCanPut,
       WILL_FIRE_RL_split_1_wug_warnDoPut,
       WILL_FIRE_RL_split_2_awug_doPut,
       WILL_FIRE_RL_split_2_awug_setCanPut,
       WILL_FIRE_RL_split_2_awug_warnDoPut,
       WILL_FIRE_RL_split_2_putFirst,
       WILL_FIRE_RL_split_2_putOther,
       WILL_FIRE_RL_split_2_wug_doPut,
       WILL_FIRE_RL_split_2_wug_setCanPut,
       WILL_FIRE_RL_split_2_wug_warnDoPut,
       WILL_FIRE_RL_ug_snk_1_doPut,
       WILL_FIRE_RL_ug_snk_1_setCanPut,
       WILL_FIRE_RL_ug_snk_1_warnDoPut,
       WILL_FIRE_RL_ug_snk_2_doPut,
       WILL_FIRE_RL_ug_snk_2_setCanPut,
       WILL_FIRE_RL_ug_snk_2_warnDoPut,
       WILL_FIRE_RL_ug_snk_3_doPut,
       WILL_FIRE_RL_ug_snk_3_setCanPut,
       WILL_FIRE_RL_ug_snk_3_warnDoPut,
       WILL_FIRE_RL_ug_snk_4_doPut,
       WILL_FIRE_RL_ug_snk_4_setCanPut,
       WILL_FIRE_RL_ug_snk_4_warnDoPut,
       WILL_FIRE_RL_ug_snk_doPut,
       WILL_FIRE_RL_ug_snk_setCanPut,
       WILL_FIRE_RL_ug_snk_warnDoPut,
       WILL_FIRE_RL_ug_src_1_doDrop,
       WILL_FIRE_RL_ug_src_1_setCanPeek,
       WILL_FIRE_RL_ug_src_1_setPeek,
       WILL_FIRE_RL_ug_src_1_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_doDrop,
       WILL_FIRE_RL_ug_src_2_setCanPeek,
       WILL_FIRE_RL_ug_src_2_setPeek,
       WILL_FIRE_RL_ug_src_2_warnDoDrop,
       WILL_FIRE_RL_ug_src_3_doDrop,
       WILL_FIRE_RL_ug_src_3_setCanPeek,
       WILL_FIRE_RL_ug_src_3_setPeek,
       WILL_FIRE_RL_ug_src_3_warnDoDrop,
       WILL_FIRE_RL_ug_src_4_doDrop,
       WILL_FIRE_RL_ug_src_4_setCanPeek,
       WILL_FIRE_RL_ug_src_4_setPeek,
       WILL_FIRE_RL_ug_src_4_warnDoDrop,
       WILL_FIRE_RL_ug_src_doDrop,
       WILL_FIRE_RL_ug_src_setCanPeek,
       WILL_FIRE_RL_ug_src_setPeek,
       WILL_FIRE_RL_ug_src_warnDoDrop,
       WILL_FIRE___me_check_107,
       WILL_FIRE___me_check_109,
       WILL_FIRE___me_check_111,
       WILL_FIRE___me_check_134,
       WILL_FIRE___me_check_136,
       WILL_FIRE___me_check_138,
       WILL_FIRE___me_check_140,
       WILL_FIRE___me_check_153,
       WILL_FIRE___me_check_155,
       WILL_FIRE___me_check_178,
       WILL_FIRE___me_check_180,
       WILL_FIRE___me_check_182,
       WILL_FIRE___me_check_184,
       WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       WILL_FIRE_core_mem_master_ar_drop,
       WILL_FIRE_core_mem_master_aw_drop,
       WILL_FIRE_core_mem_master_b_put,
       WILL_FIRE_core_mem_master_r_put,
       WILL_FIRE_core_mem_master_w_drop,
       WILL_FIRE_cpu_imem_master_ar_drop,
       WILL_FIRE_cpu_imem_master_aw_drop,
       WILL_FIRE_cpu_imem_master_b_put,
       WILL_FIRE_cpu_imem_master_r_put,
       WILL_FIRE_cpu_imem_master_w_drop,
       WILL_FIRE_cpu_reset_server_request_put,
       WILL_FIRE_cpu_reset_server_response_get,
       WILL_FIRE_dma_server_ar_put,
       WILL_FIRE_dma_server_aw_put,
       WILL_FIRE_dma_server_b_drop,
       WILL_FIRE_dma_server_r_drop,
       WILL_FIRE_dma_server_w_put,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_nmi_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_set_watch_tohost;

  // inputs to muxes for submodule ports
  wire [172 : 0] MUX_toDfltOutput$wset_1__VAL_1,
		 MUX_toDfltOutput$wset_1__VAL_2;
  wire [140 : 0] MUX_axi4_mem_shim_tmp_tagCon$cache_request_put_1__VAL_1,
		 MUX_axi4_mem_shim_tmp_tagCon$cache_request_put_1__VAL_2;
  wire [97 : 0] MUX_toDfltOutput_1_1$wset_1__VAL_1;
  wire [76 : 0] MUX_axi4_mem_shim_tmp_tagCon$memory_response_put_1__VAL_1,
		MUX_axi4_mem_shim_tmp_tagCon$memory_response_put_1__VAL_2;
  wire [73 : 0] MUX_split_0_wug_putWire$wset_1__VAL_2;
  wire [72 : 0] MUX_toDfltOutput_1_2$wset_1__VAL_1,
		MUX_toDfltOutput_1_2$wset_1__VAL_2,
		MUX_toDfltOutput_1_2$wset_1__VAL_3,
		MUX_toDfltOutput_1_2$wset_1__VAL_4;
  wire [8 : 0] MUX_noRouteSlv_1_flitCount$write_1__VAL_1,
	       MUX_noRouteSlv_1_flitCount$write_1__VAL_2;
  wire [7 : 0] MUX_merged_0_flitLeft$write_1__VAL_2,
	       MUX_merged_1_flitLeft$write_1__VAL_2,
	       MUX_split_0_flitLeft$write_1__VAL_1,
	       MUX_split_1_flitLeft$write_1__VAL_1,
	       MUX_split_2_flitLeft$write_1__VAL_1;
  wire [6 : 0] MUX_moreFlits_1_2$write_1__VAL_1,
	       MUX_moreFlits_1_2$write_1__VAL_3,
	       MUX_moreFlits_1_2$write_1__VAL_5,
	       MUX_moreFlits_1_2$write_1__VAL_7,
	       MUX_toDfltOutput_1$wset_1__VAL_1,
	       MUX_toDfltOutput_1$wset_1__VAL_2,
	       MUX_toDfltOutput_1$wset_1__VAL_3,
	       MUX_toDfltOutput_1$wset_1__VAL_4;
  wire [5 : 0] MUX_moreFlits$write_1__VAL_1, MUX_moreFlits$write_1__VAL_3;
  wire MUX_moreFlits$write_1__SEL_1,
       MUX_moreFlits$write_1__SEL_2,
       MUX_moreFlits$write_1__SEL_3,
       MUX_moreFlits$write_1__SEL_4,
       MUX_moreFlits_1_2$write_1__SEL_1,
       MUX_moreFlits_1_2$write_1__SEL_2,
       MUX_moreFlits_1_2$write_1__SEL_3,
       MUX_moreFlits_1_2$write_1__SEL_4,
       MUX_moreFlits_1_2$write_1__SEL_5,
       MUX_moreFlits_1_2$write_1__SEL_6,
       MUX_moreFlits_1_2$write_1__SEL_7,
       MUX_moreFlits_1_2$write_1__SEL_8,
       MUX_split_0_flitLeft$write_1__SEL_1,
       MUX_split_0_flitLeft$write_1__SEL_2,
       MUX_split_1_flitLeft$write_1__SEL_1,
       MUX_split_1_flitLeft$write_1__SEL_2,
       MUX_split_2_flitLeft$write_1__SEL_1,
       MUX_split_2_flitLeft$write_1__SEL_2,
       MUX_toDfltOutput$wset_1__SEL_1,
       MUX_toDfltOutput$wset_1__SEL_2,
       MUX_toDfltOutput$wset_1__SEL_3,
       MUX_toDfltOutput$wset_1__SEL_4,
       MUX_toDfltOutput_1_1$wset_1__SEL_1,
       MUX_toOutput_0$wset_1__SEL_1,
       MUX_toOutput_0$wset_1__SEL_2,
       MUX_toOutput_0$wset_1__SEL_3,
       MUX_toOutput_0$wset_1__SEL_4,
       MUX_toOutput_0_1$wset_1__SEL_1,
       MUX_toOutput_0_1$wset_1__SEL_2,
       MUX_toOutput_0_1$wset_1__SEL_3,
       MUX_toOutput_0_1$wset_1__SEL_4,
       MUX_toOutput_0_1$wset_1__SEL_5,
       MUX_toOutput_0_1$wset_1__SEL_6,
       MUX_toOutput_0_1$wset_1__SEL_7,
       MUX_toOutput_0_1$wset_1__SEL_8,
       MUX_toOutput_1$wset_1__SEL_1,
       MUX_toOutput_1$wset_1__SEL_2,
       MUX_toOutput_1$wset_1__SEL_3,
       MUX_toOutput_1$wset_1__SEL_4,
       MUX_toOutput_1_0$wset_1__SEL_1,
       MUX_toOutput_1_0_1$wset_1__SEL_1,
       MUX_toOutput_1_0_1$wset_1__SEL_2,
       MUX_toOutput_1_0_1$wset_1__SEL_3,
       MUX_toOutput_1_0_1$wset_1__SEL_4,
       MUX_toOutput_1_0_1$wset_1__SEL_5,
       MUX_toOutput_1_0_1$wset_1__SEL_6,
       MUX_toOutput_1_0_1$wset_1__SEL_7,
       MUX_toOutput_1_0_1$wset_1__SEL_8,
       MUX_toOutput_1_1_1$wset_1__SEL_1,
       MUX_toOutput_1_2$wset_1__SEL_1,
       MUX_toOutput_2$wset_1__SEL_1,
       MUX_toOutput_2$wset_1__SEL_2,
       MUX_toOutput_2$wset_1__SEL_3,
       MUX_toOutput_2$wset_1__SEL_4;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h90115;
  reg [63 : 0] v__h90520;
  reg [63 : 0] v__h70539;
  reg [63 : 0] v__h70801;
  reg [63 : 0] v__h71085;
  reg [63 : 0] v__h71347;
  reg [63 : 0] v__h71631;
  reg [63 : 0] v__h71893;
  reg [63 : 0] v__h72177;
  reg [63 : 0] v__h72439;
  reg [63 : 0] v__h108852;
  reg [63 : 0] v__h109114;
  reg [63 : 0] v__h109398;
  reg [63 : 0] v__h109660;
  reg [63 : 0] v__h109944;
  reg [63 : 0] v__h110206;
  reg [63 : 0] v__h110490;
  reg [63 : 0] v__h110752;
  reg TASK_testplusargs___d341;
  reg TASK_testplusargs___d342;
  reg TASK_testplusargs___d360;
  reg TASK_testplusargs___d361;
  reg TASK_testplusargs___d385;
  reg TASK_testplusargs___d386;
  reg [63 : 0] v__h41674;
  reg [63 : 0] v__h42081;
  reg TASK_testplusargs___d182;
  reg TASK_testplusargs___d183;
  reg [31 : 0] v__h22294;
  reg [31 : 0] v__h22508;
  reg [31 : 0] v__h22288;
  reg [31 : 0] v__h22502;
  // synopsys translate_on

  // remaining internal signals
  wire [170 : 0] IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d703,
		 IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d746;
  wire [63 : 0] addr__h35433,
		addr__h36306,
		araddr__h19225,
		aw_awaddr__h12033,
		tmp__h11875,
		tmp__h9480,
		v_araddr__h19242,
		w_wdata__h17166,
		x__h123491,
		x__h123555,
		x__h123579,
		x__h123585,
		x__h123592,
		x__h123599,
		x__h123618,
		x__h123635,
		x__h123699,
		x__h123724,
		x__h123730,
		x__h123737,
		x__h123744,
		x__h123763,
		x__h123780,
		x__h123811,
		x__h123818,
		x__h123825,
		x__h123832,
		x__h35492,
		x__h35517,
		x__h36363,
		x__h36388,
		x__h83752,
		x__h83777,
		x__h9341;
  wire [39 : 0] x__h12065;
  wire [7 : 0] arlen__h19226, aw_awlen__h12034, v_arlen__h19243;
  wire [5 : 0] v_arid__h19241;
  wire [4 : 0] _theResult____h60686, currentAwid__h60871;
  wire [3 : 0] _0_CONCAT_axi4_mem_shim_tmp_tagCon_memory_reque_ETC___d302,
	       arcache__h19230,
	       x__h12108,
	       x__h14680,
	       x__h14692,
	       x__h14704,
	       x__h14716,
	       x__h14728,
	       x__h14740,
	       x__h14752,
	       x__h16919,
	       x__h19479,
	       y__h14681,
	       y__h14693,
	       y__h14705,
	       y__h14717,
	       y__h14729,
	       y__h14741,
	       y__h14753;
  wire [2 : 0] arsize_val__h19376,
	       aw_awsize_val__h14610,
	       v_arsize_val__h19377;
  wire IF_IF_inputDest_0_1_whas__058_THEN_NOT_inputDe_ETC___d1076,
       IF_IF_inputDest_0_whas__82_THEN_NOT_inputDest__ETC___d822,
       IF_IF_inputDest_0_whas__82_THEN_inputDest_0_wg_ETC___d870,
       IF_IF_inputDest_1_0_1_whas__648_THEN_NOT_input_ETC___d1666,
       IF_IF_inputDest_1_0_whas__412_THEN_NOT_inputDe_ETC___d1452,
       IF_IF_inputDest_1_0_whas__412_THEN_inputDest_1_ETC___d1500,
       IF_IF_inputDest_1_1_2_whas__671_THEN_NOT_input_ETC___d1681,
       IF_IF_inputDest_1_1_whas__081_THEN_NOT_inputDe_ETC___d1091,
       IF_IF_inputDest_1_2_whas__687_THEN_NOT_inputDe_ETC___d1697,
       IF_IF_inputDest_1_3_whas__702_THEN_NOT_inputDe_ETC___d1712,
       IF_IF_inputDest_1_whas__28_THEN_NOT_inputDest__ETC___d852,
       IF_IF_inputDest_1_whas__28_THEN_inputDest_1_wg_ETC___d884,
       IF_IF_inputDest_2_whas__097_THEN_NOT_inputDest_ETC___d1107,
       IF_IF_inputDest_3_whas__112_THEN_NOT_inputDest_ETC___d1122,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1769,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1772,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1775,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1778,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1781,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1784,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1787,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1790,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1793,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1796,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1800,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1806,
       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1810,
       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1522,
       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1523,
       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1525,
       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1526,
       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1529,
       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1531,
       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1751,
       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1770,
       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1773,
       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1776,
       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1782,
       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1785,
       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1788,
       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1791,
       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1799,
       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1804,
       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1808,
       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1812,
       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1760,
       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1771,
       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1774,
       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1777,
       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1783,
       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1786,
       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1789,
       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1792,
       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1801,
       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1805,
       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1809,
       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1813,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1179,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1182,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1185,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1188,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1191,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1194,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1197,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1200,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1203,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1206,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1210,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1216,
       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1220,
       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d892,
       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d893,
       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d895,
       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d896,
       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d899,
       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d901,
       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1161,
       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1180,
       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1183,
       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1186,
       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1192,
       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1195,
       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1198,
       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1201,
       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1209,
       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1214,
       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1218,
       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1222,
       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1170,
       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1181,
       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1184,
       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1187,
       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1193,
       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1196,
       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1199,
       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1202,
       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1211,
       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1215,
       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1219,
       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1223,
       IF_NOT_moreFlits_1_126_BIT_0_311_312_OR_NOT_ou_ETC___d1316,
       IF_NOT_moreFlits_1_1_486_BIT_0_556_567_OR_NOT__ETC___d1573,
       IF_NOT_moreFlits_1_2_716_BIT_0_904_905_OR_NOT__ETC___d1909,
       IF_NOT_moreFlits_56_BIT_0_31_42_OR_NOT_outputC_ETC___d948,
       IF_inputDest_0_1_whas__058_THEN_NOT_inputDest__ETC___d1168,
       IF_inputDest_0_whas__82_THEN_NOT_inputDest_0_w_ETC___d878,
       IF_inputDest_1_0_1_whas__648_THEN_NOT_inputDes_ETC___d1758,
       IF_inputDest_1_0_whas__412_THEN_NOT_inputDest__ETC___d1508,
       IF_inputDest_1_1_2_whas__671_THEN_NOT_inputDes_ETC___d1749,
       IF_inputDest_1_1_whas__081_THEN_NOT_inputDest__ETC___d1159,
       IF_inputDest_1_2_whas__687_THEN_NOT_inputDest__ETC___d1741,
       IF_inputDest_1_3_whas__702_THEN_NOT_inputDest__ETC___d1767,
       IF_inputDest_1_whas__28_THEN_NOT_inputDest_1_w_ETC___d889,
       IF_inputDest_2_whas__097_THEN_NOT_inputDest_2__ETC___d1151,
       IF_inputDest_3_whas__112_THEN_NOT_inputDest_3__ETC___d1177,
       IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689,
       IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d709,
       IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d711,
       IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d714,
       IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d717,
       IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d720,
       IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d727,
       IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732,
       IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d752,
       IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d754,
       IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d757,
       IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d760,
       IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d763,
       IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d770,
       IF_split_0_flitLeft_64_EQ_0_65_THEN_split_0_aw_ETC___d773,
       IF_split_1_flitLeft_10_EQ_0_11_THEN_split_1_aw_ETC___d775,
       IF_split_2_flitLeft_56_EQ_0_57_THEN_split_2_aw_ETC___d777,
       NOT_IF_IF_inputDest_0_whas__82_THEN_inputDest__ETC___d800,
       NOT_IF_IF_inputDest_1_0_whas__412_THEN_inputDe_ETC___d1430,
       NOT_IF_IF_inputDest_1_whas__28_THEN_inputDest__ETC___d843,
       NOT_IF_moreFlits_56_BIT_0_31_THEN_1_ELSE_0_32__ETC___d941,
       NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727,
       NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137,
       cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1382,
       cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1384,
       cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1387,
       cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1390,
       cpu_mem_master_ar_peek__377_BITS_92_TO_69_379__ETC___d1393,
       cpu_mem_master_ar_peek__377_BITS_92_TO_69_379__ETC___d1400,
       inputCanPeek_0_whas__79_AND_inputCanPeek_0_wge_ETC___d855,
       moreFlits_1_1_486_BIT_5_487_AND_moreFlits_1_1__ETC___d1575,
       x__h123543,
       x__h123558,
       x__h123582,
       x__h123588,
       x__h123595,
       x__h123602,
       x__h123621,
       x__h123702,
       x__h123727,
       x__h123747,
       x__h123766;

  // action method cpu_reset_server_request_put
  assign RDY_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_cpu_reset_server_request_put =
	     EN_cpu_reset_server_request_put ;

  // actionvalue method cpu_reset_server_response_get
  assign cpu_reset_server_response_get = f_reset_rsps$D_OUT ;
  assign RDY_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_cpu_reset_server_response_get =
	     EN_cpu_reset_server_response_get ;

  // value method cpu_imem_master_aw_canPeek
  assign cpu_imem_master_aw_canPeek = delay_shim_awff$EMPTY_N ;

  // value method cpu_imem_master_aw_peek
  assign cpu_imem_master_aw_peek = delay_shim_awff$D_OUT ;
  assign RDY_cpu_imem_master_aw_peek = delay_shim_awff$EMPTY_N ;

  // action method cpu_imem_master_aw_drop
  assign RDY_cpu_imem_master_aw_drop = delay_shim_awff$EMPTY_N ;
  assign CAN_FIRE_cpu_imem_master_aw_drop = delay_shim_awff$EMPTY_N ;
  assign WILL_FIRE_cpu_imem_master_aw_drop = EN_cpu_imem_master_aw_drop ;

  // value method cpu_imem_master_w_canPeek
  assign cpu_imem_master_w_canPeek = delay_shim_wff$EMPTY_N ;

  // value method cpu_imem_master_w_peek
  assign cpu_imem_master_w_peek = delay_shim_wff$D_OUT[73:1] ;
  assign RDY_cpu_imem_master_w_peek = delay_shim_wff$EMPTY_N ;

  // action method cpu_imem_master_w_drop
  assign RDY_cpu_imem_master_w_drop = delay_shim_wff$EMPTY_N ;
  assign CAN_FIRE_cpu_imem_master_w_drop = delay_shim_wff$EMPTY_N ;
  assign WILL_FIRE_cpu_imem_master_w_drop = EN_cpu_imem_master_w_drop ;

  // value method cpu_imem_master_b_canPut
  assign cpu_imem_master_b_canPut = delay_shim_bff$FULL_N ;

  // action method cpu_imem_master_b_put
  assign RDY_cpu_imem_master_b_put = delay_shim_bff$FULL_N ;
  assign CAN_FIRE_cpu_imem_master_b_put = delay_shim_bff$FULL_N ;
  assign WILL_FIRE_cpu_imem_master_b_put = EN_cpu_imem_master_b_put ;

  // value method cpu_imem_master_ar_canPeek
  assign cpu_imem_master_ar_canPeek = delay_shim_arff$EMPTY_N ;

  // value method cpu_imem_master_ar_peek
  assign cpu_imem_master_ar_peek = delay_shim_arff$D_OUT ;
  assign RDY_cpu_imem_master_ar_peek = delay_shim_arff$EMPTY_N ;

  // action method cpu_imem_master_ar_drop
  assign RDY_cpu_imem_master_ar_drop = delay_shim_arff$EMPTY_N ;
  assign CAN_FIRE_cpu_imem_master_ar_drop = delay_shim_arff$EMPTY_N ;
  assign WILL_FIRE_cpu_imem_master_ar_drop = EN_cpu_imem_master_ar_drop ;

  // value method cpu_imem_master_r_canPut
  assign cpu_imem_master_r_canPut = delay_shim_rff$FULL_N ;

  // action method cpu_imem_master_r_put
  assign RDY_cpu_imem_master_r_put = delay_shim_rff$FULL_N ;
  assign CAN_FIRE_cpu_imem_master_r_put = delay_shim_rff$FULL_N ;
  assign WILL_FIRE_cpu_imem_master_r_put = EN_cpu_imem_master_r_put ;

  // value method core_mem_master_aw_canPeek
  assign core_mem_master_aw_canPeek =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read[99] ;

  // value method core_mem_master_aw_peek
  assign core_mem_master_aw_peek =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read[98:0] ;
  assign RDY_core_mem_master_aw_peek =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read[99] ;

  // action method core_mem_master_aw_drop
  assign RDY_core_mem_master_aw_drop =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read[99] ;
  assign CAN_FIRE_core_mem_master_aw_drop =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read[99] ;
  assign WILL_FIRE_core_mem_master_aw_drop = EN_core_mem_master_aw_drop ;

  // value method core_mem_master_w_canPeek
  assign core_mem_master_w_canPeek =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read[73] ;

  // value method core_mem_master_w_peek
  assign core_mem_master_w_peek =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read[72:0] ;
  assign RDY_core_mem_master_w_peek =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read[73] ;

  // action method core_mem_master_w_drop
  assign RDY_core_mem_master_w_drop =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read[73] ;
  assign CAN_FIRE_core_mem_master_w_drop =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read[73] ;
  assign WILL_FIRE_core_mem_master_w_drop = EN_core_mem_master_w_drop ;

  // value method core_mem_master_b_canPut
  assign core_mem_master_b_canPut = !axi4_mem_shim_tmp_shimMaster_bff_rv[8] ;

  // action method core_mem_master_b_put
  assign RDY_core_mem_master_b_put = !axi4_mem_shim_tmp_shimMaster_bff_rv[8] ;
  assign CAN_FIRE_core_mem_master_b_put =
	     !axi4_mem_shim_tmp_shimMaster_bff_rv[8] ;
  assign WILL_FIRE_core_mem_master_b_put = EN_core_mem_master_b_put ;

  // value method core_mem_master_ar_canPeek
  assign core_mem_master_ar_canPeek =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read[99] ;

  // value method core_mem_master_ar_peek
  assign core_mem_master_ar_peek =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read[98:0] ;
  assign RDY_core_mem_master_ar_peek =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read[99] ;

  // action method core_mem_master_ar_drop
  assign RDY_core_mem_master_ar_drop =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read[99] ;
  assign CAN_FIRE_core_mem_master_ar_drop =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read[99] ;
  assign WILL_FIRE_core_mem_master_ar_drop = EN_core_mem_master_ar_drop ;

  // value method core_mem_master_r_canPut
  assign core_mem_master_r_canPut = !axi4_mem_shim_tmp_shimMaster_rff_rv[73] ;

  // action method core_mem_master_r_put
  assign RDY_core_mem_master_r_put =
	     !axi4_mem_shim_tmp_shimMaster_rff_rv[73] ;
  assign CAN_FIRE_core_mem_master_r_put =
	     !axi4_mem_shim_tmp_shimMaster_rff_rv[73] ;
  assign WILL_FIRE_core_mem_master_r_put = EN_core_mem_master_r_put ;

  // value method dma_server_aw_canPut
  assign dma_server_aw_canPut = cpu$dma_server_aw_canPut ;

  // action method dma_server_aw_put
  assign RDY_dma_server_aw_put = 1'd1 ;
  assign CAN_FIRE_dma_server_aw_put = 1'd1 ;
  assign WILL_FIRE_dma_server_aw_put = EN_dma_server_aw_put ;

  // value method dma_server_w_canPut
  assign dma_server_w_canPut = cpu$dma_server_w_canPut ;

  // action method dma_server_w_put
  assign RDY_dma_server_w_put = 1'd1 ;
  assign CAN_FIRE_dma_server_w_put = 1'd1 ;
  assign WILL_FIRE_dma_server_w_put = EN_dma_server_w_put ;

  // value method dma_server_b_canPeek
  assign dma_server_b_canPeek = cpu$dma_server_b_canPeek ;

  // value method dma_server_b_peek
  assign dma_server_b_peek = cpu$dma_server_b_peek ;
  assign RDY_dma_server_b_peek = cpu$RDY_dma_server_b_peek ;

  // action method dma_server_b_drop
  assign RDY_dma_server_b_drop = cpu$RDY_dma_server_b_drop ;
  assign CAN_FIRE_dma_server_b_drop = cpu$RDY_dma_server_b_drop ;
  assign WILL_FIRE_dma_server_b_drop = EN_dma_server_b_drop ;

  // value method dma_server_ar_canPut
  assign dma_server_ar_canPut = cpu$dma_server_ar_canPut ;

  // action method dma_server_ar_put
  assign RDY_dma_server_ar_put = 1'd1 ;
  assign CAN_FIRE_dma_server_ar_put = 1'd1 ;
  assign WILL_FIRE_dma_server_ar_put = EN_dma_server_ar_put ;

  // value method dma_server_r_canPeek
  assign dma_server_r_canPeek = cpu$dma_server_r_canPeek ;

  // value method dma_server_r_peek
  assign dma_server_r_peek = cpu$dma_server_r_peek ;
  assign RDY_dma_server_r_peek = cpu$RDY_dma_server_r_peek ;

  // action method dma_server_r_drop
  assign RDY_dma_server_r_drop = cpu$RDY_dma_server_r_drop ;
  assign CAN_FIRE_dma_server_r_drop = cpu$RDY_dma_server_r_drop ;
  assign WILL_FIRE_dma_server_r_drop = EN_dma_server_r_drop ;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = cpu$mv_tohost_value ;
  assign RDY_mv_tohost_value = 1'd1 ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = cpu$mv_status ;

  // value method cms
  assign cms = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA ;

  // value method cms_ifc_pc
  assign cms_ifc_pc = cpu$cms_ifc_pc ;

  // value method cms_ifc_instr
  assign cms_ifc_instr = cpu$cms_ifc_instr ;

  // value method cms_ifc_pc_valid
  assign cms_ifc_pc_valid = cpu$cms_ifc_pc_valid ;

  // value method cms_ifc_stage1_ostatus
  assign cms_ifc_stage1_ostatus = cpu$cms_ifc_stage1_ostatus ;

  // value method cms_ifc_stage1_control
  assign cms_ifc_stage1_control = cpu$cms_ifc_stage1_control ;

  // value method cms_ifc_stage2_ostatus
  assign cms_ifc_stage2_ostatus = cpu$cms_ifc_stage2_ostatus ;

  // value method cms_ifc_performance_events
  assign cms_ifc_performance_events = cpu$cms_ifc_performance_events ;

  // submodule axi4_mem_shim_tmp_awreqff
  FIFO2 #(.width(32'd98),
	  .guarded(1'd1)) axi4_mem_shim_tmp_awreqff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(axi4_mem_shim_tmp_awreqff$D_IN),
						    .ENQ(axi4_mem_shim_tmp_awreqff$ENQ),
						    .DEQ(axi4_mem_shim_tmp_awreqff$DEQ),
						    .CLR(axi4_mem_shim_tmp_awreqff$CLR),
						    .D_OUT(axi4_mem_shim_tmp_awreqff$D_OUT),
						    .FULL_N(axi4_mem_shim_tmp_awreqff$FULL_N),
						    .EMPTY_N(axi4_mem_shim_tmp_awreqff$EMPTY_N));

  // submodule axi4_mem_shim_tmp_newRst
  MakeReset0 #(.init(1'd0)) axi4_mem_shim_tmp_newRst(.CLK(CLK),
						     .RST(RST_N),
						     .ASSERT_IN(axi4_mem_shim_tmp_newRst$ASSERT_IN),
						     .ASSERT_OUT(),
						     .OUT_RST(axi4_mem_shim_tmp_newRst$OUT_RST));

  // submodule axi4_mem_shim_tmp_tagCon
  mkTagController axi4_mem_shim_tmp_tagCon(.CLK(CLK),
					   .RST_N(axi4_mem_shim_tmp_newRst$OUT_RST),
					   .cache_request_put_val(axi4_mem_shim_tmp_tagCon$cache_request_put_val),
					   .memory_response_put_val(axi4_mem_shim_tmp_tagCon$memory_response_put_val),
					   .EN_cache_request_put(axi4_mem_shim_tmp_tagCon$EN_cache_request_put),
					   .EN_cache_response_get(axi4_mem_shim_tmp_tagCon$EN_cache_response_get),
					   .EN_memory_request_get(axi4_mem_shim_tmp_tagCon$EN_memory_request_get),
					   .EN_memory_response_put(axi4_mem_shim_tmp_tagCon$EN_memory_response_put),
					   .cache_request_canPut(),
					   .RDY_cache_request_put(axi4_mem_shim_tmp_tagCon$RDY_cache_request_put),
					   .cache_response_canGet(),
					   .cache_response_peek(),
					   .RDY_cache_response_peek(),
					   .cache_response_get(axi4_mem_shim_tmp_tagCon$cache_response_get),
					   .RDY_cache_response_get(axi4_mem_shim_tmp_tagCon$RDY_cache_response_get),
					   .memory_request_canGet(),
					   .memory_request_peek(),
					   .RDY_memory_request_peek(),
					   .memory_request_get(axi4_mem_shim_tmp_tagCon$memory_request_get),
					   .RDY_memory_request_get(axi4_mem_shim_tmp_tagCon$RDY_memory_request_get),
					   .memory_response_canPut(),
					   .RDY_memory_response_put(axi4_mem_shim_tmp_tagCon$RDY_memory_response_put),
					   .events(axi4_mem_shim_tmp_tagCon$events),
					   .RDY_events());

  // submodule cpu
  mkCPU cpu(.CLK(CLK),
	    .RST_N(RST_N),
	    .dma_server_ar_put_val(cpu$dma_server_ar_put_val),
	    .dma_server_aw_put_val(cpu$dma_server_aw_put_val),
	    .dma_server_w_put_val(cpu$dma_server_w_put_val),
	    .hart0_server_reset_request_put(cpu$hart0_server_reset_request_put),
	    .imem_master_b_put_val(cpu$imem_master_b_put_val),
	    .imem_master_r_put_val(cpu$imem_master_r_put_val),
	    .m_external_interrupt_req_set_not_clear(cpu$m_external_interrupt_req_set_not_clear),
	    .mem_master_b_put_val(cpu$mem_master_b_put_val),
	    .mem_master_r_put_val(cpu$mem_master_r_put_val),
	    .nmi_req_set_not_clear(cpu$nmi_req_set_not_clear),
	    .relay_external_events_master_evts(cpu$relay_external_events_master_evts),
	    .relay_external_events_slave_evts(cpu$relay_external_events_slave_evts),
	    .relay_external_events_tag_cache_evts(cpu$relay_external_events_tag_cache_evts),
	    .s_external_interrupt_req_set_not_clear(cpu$s_external_interrupt_req_set_not_clear),
	    .set_verbosity_logdelay(cpu$set_verbosity_logdelay),
	    .set_verbosity_verbosity(cpu$set_verbosity_verbosity),
	    .set_watch_tohost_tohost_addr(cpu$set_watch_tohost_tohost_addr),
	    .set_watch_tohost_watch_tohost(cpu$set_watch_tohost_watch_tohost),
	    .software_interrupt_req_set_not_clear(cpu$software_interrupt_req_set_not_clear),
	    .timer_interrupt_req_set_not_clear(cpu$timer_interrupt_req_set_not_clear),
	    .EN_hart0_server_reset_request_put(cpu$EN_hart0_server_reset_request_put),
	    .EN_hart0_server_reset_response_get(cpu$EN_hart0_server_reset_response_get),
	    .EN_imem_master_aw_drop(cpu$EN_imem_master_aw_drop),
	    .EN_imem_master_w_drop(cpu$EN_imem_master_w_drop),
	    .EN_imem_master_b_put(cpu$EN_imem_master_b_put),
	    .EN_imem_master_ar_drop(cpu$EN_imem_master_ar_drop),
	    .EN_imem_master_r_put(cpu$EN_imem_master_r_put),
	    .EN_mem_master_aw_drop(cpu$EN_mem_master_aw_drop),
	    .EN_mem_master_w_drop(cpu$EN_mem_master_w_drop),
	    .EN_mem_master_b_put(cpu$EN_mem_master_b_put),
	    .EN_mem_master_ar_drop(cpu$EN_mem_master_ar_drop),
	    .EN_mem_master_r_put(cpu$EN_mem_master_r_put),
	    .EN_dma_server_aw_put(cpu$EN_dma_server_aw_put),
	    .EN_dma_server_w_put(cpu$EN_dma_server_w_put),
	    .EN_dma_server_b_drop(cpu$EN_dma_server_b_drop),
	    .EN_dma_server_ar_put(cpu$EN_dma_server_ar_put),
	    .EN_dma_server_r_drop(cpu$EN_dma_server_r_drop),
	    .EN_relay_external_events(cpu$EN_relay_external_events),
	    .EN_set_verbosity(cpu$EN_set_verbosity),
	    .EN_set_watch_tohost(cpu$EN_set_watch_tohost),
	    .EN_ma_ddr4_ready(cpu$EN_ma_ddr4_ready),
	    .RDY_hart0_server_reset_request_put(cpu$RDY_hart0_server_reset_request_put),
	    .hart0_server_reset_response_get(cpu$hart0_server_reset_response_get),
	    .RDY_hart0_server_reset_response_get(cpu$RDY_hart0_server_reset_response_get),
	    .imem_master_aw_canPeek(cpu$imem_master_aw_canPeek),
	    .imem_master_aw_peek(cpu$imem_master_aw_peek),
	    .RDY_imem_master_aw_peek(cpu$RDY_imem_master_aw_peek),
	    .RDY_imem_master_aw_drop(cpu$RDY_imem_master_aw_drop),
	    .imem_master_w_canPeek(cpu$imem_master_w_canPeek),
	    .imem_master_w_peek(cpu$imem_master_w_peek),
	    .RDY_imem_master_w_peek(cpu$RDY_imem_master_w_peek),
	    .RDY_imem_master_w_drop(cpu$RDY_imem_master_w_drop),
	    .imem_master_b_canPut(cpu$imem_master_b_canPut),
	    .RDY_imem_master_b_put(cpu$RDY_imem_master_b_put),
	    .imem_master_ar_canPeek(cpu$imem_master_ar_canPeek),
	    .imem_master_ar_peek(cpu$imem_master_ar_peek),
	    .RDY_imem_master_ar_peek(cpu$RDY_imem_master_ar_peek),
	    .RDY_imem_master_ar_drop(cpu$RDY_imem_master_ar_drop),
	    .imem_master_r_canPut(cpu$imem_master_r_canPut),
	    .RDY_imem_master_r_put(cpu$RDY_imem_master_r_put),
	    .mem_master_aw_canPeek(cpu$mem_master_aw_canPeek),
	    .mem_master_aw_peek(cpu$mem_master_aw_peek),
	    .RDY_mem_master_aw_peek(cpu$RDY_mem_master_aw_peek),
	    .RDY_mem_master_aw_drop(cpu$RDY_mem_master_aw_drop),
	    .mem_master_w_canPeek(cpu$mem_master_w_canPeek),
	    .mem_master_w_peek(cpu$mem_master_w_peek),
	    .RDY_mem_master_w_peek(cpu$RDY_mem_master_w_peek),
	    .RDY_mem_master_w_drop(cpu$RDY_mem_master_w_drop),
	    .mem_master_b_canPut(cpu$mem_master_b_canPut),
	    .RDY_mem_master_b_put(cpu$RDY_mem_master_b_put),
	    .mem_master_ar_canPeek(cpu$mem_master_ar_canPeek),
	    .mem_master_ar_peek(cpu$mem_master_ar_peek),
	    .RDY_mem_master_ar_peek(cpu$RDY_mem_master_ar_peek),
	    .RDY_mem_master_ar_drop(cpu$RDY_mem_master_ar_drop),
	    .mem_master_r_canPut(cpu$mem_master_r_canPut),
	    .RDY_mem_master_r_put(cpu$RDY_mem_master_r_put),
	    .dma_server_aw_canPut(cpu$dma_server_aw_canPut),
	    .RDY_dma_server_aw_put(),
	    .dma_server_w_canPut(cpu$dma_server_w_canPut),
	    .RDY_dma_server_w_put(),
	    .dma_server_b_canPeek(cpu$dma_server_b_canPeek),
	    .dma_server_b_peek(cpu$dma_server_b_peek),
	    .RDY_dma_server_b_peek(cpu$RDY_dma_server_b_peek),
	    .RDY_dma_server_b_drop(cpu$RDY_dma_server_b_drop),
	    .dma_server_ar_canPut(cpu$dma_server_ar_canPut),
	    .RDY_dma_server_ar_put(),
	    .dma_server_r_canPeek(cpu$dma_server_r_canPeek),
	    .dma_server_r_peek(cpu$dma_server_r_peek),
	    .RDY_dma_server_r_peek(cpu$RDY_dma_server_r_peek),
	    .RDY_dma_server_r_drop(cpu$RDY_dma_server_r_drop),
	    .RDY_relay_external_events(),
	    .RDY_set_verbosity(),
	    .RDY_set_watch_tohost(),
	    .mv_tohost_value(cpu$mv_tohost_value),
	    .RDY_mv_tohost_value(),
	    .RDY_ma_ddr4_ready(),
	    .mv_status(cpu$mv_status),
	    .cms_ifc_pc(cpu$cms_ifc_pc),
	    .cms_ifc_instr(cpu$cms_ifc_instr),
	    .cms_ifc_pc_valid(cpu$cms_ifc_pc_valid),
	    .cms_ifc_stage1_ostatus(cpu$cms_ifc_stage1_ostatus),
	    .cms_ifc_stage1_control(cpu$cms_ifc_stage1_control),
	    .cms_ifc_stage2_ostatus(cpu$cms_ifc_stage2_ostatus),
	    .cms_ifc_performance_events(cpu$cms_ifc_performance_events));

  // submodule delay_shim_arff
  SizedFIFO #(.p1width(32'd98),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) delay_shim_arff(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(delay_shim_arff$D_IN),
					      .ENQ(delay_shim_arff$ENQ),
					      .DEQ(delay_shim_arff$DEQ),
					      .CLR(delay_shim_arff$CLR),
					      .D_OUT(delay_shim_arff$D_OUT),
					      .FULL_N(delay_shim_arff$FULL_N),
					      .EMPTY_N(delay_shim_arff$EMPTY_N));

  // submodule delay_shim_awff
  SizedFIFO #(.p1width(32'd98),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) delay_shim_awff(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(delay_shim_awff$D_IN),
					      .ENQ(delay_shim_awff$ENQ),
					      .DEQ(delay_shim_awff$DEQ),
					      .CLR(delay_shim_awff$CLR),
					      .D_OUT(delay_shim_awff$D_OUT),
					      .FULL_N(delay_shim_awff$FULL_N),
					      .EMPTY_N(delay_shim_awff$EMPTY_N));

  // submodule delay_shim_bff
  SizedFIFO #(.p1width(32'd7),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) delay_shim_bff(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(delay_shim_bff$D_IN),
					     .ENQ(delay_shim_bff$ENQ),
					     .DEQ(delay_shim_bff$DEQ),
					     .CLR(delay_shim_bff$CLR),
					     .D_OUT(delay_shim_bff$D_OUT),
					     .FULL_N(delay_shim_bff$FULL_N),
					     .EMPTY_N(delay_shim_bff$EMPTY_N));

  // submodule delay_shim_rff
  SizedFIFO #(.p1width(32'd73),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) delay_shim_rff(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(delay_shim_rff$D_IN),
					     .ENQ(delay_shim_rff$ENQ),
					     .DEQ(delay_shim_rff$DEQ),
					     .CLR(delay_shim_rff$CLR),
					     .D_OUT(delay_shim_rff$D_OUT),
					     .FULL_N(delay_shim_rff$FULL_N),
					     .EMPTY_N(delay_shim_rff$EMPTY_N));

  // submodule delay_shim_wff
  SizedFIFO #(.p1width(32'd74),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) delay_shim_wff(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(delay_shim_wff$D_IN),
					     .ENQ(delay_shim_wff$ENQ),
					     .DEQ(delay_shim_wff$DEQ),
					     .CLR(delay_shim_wff$CLR),
					     .D_OUT(delay_shim_wff$D_OUT),
					     .FULL_N(delay_shim_wff$FULL_N),
					     .EMPTY_N(delay_shim_wff$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_reqs$D_IN),
						      .ENQ(f_reset_reqs$ENQ),
						      .DEQ(f_reset_reqs$DEQ),
						      .CLR(f_reset_reqs$CLR),
						      .D_OUT(f_reset_reqs$D_OUT),
						      .FULL_N(f_reset_reqs$FULL_N),
						      .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_rsps$D_IN),
						      .ENQ(f_reset_rsps$ENQ),
						      .DEQ(f_reset_rsps$DEQ),
						      .CLR(f_reset_rsps$CLR),
						      .D_OUT(f_reset_rsps$D_OUT),
						      .FULL_N(f_reset_rsps$FULL_N),
						      .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule merged_0_awff
  FIFO2 #(.width(32'd97), .guarded(1'd1)) merged_0_awff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(merged_0_awff$D_IN),
							.ENQ(merged_0_awff$ENQ),
							.DEQ(merged_0_awff$DEQ),
							.CLR(merged_0_awff$CLR),
							.D_OUT(merged_0_awff$D_OUT),
							.FULL_N(merged_0_awff$FULL_N),
							.EMPTY_N(merged_0_awff$EMPTY_N));

  // submodule merged_0_wff
  FIFO2 #(.width(32'd74), .guarded(1'd1)) merged_0_wff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(merged_0_wff$D_IN),
						       .ENQ(merged_0_wff$ENQ),
						       .DEQ(merged_0_wff$DEQ),
						       .CLR(merged_0_wff$CLR),
						       .D_OUT(merged_0_wff$D_OUT),
						       .FULL_N(merged_0_wff$FULL_N),
						       .EMPTY_N(merged_0_wff$EMPTY_N));

  // submodule merged_1_awff
  FIFO2 #(.width(32'd97), .guarded(1'd1)) merged_1_awff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(merged_1_awff$D_IN),
							.ENQ(merged_1_awff$ENQ),
							.DEQ(merged_1_awff$DEQ),
							.CLR(merged_1_awff$CLR),
							.D_OUT(merged_1_awff$D_OUT),
							.FULL_N(),
							.EMPTY_N(merged_1_awff$EMPTY_N));

  // submodule merged_1_wff
  FIFO2 #(.width(32'd74), .guarded(1'd1)) merged_1_wff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(merged_1_wff$D_IN),
						       .ENQ(merged_1_wff$ENQ),
						       .DEQ(merged_1_wff$DEQ),
						       .CLR(merged_1_wff$CLR),
						       .D_OUT(merged_1_wff$D_OUT),
						       .FULL_N(),
						       .EMPTY_N(merged_1_wff$EMPTY_N));

  // submodule near_mem_io
  mkNear_Mem_IO_AXI4 near_mem_io(.CLK(CLK),
				 .RST_N(RST_N),
				 .axi4_slave_ar_put_val(near_mem_io$axi4_slave_ar_put_val),
				 .axi4_slave_aw_put_val(near_mem_io$axi4_slave_aw_put_val),
				 .axi4_slave_w_put_val(near_mem_io$axi4_slave_w_put_val),
				 .set_addr_map_addr_base(near_mem_io$set_addr_map_addr_base),
				 .set_addr_map_addr_lim(near_mem_io$set_addr_map_addr_lim),
				 .EN_server_reset_request_put(near_mem_io$EN_server_reset_request_put),
				 .EN_server_reset_response_get(near_mem_io$EN_server_reset_response_get),
				 .EN_set_addr_map(near_mem_io$EN_set_addr_map),
				 .EN_axi4_slave_aw_put(near_mem_io$EN_axi4_slave_aw_put),
				 .EN_axi4_slave_w_put(near_mem_io$EN_axi4_slave_w_put),
				 .EN_axi4_slave_b_drop(near_mem_io$EN_axi4_slave_b_drop),
				 .EN_axi4_slave_ar_put(near_mem_io$EN_axi4_slave_ar_put),
				 .EN_axi4_slave_r_drop(near_mem_io$EN_axi4_slave_r_drop),
				 .EN_get_timer_interrupt_req_get(near_mem_io$EN_get_timer_interrupt_req_get),
				 .EN_get_sw_interrupt_req_get(near_mem_io$EN_get_sw_interrupt_req_get),
				 .RDY_server_reset_request_put(near_mem_io$RDY_server_reset_request_put),
				 .RDY_server_reset_response_get(near_mem_io$RDY_server_reset_response_get),
				 .RDY_set_addr_map(),
				 .axi4_slave_aw_canPut(near_mem_io$axi4_slave_aw_canPut),
				 .RDY_axi4_slave_aw_put(near_mem_io$RDY_axi4_slave_aw_put),
				 .axi4_slave_w_canPut(near_mem_io$axi4_slave_w_canPut),
				 .RDY_axi4_slave_w_put(near_mem_io$RDY_axi4_slave_w_put),
				 .axi4_slave_b_canPeek(near_mem_io$axi4_slave_b_canPeek),
				 .axi4_slave_b_peek(near_mem_io$axi4_slave_b_peek),
				 .RDY_axi4_slave_b_peek(near_mem_io$RDY_axi4_slave_b_peek),
				 .RDY_axi4_slave_b_drop(near_mem_io$RDY_axi4_slave_b_drop),
				 .axi4_slave_ar_canPut(near_mem_io$axi4_slave_ar_canPut),
				 .RDY_axi4_slave_ar_put(near_mem_io$RDY_axi4_slave_ar_put),
				 .axi4_slave_r_canPeek(near_mem_io$axi4_slave_r_canPeek),
				 .axi4_slave_r_peek(near_mem_io$axi4_slave_r_peek),
				 .RDY_axi4_slave_r_peek(near_mem_io$RDY_axi4_slave_r_peek),
				 .RDY_axi4_slave_r_drop(near_mem_io$RDY_axi4_slave_r_drop),
				 .get_timer_interrupt_req_get(near_mem_io$get_timer_interrupt_req_get),
				 .RDY_get_timer_interrupt_req_get(near_mem_io$RDY_get_timer_interrupt_req_get),
				 .get_sw_interrupt_req_get(near_mem_io$get_sw_interrupt_req_get),
				 .RDY_get_sw_interrupt_req_get(near_mem_io$RDY_get_sw_interrupt_req_get));

  // submodule noRouteSlv_rspFF
  FIFO2 #(.width(32'd7), .guarded(1'd1)) noRouteSlv_rspFF(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(noRouteSlv_rspFF$D_IN),
							  .ENQ(noRouteSlv_rspFF$ENQ),
							  .DEQ(noRouteSlv_rspFF$DEQ),
							  .CLR(noRouteSlv_rspFF$CLR),
							  .D_OUT(noRouteSlv_rspFF$D_OUT),
							  .FULL_N(noRouteSlv_rspFF$FULL_N),
							  .EMPTY_N(noRouteSlv_rspFF$EMPTY_N));

  // submodule plic
  mkPLIC_16_2_7 plic(.CLK(CLK),
		     .RST_N(RST_N),
		     .axi4_slave_ar_put_val(plic$axi4_slave_ar_put_val),
		     .axi4_slave_aw_put_val(plic$axi4_slave_aw_put_val),
		     .axi4_slave_w_put_val(plic$axi4_slave_w_put_val),
		     .set_addr_map_addr_base(plic$set_addr_map_addr_base),
		     .set_addr_map_addr_lim(plic$set_addr_map_addr_lim),
		     .set_verbosity_verbosity(plic$set_verbosity_verbosity),
		     .v_sources_0_m_interrupt_req_set_not_clear(plic$v_sources_0_m_interrupt_req_set_not_clear),
		     .v_sources_10_m_interrupt_req_set_not_clear(plic$v_sources_10_m_interrupt_req_set_not_clear),
		     .v_sources_11_m_interrupt_req_set_not_clear(plic$v_sources_11_m_interrupt_req_set_not_clear),
		     .v_sources_12_m_interrupt_req_set_not_clear(plic$v_sources_12_m_interrupt_req_set_not_clear),
		     .v_sources_13_m_interrupt_req_set_not_clear(plic$v_sources_13_m_interrupt_req_set_not_clear),
		     .v_sources_14_m_interrupt_req_set_not_clear(plic$v_sources_14_m_interrupt_req_set_not_clear),
		     .v_sources_15_m_interrupt_req_set_not_clear(plic$v_sources_15_m_interrupt_req_set_not_clear),
		     .v_sources_1_m_interrupt_req_set_not_clear(plic$v_sources_1_m_interrupt_req_set_not_clear),
		     .v_sources_2_m_interrupt_req_set_not_clear(plic$v_sources_2_m_interrupt_req_set_not_clear),
		     .v_sources_3_m_interrupt_req_set_not_clear(plic$v_sources_3_m_interrupt_req_set_not_clear),
		     .v_sources_4_m_interrupt_req_set_not_clear(plic$v_sources_4_m_interrupt_req_set_not_clear),
		     .v_sources_5_m_interrupt_req_set_not_clear(plic$v_sources_5_m_interrupt_req_set_not_clear),
		     .v_sources_6_m_interrupt_req_set_not_clear(plic$v_sources_6_m_interrupt_req_set_not_clear),
		     .v_sources_7_m_interrupt_req_set_not_clear(plic$v_sources_7_m_interrupt_req_set_not_clear),
		     .v_sources_8_m_interrupt_req_set_not_clear(plic$v_sources_8_m_interrupt_req_set_not_clear),
		     .v_sources_9_m_interrupt_req_set_not_clear(plic$v_sources_9_m_interrupt_req_set_not_clear),
		     .EN_set_verbosity(plic$EN_set_verbosity),
		     .EN_show_PLIC_state(plic$EN_show_PLIC_state),
		     .EN_server_reset_request_put(plic$EN_server_reset_request_put),
		     .EN_server_reset_response_get(plic$EN_server_reset_response_get),
		     .EN_set_addr_map(plic$EN_set_addr_map),
		     .EN_axi4_slave_aw_put(plic$EN_axi4_slave_aw_put),
		     .EN_axi4_slave_w_put(plic$EN_axi4_slave_w_put),
		     .EN_axi4_slave_b_drop(plic$EN_axi4_slave_b_drop),
		     .EN_axi4_slave_ar_put(plic$EN_axi4_slave_ar_put),
		     .EN_axi4_slave_r_drop(plic$EN_axi4_slave_r_drop),
		     .RDY_set_verbosity(),
		     .RDY_show_PLIC_state(),
		     .RDY_server_reset_request_put(plic$RDY_server_reset_request_put),
		     .RDY_server_reset_response_get(plic$RDY_server_reset_response_get),
		     .RDY_set_addr_map(),
		     .axi4_slave_aw_canPut(plic$axi4_slave_aw_canPut),
		     .RDY_axi4_slave_aw_put(plic$RDY_axi4_slave_aw_put),
		     .axi4_slave_w_canPut(plic$axi4_slave_w_canPut),
		     .RDY_axi4_slave_w_put(plic$RDY_axi4_slave_w_put),
		     .axi4_slave_b_canPeek(plic$axi4_slave_b_canPeek),
		     .axi4_slave_b_peek(plic$axi4_slave_b_peek),
		     .RDY_axi4_slave_b_peek(plic$RDY_axi4_slave_b_peek),
		     .RDY_axi4_slave_b_drop(plic$RDY_axi4_slave_b_drop),
		     .axi4_slave_ar_canPut(plic$axi4_slave_ar_canPut),
		     .RDY_axi4_slave_ar_put(plic$RDY_axi4_slave_ar_put),
		     .axi4_slave_r_canPeek(plic$axi4_slave_r_canPeek),
		     .axi4_slave_r_peek(plic$axi4_slave_r_peek),
		     .RDY_axi4_slave_r_peek(plic$RDY_axi4_slave_r_peek),
		     .RDY_axi4_slave_r_drop(plic$RDY_axi4_slave_r_drop),
		     .v_targets_0_m_eip(plic$v_targets_0_m_eip),
		     .v_targets_1_m_eip(plic$v_targets_1_m_eip));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_range(soc_map$m_near_mem_io_addr_range),
		    .m_plic_addr_range(soc_map$m_plic_addr_range),
		    .m_uart0_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_mem0_controller_addr_range(),
		    .m_tcm_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value(),
		    .m_pcc_reset_value(),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(),
		    .m_mepcc_reset_value());

  // rule RL_set_input_canPeek_wire
  assign CAN_FIRE_RL_set_input_canPeek_wire = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire = 1'd1 ;

  // rule RL_set_input_canPeek_wire_1
  assign CAN_FIRE_RL_set_input_canPeek_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_1 = 1'd1 ;

  // rule RL_set_dflt_output_canPut_wire
  assign CAN_FIRE_RL_set_dflt_output_canPut_wire = 1'd1 ;
  assign WILL_FIRE_RL_set_dflt_output_canPut_wire = 1'd1 ;

  // rule RL_set_input_canPeek_wire_2
  assign CAN_FIRE_RL_set_input_canPeek_wire_2 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_2 = 1'd1 ;

  // rule RL_set_input_peek_wires_2
  assign CAN_FIRE_RL_set_input_peek_wires_2 = noRouteSlv_rspFF$EMPTY_N ;
  assign WILL_FIRE_RL_set_input_peek_wires_2 = noRouteSlv_rspFF$EMPTY_N ;

  // rule RL_set_input_canPeek_wire_4
  assign CAN_FIRE_RL_set_input_canPeek_wire_4 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_4 = 1'd1 ;

  // rule RL_set_input_peek_wires_4
  assign CAN_FIRE_RL_set_input_peek_wires_4 =
	     near_mem_io$RDY_axi4_slave_b_peek ;
  assign WILL_FIRE_RL_set_input_peek_wires_4 =
	     near_mem_io$RDY_axi4_slave_b_peek ;

  // rule RL_set_input_canPeek_wire_5
  assign CAN_FIRE_RL_set_input_canPeek_wire_5 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_5 = 1'd1 ;

  // rule RL_set_input_peek_wires_5
  assign CAN_FIRE_RL_set_input_peek_wires_5 = plic$RDY_axi4_slave_b_peek ;
  assign WILL_FIRE_RL_set_input_peek_wires_5 = plic$RDY_axi4_slave_b_peek ;

  // rule RL_set_output_canPut_wire_3
  assign CAN_FIRE_RL_set_output_canPut_wire_3 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_3 = 1'd1 ;

  // rule RL_set_output_canPut_wire_4
  assign CAN_FIRE_RL_set_output_canPut_wire_4 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_4 = 1'd1 ;

  // rule RL_input_follow_flit_4
  assign CAN_FIRE_RL_input_follow_flit_4 =
	     near_mem_io$RDY_axi4_slave_b_drop && moreFlits_1[6] &&
	     moreFlits_1[4] &&
	     near_mem_io$axi4_slave_b_canPeek &&
	     IF_NOT_moreFlits_1_126_BIT_0_311_312_OR_NOT_ou_ETC___d1316 ;
  assign WILL_FIRE_RL_input_follow_flit_4 = CAN_FIRE_RL_input_follow_flit_4 ;

  // rule RL_input_follow_flit_5
  assign CAN_FIRE_RL_input_follow_flit_5 =
	     plic$RDY_axi4_slave_b_drop && moreFlits_1[6] && moreFlits_1[5] &&
	     plic$axi4_slave_b_canPeek &&
	     IF_NOT_moreFlits_1_126_BIT_0_311_312_OR_NOT_ou_ETC___d1316 ;
  assign WILL_FIRE_RL_input_follow_flit_5 = CAN_FIRE_RL_input_follow_flit_5 ;

  // rule RL_set_input_canPeek_wire_6
  assign CAN_FIRE_RL_set_input_canPeek_wire_6 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_6 = 1'd1 ;

  // rule RL_set_input_peek_wires_6
  assign CAN_FIRE_RL_set_input_peek_wires_6 = cpu$RDY_mem_master_ar_peek ;
  assign WILL_FIRE_RL_set_input_peek_wires_6 = cpu$RDY_mem_master_ar_peek ;

  // rule RL_set_input_canPeek_wire_7
  assign CAN_FIRE_RL_set_input_canPeek_wire_7 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_7 = 1'd1 ;

  // rule RL_set_output_canPut_wire_5
  assign CAN_FIRE_RL_set_output_canPut_wire_5 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_5 = 1'd1 ;

  // rule RL_set_output_canPut_wire_6
  assign CAN_FIRE_RL_set_output_canPut_wire_6 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_6 = 1'd1 ;

  // rule RL_set_output_canPut_wire_7
  assign CAN_FIRE_RL_set_output_canPut_wire_7 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_7 = 1'd1 ;

  // rule RL_set_dflt_output_canPut_wire_1
  assign CAN_FIRE_RL_set_dflt_output_canPut_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_set_dflt_output_canPut_wire_1 = 1'd1 ;

  // rule RL_arbitrate_2
  assign CAN_FIRE_RL_arbitrate_2 =
	     cpu$mem_master_ar_canPeek &&
	     (NOT_IF_IF_inputDest_1_0_whas__412_THEN_inputDe_ETC___d1430 ||
	      IF_IF_inputDest_1_0_whas__412_THEN_NOT_inputDe_ETC___d1452) &&
	     !moreFlits_1_1[5] ;
  assign WILL_FIRE_RL_arbitrate_2 = CAN_FIRE_RL_arbitrate_2 ;

  // rule RL_arbitration_fail_6
  assign CAN_FIRE_RL_arbitration_fail_6 =
	     CAN_FIRE_RL_arbitrate_2 && selectInput_1_0$wget &&
	     !cpu$mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_arbitration_fail_6 = CAN_FIRE_RL_arbitration_fail_6 ;

  // rule RL_arbitration_fail_7
  assign CAN_FIRE_RL_arbitration_fail_7 =
	     CAN_FIRE_RL_arbitrate_2 && selectInput_1_1_1$wget ;
  assign WILL_FIRE_RL_arbitration_fail_7 = CAN_FIRE_RL_arbitration_fail_7 ;

  // rule RL_input_first_flit_6
  assign CAN_FIRE_RL_input_first_flit_6 =
	     cpu$RDY_mem_master_ar_drop && !moreFlits_1_1[5] &&
	     CAN_FIRE_RL_arbitrate_2 &&
	     selectInput_1_0$wget &&
	     cpu$mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_input_first_flit_6 = CAN_FIRE_RL_input_first_flit_6 ;

  // rule RL_input_follow_flit_6
  assign CAN_FIRE_RL_input_follow_flit_6 =
	     cpu$RDY_mem_master_ar_drop &&
	     moreFlits_1_1_486_BIT_5_487_AND_moreFlits_1_1__ETC___d1575 ;
  assign WILL_FIRE_RL_input_follow_flit_6 = CAN_FIRE_RL_input_follow_flit_6 ;

  // rule __me_check_153
  assign CAN_FIRE___me_check_153 = 1'b1 ;
  assign WILL_FIRE___me_check_153 = 1'b1 ;

  // rule RL_output_selected_5
  assign CAN_FIRE_RL_output_selected_5 = x__h123595 ;
  assign WILL_FIRE_RL_output_selected_5 = x__h123595 ;

  // rule RL_set_input_canPeek_wire_8
  assign CAN_FIRE_RL_set_input_canPeek_wire_8 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_8 = 1'd1 ;

  // rule RL_dflt_output_selected_1
  assign CAN_FIRE_RL_dflt_output_selected_1 =
	     toDfltOutput_1_1$whas && noRouteSlv_1_flitCount == 9'd0 ;
  assign WILL_FIRE_RL_dflt_output_selected_1 =
	     CAN_FIRE_RL_dflt_output_selected_1 ;

  // rule RL_set_input_peek_wires_8
  assign CAN_FIRE_RL_set_input_peek_wires_8 = noRouteSlv_1_flitCount != 9'd0 ;
  assign WILL_FIRE_RL_set_input_peek_wires_8 =
	     CAN_FIRE_RL_set_input_peek_wires_8 ;

  // rule RL_set_input_canPeek_wire_10
  assign CAN_FIRE_RL_set_input_canPeek_wire_10 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_10 = 1'd1 ;

  // rule RL_output_selected_6
  assign CAN_FIRE_RL_output_selected_6 =
	     near_mem_io$RDY_axi4_slave_ar_put && toOutput_1_1_1$whas &&
	     near_mem_io$axi4_slave_ar_canPut ;
  assign WILL_FIRE_RL_output_selected_6 = CAN_FIRE_RL_output_selected_6 ;

  // rule RL_set_input_peek_wires_10
  assign CAN_FIRE_RL_set_input_peek_wires_10 =
	     near_mem_io$RDY_axi4_slave_r_peek ;
  assign WILL_FIRE_RL_set_input_peek_wires_10 =
	     near_mem_io$RDY_axi4_slave_r_peek ;

  // rule RL_set_input_canPeek_wire_11
  assign CAN_FIRE_RL_set_input_canPeek_wire_11 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_11 = 1'd1 ;

  // rule RL_output_selected_7
  assign CAN_FIRE_RL_output_selected_7 =
	     plic$RDY_axi4_slave_ar_put && toOutput_1_2$whas &&
	     plic$axi4_slave_ar_canPut ;
  assign WILL_FIRE_RL_output_selected_7 = CAN_FIRE_RL_output_selected_7 ;

  // rule __me_check_155
  assign CAN_FIRE___me_check_155 = 1'b1 ;
  assign WILL_FIRE___me_check_155 = 1'b1 ;

  // rule RL_set_input_peek_wires_11
  assign CAN_FIRE_RL_set_input_peek_wires_11 = plic$RDY_axi4_slave_r_peek ;
  assign WILL_FIRE_RL_set_input_peek_wires_11 = plic$RDY_axi4_slave_r_peek ;

  // rule RL_set_output_canPut_wire_8
  assign CAN_FIRE_RL_set_output_canPut_wire_8 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_8 = 1'd1 ;

  // rule RL_set_output_canPut_wire_9
  assign CAN_FIRE_RL_set_output_canPut_wire_9 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_9 = 1'd1 ;

  // rule RL_input_follow_flit_8
  assign CAN_FIRE_RL_input_follow_flit_8 =
	     noRouteSlv_1_flitCount != 9'd0 && moreFlits_1_2[6] &&
	     moreFlits_1_2[2] &&
	     noRouteSlv_1_flitCount != 9'd0 &&
	     IF_NOT_moreFlits_1_2_716_BIT_0_904_905_OR_NOT__ETC___d1909 ;
  assign WILL_FIRE_RL_input_follow_flit_8 = CAN_FIRE_RL_input_follow_flit_8 ;

  // rule RL_input_follow_flit_10
  assign CAN_FIRE_RL_input_follow_flit_10 =
	     near_mem_io$RDY_axi4_slave_r_drop && moreFlits_1_2[6] &&
	     moreFlits_1_2[4] &&
	     near_mem_io$axi4_slave_r_canPeek &&
	     IF_NOT_moreFlits_1_2_716_BIT_0_904_905_OR_NOT__ETC___d1909 ;
  assign WILL_FIRE_RL_input_follow_flit_10 =
	     CAN_FIRE_RL_input_follow_flit_10 ;

  // rule RL_input_follow_flit_11
  assign CAN_FIRE_RL_input_follow_flit_11 =
	     plic$RDY_axi4_slave_r_drop && moreFlits_1_2[6] &&
	     moreFlits_1_2[5] &&
	     plic$axi4_slave_r_canPeek &&
	     IF_NOT_moreFlits_1_2_716_BIT_0_904_905_OR_NOT__ETC___d1909 ;
  assign WILL_FIRE_RL_input_follow_flit_11 =
	     CAN_FIRE_RL_input_follow_flit_11 ;

  // rule RL_rl_relay_sw_interrupts
  assign CAN_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;

  // rule RL_rl_relay_timer_interrupts
  assign CAN_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;

  // rule RL_rl_relay_external_interrupts
  assign CAN_FIRE_RL_rl_relay_external_interrupts = 1'd1 ;
  assign WILL_FIRE_RL_rl_relay_external_interrupts = 1'd1 ;

  // rule RL_ug_src_setCanPeek
  assign CAN_FIRE_RL_ug_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_setCanPeek = 1'd1 ;

  // rule RL_ug_src_setPeek
  assign CAN_FIRE_RL_ug_src_setPeek = cpu$RDY_imem_master_aw_peek ;
  assign WILL_FIRE_RL_ug_src_setPeek = cpu$RDY_imem_master_aw_peek ;

  // rule RL_ug_snk_setCanPut
  assign CAN_FIRE_RL_ug_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_setCanPut = 1'd1 ;

  // rule RL_connect
  assign CAN_FIRE_RL_connect =
	     cpu$imem_master_aw_canPeek && delay_shim_awff$FULL_N ;
  assign WILL_FIRE_RL_connect = CAN_FIRE_RL_connect ;

  // rule RL_ug_src_warnDoDrop
  assign CAN_FIRE_RL_ug_src_warnDoDrop =
	     CAN_FIRE_RL_connect && !cpu$imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_ug_src_warnDoDrop = CAN_FIRE_RL_ug_src_warnDoDrop ;

  // rule RL_ug_src_doDrop
  assign CAN_FIRE_RL_ug_src_doDrop =
	     cpu$RDY_imem_master_aw_drop && CAN_FIRE_RL_connect &&
	     cpu$imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_ug_src_doDrop = CAN_FIRE_RL_ug_src_doDrop ;

  // rule RL_ug_snk_warnDoPut
  assign CAN_FIRE_RL_ug_snk_warnDoPut =
	     CAN_FIRE_RL_connect && !delay_shim_awff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_warnDoPut = CAN_FIRE_RL_ug_snk_warnDoPut ;

  // rule RL_ug_snk_doPut
  assign CAN_FIRE_RL_ug_snk_doPut =
	     delay_shim_awff$FULL_N && CAN_FIRE_RL_connect ;
  assign WILL_FIRE_RL_ug_snk_doPut = CAN_FIRE_RL_ug_snk_doPut ;

  // rule RL_ug_src_1_setCanPeek
  assign CAN_FIRE_RL_ug_src_1_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_setCanPeek = 1'd1 ;

  // rule RL_ug_src_1_setPeek
  assign CAN_FIRE_RL_ug_src_1_setPeek = cpu$RDY_imem_master_w_peek ;
  assign WILL_FIRE_RL_ug_src_1_setPeek = cpu$RDY_imem_master_w_peek ;

  // rule RL_ug_snk_1_setCanPut
  assign CAN_FIRE_RL_ug_snk_1_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_setCanPut = 1'd1 ;

  // rule RL_connect_1
  assign CAN_FIRE_RL_connect_1 =
	     cpu$imem_master_w_canPeek && delay_shim_wff$FULL_N ;
  assign WILL_FIRE_RL_connect_1 = CAN_FIRE_RL_connect_1 ;

  // rule RL_ug_src_1_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_warnDoDrop =
	     CAN_FIRE_RL_connect_1 && !cpu$imem_master_w_canPeek ;
  assign WILL_FIRE_RL_ug_src_1_warnDoDrop = CAN_FIRE_RL_ug_src_1_warnDoDrop ;

  // rule RL_ug_src_1_doDrop
  assign CAN_FIRE_RL_ug_src_1_doDrop =
	     cpu$RDY_imem_master_w_drop && CAN_FIRE_RL_connect_1 &&
	     cpu$imem_master_w_canPeek ;
  assign WILL_FIRE_RL_ug_src_1_doDrop = CAN_FIRE_RL_ug_src_1_doDrop ;

  // rule RL_ug_snk_1_warnDoPut
  assign CAN_FIRE_RL_ug_snk_1_warnDoPut =
	     CAN_FIRE_RL_connect_1 && !delay_shim_wff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_1_warnDoPut = CAN_FIRE_RL_ug_snk_1_warnDoPut ;

  // rule RL_ug_snk_1_doPut
  assign CAN_FIRE_RL_ug_snk_1_doPut =
	     delay_shim_wff$FULL_N && CAN_FIRE_RL_connect_1 ;
  assign WILL_FIRE_RL_ug_snk_1_doPut = CAN_FIRE_RL_ug_snk_1_doPut ;

  // rule RL_ug_src_2_setCanPeek
  assign CAN_FIRE_RL_ug_src_2_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_setCanPeek = 1'd1 ;

  // rule RL_ug_src_2_setPeek
  assign CAN_FIRE_RL_ug_src_2_setPeek = delay_shim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_setPeek = delay_shim_bff$EMPTY_N ;

  // rule RL_ug_snk_2_setCanPut
  assign CAN_FIRE_RL_ug_snk_2_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_setCanPut = 1'd1 ;

  // rule RL_connect_2
  assign CAN_FIRE_RL_connect_2 =
	     delay_shim_bff$EMPTY_N && cpu$imem_master_b_canPut ;
  assign WILL_FIRE_RL_connect_2 = CAN_FIRE_RL_connect_2 ;

  // rule RL_ug_src_2_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_warnDoDrop =
	     CAN_FIRE_RL_connect_2 && !delay_shim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_warnDoDrop = CAN_FIRE_RL_ug_src_2_warnDoDrop ;

  // rule RL_ug_src_2_doDrop
  assign CAN_FIRE_RL_ug_src_2_doDrop =
	     delay_shim_bff$EMPTY_N && CAN_FIRE_RL_connect_2 ;
  assign WILL_FIRE_RL_ug_src_2_doDrop = CAN_FIRE_RL_ug_src_2_doDrop ;

  // rule RL_ug_snk_2_warnDoPut
  assign CAN_FIRE_RL_ug_snk_2_warnDoPut =
	     CAN_FIRE_RL_connect_2 && !cpu$imem_master_b_canPut ;
  assign WILL_FIRE_RL_ug_snk_2_warnDoPut = CAN_FIRE_RL_ug_snk_2_warnDoPut ;

  // rule RL_ug_snk_2_doPut
  assign CAN_FIRE_RL_ug_snk_2_doPut =
	     cpu$RDY_imem_master_b_put && CAN_FIRE_RL_connect_2 ;
  assign WILL_FIRE_RL_ug_snk_2_doPut = CAN_FIRE_RL_ug_snk_2_doPut ;

  // rule RL_ug_src_3_setCanPeek
  assign CAN_FIRE_RL_ug_src_3_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_3_setCanPeek = 1'd1 ;

  // rule RL_ug_src_3_setPeek
  assign CAN_FIRE_RL_ug_src_3_setPeek = cpu$RDY_imem_master_ar_peek ;
  assign WILL_FIRE_RL_ug_src_3_setPeek = cpu$RDY_imem_master_ar_peek ;

  // rule RL_ug_snk_3_setCanPut
  assign CAN_FIRE_RL_ug_snk_3_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_3_setCanPut = 1'd1 ;

  // rule RL_connect_3
  assign CAN_FIRE_RL_connect_3 =
	     cpu$imem_master_ar_canPeek && delay_shim_arff$FULL_N ;
  assign WILL_FIRE_RL_connect_3 = CAN_FIRE_RL_connect_3 ;

  // rule RL_ug_src_3_warnDoDrop
  assign CAN_FIRE_RL_ug_src_3_warnDoDrop =
	     CAN_FIRE_RL_connect_3 && !cpu$imem_master_ar_canPeek ;
  assign WILL_FIRE_RL_ug_src_3_warnDoDrop = CAN_FIRE_RL_ug_src_3_warnDoDrop ;

  // rule RL_ug_src_3_doDrop
  assign CAN_FIRE_RL_ug_src_3_doDrop =
	     cpu$RDY_imem_master_ar_drop && CAN_FIRE_RL_connect_3 &&
	     cpu$imem_master_ar_canPeek ;
  assign WILL_FIRE_RL_ug_src_3_doDrop = CAN_FIRE_RL_ug_src_3_doDrop ;

  // rule RL_ug_snk_3_warnDoPut
  assign CAN_FIRE_RL_ug_snk_3_warnDoPut =
	     CAN_FIRE_RL_connect_3 && !delay_shim_arff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_3_warnDoPut = CAN_FIRE_RL_ug_snk_3_warnDoPut ;

  // rule RL_ug_snk_3_doPut
  assign CAN_FIRE_RL_ug_snk_3_doPut =
	     delay_shim_arff$FULL_N && CAN_FIRE_RL_connect_3 ;
  assign WILL_FIRE_RL_ug_snk_3_doPut = CAN_FIRE_RL_ug_snk_3_doPut ;

  // rule RL_ug_src_4_setCanPeek
  assign CAN_FIRE_RL_ug_src_4_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_4_setCanPeek = 1'd1 ;

  // rule RL_ug_src_4_setPeek
  assign CAN_FIRE_RL_ug_src_4_setPeek = delay_shim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_4_setPeek = delay_shim_rff$EMPTY_N ;

  // rule RL_ug_snk_4_setCanPut
  assign CAN_FIRE_RL_ug_snk_4_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_4_setCanPut = 1'd1 ;

  // rule RL_connect_4
  assign CAN_FIRE_RL_connect_4 =
	     delay_shim_rff$EMPTY_N && cpu$imem_master_r_canPut ;
  assign WILL_FIRE_RL_connect_4 = CAN_FIRE_RL_connect_4 ;

  // rule RL_ug_src_4_warnDoDrop
  assign CAN_FIRE_RL_ug_src_4_warnDoDrop =
	     CAN_FIRE_RL_connect_4 && !delay_shim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_4_warnDoDrop = CAN_FIRE_RL_ug_src_4_warnDoDrop ;

  // rule RL_ug_src_4_doDrop
  assign CAN_FIRE_RL_ug_src_4_doDrop =
	     delay_shim_rff$EMPTY_N && CAN_FIRE_RL_connect_4 ;
  assign WILL_FIRE_RL_ug_src_4_doDrop = CAN_FIRE_RL_ug_src_4_doDrop ;

  // rule RL_ug_snk_4_warnDoPut
  assign CAN_FIRE_RL_ug_snk_4_warnDoPut =
	     CAN_FIRE_RL_connect_4 && !cpu$imem_master_r_canPut ;
  assign WILL_FIRE_RL_ug_snk_4_warnDoPut = CAN_FIRE_RL_ug_snk_4_warnDoPut ;

  // rule RL_ug_snk_4_doPut
  assign CAN_FIRE_RL_ug_snk_4_doPut =
	     cpu$RDY_imem_master_r_put && CAN_FIRE_RL_connect_4 ;
  assign WILL_FIRE_RL_ug_snk_4_doPut = CAN_FIRE_RL_ug_snk_4_doPut ;

  // rule RL_axi4_mem_shim_tmp_passCacheRead
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheRead =
	     axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read[98] &&
	     axi4_mem_shim_tmp_tagCon$RDY_cache_request_put &&
	     !axi4_mem_shim_tmp_writeBurst ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheRead =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheRead ;

  // rule RL_axi4_mem_shim_tmp_passCacheResponse
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse =
	     axi4_mem_shim_tmp_tagCon$RDY_cache_response_get &&
	     !axi4_mem_shim_tmp_shimSlave_bff_rv[7] &&
	     !axi4_mem_shim_tmp_shimSlave_rff_rv[73] ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse ;

  // rule RL_set_input_canPeek_wire_3
  assign CAN_FIRE_RL_set_input_canPeek_wire_3 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_3 = 1'd1 ;

  // rule RL_set_input_peek_wires_3
  assign CAN_FIRE_RL_set_input_peek_wires_3 =
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] ;
  assign WILL_FIRE_RL_set_input_peek_wires_3 =
	     CAN_FIRE_RL_set_input_peek_wires_3 ;

  // rule RL_arbitrate_1
  assign CAN_FIRE_RL_arbitrate_1 =
	     (noRouteSlv_rspFF$EMPTY_N &&
	      IF_IF_inputDest_0_1_whas__058_THEN_NOT_inputDe_ETC___d1076 ||
	      axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	      IF_IF_inputDest_1_1_whas__081_THEN_NOT_inputDe_ETC___d1091 ||
	      near_mem_io$axi4_slave_b_canPeek &&
	      IF_IF_inputDest_2_whas__097_THEN_NOT_inputDest_ETC___d1107 ||
	      plic$axi4_slave_b_canPeek &&
	      IF_IF_inputDest_3_whas__112_THEN_NOT_inputDest_ETC___d1122) &&
	     !moreFlits_1[6] ;
  assign WILL_FIRE_RL_arbitrate_1 = CAN_FIRE_RL_arbitrate_1 ;

  // rule RL_arbitration_fail_2
  assign CAN_FIRE_RL_arbitration_fail_2 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_0_1$wget &&
	     !noRouteSlv_rspFF$EMPTY_N ;
  assign WILL_FIRE_RL_arbitration_fail_2 = CAN_FIRE_RL_arbitration_fail_2 ;

  // rule RL_legal_destination_fail_2
  assign CAN_FIRE_RL_legal_destination_fail_2 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_0_1$wget &&
	     noRouteSlv_rspFF$EMPTY_N &&
	     (inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_2 =
	     CAN_FIRE_RL_legal_destination_fail_2 ;

  // rule RL_arbitration_fail_3
  assign CAN_FIRE_RL_arbitration_fail_3 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_1_1$wget &&
	     !axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] ;
  assign WILL_FIRE_RL_arbitration_fail_3 = CAN_FIRE_RL_arbitration_fail_3 ;

  // rule RL_legal_destination_fail_3
  assign CAN_FIRE_RL_legal_destination_fail_3 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_1_1$wget &&
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	     (inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_3 =
	     CAN_FIRE_RL_legal_destination_fail_3 ;

  // rule RL_arbitration_fail_4
  assign CAN_FIRE_RL_arbitration_fail_4 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_2$wget &&
	     !near_mem_io$axi4_slave_b_canPeek ;
  assign WILL_FIRE_RL_arbitration_fail_4 = CAN_FIRE_RL_arbitration_fail_4 ;

  // rule RL_legal_destination_fail_4
  assign CAN_FIRE_RL_legal_destination_fail_4 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_2$wget &&
	     near_mem_io$axi4_slave_b_canPeek &&
	     (inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_2$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_4 =
	     CAN_FIRE_RL_legal_destination_fail_4 ;

  // rule RL_arbitration_fail_5
  assign CAN_FIRE_RL_arbitration_fail_5 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_3$wget &&
	     !plic$axi4_slave_b_canPeek ;
  assign WILL_FIRE_RL_arbitration_fail_5 = CAN_FIRE_RL_arbitration_fail_5 ;

  // rule RL_legal_destination_fail_5
  assign CAN_FIRE_RL_legal_destination_fail_5 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_3$wget &&
	     plic$axi4_slave_b_canPeek &&
	     (inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_3$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_5 =
	     CAN_FIRE_RL_legal_destination_fail_5 ;

  // rule RL_input_first_flit_3
  assign CAN_FIRE_RL_input_first_flit_3 =
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	     !moreFlits_1[6] &&
	     CAN_FIRE_RL_arbitrate_1 &&
	     selectInput_1_1$wget &&
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] ;
  assign WILL_FIRE_RL_input_first_flit_3 = CAN_FIRE_RL_input_first_flit_3 ;

  // rule RL_input_follow_flit_3
  assign CAN_FIRE_RL_input_follow_flit_3 =
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	     moreFlits_1[6] &&
	     moreFlits_1[3] &&
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	     IF_NOT_moreFlits_1_126_BIT_0_311_312_OR_NOT_ou_ETC___d1316 ;
  assign WILL_FIRE_RL_input_follow_flit_3 = CAN_FIRE_RL_input_follow_flit_3 ;

  // rule __me_check_136
  assign CAN_FIRE___me_check_136 = 1'b1 ;
  assign WILL_FIRE___me_check_136 = 1'b1 ;

  // rule RL_input_first_flit_4
  assign CAN_FIRE_RL_input_first_flit_4 =
	     near_mem_io$RDY_axi4_slave_b_drop && !moreFlits_1[6] &&
	     CAN_FIRE_RL_arbitrate_1 &&
	     selectInput_2$wget &&
	     near_mem_io$axi4_slave_b_canPeek ;
  assign WILL_FIRE_RL_input_first_flit_4 = CAN_FIRE_RL_input_first_flit_4 ;

  // rule __me_check_138
  assign CAN_FIRE___me_check_138 = 1'b1 ;
  assign WILL_FIRE___me_check_138 = 1'b1 ;

  // rule RL_input_first_flit_5
  assign CAN_FIRE_RL_input_first_flit_5 =
	     plic$RDY_axi4_slave_b_drop && !moreFlits_1[6] &&
	     CAN_FIRE_RL_arbitrate_1 &&
	     selectInput_3$wget &&
	     plic$axi4_slave_b_canPeek ;
  assign WILL_FIRE_RL_input_first_flit_5 = CAN_FIRE_RL_input_first_flit_5 ;

  // rule __me_check_140
  assign CAN_FIRE___me_check_140 = 1'b1 ;
  assign WILL_FIRE___me_check_140 = 1'b1 ;

  // rule RL_set_input_canPeek_wire_9
  assign CAN_FIRE_RL_set_input_canPeek_wire_9 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_9 = 1'd1 ;

  // rule RL_set_input_peek_wires_9
  assign CAN_FIRE_RL_set_input_peek_wires_9 =
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_set_input_peek_wires_9 =
	     CAN_FIRE_RL_set_input_peek_wires_9 ;

  // rule RL_arbitrate_3
  assign CAN_FIRE_RL_arbitrate_3 =
	     (noRouteSlv_1_flitCount != 9'd0 &&
	      IF_IF_inputDest_1_0_1_whas__648_THEN_NOT_input_ETC___d1666 ||
	      axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	      IF_IF_inputDest_1_1_2_whas__671_THEN_NOT_input_ETC___d1681 ||
	      near_mem_io$axi4_slave_r_canPeek &&
	      IF_IF_inputDest_1_2_whas__687_THEN_NOT_inputDe_ETC___d1697 ||
	      plic$axi4_slave_r_canPeek &&
	      IF_IF_inputDest_1_3_whas__702_THEN_NOT_inputDe_ETC___d1712) &&
	     !moreFlits_1_2[6] ;
  assign WILL_FIRE_RL_arbitrate_3 = CAN_FIRE_RL_arbitrate_3 ;

  // rule RL_arbitration_fail_8
  assign CAN_FIRE_RL_arbitration_fail_8 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_0_1$wget &&
	     !(noRouteSlv_1_flitCount != 9'd0) ;
  assign WILL_FIRE_RL_arbitration_fail_8 = CAN_FIRE_RL_arbitration_fail_8 ;

  // rule RL_legal_destination_fail_8
  assign CAN_FIRE_RL_legal_destination_fail_8 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_0_1$wget &&
	     noRouteSlv_1_flitCount != 9'd0 &&
	     (inputDest_1_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_8 =
	     CAN_FIRE_RL_legal_destination_fail_8 ;

  // rule RL_arbitration_fail_9
  assign CAN_FIRE_RL_arbitration_fail_9 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_1_2$wget &&
	     !axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_arbitration_fail_9 = CAN_FIRE_RL_arbitration_fail_9 ;

  // rule RL_legal_destination_fail_9
  assign CAN_FIRE_RL_legal_destination_fail_9 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_1_2$wget &&
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	     (inputDest_1_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_2$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_9 =
	     CAN_FIRE_RL_legal_destination_fail_9 ;

  // rule RL_arbitration_fail_10
  assign CAN_FIRE_RL_arbitration_fail_10 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_2$wget &&
	     !near_mem_io$axi4_slave_r_canPeek ;
  assign WILL_FIRE_RL_arbitration_fail_10 = CAN_FIRE_RL_arbitration_fail_10 ;

  // rule RL_legal_destination_fail_10
  assign CAN_FIRE_RL_legal_destination_fail_10 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_2$wget &&
	     near_mem_io$axi4_slave_r_canPeek &&
	     (inputDest_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_2$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_10 =
	     CAN_FIRE_RL_legal_destination_fail_10 ;

  // rule RL_arbitration_fail_11
  assign CAN_FIRE_RL_arbitration_fail_11 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_3$wget &&
	     !plic$axi4_slave_r_canPeek ;
  assign WILL_FIRE_RL_arbitration_fail_11 = CAN_FIRE_RL_arbitration_fail_11 ;

  // rule RL_legal_destination_fail_11
  assign CAN_FIRE_RL_legal_destination_fail_11 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_3$wget &&
	     plic$axi4_slave_r_canPeek &&
	     (inputDest_1_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_3$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_11 =
	     CAN_FIRE_RL_legal_destination_fail_11 ;

  // rule RL_input_first_flit_8
  assign CAN_FIRE_RL_input_first_flit_8 =
	     noRouteSlv_1_flitCount != 9'd0 && !moreFlits_1_2[6] &&
	     CAN_FIRE_RL_arbitrate_3 &&
	     selectInput_1_0_1$wget &&
	     noRouteSlv_1_flitCount != 9'd0 ;
  assign WILL_FIRE_RL_input_first_flit_8 = CAN_FIRE_RL_input_first_flit_8 ;

  // rule RL_input_first_flit_9
  assign CAN_FIRE_RL_input_first_flit_9 =
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	     !moreFlits_1_2[6] &&
	     CAN_FIRE_RL_arbitrate_3 &&
	     selectInput_1_1_2$wget &&
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_input_first_flit_9 = CAN_FIRE_RL_input_first_flit_9 ;

  // rule RL_input_follow_flit_9
  assign CAN_FIRE_RL_input_follow_flit_9 =
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	     moreFlits_1_2[6] &&
	     moreFlits_1_2[3] &&
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	     IF_NOT_moreFlits_1_2_716_BIT_0_904_905_OR_NOT__ETC___d1909 ;
  assign WILL_FIRE_RL_input_follow_flit_9 = CAN_FIRE_RL_input_follow_flit_9 ;

  // rule __me_check_180
  assign CAN_FIRE___me_check_180 = 1'b1 ;
  assign WILL_FIRE___me_check_180 = 1'b1 ;

  // rule RL_input_first_flit_10
  assign CAN_FIRE_RL_input_first_flit_10 =
	     near_mem_io$RDY_axi4_slave_r_drop && !moreFlits_1_2[6] &&
	     CAN_FIRE_RL_arbitrate_3 &&
	     selectInput_1_2$wget &&
	     near_mem_io$axi4_slave_r_canPeek ;
  assign WILL_FIRE_RL_input_first_flit_10 = CAN_FIRE_RL_input_first_flit_10 ;

  // rule __me_check_182
  assign CAN_FIRE___me_check_182 = 1'b1 ;
  assign WILL_FIRE___me_check_182 = 1'b1 ;

  // rule RL_input_first_flit_11
  assign CAN_FIRE_RL_input_first_flit_11 =
	     plic$RDY_axi4_slave_r_drop && !moreFlits_1_2[6] &&
	     CAN_FIRE_RL_arbitrate_3 &&
	     selectInput_1_3$wget &&
	     plic$axi4_slave_r_canPeek ;
  assign WILL_FIRE_RL_input_first_flit_11 = CAN_FIRE_RL_input_first_flit_11 ;

  // rule __me_check_178
  assign CAN_FIRE___me_check_178 = 1'b1 ;
  assign WILL_FIRE___me_check_178 = 1'b1 ;

  // rule __me_check_184
  assign CAN_FIRE___me_check_184 = 1'b1 ;
  assign WILL_FIRE___me_check_184 = 1'b1 ;

  // rule RL_output_selected_8
  assign CAN_FIRE_RL_output_selected_8 =
	     cpu$RDY_mem_master_r_put && toOutput_1_0_1$whas &&
	     cpu$mem_master_r_canPut ;
  assign WILL_FIRE_RL_output_selected_8 = CAN_FIRE_RL_output_selected_8 ;

  // rule RL_axi4_mem_shim_tmp_passMemoryRequest
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest =
	     axi4_mem_shim_tmp_tagCon$RDY_memory_request_get &&
	     !axi4_mem_shim_tmp_shimMaster_wff_rv[73] &&
	     (axi4_mem_shim_tmp_doneSendingAW ||
	      !axi4_mem_shim_tmp_shimMaster_awff_rv[99]) &&
	     !axi4_mem_shim_tmp_shimMaster_arff_rv[99] ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest ;

  // rule RL_axi4_mem_shim_tmp_passMemoryResponseWrite
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite =
	     axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read[8] &&
	     axi4_mem_shim_tmp_tagCon$RDY_memory_response_put ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	     !WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead ;

  // rule RL_axi4_mem_shim_tmp_passMemoryResponseRead
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead =
	     axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[73] &&
	     axi4_mem_shim_tmp_tagCon$RDY_memory_response_put ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead ;

  // rule RL_merged_0_passFlit
  assign CAN_FIRE_RL_merged_0_passFlit =
	     merged_0_awff$EMPTY_N && merged_0_wff$EMPTY_N &&
	     merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_0_passFlit = CAN_FIRE_RL_merged_0_passFlit ;

  // rule RL_set_input_peek_wires
  assign CAN_FIRE_RL_set_input_peek_wires =
	     IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689 &&
	     (CAN_FIRE_RL_merged_0_passFlit || merged_0_wff$EMPTY_N) ;
  assign WILL_FIRE_RL_set_input_peek_wires =
	     CAN_FIRE_RL_set_input_peek_wires ;

  // rule RL_merged_0_awug_setCanPeek
  assign CAN_FIRE_RL_merged_0_awug_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_merged_0_awug_setCanPeek = 1'd1 ;

  // rule RL_merged_0_awug_setPeek
  assign CAN_FIRE_RL_merged_0_awug_setPeek = cpu$RDY_mem_master_aw_peek ;
  assign WILL_FIRE_RL_merged_0_awug_setPeek = cpu$RDY_mem_master_aw_peek ;

  // rule RL_merged_0_wug_setCanPeek
  assign CAN_FIRE_RL_merged_0_wug_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_merged_0_wug_setCanPeek = 1'd1 ;

  // rule RL_merged_0_wug_setPeek
  assign CAN_FIRE_RL_merged_0_wug_setPeek = cpu$RDY_mem_master_w_peek ;
  assign WILL_FIRE_RL_merged_0_wug_setPeek = cpu$RDY_mem_master_w_peek ;

  // rule RL_merged_1_passFlit
  assign CAN_FIRE_RL_merged_1_passFlit =
	     merged_1_awff$EMPTY_N && merged_1_wff$EMPTY_N &&
	     merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_1_passFlit = CAN_FIRE_RL_merged_1_passFlit ;

  // rule RL_set_input_peek_wires_1
  assign CAN_FIRE_RL_set_input_peek_wires_1 =
	     IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732 &&
	     (CAN_FIRE_RL_merged_1_passFlit || merged_1_wff$EMPTY_N) ;
  assign WILL_FIRE_RL_set_input_peek_wires_1 =
	     CAN_FIRE_RL_set_input_peek_wires_1 ;

  // rule RL_merged_1_awug_setCanPeek
  assign CAN_FIRE_RL_merged_1_awug_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_merged_1_awug_setCanPeek = 1'd1 ;

  // rule RL_merged_1_wug_setCanPeek
  assign CAN_FIRE_RL_merged_1_wug_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_merged_1_wug_setCanPeek = 1'd1 ;

  // rule RL_split_0_awug_setCanPut
  assign CAN_FIRE_RL_split_0_awug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_split_0_awug_setCanPut = 1'd1 ;

  // rule RL_split_0_wug_setCanPut
  assign CAN_FIRE_RL_split_0_wug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_split_0_wug_setCanPut = 1'd1 ;

  // rule RL_set_output_canPut_wire
  assign CAN_FIRE_RL_set_output_canPut_wire = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire = 1'd1 ;

  // rule RL_split_1_awug_setCanPut
  assign CAN_FIRE_RL_split_1_awug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_split_1_awug_setCanPut = 1'd1 ;

  // rule RL_split_1_wug_setCanPut
  assign CAN_FIRE_RL_split_1_wug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_split_1_wug_setCanPut = 1'd1 ;

  // rule RL_set_output_canPut_wire_1
  assign CAN_FIRE_RL_set_output_canPut_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_1 = 1'd1 ;

  // rule RL_split_2_awug_setCanPut
  assign CAN_FIRE_RL_split_2_awug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_split_2_awug_setCanPut = 1'd1 ;

  // rule RL_split_2_wug_setCanPut
  assign CAN_FIRE_RL_split_2_wug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_split_2_wug_setCanPut = 1'd1 ;

  // rule RL_set_output_canPut_wire_2
  assign CAN_FIRE_RL_set_output_canPut_wire_2 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_2 = 1'd1 ;

  // rule RL_arbitrate
  assign CAN_FIRE_RL_arbitrate =
	     inputCanPeek_0_whas__79_AND_inputCanPeek_0_wge_ETC___d855 &&
	     !moreFlits[5] ;
  assign WILL_FIRE_RL_arbitrate = CAN_FIRE_RL_arbitrate ;

  // rule RL_arbitration_fail
  assign CAN_FIRE_RL_arbitration_fail =
	     CAN_FIRE_RL_arbitrate && selectInput_0$wget &&
	     !IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689 ;
  assign WILL_FIRE_RL_arbitration_fail = CAN_FIRE_RL_arbitration_fail ;

  // rule RL_arbitration_fail_1
  assign CAN_FIRE_RL_arbitration_fail_1 =
	     CAN_FIRE_RL_arbitrate && selectInput_1$wget &&
	     !IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732 ;
  assign WILL_FIRE_RL_arbitration_fail_1 = CAN_FIRE_RL_arbitration_fail_1 ;

  // rule RL_input_first_flit
  assign CAN_FIRE_RL_input_first_flit =
	     IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689 &&
	     !moreFlits[5] &&
	     CAN_FIRE_RL_arbitrate &&
	     selectInput_0$wget &&
	     IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689 ;
  assign WILL_FIRE_RL_input_first_flit = CAN_FIRE_RL_input_first_flit ;

  // rule RL_input_follow_flit
  assign CAN_FIRE_RL_input_follow_flit =
	     IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689 &&
	     moreFlits[5] &&
	     moreFlits[3] &&
	     IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689 &&
	     (NOT_IF_moreFlits_56_BIT_0_31_THEN_1_ELSE_0_32__ETC___d941 ||
	      IF_NOT_moreFlits_56_BIT_0_31_42_OR_NOT_outputC_ETC___d948) ;
  assign WILL_FIRE_RL_input_follow_flit = CAN_FIRE_RL_input_follow_flit ;

  // rule RL_input_first_flit_1
  assign CAN_FIRE_RL_input_first_flit_1 =
	     IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732 &&
	     !moreFlits[5] &&
	     CAN_FIRE_RL_arbitrate &&
	     selectInput_1$wget &&
	     IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732 ;
  assign WILL_FIRE_RL_input_first_flit_1 = CAN_FIRE_RL_input_first_flit_1 ;

  // rule RL_input_follow_flit_1
  assign CAN_FIRE_RL_input_follow_flit_1 =
	     IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732 &&
	     moreFlits[5] &&
	     moreFlits[4] &&
	     IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732 &&
	     (NOT_IF_moreFlits_56_BIT_0_31_THEN_1_ELSE_0_32__ETC___d941 ||
	      IF_NOT_moreFlits_56_BIT_0_31_42_OR_NOT_outputC_ETC___d948) ;
  assign WILL_FIRE_RL_input_follow_flit_1 = CAN_FIRE_RL_input_follow_flit_1 ;

  // rule __me_check_107
  assign CAN_FIRE___me_check_107 = 1'b1 ;
  assign WILL_FIRE___me_check_107 = 1'b1 ;

  // rule __me_check_109
  assign CAN_FIRE___me_check_109 = 1'b1 ;
  assign WILL_FIRE___me_check_109 = 1'b1 ;

  // rule RL_output_selected
  assign CAN_FIRE_RL_output_selected =
	     IF_split_0_flitLeft_64_EQ_0_65_THEN_split_0_aw_ETC___d773 &&
	     toOutput_0$whas &&
	     IF_split_0_flitLeft_64_EQ_0_65_THEN_split_0_aw_ETC___d773 ;
  assign WILL_FIRE_RL_output_selected = CAN_FIRE_RL_output_selected ;

  // rule RL_output_selected_1
  assign CAN_FIRE_RL_output_selected_1 =
	     IF_split_1_flitLeft_10_EQ_0_11_THEN_split_1_aw_ETC___d775 &&
	     toOutput_1$whas &&
	     IF_split_1_flitLeft_10_EQ_0_11_THEN_split_1_aw_ETC___d775 ;
  assign WILL_FIRE_RL_output_selected_1 = CAN_FIRE_RL_output_selected_1 ;

  // rule RL_output_selected_2
  assign CAN_FIRE_RL_output_selected_2 =
	     IF_split_2_flitLeft_56_EQ_0_57_THEN_split_2_aw_ETC___d777 &&
	     toOutput_2$whas &&
	     IF_split_2_flitLeft_56_EQ_0_57_THEN_split_2_aw_ETC___d777 ;
  assign WILL_FIRE_RL_output_selected_2 = CAN_FIRE_RL_output_selected_2 ;

  // rule RL_dflt_output_selected
  assign CAN_FIRE_RL_dflt_output_selected =
	     noRouteSlv_rspFF$FULL_N &&
	     (!toDfltOutput$wget[2] || noRouteSlv_rspFF$FULL_N) &&
	     toDfltOutput$whas ;
  assign WILL_FIRE_RL_dflt_output_selected =
	     CAN_FIRE_RL_dflt_output_selected ;

  // rule __me_check_111
  assign CAN_FIRE___me_check_111 = 1'b1 ;
  assign WILL_FIRE___me_check_111 = 1'b1 ;

  // rule RL_input_first_flit_2
  assign CAN_FIRE_RL_input_first_flit_2 =
	     noRouteSlv_rspFF$EMPTY_N && !moreFlits_1[6] &&
	     CAN_FIRE_RL_arbitrate_1 &&
	     selectInput_0_1$wget &&
	     noRouteSlv_rspFF$EMPTY_N ;
  assign WILL_FIRE_RL_input_first_flit_2 = CAN_FIRE_RL_input_first_flit_2 ;

  // rule RL_input_follow_flit_2
  assign CAN_FIRE_RL_input_follow_flit_2 =
	     noRouteSlv_rspFF$EMPTY_N && moreFlits_1[6] && moreFlits_1[2] &&
	     noRouteSlv_rspFF$EMPTY_N &&
	     IF_NOT_moreFlits_1_126_BIT_0_311_312_OR_NOT_ou_ETC___d1316 ;
  assign WILL_FIRE_RL_input_follow_flit_2 = CAN_FIRE_RL_input_follow_flit_2 ;

  // rule __me_check_134
  assign CAN_FIRE___me_check_134 = 1'b1 ;
  assign WILL_FIRE___me_check_134 = 1'b1 ;

  // rule RL_output_selected_3
  assign CAN_FIRE_RL_output_selected_3 =
	     cpu$RDY_mem_master_b_put && toOutput_0_1$whas &&
	     cpu$mem_master_b_canPut ;
  assign WILL_FIRE_RL_output_selected_3 = CAN_FIRE_RL_output_selected_3 ;

  // rule RL_merged_0_awFlit
  assign CAN_FIRE_RL_merged_0_awFlit =
	     merged_0_awff$FULL_N && cpu$mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_merged_0_awFlit = CAN_FIRE_RL_merged_0_awFlit ;

  // rule RL_merged_0_wFlit
  assign CAN_FIRE_RL_merged_0_wFlit =
	     merged_0_wff$FULL_N && cpu$mem_master_w_canPeek ;
  assign WILL_FIRE_RL_merged_0_wFlit = CAN_FIRE_RL_merged_0_wFlit ;

  // rule RL_merged_0_genFirst
  assign CAN_FIRE_RL_merged_0_genFirst =
	     merged_0_awff$EMPTY_N && merged_0_wff$EMPTY_N &&
	     merged_0_doDrop$whas &&
	     merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genFirst = CAN_FIRE_RL_merged_0_genFirst ;

  // rule RL_merged_0_genOther
  assign CAN_FIRE_RL_merged_0_genOther =
	     merged_0_wff$EMPTY_N && merged_0_doDrop$whas &&
	     merged_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genOther = CAN_FIRE_RL_merged_0_genOther ;

  // rule RL_merged_0_awug_warnDoDrop
  assign CAN_FIRE_RL_merged_0_awug_warnDoDrop =
	     CAN_FIRE_RL_merged_0_awFlit && !cpu$mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_merged_0_awug_warnDoDrop =
	     CAN_FIRE_RL_merged_0_awug_warnDoDrop ;

  // rule RL_merged_0_awug_doDrop
  assign CAN_FIRE_RL_merged_0_awug_doDrop =
	     cpu$RDY_mem_master_aw_drop && CAN_FIRE_RL_merged_0_awFlit &&
	     cpu$mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_merged_0_awug_doDrop =
	     CAN_FIRE_RL_merged_0_awug_doDrop ;

  // rule RL_merged_0_wug_warnDoDrop
  assign CAN_FIRE_RL_merged_0_wug_warnDoDrop =
	     CAN_FIRE_RL_merged_0_wFlit && !cpu$mem_master_w_canPeek ;
  assign WILL_FIRE_RL_merged_0_wug_warnDoDrop =
	     CAN_FIRE_RL_merged_0_wug_warnDoDrop ;

  // rule RL_merged_0_wug_doDrop
  assign CAN_FIRE_RL_merged_0_wug_doDrop =
	     cpu$RDY_mem_master_w_drop && CAN_FIRE_RL_merged_0_wFlit &&
	     cpu$mem_master_w_canPeek ;
  assign WILL_FIRE_RL_merged_0_wug_doDrop = CAN_FIRE_RL_merged_0_wug_doDrop ;

  // rule RL_merged_1_awFlit
  assign CAN_FIRE_RL_merged_1_awFlit = 1'b0 ;
  assign WILL_FIRE_RL_merged_1_awFlit = 1'b0 ;

  // rule RL_merged_1_wFlit
  assign CAN_FIRE_RL_merged_1_wFlit = 1'b0 ;
  assign WILL_FIRE_RL_merged_1_wFlit = 1'b0 ;

  // rule RL_merged_1_genFirst
  assign CAN_FIRE_RL_merged_1_genFirst =
	     merged_1_awff$EMPTY_N && merged_1_wff$EMPTY_N &&
	     merged_1_doDrop$whas &&
	     merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_1_genFirst = CAN_FIRE_RL_merged_1_genFirst ;

  // rule RL_merged_1_genOther
  assign CAN_FIRE_RL_merged_1_genOther =
	     merged_1_wff$EMPTY_N && merged_1_doDrop$whas &&
	     merged_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_1_genOther = CAN_FIRE_RL_merged_1_genOther ;

  // rule RL_merged_1_awug_warnDoDrop
  assign CAN_FIRE_RL_merged_1_awug_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_merged_1_awug_warnDoDrop = 1'b0 ;

  // rule RL_merged_1_wug_warnDoDrop
  assign CAN_FIRE_RL_merged_1_wug_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_merged_1_wug_warnDoDrop = 1'b0 ;

  // rule RL_split_0_putFirst
  assign CAN_FIRE_RL_split_0_putFirst =
	     CAN_FIRE_RL_output_selected && split_0_flitLeft == 8'd0 &&
	     !axi4_mem_shim_tmp_shimSlave_awff_rv[98] &&
	     !axi4_mem_shim_tmp_shimSlave_wff_rv[74] ;
  assign WILL_FIRE_RL_split_0_putFirst = CAN_FIRE_RL_split_0_putFirst ;

  // rule RL_split_0_putOther
  assign CAN_FIRE_RL_split_0_putOther =
	     CAN_FIRE_RL_output_selected && split_0_flitLeft != 8'd0 &&
	     !axi4_mem_shim_tmp_shimSlave_wff_rv[74] ;
  assign WILL_FIRE_RL_split_0_putOther = CAN_FIRE_RL_split_0_putOther ;

  // rule RL_split_0_awug_warnDoPut
  assign CAN_FIRE_RL_split_0_awug_warnDoPut =
	     MUX_split_0_flitLeft$write_1__SEL_2 &&
	     axi4_mem_shim_tmp_shimSlave_awff_rv[98] ;
  assign WILL_FIRE_RL_split_0_awug_warnDoPut =
	     CAN_FIRE_RL_split_0_awug_warnDoPut ;

  // rule RL_split_0_awug_doPut
  assign CAN_FIRE_RL_split_0_awug_doPut = x__h123543 ;
  assign WILL_FIRE_RL_split_0_awug_doPut = x__h123543 ;

  // rule RL_axi4_mem_shim_tmp_getCacheAW
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_getCacheAW =
	     axi4_mem_shim_tmp_shimSlave_awff_rv$port1__read[98] &&
	     axi4_mem_shim_tmp_awreqff$FULL_N ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_getCacheAW =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_getCacheAW ;

  // rule RL_split_0_wug_warnDoPut
  assign CAN_FIRE_RL_split_0_wug_warnDoPut =
	     split_0_wug_putWire$whas &&
	     axi4_mem_shim_tmp_shimSlave_wff_rv[74] ;
  assign WILL_FIRE_RL_split_0_wug_warnDoPut =
	     CAN_FIRE_RL_split_0_wug_warnDoPut ;

  // rule RL_split_0_wug_doPut
  assign CAN_FIRE_RL_split_0_wug_doPut =
	     !axi4_mem_shim_tmp_shimSlave_wff_rv[74] &&
	     split_0_wug_putWire$whas ;
  assign WILL_FIRE_RL_split_0_wug_doPut = CAN_FIRE_RL_split_0_wug_doPut ;

  // rule RL_rl_relay_external_events
  assign CAN_FIRE_RL_rl_relay_external_events = 1'd1 ;
  assign WILL_FIRE_RL_rl_relay_external_events = 1'd1 ;

  // rule RL_axi4_mem_shim_tmp_passCacheWrite
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite =
	     axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[74] &&
	     axi4_mem_shim_tmp_tagCon$RDY_cache_request_put &&
	     axi4_mem_shim_tmp_awreqff$EMPTY_N ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	     !WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheRead ;

  // rule RL_axi4_mem_shim_tmp_propagateReset
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_propagateReset =
	     !axi4_mem_shim_tmp_reset_done ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_propagateReset =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_propagateReset ;

  // rule RL_split_1_putFirst
  assign CAN_FIRE_RL_split_1_putFirst =
	     CAN_FIRE_RL_output_selected_1 && split_1_flitLeft == 8'd0 &&
	     near_mem_io$axi4_slave_aw_canPut &&
	     near_mem_io$axi4_slave_w_canPut ;
  assign WILL_FIRE_RL_split_1_putFirst = CAN_FIRE_RL_split_1_putFirst ;

  // rule RL_split_1_putOther
  assign CAN_FIRE_RL_split_1_putOther =
	     CAN_FIRE_RL_output_selected_1 && split_1_flitLeft != 8'd0 &&
	     near_mem_io$axi4_slave_w_canPut ;
  assign WILL_FIRE_RL_split_1_putOther = CAN_FIRE_RL_split_1_putOther ;

  // rule RL_split_1_awug_warnDoPut
  assign CAN_FIRE_RL_split_1_awug_warnDoPut =
	     MUX_split_1_flitLeft$write_1__SEL_2 &&
	     !near_mem_io$axi4_slave_aw_canPut ;
  assign WILL_FIRE_RL_split_1_awug_warnDoPut =
	     CAN_FIRE_RL_split_1_awug_warnDoPut ;

  // rule RL_split_1_wug_warnDoPut
  assign CAN_FIRE_RL_split_1_wug_warnDoPut =
	     split_1_wug_putWire$whas && !near_mem_io$axi4_slave_w_canPut ;
  assign WILL_FIRE_RL_split_1_wug_warnDoPut =
	     CAN_FIRE_RL_split_1_wug_warnDoPut ;

  // rule RL_split_1_awug_doPut
  assign CAN_FIRE_RL_split_1_awug_doPut =
	     near_mem_io$RDY_axi4_slave_aw_put &&
	     MUX_split_1_flitLeft$write_1__SEL_2 ;
  assign WILL_FIRE_RL_split_1_awug_doPut = CAN_FIRE_RL_split_1_awug_doPut ;

  // rule RL_split_1_wug_doPut
  assign CAN_FIRE_RL_split_1_wug_doPut =
	     near_mem_io$RDY_axi4_slave_w_put && split_1_wug_putWire$whas ;
  assign WILL_FIRE_RL_split_1_wug_doPut = CAN_FIRE_RL_split_1_wug_doPut ;

  // rule RL_split_2_putFirst
  assign CAN_FIRE_RL_split_2_putFirst =
	     CAN_FIRE_RL_output_selected_2 && split_2_flitLeft == 8'd0 &&
	     plic$axi4_slave_aw_canPut &&
	     plic$axi4_slave_w_canPut ;
  assign WILL_FIRE_RL_split_2_putFirst = CAN_FIRE_RL_split_2_putFirst ;

  // rule RL_split_2_putOther
  assign CAN_FIRE_RL_split_2_putOther =
	     CAN_FIRE_RL_output_selected_2 && split_2_flitLeft != 8'd0 &&
	     plic$axi4_slave_w_canPut ;
  assign WILL_FIRE_RL_split_2_putOther = CAN_FIRE_RL_split_2_putOther ;

  // rule RL_split_2_awug_warnDoPut
  assign CAN_FIRE_RL_split_2_awug_warnDoPut =
	     MUX_split_2_flitLeft$write_1__SEL_2 &&
	     !plic$axi4_slave_aw_canPut ;
  assign WILL_FIRE_RL_split_2_awug_warnDoPut =
	     CAN_FIRE_RL_split_2_awug_warnDoPut ;

  // rule RL_split_2_wug_warnDoPut
  assign CAN_FIRE_RL_split_2_wug_warnDoPut =
	     split_2_wug_putWire$whas && !plic$axi4_slave_w_canPut ;
  assign WILL_FIRE_RL_split_2_wug_warnDoPut =
	     CAN_FIRE_RL_split_2_wug_warnDoPut ;

  // rule RL_rl_cpu_hart0_reset_from_soc_start
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     near_mem_io$RDY_server_reset_request_put &&
	     plic$RDY_server_reset_request_put &&
	     cpu$RDY_hart0_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // rule RL_rl_cpu_hart0_reset_complete
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_complete =
	     near_mem_io$RDY_server_reset_response_get &&
	     plic$RDY_server_reset_response_get &&
	     cpu$RDY_hart0_server_reset_response_get &&
	     f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_complete =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;

  // rule RL_split_2_awug_doPut
  assign CAN_FIRE_RL_split_2_awug_doPut =
	     plic$RDY_axi4_slave_aw_put &&
	     MUX_split_2_flitLeft$write_1__SEL_2 ;
  assign WILL_FIRE_RL_split_2_awug_doPut = CAN_FIRE_RL_split_2_awug_doPut ;

  // rule RL_split_2_wug_doPut
  assign CAN_FIRE_RL_split_2_wug_doPut =
	     plic$RDY_axi4_slave_w_put && split_2_wug_putWire$whas ;
  assign WILL_FIRE_RL_split_2_wug_doPut = CAN_FIRE_RL_split_2_wug_doPut ;

  // inputs to muxes for submodule ports
  assign MUX_moreFlits$write_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit &&
	     !MUX_toDfltOutput$wset_1__VAL_1[2] ;
  assign MUX_moreFlits$write_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit &&
	     MUX_toDfltOutput$wset_1__VAL_1[2] ;
  assign MUX_moreFlits$write_1__SEL_3 =
	     WILL_FIRE_RL_input_first_flit_1 &&
	     !MUX_toDfltOutput$wset_1__VAL_2[2] ;
  assign MUX_moreFlits$write_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     MUX_toDfltOutput$wset_1__VAL_2[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_8 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_1[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit_8 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_1[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_3 =
	     WILL_FIRE_RL_input_first_flit_9 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_2[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_9 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_2[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_5 =
	     WILL_FIRE_RL_input_first_flit_10 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_3[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_6 =
	     WILL_FIRE_RL_input_follow_flit_10 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_3[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_7 =
	     WILL_FIRE_RL_input_first_flit_11 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_4[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_8 =
	     WILL_FIRE_RL_input_follow_flit_11 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_4[2] ;
  assign MUX_split_0_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] ;
  assign MUX_split_0_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[172] ;
  assign MUX_split_1_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] ;
  assign MUX_split_1_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[172] ;
  assign MUX_split_2_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] ;
  assign MUX_split_2_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[172] ;
  assign MUX_toDfltOutput$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toDfltOutput$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toDfltOutput$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toDfltOutput$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toDfltOutput_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toOutput_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0$wget[0] ;
  assign MUX_toOutput_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[0] ;
  assign MUX_toOutput_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[0] ;
  assign MUX_toOutput_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1$wget[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_2 &&
	     (inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0_1$wget[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit_2 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_3 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_4 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_input_follow_flit_5 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_input_first_flit_3 &&
	     (inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1$wget[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_input_first_flit_4 &&
	     (inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_2$wget[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_input_first_flit_5 &&
	     (inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_3$wget[0] ;
  assign MUX_toOutput_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0$wget[1] ;
  assign MUX_toOutput_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[1] ;
  assign MUX_toOutput_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[1] ;
  assign MUX_toOutput_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1$wget[1] ;
  assign MUX_toOutput_1_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0$wget[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_8 &&
	     (inputDest_1_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0_1$wget[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit_8 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_9 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_10 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_input_follow_flit_11 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_input_first_flit_9 &&
	     (inputDest_1_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1_2$wget[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_input_first_flit_10 &&
	     (inputDest_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_2$wget[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_input_first_flit_11 &&
	     (inputDest_1_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_3$wget[0] ;
  assign MUX_toOutput_1_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0$wget[1] ;
  assign MUX_toOutput_1_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0$wget[2] ;
  assign MUX_toOutput_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0$wget[2] ;
  assign MUX_toOutput_2$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[2] ;
  assign MUX_toOutput_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[2] ;
  assign MUX_toOutput_2$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1$wget[2] ;
  assign MUX_axi4_mem_shim_tmp_tagCon$cache_request_put_1__VAL_1 =
	     { tmp__h9480[39:3],
	       4'd0,
	       axi4_mem_shim_tmp_awreqff$D_OUT[97:93],
	       3'd1,
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[1],
	       axi4_mem_shim_tmp_awreqff$D_OUT[14:11] < 4'd4,
	       1'd0,
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[9:2],
	       8'd255,
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[0],
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[73:10],
	       axi4_mem_shim_tmp_awreqff$D_OUT[28:21] } ;
  assign MUX_axi4_mem_shim_tmp_tagCon$cache_request_put_1__VAL_2 =
	     { axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read[68:29],
	       1'd0,
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read[97:93],
	       86'h02AAAAAAAAAAAAAAAAAAAA,
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read[14:11] < 4'd4,
	       2'd0,
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read[23:18] } ;
  assign MUX_axi4_mem_shim_tmp_tagCon$memory_response_put_1__VAL_1 =
	     { axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read[7:2],
	       71'h0CAAAAAAAAAAAAAAAA } ;
  assign MUX_axi4_mem_shim_tmp_tagCon$memory_response_put_1__VAL_2 =
	     { axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[72:67],
	       4'd0,
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[0],
	       1'd0,
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[67:3] } ;
  assign MUX_merged_0_flitLeft$write_1__VAL_2 = merged_0_flitLeft - 8'd1 ;
  assign MUX_merged_1_flitLeft$write_1__VAL_2 = merged_1_flitLeft - 8'd1 ;
  assign MUX_moreFlits$write_1__VAL_1 = { 3'd5, inputDest_0$wget } ;
  assign MUX_moreFlits$write_1__VAL_3 = { 3'd6, inputDest_1$wget } ;
  assign MUX_moreFlits_1_2$write_1__VAL_1 = { 5'd17, inputDest_1_0_1$wget } ;
  assign MUX_moreFlits_1_2$write_1__VAL_3 = { 5'd18, inputDest_1_1_2$wget } ;
  assign MUX_moreFlits_1_2$write_1__VAL_5 = { 5'd20, inputDest_1_2$wget } ;
  assign MUX_moreFlits_1_2$write_1__VAL_7 = { 5'd24, inputDest_1_3$wget } ;
  assign MUX_noRouteSlv_1_flitCount$write_1__VAL_1 =
	     { 1'd0, toDfltOutput_1_1$wget[29:22] } + 9'd1 ;
  assign MUX_noRouteSlv_1_flitCount$write_1__VAL_2 =
	     noRouteSlv_1_flitCount - 9'd1 ;
  assign MUX_split_0_flitLeft$write_1__VAL_1 = split_0_flitLeft - 8'd1 ;
  assign MUX_split_0_wug_putWire$wset_1__VAL_2 = split_0_doPut$wget[73:0] ;
  assign MUX_split_1_flitLeft$write_1__VAL_1 = split_1_flitLeft - 8'd1 ;
  assign MUX_split_2_flitLeft$write_1__VAL_1 = split_2_flitLeft - 8'd1 ;
  assign MUX_toDfltOutput$wset_1__VAL_1 =
	     { !CAN_FIRE_RL_merged_0_passFlit || merged_0_outflit$wget[171],
	       IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d703,
	       1'd0 } ;
  assign MUX_toDfltOutput$wset_1__VAL_2 =
	     { !CAN_FIRE_RL_merged_1_passFlit || merged_1_outflit$wget[171],
	       IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d746,
	       1'd1 } ;
  assign MUX_toDfltOutput_1$wset_1__VAL_1 =
	     { noRouteSlv_rspFF$D_OUT[5:0], noRouteSlv_rspFF$D_OUT[6] } ;
  assign MUX_toDfltOutput_1$wset_1__VAL_2 =
	     { axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[5:0],
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[6] } ;
  assign MUX_toDfltOutput_1$wset_1__VAL_3 =
	     { near_mem_io$axi4_slave_b_peek[5:0],
	       near_mem_io$axi4_slave_b_peek[6] } ;
  assign MUX_toDfltOutput_1$wset_1__VAL_4 =
	     { plic$axi4_slave_b_peek[5:0], plic$axi4_slave_b_peek[6] } ;
  assign MUX_toDfltOutput_1_1$wset_1__VAL_1 =
	     { cpu$mem_master_ar_peek, 1'd0 } ;
  assign MUX_toDfltOutput_1_2$wset_1__VAL_1 =
	     { noRouteSlv_1_currentReq[96:93],
	       66'h2AAAAAAAAAAAAAAAB,
	       noRouteSlv_1_flitCount == 9'd1,
	       1'h0,
	       noRouteSlv_1_currentReq[97] } ;
  assign MUX_toDfltOutput_1_2$wset_1__VAL_2 =
	     { axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[71:0],
	       axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[72] } ;
  assign MUX_toDfltOutput_1_2$wset_1__VAL_3 =
	     { near_mem_io$axi4_slave_r_peek[70:0],
	       1'd0,
	       near_mem_io$axi4_slave_r_peek[71] } ;
  assign MUX_toDfltOutput_1_2$wset_1__VAL_4 =
	     { plic$axi4_slave_r_peek[70:0],
	       1'd0,
	       plic$axi4_slave_r_peek[71] } ;

  // inlined wires
  assign axi4_mem_shim_slave_monitor_wMonitor_evt$wget =
	     { 1'd1, MUX_split_0_wug_putWire$wset_1__VAL_2[1] } ;
  assign axi4_mem_shim_slave_monitor_rMonitor_evt$wget =
	     { 1'd1, axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[1] } ;
  assign axi4_mem_shim_slave_monitor_rMonitor_evt$whas =
	     WILL_FIRE_RL_input_follow_flit_9 ||
	     WILL_FIRE_RL_input_first_flit_9 ;
  assign axi4_mem_shim_master_monitor_wMonitor_evt$wget =
	     { 1'd1, axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read[0] } ;
  assign axi4_mem_shim_master_monitor_rMonitor_evt$wget =
	     { 1'd1, core_mem_master_r_put_val[0] } ;
  assign merged_0_outflit$wget =
	     { 1'd0, merged_0_awff$D_OUT, merged_0_wff$D_OUT } ;
  assign merged_1_outflit$wget =
	     { 1'd0, merged_1_awff$D_OUT, merged_1_wff$D_OUT } ;
  assign split_0_wug_putWire$whas =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] ||
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[172] ;
  assign split_0_doPut$wget =
	     { toOutput_0$wget[172],
	       toOutput_0$wget[172] ?
		 toOutput_0$wget[172:1] :
		 { toOutput_0$wget[0], toOutput_0$wget[171:1] } } ;
  assign split_1_wug_putWire$wget = split_1_doPut$wget[73:0] ;
  assign split_1_wug_putWire$whas =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] ||
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[172] ;
  assign split_1_doPut$wget =
	     { toOutput_1$wget[172],
	       toOutput_1$wget[172] ?
		 toOutput_1$wget[172:1] :
		 { toOutput_1$wget[0], toOutput_1$wget[171:1] } } ;
  assign split_2_wug_putWire$wget = split_2_doPut$wget[73:0] ;
  assign split_2_wug_putWire$whas =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] ||
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[172] ;
  assign split_2_doPut$wget =
	     { toOutput_2$wget[172],
	       toOutput_2$wget[172] ?
		 toOutput_2$wget[172:1] :
		 { toOutput_2$wget[0], toOutput_2$wget[171:1] } } ;
  assign inputDest_0$wget =
	     { IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d720,
	       addr__h35433[63:40] == 24'd0 &&
	       !IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d709 &&
	       IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d711,
	       IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d727 } ;
  assign inputDest_1$wget =
	     { IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d763,
	       addr__h36306[63:40] == 24'd0 &&
	       !IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d752 &&
	       IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d754,
	       IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d770 } ;
  always@(MUX_toOutput_0$wset_1__SEL_1 or
	  MUX_toDfltOutput$wset_1__VAL_1 or
	  MUX_toOutput_0$wset_1__SEL_2 or
	  MUX_toOutput_0$wset_1__SEL_3 or
	  MUX_toDfltOutput$wset_1__VAL_2 or MUX_toOutput_0$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_0$wset_1__SEL_1:
	  toOutput_0$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toOutput_0$wset_1__SEL_2:
	  toOutput_0$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toOutput_0$wset_1__SEL_3:
	  toOutput_0$wget = MUX_toDfltOutput$wset_1__VAL_2;
      MUX_toOutput_0$wset_1__SEL_4:
	  toOutput_0$wget = MUX_toDfltOutput$wset_1__VAL_2;
      default: toOutput_0$wget =
		   173'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign toOutput_0$whas =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0$wget[0] ||
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[0] ||
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[0] ||
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1$wget[0] ;
  always@(MUX_toOutput_1$wset_1__SEL_1 or
	  MUX_toDfltOutput$wset_1__VAL_1 or
	  MUX_toOutput_1$wset_1__SEL_2 or
	  MUX_toOutput_1$wset_1__SEL_3 or
	  MUX_toDfltOutput$wset_1__VAL_2 or MUX_toOutput_1$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_1$wset_1__SEL_1:
	  toOutput_1$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toOutput_1$wset_1__SEL_2:
	  toOutput_1$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toOutput_1$wset_1__SEL_3:
	  toOutput_1$wget = MUX_toDfltOutput$wset_1__VAL_2;
      MUX_toOutput_1$wset_1__SEL_4:
	  toOutput_1$wget = MUX_toDfltOutput$wset_1__VAL_2;
      default: toOutput_1$wget =
		   173'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign toOutput_1$whas =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0$wget[1] ||
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[1] ||
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[1] ||
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1$wget[1] ;
  always@(MUX_toOutput_2$wset_1__SEL_1 or
	  MUX_toDfltOutput$wset_1__VAL_1 or
	  MUX_toOutput_2$wset_1__SEL_2 or
	  MUX_toOutput_2$wset_1__SEL_3 or
	  MUX_toDfltOutput$wset_1__VAL_2 or MUX_toOutput_2$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_2$wset_1__SEL_1:
	  toOutput_2$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toOutput_2$wset_1__SEL_2:
	  toOutput_2$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toOutput_2$wset_1__SEL_3:
	  toOutput_2$wget = MUX_toDfltOutput$wset_1__VAL_2;
      MUX_toOutput_2$wset_1__SEL_4:
	  toOutput_2$wget = MUX_toDfltOutput$wset_1__VAL_2;
      default: toOutput_2$wget =
		   173'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign toOutput_2$whas =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0$wget[2] ||
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[2] ||
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[2] ||
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1$wget[2] ;
  always@(MUX_toDfltOutput$wset_1__SEL_1 or
	  MUX_toDfltOutput$wset_1__VAL_1 or
	  MUX_toDfltOutput$wset_1__SEL_2 or
	  MUX_toDfltOutput$wset_1__VAL_2 or
	  MUX_toDfltOutput$wset_1__SEL_3 or MUX_toDfltOutput$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toDfltOutput$wset_1__SEL_1:
	  toDfltOutput$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toDfltOutput$wset_1__SEL_2:
	  toDfltOutput$wget = MUX_toDfltOutput$wset_1__VAL_2;
      MUX_toDfltOutput$wset_1__SEL_3:
	  toDfltOutput$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toDfltOutput$wset_1__SEL_4:
	  toDfltOutput$wget = MUX_toDfltOutput$wset_1__VAL_2;
      default: toDfltOutput$wget =
		   173'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign toDfltOutput$whas =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ||
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ||
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) !=
	     2'd1 ||
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign selectInput_0$wget =
	     (IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d895 ||
	      IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d896) ?
	       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d899 :
	       arbiter_lastSelect ;
  assign selectInput_1$wget =
	     (IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d895 ||
	      IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d896) ?
	       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d901 :
	       arbiter_firstHot ;
  assign inputDest_0_1$wget = 2'd1 << noRouteSlv_rspFF$D_OUT[6] ;
  assign inputDest_1_1$wget =
	     2'd1 << axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[6] ;
  assign inputDest_2$wget = 2'd1 << near_mem_io$axi4_slave_b_peek[6] ;
  assign inputDest_3$wget = 2'd1 << plic$axi4_slave_b_peek[6] ;
  always@(MUX_toOutput_0_1$wset_1__SEL_1 or
	  MUX_toDfltOutput_1$wset_1__VAL_1 or
	  MUX_toOutput_0_1$wset_1__SEL_2 or
	  MUX_toOutput_0_1$wset_1__SEL_3 or
	  MUX_toDfltOutput_1$wset_1__VAL_2 or
	  MUX_toOutput_0_1$wset_1__SEL_4 or
	  MUX_toDfltOutput_1$wset_1__VAL_3 or
	  MUX_toOutput_0_1$wset_1__SEL_5 or
	  MUX_toDfltOutput_1$wset_1__VAL_4 or
	  MUX_toOutput_0_1$wset_1__SEL_6 or
	  MUX_toOutput_0_1$wset_1__SEL_7 or MUX_toOutput_0_1$wset_1__SEL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_0_1$wset_1__SEL_1:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_1;
      MUX_toOutput_0_1$wset_1__SEL_2:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_1;
      MUX_toOutput_0_1$wset_1__SEL_3:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_2;
      MUX_toOutput_0_1$wset_1__SEL_4:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_3;
      MUX_toOutput_0_1$wset_1__SEL_5:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_4;
      MUX_toOutput_0_1$wset_1__SEL_6:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_2;
      MUX_toOutput_0_1$wset_1__SEL_7:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_3;
      MUX_toOutput_0_1$wset_1__SEL_8:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_4;
      default: toOutput_0_1$wget = 7'b0101010 /* unspecified value */ ;
    endcase
  end
  assign toOutput_0_1$whas =
	     WILL_FIRE_RL_input_first_flit_2 &&
	     (inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0_1$wget[0] ||
	     WILL_FIRE_RL_input_follow_flit_2 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ||
	     WILL_FIRE_RL_input_follow_flit_3 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ||
	     WILL_FIRE_RL_input_follow_flit_4 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ||
	     WILL_FIRE_RL_input_follow_flit_5 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ||
	     WILL_FIRE_RL_input_first_flit_3 &&
	     (inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1$wget[0] ||
	     WILL_FIRE_RL_input_first_flit_4 &&
	     (inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_2$wget[0] ||
	     WILL_FIRE_RL_input_first_flit_5 &&
	     (inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_3$wget[0] ;
  assign selectInput_0_1$wget =
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1206 ?
	       (NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 ?
		  IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1211 :
		  IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1203) :
	       arbiter_lastSelect_1 ;
  assign selectInput_1_1$wget =
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1206 ?
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1216 :
	       arbiter_lastSelect_1_1 ;
  assign selectInput_2$wget =
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1206 ?
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1220 :
	       arbiter_lastSelect_2 ;
  assign selectInput_3$wget =
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1206 ?
	       (NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 ?
		  IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1223 :
		  IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1210) :
	       arbiter_firstHot_1 ;
  assign inputDest_1_0$wget =
	     { cpu_mem_master_ar_peek__377_BITS_92_TO_69_379__ETC___d1393,
	       cpu$mem_master_ar_peek[92:69] == 24'd0 &&
	       !cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1382 &&
	       cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1384,
	       cpu_mem_master_ar_peek__377_BITS_92_TO_69_379__ETC___d1400 } ;
  assign toOutput_1_0$wget =
	     MUX_toOutput_1_0$wset_1__SEL_1 ?
	       MUX_toDfltOutput_1_1$wset_1__VAL_1 :
	       MUX_toDfltOutput_1_1$wset_1__VAL_1 ;
  assign toOutput_1_0$whas =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0$wget[0] ||
	     WILL_FIRE_RL_input_follow_flit_6 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[0] ;
  assign toOutput_1_1_1$wget =
	     MUX_toOutput_1_1_1$wset_1__SEL_1 ?
	       MUX_toDfltOutput_1_1$wset_1__VAL_1 :
	       MUX_toDfltOutput_1_1$wset_1__VAL_1 ;
  assign toOutput_1_1_1$whas =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0$wget[1] ||
	     WILL_FIRE_RL_input_follow_flit_6 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[1] ;
  assign toOutput_1_2$wget =
	     MUX_toOutput_1_2$wset_1__SEL_1 ?
	       MUX_toDfltOutput_1_1$wset_1__VAL_1 :
	       MUX_toDfltOutput_1_1$wset_1__VAL_1 ;
  assign toOutput_1_2$whas =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0$wget[2] ||
	     WILL_FIRE_RL_input_follow_flit_6 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[2] ;
  assign toDfltOutput_1_1$wget =
	     MUX_toDfltOutput_1_1$wset_1__SEL_1 ?
	       MUX_toDfltOutput_1_1$wset_1__VAL_1 :
	       MUX_toDfltOutput_1_1$wset_1__VAL_1 ;
  assign toDfltOutput_1_1$whas =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ||
	     WILL_FIRE_RL_input_follow_flit_6 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign selectInput_1_0$wget =
	     (IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1525 ||
	      IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1526) ?
	       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1529 :
	       arbiter_1_lastSelect ;
  assign selectInput_1_1_1$wget =
	     (IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1525 ||
	      IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1526) ?
	       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1531 :
	       arbiter_1_firstHot ;
  assign inputDest_1_0_1$wget = 2'd1 << noRouteSlv_1_currentReq[97] ;
  assign inputDest_1_1_2$wget =
	     2'd1 << axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[72] ;
  assign inputDest_1_2$wget = 2'd1 << near_mem_io$axi4_slave_r_peek[71] ;
  assign inputDest_1_3$wget = 2'd1 << plic$axi4_slave_r_peek[71] ;
  always@(MUX_toOutput_1_0_1$wset_1__SEL_1 or
	  MUX_toDfltOutput_1_2$wset_1__VAL_1 or
	  MUX_toOutput_1_0_1$wset_1__SEL_2 or
	  MUX_toOutput_1_0_1$wset_1__SEL_3 or
	  MUX_toDfltOutput_1_2$wset_1__VAL_2 or
	  MUX_toOutput_1_0_1$wset_1__SEL_4 or
	  MUX_toDfltOutput_1_2$wset_1__VAL_3 or
	  MUX_toOutput_1_0_1$wset_1__SEL_5 or
	  MUX_toDfltOutput_1_2$wset_1__VAL_4 or
	  MUX_toOutput_1_0_1$wset_1__SEL_6 or
	  MUX_toOutput_1_0_1$wset_1__SEL_7 or
	  MUX_toOutput_1_0_1$wset_1__SEL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_1_0_1$wset_1__SEL_1:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_1;
      MUX_toOutput_1_0_1$wset_1__SEL_2:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_1;
      MUX_toOutput_1_0_1$wset_1__SEL_3:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_2;
      MUX_toOutput_1_0_1$wset_1__SEL_4:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_3;
      MUX_toOutput_1_0_1$wset_1__SEL_5:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_4;
      MUX_toOutput_1_0_1$wset_1__SEL_6:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_2;
      MUX_toOutput_1_0_1$wset_1__SEL_7:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_3;
      MUX_toOutput_1_0_1$wset_1__SEL_8:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_4;
      default: toOutput_1_0_1$wget =
		   73'h0AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign toOutput_1_0_1$whas =
	     WILL_FIRE_RL_input_first_flit_8 &&
	     (inputDest_1_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0_1$wget[0] ||
	     WILL_FIRE_RL_input_follow_flit_8 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ||
	     WILL_FIRE_RL_input_follow_flit_9 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ||
	     WILL_FIRE_RL_input_follow_flit_10 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ||
	     WILL_FIRE_RL_input_follow_flit_11 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ||
	     WILL_FIRE_RL_input_first_flit_9 &&
	     (inputDest_1_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1_2$wget[0] ||
	     WILL_FIRE_RL_input_first_flit_10 &&
	     (inputDest_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_2$wget[0] ||
	     WILL_FIRE_RL_input_first_flit_11 &&
	     (inputDest_1_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_3$wget[0] ;
  assign selectInput_1_0_1$wget =
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1796 ?
	       (NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 ?
		  IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1801 :
		  IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1793) :
	       arbiter_1_lastSelect_1 ;
  assign selectInput_1_1_2$wget =
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1796 ?
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1806 :
	       arbiter_1_lastSelect_1_1 ;
  assign selectInput_1_2$wget =
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1796 ?
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1810 :
	       arbiter_1_lastSelect_2 ;
  assign selectInput_1_3$wget =
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1796 ?
	       (NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 ?
		  IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1813 :
		  IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1800) :
	       arbiter_1_firstHot_1 ;
  assign merged_0_doDrop$whas =
	     WILL_FIRE_RL_input_follow_flit || WILL_FIRE_RL_input_first_flit ;
  assign merged_1_doDrop$whas =
	     WILL_FIRE_RL_input_follow_flit_1 ||
	     WILL_FIRE_RL_input_first_flit_1 ;
  assign axi4_mem_shim_tmp_shimSlave_awff_rv$port0__write_1 =
	     { 1'd1, split_0_doPut$wget[171:74] } ;
  assign axi4_mem_shim_tmp_shimSlave_awff_rv$port1__read =
	     x__h123543 ?
	       axi4_mem_shim_tmp_shimSlave_awff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimSlave_awff_rv ;
  assign axi4_mem_shim_tmp_shimSlave_awff_rv$port2__read =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_getCacheAW ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimSlave_awff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimSlave_awff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimSlave_awff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1 =
	     { 1'd1, split_0_doPut$wget[73:0] } ;
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read =
	     CAN_FIRE_RL_split_0_wug_doPut ?
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimSlave_wff_rv ;
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$port2__read =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse &&
	     axi4_mem_shim_tmp_tagCon$cache_response_get[68:67] != 2'd0 ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$port0__write_1 =
	     { 1'd1,
	       (axi4_mem_shim_tmp_tagCon$cache_response_get[68:67] == 2'd1) ?
		 axi4_mem_shim_tmp_tagCon$cache_response_get[75:71] :
		 5'd0,
	       2'd0 } ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read =
	     axi4_mem_shim_tmp_shimSlave_bff_rv$EN_port0__write ?
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimSlave_bff_rv ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$port2__read =
	     x__h123588 ?
	       8'd42 :
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       8'd42 :
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$port0__write_1 =
	     { 1'd1, toOutput_1_0$wget[0], toOutput_1_0$wget[97:1] } ;
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read =
	     x__h123595 ?
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimSlave_arff_rv ;
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$port2__read =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheRead ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse &&
	     axi4_mem_shim_tmp_tagCon$cache_response_get[68:67] == 2'd0 ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$port0__write_1 =
	     { 1'd1,
	       axi4_mem_shim_tmp_tagCon$cache_response_get[75:71],
	       axi4_mem_shim_tmp_tagCon$cache_response_get[63:0],
	       2'd0,
	       axi4_mem_shim_tmp_tagCon$cache_response_get[66],
	       axi4_mem_shim_tmp_tagCon$cache_response_get[64] } ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read =
	     axi4_mem_shim_tmp_shimSlave_rff_rv$EN_port0__write ?
	       axi4_mem_shim_tmp_shimSlave_rff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimSlave_rff_rv ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_input_follow_flit_9 ||
	     WILL_FIRE_RL_input_first_flit_9 ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$port2__read =
	     axi4_mem_shim_tmp_shimSlave_rff_rv$EN_port1__write ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimSlave_rff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	     axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1 &&
	     !axi4_mem_shim_tmp_doneSendingAW ;
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$port0__write_1 =
	     { 1'd1,
	       axi4_mem_shim_tmp_tagCon$memory_request_get[100:95],
	       aw_awaddr__h12033,
	       axi4_mem_shim_tmp_tagCon$memory_request_get[7:0],
	       aw_awsize_val__h14610,
	       3'd2,
	       x__h16919,
	       11'd0 } ;
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$EN_port0__write ?
	       axi4_mem_shim_tmp_shimMaster_awff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimMaster_awff_rv ;
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$port2__read =
	     EN_core_mem_master_aw_drop ?
	       100'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       100'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimMaster_awff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	     axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1 ;
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$port0__write_1 =
	     { 1'd1,
	       axi4_mem_shim_tmp_tagCon$memory_request_get[71:8],
	       axi4_mem_shim_tmp_tagCon$memory_request_get[88:81],
	       axi4_mem_shim_tmp_tagCon$memory_request_get[91] } ;
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$EN_port0__write ?
	       axi4_mem_shim_tmp_shimMaster_wff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimMaster_wff_rv ;
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$port2__read =
	     EN_core_mem_master_w_drop ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimMaster_wff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$port0__write_1 =
	     { 1'd1, core_mem_master_b_put_val } ;
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read =
	     EN_core_mem_master_b_put ?
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimMaster_bff_rv ;
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$port2__read =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite ?
	       9'd170 :
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       9'd170 :
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	     axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1 ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$port0__write_1 =
	     { 1'd1,
	       v_arid__h19241,
	       araddr__h19225,
	       v_arlen__h19243,
	       v_arsize_val__h19377,
	       3'd2,
	       x__h19479,
	       11'd0 } ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$EN_port0__write ?
	       axi4_mem_shim_tmp_shimMaster_arff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimMaster_arff_rv ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$port2__read =
	     EN_core_mem_master_ar_drop ?
	       100'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       100'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimMaster_arff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$port0__write_1 =
	     { 1'd1, core_mem_master_r_put_val } ;
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read =
	     EN_core_mem_master_r_put ?
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimMaster_rff_rv ;
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$port2__read =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port2__read ;

  // register arbiter_1_firstHot
  assign arbiter_1_firstHot$D_IN = selectInput_1_1_1$wget ;
  assign arbiter_1_firstHot$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_1_firstHot_1
  assign arbiter_1_firstHot_1$D_IN = selectInput_1_3$wget ;
  assign arbiter_1_firstHot_1$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_lastSelect
  assign arbiter_1_lastSelect$D_IN = selectInput_1_0$wget ;
  assign arbiter_1_lastSelect$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_1_lastSelect_1
  assign arbiter_1_lastSelect_1$D_IN = selectInput_1_0_1$wget ;
  assign arbiter_1_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_lastSelect_1_1
  assign arbiter_1_lastSelect_1_1$D_IN = selectInput_1_1_2$wget ;
  assign arbiter_1_lastSelect_1_1$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_lastSelect_2
  assign arbiter_1_lastSelect_2$D_IN = selectInput_1_2$wget ;
  assign arbiter_1_lastSelect_2$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_firstHot
  assign arbiter_firstHot$D_IN = selectInput_1$wget ;
  assign arbiter_firstHot$EN = CAN_FIRE_RL_arbitrate ;

  // register arbiter_firstHot_1
  assign arbiter_firstHot_1$D_IN = selectInput_3$wget ;
  assign arbiter_firstHot_1$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_lastSelect
  assign arbiter_lastSelect$D_IN = selectInput_0$wget ;
  assign arbiter_lastSelect$EN = CAN_FIRE_RL_arbitrate ;

  // register arbiter_lastSelect_1
  assign arbiter_lastSelect_1$D_IN = selectInput_0_1$wget ;
  assign arbiter_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_lastSelect_1_1
  assign arbiter_lastSelect_1_1$D_IN = selectInput_1_1$wget ;
  assign arbiter_lastSelect_1_1$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_lastSelect_2
  assign arbiter_lastSelect_2$D_IN = selectInput_2$wget ;
  assign arbiter_lastSelect_2$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register axi4_mem_shim_tmp_addrOffset
  assign axi4_mem_shim_tmp_addrOffset$D_IN =
	     axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[1] ?
	       64'd0 :
	       x__h9341 ;
  assign axi4_mem_shim_tmp_addrOffset$EN =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite ;

  // register axi4_mem_shim_tmp_doneSendingAW
  assign axi4_mem_shim_tmp_doneSendingAW$D_IN =
	     !axi4_mem_shim_tmp_tagCon$memory_request_get[91] ;
  assign axi4_mem_shim_tmp_doneSendingAW$EN =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	     axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1 ;

  // register axi4_mem_shim_tmp_reset_done
  assign axi4_mem_shim_tmp_reset_done$D_IN = 1'd1 ;
  assign axi4_mem_shim_tmp_reset_done$EN =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_propagateReset ;

  // register axi4_mem_shim_tmp_shimMaster_arff_rv
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$D_IN =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimMaster_awff_rv
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$D_IN =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimMaster_bff_rv
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$D_IN =
	     axi4_mem_shim_tmp_shimMaster_bff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimMaster_rff_rv
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$D_IN =
	     axi4_mem_shim_tmp_shimMaster_rff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimMaster_wff_rv
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$D_IN =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimSlave_arff_rv
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$D_IN =
	     axi4_mem_shim_tmp_shimSlave_arff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimSlave_awff_rv
  assign axi4_mem_shim_tmp_shimSlave_awff_rv$D_IN =
	     axi4_mem_shim_tmp_shimSlave_awff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimSlave_awff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimSlave_bff_rv
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$D_IN =
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimSlave_rff_rv
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$D_IN =
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimSlave_wff_rv
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$D_IN =
	     axi4_mem_shim_tmp_shimSlave_wff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_writeBurst
  assign axi4_mem_shim_tmp_writeBurst$D_IN =
	     !axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[1] ;
  assign axi4_mem_shim_tmp_writeBurst$EN =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite ;

  // register merged_0_flitLeft
  assign merged_0_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_0_genFirst ?
	       merged_0_awff$D_OUT[28:21] :
	       MUX_merged_0_flitLeft$write_1__VAL_2 ;
  assign merged_0_flitLeft$EN =
	     WILL_FIRE_RL_merged_0_genFirst ||
	     WILL_FIRE_RL_merged_0_genOther ;

  // register merged_1_flitLeft
  assign merged_1_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_1_genFirst ?
	       merged_1_awff$D_OUT[28:21] :
	       MUX_merged_1_flitLeft$write_1__VAL_2 ;
  assign merged_1_flitLeft$EN =
	     WILL_FIRE_RL_merged_1_genFirst ||
	     WILL_FIRE_RL_merged_1_genOther ;

  // register moreFlits
  always@(MUX_moreFlits$write_1__SEL_1 or
	  MUX_moreFlits$write_1__VAL_1 or
	  MUX_moreFlits$write_1__SEL_3 or
	  MUX_moreFlits$write_1__VAL_3 or
	  MUX_moreFlits$write_1__SEL_2 or MUX_moreFlits$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_moreFlits$write_1__SEL_1:
	  moreFlits$D_IN = MUX_moreFlits$write_1__VAL_1;
      MUX_moreFlits$write_1__SEL_3:
	  moreFlits$D_IN = MUX_moreFlits$write_1__VAL_3;
      MUX_moreFlits$write_1__SEL_2 || MUX_moreFlits$write_1__SEL_4:
	  moreFlits$D_IN = 6'd10;
      default: moreFlits$D_IN = 6'b101010 /* unspecified value */ ;
    endcase
  end
  assign moreFlits$EN =
	     WILL_FIRE_RL_input_first_flit &&
	     !MUX_toDfltOutput$wset_1__VAL_1[2] ||
	     WILL_FIRE_RL_input_follow_flit &&
	     MUX_toDfltOutput$wset_1__VAL_1[2] ||
	     WILL_FIRE_RL_input_first_flit_1 &&
	     !MUX_toDfltOutput$wset_1__VAL_2[2] ||
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     MUX_toDfltOutput$wset_1__VAL_2[2] ;

  // register moreFlits_1
  assign moreFlits_1$D_IN = 7'd42 ;
  assign moreFlits_1$EN =
	     WILL_FIRE_RL_input_follow_flit_5 ||
	     WILL_FIRE_RL_input_follow_flit_4 ||
	     WILL_FIRE_RL_input_follow_flit_3 ||
	     WILL_FIRE_RL_input_follow_flit_2 ;

  // register moreFlits_1_1
  assign moreFlits_1_1$D_IN = 6'd10 ;
  assign moreFlits_1_1$EN = CAN_FIRE_RL_input_follow_flit_6 ;

  // register moreFlits_1_2
  always@(MUX_moreFlits_1_2$write_1__SEL_1 or
	  MUX_moreFlits_1_2$write_1__VAL_1 or
	  MUX_moreFlits_1_2$write_1__SEL_3 or
	  MUX_moreFlits_1_2$write_1__VAL_3 or
	  MUX_moreFlits_1_2$write_1__SEL_5 or
	  MUX_moreFlits_1_2$write_1__VAL_5 or
	  MUX_moreFlits_1_2$write_1__SEL_7 or
	  MUX_moreFlits_1_2$write_1__VAL_7 or
	  MUX_moreFlits_1_2$write_1__SEL_2 or
	  MUX_moreFlits_1_2$write_1__SEL_4 or
	  MUX_moreFlits_1_2$write_1__SEL_6 or
	  MUX_moreFlits_1_2$write_1__SEL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_moreFlits_1_2$write_1__SEL_1:
	  moreFlits_1_2$D_IN = MUX_moreFlits_1_2$write_1__VAL_1;
      MUX_moreFlits_1_2$write_1__SEL_3:
	  moreFlits_1_2$D_IN = MUX_moreFlits_1_2$write_1__VAL_3;
      MUX_moreFlits_1_2$write_1__SEL_5:
	  moreFlits_1_2$D_IN = MUX_moreFlits_1_2$write_1__VAL_5;
      MUX_moreFlits_1_2$write_1__SEL_7:
	  moreFlits_1_2$D_IN = MUX_moreFlits_1_2$write_1__VAL_7;
      MUX_moreFlits_1_2$write_1__SEL_2 || MUX_moreFlits_1_2$write_1__SEL_4 ||
      MUX_moreFlits_1_2$write_1__SEL_6 ||
      MUX_moreFlits_1_2$write_1__SEL_8:
	  moreFlits_1_2$D_IN = 7'd42;
      default: moreFlits_1_2$D_IN = 7'b0101010 /* unspecified value */ ;
    endcase
  end
  assign moreFlits_1_2$EN =
	     WILL_FIRE_RL_input_first_flit_8 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_1[2] ||
	     WILL_FIRE_RL_input_follow_flit_8 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_1[2] ||
	     WILL_FIRE_RL_input_first_flit_9 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_2[2] ||
	     WILL_FIRE_RL_input_follow_flit_9 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_2[2] ||
	     WILL_FIRE_RL_input_first_flit_10 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_3[2] ||
	     WILL_FIRE_RL_input_follow_flit_10 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_3[2] ||
	     WILL_FIRE_RL_input_first_flit_11 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_4[2] ||
	     WILL_FIRE_RL_input_follow_flit_11 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_4[2] ;

  // register noRouteSlv_1_currentReq
  assign noRouteSlv_1_currentReq$D_IN =
	     { toDfltOutput_1_1$wget[0], toDfltOutput_1_1$wget[97:1] } ;
  assign noRouteSlv_1_currentReq$EN = CAN_FIRE_RL_dflt_output_selected_1 ;

  // register noRouteSlv_1_flitCount
  assign noRouteSlv_1_flitCount$D_IN =
	     WILL_FIRE_RL_dflt_output_selected_1 ?
	       MUX_noRouteSlv_1_flitCount$write_1__VAL_1 :
	       MUX_noRouteSlv_1_flitCount$write_1__VAL_2 ;
  assign noRouteSlv_1_flitCount$EN =
	     WILL_FIRE_RL_dflt_output_selected_1 ||
	     WILL_FIRE_RL_input_follow_flit_8 ||
	     WILL_FIRE_RL_input_first_flit_8 ;

  // register noRouteSlv_awidReg
  assign noRouteSlv_awidReg$D_IN = _theResult____h60686 ;
  assign noRouteSlv_awidReg$EN = CAN_FIRE_RL_dflt_output_selected ;

  // register split_0_flitLeft
  assign split_0_flitLeft$D_IN =
	     MUX_split_0_flitLeft$write_1__SEL_1 ?
	       MUX_split_0_flitLeft$write_1__VAL_1 :
	       split_0_doPut$wget[102:95] ;
  assign split_0_flitLeft$EN = split_0_wug_putWire$whas ;

  // register split_1_flitLeft
  assign split_1_flitLeft$D_IN =
	     MUX_split_1_flitLeft$write_1__SEL_1 ?
	       MUX_split_1_flitLeft$write_1__VAL_1 :
	       split_1_doPut$wget[102:95] ;
  assign split_1_flitLeft$EN = split_1_wug_putWire$whas ;

  // register split_2_flitLeft
  assign split_2_flitLeft$D_IN =
	     MUX_split_2_flitLeft$write_1__SEL_1 ?
	       MUX_split_2_flitLeft$write_1__VAL_1 :
	       split_2_doPut$wget[102:95] ;
  assign split_2_flitLeft$EN = split_2_wug_putWire$whas ;

  // submodule axi4_mem_shim_tmp_awreqff
  assign axi4_mem_shim_tmp_awreqff$D_IN =
	     axi4_mem_shim_tmp_shimSlave_awff_rv$port1__read[97:0] ;
  assign axi4_mem_shim_tmp_awreqff$ENQ =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_getCacheAW ;
  assign axi4_mem_shim_tmp_awreqff$DEQ =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	     axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[1] ;
  assign axi4_mem_shim_tmp_awreqff$CLR = 1'b0 ;

  // submodule axi4_mem_shim_tmp_newRst
  assign axi4_mem_shim_tmp_newRst$ASSERT_IN =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_propagateReset ;

  // submodule axi4_mem_shim_tmp_tagCon
  assign axi4_mem_shim_tmp_tagCon$cache_request_put_val =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite ?
	       MUX_axi4_mem_shim_tmp_tagCon$cache_request_put_1__VAL_1 :
	       MUX_axi4_mem_shim_tmp_tagCon$cache_request_put_1__VAL_2 ;
  assign axi4_mem_shim_tmp_tagCon$memory_response_put_val =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite ?
	       MUX_axi4_mem_shim_tmp_tagCon$memory_response_put_1__VAL_1 :
	       MUX_axi4_mem_shim_tmp_tagCon$memory_response_put_1__VAL_2 ;
  assign axi4_mem_shim_tmp_tagCon$EN_cache_request_put =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite ||
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheRead ;
  assign axi4_mem_shim_tmp_tagCon$EN_cache_response_get =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse ;
  assign axi4_mem_shim_tmp_tagCon$EN_memory_request_get =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest ;
  assign axi4_mem_shim_tmp_tagCon$EN_memory_response_put =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite ||
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead ;

  // submodule cpu
  assign cpu$dma_server_ar_put_val = dma_server_ar_put_val ;
  assign cpu$dma_server_aw_put_val = dma_server_aw_put_val ;
  assign cpu$dma_server_w_put_val = dma_server_w_put_val ;
  assign cpu$hart0_server_reset_request_put = f_reset_reqs$D_OUT ;
  assign cpu$imem_master_b_put_val = delay_shim_bff$D_OUT ;
  assign cpu$imem_master_r_put_val = delay_shim_rff$D_OUT ;
  assign cpu$m_external_interrupt_req_set_not_clear = plic$v_targets_0_m_eip ;
  assign cpu$mem_master_b_put_val = toOutput_0_1$wget[6:1] ;
  assign cpu$mem_master_r_put_val = toOutput_1_0_1$wget[72:1] ;
  assign cpu$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign cpu$relay_external_events_master_evts =
	     { x__h123635,
	       x__h123699,
	       x__h123724,
	       x__h123730,
	       x__h123737,
	       x__h123744,
	       x__h123763 } ;
  assign cpu$relay_external_events_slave_evts =
	     { x__h123491,
	       x__h123555,
	       x__h123579,
	       x__h123585,
	       x__h123592,
	       x__h123599,
	       x__h123618 } ;
  assign cpu$relay_external_events_tag_cache_evts =
	     { x__h123780,
	       x__h123811,
	       x__h123818,
	       x__h123825,
	       x__h123832,
	       128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign cpu$s_external_interrupt_req_set_not_clear = plic$v_targets_1_m_eip ;
  assign cpu$set_verbosity_logdelay = set_verbosity_logdelay ;
  assign cpu$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign cpu$set_watch_tohost_tohost_addr = set_watch_tohost_tohost_addr ;
  assign cpu$set_watch_tohost_watch_tohost = set_watch_tohost_watch_tohost ;
  assign cpu$software_interrupt_req_set_not_clear =
	     near_mem_io$get_sw_interrupt_req_get ;
  assign cpu$timer_interrupt_req_set_not_clear =
	     near_mem_io$get_timer_interrupt_req_get ;
  assign cpu$EN_hart0_server_reset_request_put =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign cpu$EN_hart0_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign cpu$EN_imem_master_aw_drop = CAN_FIRE_RL_ug_src_doDrop ;
  assign cpu$EN_imem_master_w_drop = CAN_FIRE_RL_ug_src_1_doDrop ;
  assign cpu$EN_imem_master_b_put = CAN_FIRE_RL_ug_snk_2_doPut ;
  assign cpu$EN_imem_master_ar_drop = CAN_FIRE_RL_ug_src_3_doDrop ;
  assign cpu$EN_imem_master_r_put = CAN_FIRE_RL_ug_snk_4_doPut ;
  assign cpu$EN_mem_master_aw_drop = CAN_FIRE_RL_merged_0_awug_doDrop ;
  assign cpu$EN_mem_master_w_drop = CAN_FIRE_RL_merged_0_wug_doDrop ;
  assign cpu$EN_mem_master_b_put = CAN_FIRE_RL_output_selected_3 ;
  assign cpu$EN_mem_master_ar_drop =
	     WILL_FIRE_RL_input_follow_flit_6 ||
	     WILL_FIRE_RL_input_first_flit_6 ;
  assign cpu$EN_mem_master_r_put = CAN_FIRE_RL_output_selected_8 ;
  assign cpu$EN_dma_server_aw_put = EN_dma_server_aw_put ;
  assign cpu$EN_dma_server_w_put = EN_dma_server_w_put ;
  assign cpu$EN_dma_server_b_drop = EN_dma_server_b_drop ;
  assign cpu$EN_dma_server_ar_put = EN_dma_server_ar_put ;
  assign cpu$EN_dma_server_r_drop = EN_dma_server_r_drop ;
  assign cpu$EN_relay_external_events = 1'd1 ;
  assign cpu$EN_set_verbosity = EN_set_verbosity ;
  assign cpu$EN_set_watch_tohost = EN_set_watch_tohost ;
  assign cpu$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // submodule delay_shim_arff
  assign delay_shim_arff$D_IN = cpu$imem_master_ar_peek ;
  assign delay_shim_arff$ENQ = CAN_FIRE_RL_ug_snk_3_doPut ;
  assign delay_shim_arff$DEQ = EN_cpu_imem_master_ar_drop ;
  assign delay_shim_arff$CLR = 1'b0 ;

  // submodule delay_shim_awff
  assign delay_shim_awff$D_IN = cpu$imem_master_aw_peek ;
  assign delay_shim_awff$ENQ = CAN_FIRE_RL_ug_snk_doPut ;
  assign delay_shim_awff$DEQ = EN_cpu_imem_master_aw_drop ;
  assign delay_shim_awff$CLR = 1'b0 ;

  // submodule delay_shim_bff
  assign delay_shim_bff$D_IN = cpu_imem_master_b_put_val ;
  assign delay_shim_bff$ENQ = EN_cpu_imem_master_b_put ;
  assign delay_shim_bff$DEQ = CAN_FIRE_RL_ug_src_2_doDrop ;
  assign delay_shim_bff$CLR = 1'b0 ;

  // submodule delay_shim_rff
  assign delay_shim_rff$D_IN = { cpu_imem_master_r_put_val, 1'd0 } ;
  assign delay_shim_rff$ENQ = EN_cpu_imem_master_r_put ;
  assign delay_shim_rff$DEQ = CAN_FIRE_RL_ug_src_4_doDrop ;
  assign delay_shim_rff$CLR = 1'b0 ;

  // submodule delay_shim_wff
  assign delay_shim_wff$D_IN = cpu$imem_master_w_peek ;
  assign delay_shim_wff$ENQ = CAN_FIRE_RL_ug_snk_1_doPut ;
  assign delay_shim_wff$DEQ = EN_cpu_imem_master_w_drop ;
  assign delay_shim_wff$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = cpu_reset_server_request_put ;
  assign f_reset_reqs$ENQ = EN_cpu_reset_server_request_put ;
  assign f_reset_reqs$DEQ =
	     near_mem_io$RDY_server_reset_request_put &&
	     plic$RDY_server_reset_request_put &&
	     cpu$RDY_hart0_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = cpu$hart0_server_reset_response_get ;
  assign f_reset_rsps$ENQ =
	     near_mem_io$RDY_server_reset_response_get &&
	     plic$RDY_server_reset_response_get &&
	     cpu$RDY_hart0_server_reset_response_get &&
	     f_reset_rsps$FULL_N ;
  assign f_reset_rsps$DEQ = EN_cpu_reset_server_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule merged_0_awff
  assign merged_0_awff$D_IN = cpu$mem_master_aw_peek ;
  assign merged_0_awff$ENQ = CAN_FIRE_RL_merged_0_awFlit ;
  assign merged_0_awff$DEQ = CAN_FIRE_RL_merged_0_genFirst ;
  assign merged_0_awff$CLR = 1'b0 ;

  // submodule merged_0_wff
  assign merged_0_wff$D_IN = cpu$mem_master_w_peek ;
  assign merged_0_wff$ENQ = CAN_FIRE_RL_merged_0_wFlit ;
  assign merged_0_wff$DEQ =
	     WILL_FIRE_RL_merged_0_genOther ||
	     WILL_FIRE_RL_merged_0_genFirst ;
  assign merged_0_wff$CLR = 1'b0 ;

  // submodule merged_1_awff
  assign merged_1_awff$D_IN = 97'h0 ;
  assign merged_1_awff$ENQ = 1'b0 ;
  assign merged_1_awff$DEQ = CAN_FIRE_RL_merged_1_genFirst ;
  assign merged_1_awff$CLR = 1'b0 ;

  // submodule merged_1_wff
  assign merged_1_wff$D_IN = 74'h0 ;
  assign merged_1_wff$ENQ = 1'b0 ;
  assign merged_1_wff$DEQ =
	     WILL_FIRE_RL_merged_1_genOther ||
	     WILL_FIRE_RL_merged_1_genFirst ;
  assign merged_1_wff$CLR = 1'b0 ;

  // submodule near_mem_io
  assign near_mem_io$axi4_slave_ar_put_val =
	     { toOutput_1_1_1$wget[0], toOutput_1_1_1$wget[97:1] } ;
  assign near_mem_io$axi4_slave_aw_put_val = split_1_doPut$wget[171:74] ;
  assign near_mem_io$axi4_slave_w_put_val = split_1_wug_putWire$wget[73:1] ;
  assign near_mem_io$set_addr_map_addr_base =
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign near_mem_io$set_addr_map_addr_lim =
	     soc_map$m_near_mem_io_addr_range[127:64] +
	     soc_map$m_near_mem_io_addr_range[63:0] ;
  assign near_mem_io$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign near_mem_io$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign near_mem_io$EN_set_addr_map =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign near_mem_io$EN_axi4_slave_aw_put = CAN_FIRE_RL_split_1_awug_doPut ;
  assign near_mem_io$EN_axi4_slave_w_put = CAN_FIRE_RL_split_1_wug_doPut ;
  assign near_mem_io$EN_axi4_slave_b_drop =
	     WILL_FIRE_RL_input_follow_flit_4 ||
	     WILL_FIRE_RL_input_first_flit_4 ;
  assign near_mem_io$EN_axi4_slave_ar_put = CAN_FIRE_RL_output_selected_6 ;
  assign near_mem_io$EN_axi4_slave_r_drop =
	     WILL_FIRE_RL_input_follow_flit_10 ||
	     WILL_FIRE_RL_input_first_flit_10 ;
  assign near_mem_io$EN_get_timer_interrupt_req_get =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;
  assign near_mem_io$EN_get_sw_interrupt_req_get =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;

  // submodule noRouteSlv_rspFF
  assign noRouteSlv_rspFF$D_IN = { _theResult____h60686, 2'd3 } ;
  assign noRouteSlv_rspFF$ENQ =
	     WILL_FIRE_RL_dflt_output_selected && toDfltOutput$wget[2] ;
  assign noRouteSlv_rspFF$DEQ =
	     WILL_FIRE_RL_input_follow_flit_2 ||
	     WILL_FIRE_RL_input_first_flit_2 ;
  assign noRouteSlv_rspFF$CLR = 1'b0 ;

  // submodule plic
  assign plic$axi4_slave_ar_put_val =
	     { toOutput_1_2$wget[0], toOutput_1_2$wget[97:1] } ;
  assign plic$axi4_slave_aw_put_val = split_2_doPut$wget[171:74] ;
  assign plic$axi4_slave_w_put_val = split_2_wug_putWire$wget[73:1] ;
  assign plic$set_addr_map_addr_base = soc_map$m_plic_addr_range[127:64] ;
  assign plic$set_addr_map_addr_lim =
	     soc_map$m_plic_addr_range[127:64] +
	     soc_map$m_plic_addr_range[63:0] ;
  assign plic$set_verbosity_verbosity = 4'h0 ;
  assign plic$v_sources_0_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_0_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_10_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_10_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_11_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_11_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_12_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_12_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_13_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_13_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_14_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_14_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_15_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_15_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_1_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_1_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_2_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_2_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_3_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_3_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_4_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_4_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_5_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_5_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_6_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_6_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_7_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_7_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_8_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_8_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_9_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_9_m_interrupt_req_set_not_clear ;
  assign plic$EN_set_verbosity = 1'b0 ;
  assign plic$EN_show_PLIC_state = 1'b0 ;
  assign plic$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign plic$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign plic$EN_set_addr_map = CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign plic$EN_axi4_slave_aw_put = CAN_FIRE_RL_split_2_awug_doPut ;
  assign plic$EN_axi4_slave_w_put = CAN_FIRE_RL_split_2_wug_doPut ;
  assign plic$EN_axi4_slave_b_drop =
	     WILL_FIRE_RL_input_follow_flit_5 ||
	     WILL_FIRE_RL_input_first_flit_5 ;
  assign plic$EN_axi4_slave_ar_put = CAN_FIRE_RL_output_selected_7 ;
  assign plic$EN_axi4_slave_r_drop =
	     WILL_FIRE_RL_input_follow_flit_11 ||
	     WILL_FIRE_RL_input_first_flit_11 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_IF_inputDest_0_1_whas__058_THEN_NOT_inputDe_ETC___d1076 =
	     (!inputDest_0_1$wget[0] || !cpu$mem_master_b_canPut) ?
	       inputDest_0_1$wget[1] :
	       inputDest_0_1$wget[0] ;
  assign IF_IF_inputDest_0_whas__82_THEN_NOT_inputDest__ETC___d822 =
	     (!inputDest_0$wget[0] ||
	      !IF_split_0_flitLeft_64_EQ_0_65_THEN_split_0_aw_ETC___d773) ?
	       ((!inputDest_0$wget[1] ||
		 !IF_split_1_flitLeft_10_EQ_0_11_THEN_split_1_aw_ETC___d775) ?
		  inputDest_0$wget[2] &&
		  IF_split_2_flitLeft_56_EQ_0_57_THEN_split_2_aw_ETC___d777 :
		  inputDest_0$wget[1]) :
	       inputDest_0$wget[0] ;
  assign IF_IF_inputDest_0_whas__82_THEN_inputDest_0_wg_ETC___d870 =
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 ||
	     !noRouteSlv_rspFF$FULL_N ;
  assign IF_IF_inputDest_1_0_1_whas__648_THEN_NOT_input_ETC___d1666 =
	     (!inputDest_1_0_1$wget[0] || !cpu$mem_master_r_canPut) ?
	       inputDest_1_0_1$wget[1] :
	       inputDest_1_0_1$wget[0] ;
  assign IF_IF_inputDest_1_0_whas__412_THEN_NOT_inputDe_ETC___d1452 =
	     (!inputDest_1_0$wget[0] ||
	      !(!axi4_mem_shim_tmp_shimSlave_arff_rv[98])) ?
	       ((!inputDest_1_0$wget[1] ||
		 !near_mem_io$axi4_slave_ar_canPut) ?
		  inputDest_1_0$wget[2] && plic$axi4_slave_ar_canPut :
		  inputDest_1_0$wget[1]) :
	       inputDest_1_0$wget[0] ;
  assign IF_IF_inputDest_1_0_whas__412_THEN_inputDest_1_ETC___d1500 =
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 ||
	     noRouteSlv_1_flitCount != 9'd0 ;
  assign IF_IF_inputDest_1_1_2_whas__671_THEN_NOT_input_ETC___d1681 =
	     (!inputDest_1_1_2$wget[0] || !cpu$mem_master_r_canPut) ?
	       inputDest_1_1_2$wget[1] :
	       inputDest_1_1_2$wget[0] ;
  assign IF_IF_inputDest_1_1_whas__081_THEN_NOT_inputDe_ETC___d1091 =
	     (!inputDest_1_1$wget[0] || !cpu$mem_master_b_canPut) ?
	       inputDest_1_1$wget[1] :
	       inputDest_1_1$wget[0] ;
  assign IF_IF_inputDest_1_2_whas__687_THEN_NOT_inputDe_ETC___d1697 =
	     (!inputDest_1_2$wget[0] || !cpu$mem_master_r_canPut) ?
	       inputDest_1_2$wget[1] :
	       inputDest_1_2$wget[0] ;
  assign IF_IF_inputDest_1_3_whas__702_THEN_NOT_inputDe_ETC___d1712 =
	     (!inputDest_1_3$wget[0] || !cpu$mem_master_r_canPut) ?
	       inputDest_1_3$wget[1] :
	       inputDest_1_3$wget[0] ;
  assign IF_IF_inputDest_1_whas__28_THEN_NOT_inputDest__ETC___d852 =
	     (!inputDest_1$wget[0] ||
	      !IF_split_0_flitLeft_64_EQ_0_65_THEN_split_0_aw_ETC___d773) ?
	       ((!inputDest_1$wget[1] ||
		 !IF_split_1_flitLeft_10_EQ_0_11_THEN_split_1_aw_ETC___d775) ?
		  inputDest_1$wget[2] &&
		  IF_split_2_flitLeft_56_EQ_0_57_THEN_split_2_aw_ETC___d777 :
		  inputDest_1$wget[1]) :
	       inputDest_1$wget[0] ;
  assign IF_IF_inputDest_1_whas__28_THEN_inputDest_1_wg_ETC___d884 =
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 ||
	     !noRouteSlv_rspFF$FULL_N ;
  assign IF_IF_inputDest_2_whas__097_THEN_NOT_inputDest_ETC___d1107 =
	     (!inputDest_2$wget[0] || !cpu$mem_master_b_canPut) ?
	       inputDest_2$wget[1] :
	       inputDest_2$wget[0] ;
  assign IF_IF_inputDest_3_whas__112_THEN_NOT_inputDest_ETC___d1122 =
	     (!inputDest_3$wget[0] || !cpu$mem_master_b_canPut) ?
	       inputDest_3$wget[1] :
	       inputDest_3$wget[0] ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1769 =
	     NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 ?
	       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1760 :
	       !plic$axi4_slave_r_canPeek ||
	       IF_inputDest_1_3_whas__702_THEN_NOT_inputDest__ETC___d1767 ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1772 =
	     NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 ?
	       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1771 :
	       !near_mem_io$axi4_slave_r_canPeek ||
	       IF_inputDest_1_2_whas__687_THEN_NOT_inputDest__ETC___d1741 ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1775 =
	     NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 ?
	       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1774 :
	       !axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] ||
	       IF_inputDest_1_1_2_whas__671_THEN_NOT_inputDes_ETC___d1749 ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1778 =
	     NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 ?
	       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1777 :
	       !(noRouteSlv_1_flitCount != 9'd0) ||
	       IF_inputDest_1_0_1_whas__648_THEN_NOT_inputDes_ETC___d1758 ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1781 =
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1769 &&
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1772 &&
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1775 &&
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1778 ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1784 =
	     NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 ?
	       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1783 :
	       plic$axi4_slave_r_canPeek &&
	       IF_IF_inputDest_1_3_whas__702_THEN_NOT_inputDe_ETC___d1712 ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1787 =
	     NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 ?
	       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1786 :
	       near_mem_io$axi4_slave_r_canPeek &&
	       IF_IF_inputDest_1_2_whas__687_THEN_NOT_inputDe_ETC___d1697 ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1790 =
	     NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 ?
	       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1789 :
	       axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	       IF_IF_inputDest_1_1_2_whas__671_THEN_NOT_input_ETC___d1681 ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1793 =
	     NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 ?
	       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1792 :
	       noRouteSlv_1_flitCount != 9'd0 &&
	       IF_IF_inputDest_1_0_1_whas__648_THEN_NOT_input_ETC___d1666 ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1796 =
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1784 ||
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1787 ||
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1790 ||
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1793 ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1800 =
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1772 &&
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1775 &&
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1778 &&
	     IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1784 ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1806 =
	     NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 ?
	       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1805 :
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1778 &&
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1790 ;
  assign IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1810 =
	     NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 ?
	       IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1809 :
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1775 &&
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1778 &&
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1787 ;
  assign IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1522 =
	     arbiter_1_firstHot || !arbiter_1_lastSelect ||
	     !cpu$mem_master_ar_canPeek ||
	     IF_IF_inputDest_1_0_whas__412_THEN_inputDest_1_ETC___d1500 &&
	     IF_inputDest_1_0_whas__412_THEN_NOT_inputDest__ETC___d1508 ;
  assign IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1523 =
	     !arbiter_1_firstHot && arbiter_1_lastSelect ||
	     !cpu$mem_master_ar_canPeek ||
	     IF_IF_inputDest_1_0_whas__412_THEN_inputDest_1_ETC___d1500 &&
	     IF_inputDest_1_0_whas__412_THEN_NOT_inputDest__ETC___d1508 ;
  assign IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1525 =
	     !arbiter_1_firstHot && arbiter_1_lastSelect &&
	     cpu$mem_master_ar_canPeek &&
	     (NOT_IF_IF_inputDest_1_0_whas__412_THEN_inputDe_ETC___d1430 ||
	      IF_IF_inputDest_1_0_whas__412_THEN_NOT_inputDe_ETC___d1452) ;
  assign IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1526 =
	     (arbiter_1_firstHot || !arbiter_1_lastSelect) &&
	     cpu$mem_master_ar_canPeek &&
	     (NOT_IF_IF_inputDest_1_0_whas__412_THEN_inputDe_ETC___d1430 ||
	      IF_IF_inputDest_1_0_whas__412_THEN_NOT_inputDe_ETC___d1452) ;
  assign IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1529 =
	     (!arbiter_1_firstHot && arbiter_1_lastSelect) ?
	       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1523 &&
	       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1525 :
	       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1526 ;
  assign IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1531 =
	     (!arbiter_1_firstHot && arbiter_1_lastSelect) ?
	       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1526 :
	       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1523 &&
	       IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1525 ;
  assign IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1751 =
	     (!arbiter_1_lastSelect_1_1 && arbiter_1_lastSelect_1) ?
	       !near_mem_io$axi4_slave_r_canPeek ||
	       IF_inputDest_1_2_whas__687_THEN_NOT_inputDest__ETC___d1741 :
	       !axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] ||
	       IF_inputDest_1_1_2_whas__671_THEN_NOT_inputDes_ETC___d1749 ;
  assign IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1770 =
	     (!arbiter_1_lastSelect_1_1 && arbiter_1_lastSelect_1) ?
	       !axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] ||
	       IF_inputDest_1_1_2_whas__671_THEN_NOT_inputDes_ETC___d1749 :
	       !(noRouteSlv_1_flitCount != 9'd0) ||
	       IF_inputDest_1_0_1_whas__648_THEN_NOT_inputDes_ETC___d1758 ;
  assign IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1773 =
	     (!arbiter_1_lastSelect_1_1 && arbiter_1_lastSelect_1) ?
	       !(noRouteSlv_1_flitCount != 9'd0) ||
	       IF_inputDest_1_0_1_whas__648_THEN_NOT_inputDes_ETC___d1758 :
	       !plic$axi4_slave_r_canPeek ||
	       IF_inputDest_1_3_whas__702_THEN_NOT_inputDest__ETC___d1767 ;
  assign IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1776 =
	     (!arbiter_1_lastSelect_1_1 && arbiter_1_lastSelect_1) ?
	       !plic$axi4_slave_r_canPeek ||
	       IF_inputDest_1_3_whas__702_THEN_NOT_inputDest__ETC___d1767 :
	       !near_mem_io$axi4_slave_r_canPeek ||
	       IF_inputDest_1_2_whas__687_THEN_NOT_inputDest__ETC___d1741 ;
  assign IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1782 =
	     (!arbiter_1_lastSelect_1_1 && arbiter_1_lastSelect_1) ?
	       near_mem_io$axi4_slave_r_canPeek &&
	       IF_IF_inputDest_1_2_whas__687_THEN_NOT_inputDe_ETC___d1697 :
	       axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	       IF_IF_inputDest_1_1_2_whas__671_THEN_NOT_input_ETC___d1681 ;
  assign IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1785 =
	     (!arbiter_1_lastSelect_1_1 && arbiter_1_lastSelect_1) ?
	       axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	       IF_IF_inputDest_1_1_2_whas__671_THEN_NOT_input_ETC___d1681 :
	       noRouteSlv_1_flitCount != 9'd0 &&
	       IF_IF_inputDest_1_0_1_whas__648_THEN_NOT_input_ETC___d1666 ;
  assign IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1788 =
	     (!arbiter_1_lastSelect_1_1 && arbiter_1_lastSelect_1) ?
	       noRouteSlv_1_flitCount != 9'd0 &&
	       IF_IF_inputDest_1_0_1_whas__648_THEN_NOT_input_ETC___d1666 :
	       plic$axi4_slave_r_canPeek &&
	       IF_IF_inputDest_1_3_whas__702_THEN_NOT_inputDe_ETC___d1712 ;
  assign IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1791 =
	     (!arbiter_1_lastSelect_1_1 && arbiter_1_lastSelect_1) ?
	       plic$axi4_slave_r_canPeek &&
	       IF_IF_inputDest_1_3_whas__702_THEN_NOT_inputDe_ETC___d1712 :
	       near_mem_io$axi4_slave_r_canPeek &&
	       IF_IF_inputDest_1_2_whas__687_THEN_NOT_inputDe_ETC___d1697 ;
  assign IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1799 =
	     (!arbiter_1_lastSelect_1_1 && arbiter_1_lastSelect_1) ?
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1778 &&
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1790 :
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1775 &&
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1778 &&
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1787 ;
  assign IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1804 =
	     (!arbiter_1_lastSelect_1_1 && arbiter_1_lastSelect_1) ?
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1775 &&
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1778 &&
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1787 :
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1800 ;
  assign IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1808 =
	     (!arbiter_1_lastSelect_1_1 && arbiter_1_lastSelect_1) ?
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1800 :
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1793 ;
  assign IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1812 =
	     (!arbiter_1_lastSelect_1_1 && arbiter_1_lastSelect_1) ?
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1793 :
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1778 &&
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1790 ;
  assign IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1760 =
	     (!arbiter_1_lastSelect_2 &&
	      (arbiter_1_lastSelect_1_1 || arbiter_1_lastSelect_1)) ?
	       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1751 :
	       !(noRouteSlv_1_flitCount != 9'd0) ||
	       IF_inputDest_1_0_1_whas__648_THEN_NOT_inputDes_ETC___d1758 ;
  assign IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1771 =
	     (!arbiter_1_lastSelect_2 &&
	      (arbiter_1_lastSelect_1_1 || arbiter_1_lastSelect_1)) ?
	       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1770 :
	       !plic$axi4_slave_r_canPeek ||
	       IF_inputDest_1_3_whas__702_THEN_NOT_inputDest__ETC___d1767 ;
  assign IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1774 =
	     (!arbiter_1_lastSelect_2 &&
	      (arbiter_1_lastSelect_1_1 || arbiter_1_lastSelect_1)) ?
	       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1773 :
	       !near_mem_io$axi4_slave_r_canPeek ||
	       IF_inputDest_1_2_whas__687_THEN_NOT_inputDest__ETC___d1741 ;
  assign IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1777 =
	     (!arbiter_1_lastSelect_2 &&
	      (arbiter_1_lastSelect_1_1 || arbiter_1_lastSelect_1)) ?
	       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1776 :
	       !axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] ||
	       IF_inputDest_1_1_2_whas__671_THEN_NOT_inputDes_ETC___d1749 ;
  assign IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1783 =
	     (!arbiter_1_lastSelect_2 &&
	      (arbiter_1_lastSelect_1_1 || arbiter_1_lastSelect_1)) ?
	       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1782 :
	       noRouteSlv_1_flitCount != 9'd0 &&
	       IF_IF_inputDest_1_0_1_whas__648_THEN_NOT_input_ETC___d1666 ;
  assign IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1786 =
	     (!arbiter_1_lastSelect_2 &&
	      (arbiter_1_lastSelect_1_1 || arbiter_1_lastSelect_1)) ?
	       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1785 :
	       plic$axi4_slave_r_canPeek &&
	       IF_IF_inputDest_1_3_whas__702_THEN_NOT_inputDe_ETC___d1712 ;
  assign IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1789 =
	     (!arbiter_1_lastSelect_2 &&
	      (arbiter_1_lastSelect_1_1 || arbiter_1_lastSelect_1)) ?
	       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1788 :
	       near_mem_io$axi4_slave_r_canPeek &&
	       IF_IF_inputDest_1_2_whas__687_THEN_NOT_inputDe_ETC___d1697 ;
  assign IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1792 =
	     (!arbiter_1_lastSelect_2 &&
	      (arbiter_1_lastSelect_1_1 || arbiter_1_lastSelect_1)) ?
	       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1791 :
	       axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	       IF_IF_inputDest_1_1_2_whas__671_THEN_NOT_input_ETC___d1681 ;
  assign IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1801 =
	     (!arbiter_1_lastSelect_2 &&
	      (arbiter_1_lastSelect_1_1 || arbiter_1_lastSelect_1)) ?
	       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1799 :
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1800 ;
  assign IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1805 =
	     (!arbiter_1_lastSelect_2 &&
	      (arbiter_1_lastSelect_1_1 || arbiter_1_lastSelect_1)) ?
	       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1804 :
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1793 ;
  assign IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1809 =
	     (!arbiter_1_lastSelect_2 &&
	      (arbiter_1_lastSelect_1_1 || arbiter_1_lastSelect_1)) ?
	       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1808 :
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1778 &&
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1790 ;
  assign IF_NOT_arbiter_1_lastSelect_2_722_728_AND_arbi_ETC___d1813 =
	     (!arbiter_1_lastSelect_2 &&
	      (arbiter_1_lastSelect_1_1 || arbiter_1_lastSelect_1)) ?
	       IF_NOT_arbiter_1_lastSelect_1_1_723_730_AND_ar_ETC___d1812 :
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1775 &&
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1778 &&
	       IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1787 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1179 =
	     NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 ?
	       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1170 :
	       !plic$axi4_slave_b_canPeek ||
	       IF_inputDest_3_whas__112_THEN_NOT_inputDest_3__ETC___d1177 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1182 =
	     NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 ?
	       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1181 :
	       !near_mem_io$axi4_slave_b_canPeek ||
	       IF_inputDest_2_whas__097_THEN_NOT_inputDest_2__ETC___d1151 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1185 =
	     NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 ?
	       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1184 :
	       !axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] ||
	       IF_inputDest_1_1_whas__081_THEN_NOT_inputDest__ETC___d1159 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1188 =
	     NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 ?
	       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1187 :
	       !noRouteSlv_rspFF$EMPTY_N ||
	       IF_inputDest_0_1_whas__058_THEN_NOT_inputDest__ETC___d1168 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1191 =
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1179 &&
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1182 &&
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1185 &&
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1188 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1194 =
	     NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 ?
	       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1193 :
	       plic$axi4_slave_b_canPeek &&
	       IF_IF_inputDest_3_whas__112_THEN_NOT_inputDest_ETC___d1122 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1197 =
	     NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 ?
	       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1196 :
	       near_mem_io$axi4_slave_b_canPeek &&
	       IF_IF_inputDest_2_whas__097_THEN_NOT_inputDest_ETC___d1107 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1200 =
	     NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 ?
	       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1199 :
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	       IF_IF_inputDest_1_1_whas__081_THEN_NOT_inputDe_ETC___d1091 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1203 =
	     NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 ?
	       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1202 :
	       noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_inputDest_0_1_whas__058_THEN_NOT_inputDe_ETC___d1076 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1206 =
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1194 ||
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1197 ||
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1200 ||
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1203 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1210 =
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1182 &&
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1185 &&
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1188 &&
	     IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1194 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1216 =
	     NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 ?
	       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1215 :
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1188 &&
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1200 ;
  assign IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1220 =
	     NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 ?
	       IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1219 :
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1185 &&
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1188 &&
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1197 ;
  assign IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d892 =
	     (!arbiter_firstHot && arbiter_lastSelect) ?
	       !IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689 ||
	       IF_IF_inputDest_0_whas__82_THEN_inputDest_0_wg_ETC___d870 &&
	       IF_inputDest_0_whas__82_THEN_NOT_inputDest_0_w_ETC___d878 :
	       !IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732 ||
	       IF_IF_inputDest_1_whas__28_THEN_inputDest_1_wg_ETC___d884 &&
	       IF_inputDest_1_whas__28_THEN_NOT_inputDest_1_w_ETC___d889 ;
  assign IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d893 =
	     (!arbiter_firstHot && arbiter_lastSelect) ?
	       !IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732 ||
	       IF_IF_inputDest_1_whas__28_THEN_inputDest_1_wg_ETC___d884 &&
	       IF_inputDest_1_whas__28_THEN_NOT_inputDest_1_w_ETC___d889 :
	       !IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689 ||
	       IF_IF_inputDest_0_whas__82_THEN_inputDest_0_wg_ETC___d870 &&
	       IF_inputDest_0_whas__82_THEN_NOT_inputDest_0_w_ETC___d878 ;
  assign IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d895 =
	     (!arbiter_firstHot && arbiter_lastSelect) ?
	       IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689 &&
	       (NOT_IF_IF_inputDest_0_whas__82_THEN_inputDest__ETC___d800 ||
		IF_IF_inputDest_0_whas__82_THEN_NOT_inputDest__ETC___d822) :
	       IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732 &&
	       (NOT_IF_IF_inputDest_1_whas__28_THEN_inputDest__ETC___d843 ||
		IF_IF_inputDest_1_whas__28_THEN_NOT_inputDest__ETC___d852) ;
  assign IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d896 =
	     (!arbiter_firstHot && arbiter_lastSelect) ?
	       IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732 &&
	       (NOT_IF_IF_inputDest_1_whas__28_THEN_inputDest__ETC___d843 ||
		IF_IF_inputDest_1_whas__28_THEN_NOT_inputDest__ETC___d852) :
	       IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689 &&
	       (NOT_IF_IF_inputDest_0_whas__82_THEN_inputDest__ETC___d800 ||
		IF_IF_inputDest_0_whas__82_THEN_NOT_inputDest__ETC___d822) ;
  assign IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d899 =
	     (!arbiter_firstHot && arbiter_lastSelect) ?
	       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d893 &&
	       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d895 :
	       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d896 ;
  assign IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d901 =
	     (!arbiter_firstHot && arbiter_lastSelect) ?
	       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d896 :
	       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d893 &&
	       IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d895 ;
  assign IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1161 =
	     (!arbiter_lastSelect_1_1 && arbiter_lastSelect_1) ?
	       !near_mem_io$axi4_slave_b_canPeek ||
	       IF_inputDest_2_whas__097_THEN_NOT_inputDest_2__ETC___d1151 :
	       !axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] ||
	       IF_inputDest_1_1_whas__081_THEN_NOT_inputDest__ETC___d1159 ;
  assign IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1180 =
	     (!arbiter_lastSelect_1_1 && arbiter_lastSelect_1) ?
	       !axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] ||
	       IF_inputDest_1_1_whas__081_THEN_NOT_inputDest__ETC___d1159 :
	       !noRouteSlv_rspFF$EMPTY_N ||
	       IF_inputDest_0_1_whas__058_THEN_NOT_inputDest__ETC___d1168 ;
  assign IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1183 =
	     (!arbiter_lastSelect_1_1 && arbiter_lastSelect_1) ?
	       !noRouteSlv_rspFF$EMPTY_N ||
	       IF_inputDest_0_1_whas__058_THEN_NOT_inputDest__ETC___d1168 :
	       !plic$axi4_slave_b_canPeek ||
	       IF_inputDest_3_whas__112_THEN_NOT_inputDest_3__ETC___d1177 ;
  assign IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1186 =
	     (!arbiter_lastSelect_1_1 && arbiter_lastSelect_1) ?
	       !plic$axi4_slave_b_canPeek ||
	       IF_inputDest_3_whas__112_THEN_NOT_inputDest_3__ETC___d1177 :
	       !near_mem_io$axi4_slave_b_canPeek ||
	       IF_inputDest_2_whas__097_THEN_NOT_inputDest_2__ETC___d1151 ;
  assign IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1192 =
	     (!arbiter_lastSelect_1_1 && arbiter_lastSelect_1) ?
	       near_mem_io$axi4_slave_b_canPeek &&
	       IF_IF_inputDest_2_whas__097_THEN_NOT_inputDest_ETC___d1107 :
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	       IF_IF_inputDest_1_1_whas__081_THEN_NOT_inputDe_ETC___d1091 ;
  assign IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1195 =
	     (!arbiter_lastSelect_1_1 && arbiter_lastSelect_1) ?
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	       IF_IF_inputDest_1_1_whas__081_THEN_NOT_inputDe_ETC___d1091 :
	       noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_inputDest_0_1_whas__058_THEN_NOT_inputDe_ETC___d1076 ;
  assign IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1198 =
	     (!arbiter_lastSelect_1_1 && arbiter_lastSelect_1) ?
	       noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_inputDest_0_1_whas__058_THEN_NOT_inputDe_ETC___d1076 :
	       plic$axi4_slave_b_canPeek &&
	       IF_IF_inputDest_3_whas__112_THEN_NOT_inputDest_ETC___d1122 ;
  assign IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1201 =
	     (!arbiter_lastSelect_1_1 && arbiter_lastSelect_1) ?
	       plic$axi4_slave_b_canPeek &&
	       IF_IF_inputDest_3_whas__112_THEN_NOT_inputDest_ETC___d1122 :
	       near_mem_io$axi4_slave_b_canPeek &&
	       IF_IF_inputDest_2_whas__097_THEN_NOT_inputDest_ETC___d1107 ;
  assign IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1209 =
	     (!arbiter_lastSelect_1_1 && arbiter_lastSelect_1) ?
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1188 &&
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1200 :
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1185 &&
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1188 &&
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1197 ;
  assign IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1214 =
	     (!arbiter_lastSelect_1_1 && arbiter_lastSelect_1) ?
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1185 &&
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1188 &&
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1197 :
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1210 ;
  assign IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1218 =
	     (!arbiter_lastSelect_1_1 && arbiter_lastSelect_1) ?
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1210 :
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1203 ;
  assign IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1222 =
	     (!arbiter_lastSelect_1_1 && arbiter_lastSelect_1) ?
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1203 :
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1188 &&
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1200 ;
  assign IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1170 =
	     (!arbiter_lastSelect_2 &&
	      (arbiter_lastSelect_1_1 || arbiter_lastSelect_1)) ?
	       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1161 :
	       !noRouteSlv_rspFF$EMPTY_N ||
	       IF_inputDest_0_1_whas__058_THEN_NOT_inputDest__ETC___d1168 ;
  assign IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1181 =
	     (!arbiter_lastSelect_2 &&
	      (arbiter_lastSelect_1_1 || arbiter_lastSelect_1)) ?
	       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1180 :
	       !plic$axi4_slave_b_canPeek ||
	       IF_inputDest_3_whas__112_THEN_NOT_inputDest_3__ETC___d1177 ;
  assign IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1184 =
	     (!arbiter_lastSelect_2 &&
	      (arbiter_lastSelect_1_1 || arbiter_lastSelect_1)) ?
	       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1183 :
	       !near_mem_io$axi4_slave_b_canPeek ||
	       IF_inputDest_2_whas__097_THEN_NOT_inputDest_2__ETC___d1151 ;
  assign IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1187 =
	     (!arbiter_lastSelect_2 &&
	      (arbiter_lastSelect_1_1 || arbiter_lastSelect_1)) ?
	       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1186 :
	       !axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] ||
	       IF_inputDest_1_1_whas__081_THEN_NOT_inputDest__ETC___d1159 ;
  assign IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1193 =
	     (!arbiter_lastSelect_2 &&
	      (arbiter_lastSelect_1_1 || arbiter_lastSelect_1)) ?
	       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1192 :
	       noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_inputDest_0_1_whas__058_THEN_NOT_inputDe_ETC___d1076 ;
  assign IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1196 =
	     (!arbiter_lastSelect_2 &&
	      (arbiter_lastSelect_1_1 || arbiter_lastSelect_1)) ?
	       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1195 :
	       plic$axi4_slave_b_canPeek &&
	       IF_IF_inputDest_3_whas__112_THEN_NOT_inputDest_ETC___d1122 ;
  assign IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1199 =
	     (!arbiter_lastSelect_2 &&
	      (arbiter_lastSelect_1_1 || arbiter_lastSelect_1)) ?
	       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1198 :
	       near_mem_io$axi4_slave_b_canPeek &&
	       IF_IF_inputDest_2_whas__097_THEN_NOT_inputDest_ETC___d1107 ;
  assign IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1202 =
	     (!arbiter_lastSelect_2 &&
	      (arbiter_lastSelect_1_1 || arbiter_lastSelect_1)) ?
	       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1201 :
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	       IF_IF_inputDest_1_1_whas__081_THEN_NOT_inputDe_ETC___d1091 ;
  assign IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1211 =
	     (!arbiter_lastSelect_2 &&
	      (arbiter_lastSelect_1_1 || arbiter_lastSelect_1)) ?
	       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1209 :
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1210 ;
  assign IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1215 =
	     (!arbiter_lastSelect_2 &&
	      (arbiter_lastSelect_1_1 || arbiter_lastSelect_1)) ?
	       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1214 :
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1203 ;
  assign IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1219 =
	     (!arbiter_lastSelect_2 &&
	      (arbiter_lastSelect_1_1 || arbiter_lastSelect_1)) ?
	       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1218 :
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1188 &&
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1200 ;
  assign IF_NOT_arbiter_lastSelect_2_132_138_AND_arbite_ETC___d1223 =
	     (!arbiter_lastSelect_2 &&
	      (arbiter_lastSelect_1_1 || arbiter_lastSelect_1)) ?
	       IF_NOT_arbiter_lastSelect_1_1_133_140_AND_arbi_ETC___d1222 :
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1185 &&
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1188 &&
	       IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1197 ;
  assign IF_NOT_moreFlits_1_126_BIT_0_311_312_OR_NOT_ou_ETC___d1316 =
	     (!moreFlits_1[0] || !cpu$mem_master_b_canPut) ?
	       moreFlits_1[1] :
	       moreFlits_1[0] ;
  assign IF_NOT_moreFlits_1_1_486_BIT_0_556_567_OR_NOT__ETC___d1573 =
	     (!moreFlits_1_1[0] ||
	      !(!axi4_mem_shim_tmp_shimSlave_arff_rv[98])) ?
	       ((!moreFlits_1_1[1] || !near_mem_io$axi4_slave_ar_canPut) ?
		  moreFlits_1_1[2] && plic$axi4_slave_ar_canPut :
		  moreFlits_1_1[1]) :
	       moreFlits_1_1[0] ;
  assign IF_NOT_moreFlits_1_2_716_BIT_0_904_905_OR_NOT__ETC___d1909 =
	     (!moreFlits_1_2[0] || !cpu$mem_master_r_canPut) ?
	       moreFlits_1_2[1] :
	       moreFlits_1_2[0] ;
  assign IF_NOT_moreFlits_56_BIT_0_31_42_OR_NOT_outputC_ETC___d948 =
	     (!moreFlits[0] ||
	      !IF_split_0_flitLeft_64_EQ_0_65_THEN_split_0_aw_ETC___d773) ?
	       ((!moreFlits[1] ||
		 !IF_split_1_flitLeft_10_EQ_0_11_THEN_split_1_aw_ETC___d775) ?
		  moreFlits[2] &&
		  IF_split_2_flitLeft_56_EQ_0_57_THEN_split_2_aw_ETC___d777 :
		  moreFlits[1]) :
	       moreFlits[0] ;
  assign IF_inputDest_0_1_whas__058_THEN_NOT_inputDest__ETC___d1168 =
	     (!inputDest_0_1$wget[0] || !cpu$mem_master_b_canPut) &&
	     !inputDest_0_1$wget[1] ;
  assign IF_inputDest_0_whas__82_THEN_NOT_inputDest_0_w_ETC___d878 =
	     (!inputDest_0$wget[0] ||
	      !IF_split_0_flitLeft_64_EQ_0_65_THEN_split_0_aw_ETC___d773) &&
	     (!inputDest_0$wget[1] ||
	      !IF_split_1_flitLeft_10_EQ_0_11_THEN_split_1_aw_ETC___d775) &&
	     (!inputDest_0$wget[2] ||
	      !IF_split_2_flitLeft_56_EQ_0_57_THEN_split_2_aw_ETC___d777) ;
  assign IF_inputDest_1_0_1_whas__648_THEN_NOT_inputDes_ETC___d1758 =
	     (!inputDest_1_0_1$wget[0] || !cpu$mem_master_r_canPut) &&
	     !inputDest_1_0_1$wget[1] ;
  assign IF_inputDest_1_0_whas__412_THEN_NOT_inputDest__ETC___d1508 =
	     (!inputDest_1_0$wget[0] ||
	      !(!axi4_mem_shim_tmp_shimSlave_arff_rv[98])) &&
	     (!inputDest_1_0$wget[1] || !near_mem_io$axi4_slave_ar_canPut) &&
	     (!inputDest_1_0$wget[2] || !plic$axi4_slave_ar_canPut) ;
  assign IF_inputDest_1_1_2_whas__671_THEN_NOT_inputDes_ETC___d1749 =
	     (!inputDest_1_1_2$wget[0] || !cpu$mem_master_r_canPut) &&
	     !inputDest_1_1_2$wget[1] ;
  assign IF_inputDest_1_1_whas__081_THEN_NOT_inputDest__ETC___d1159 =
	     (!inputDest_1_1$wget[0] || !cpu$mem_master_b_canPut) &&
	     !inputDest_1_1$wget[1] ;
  assign IF_inputDest_1_2_whas__687_THEN_NOT_inputDest__ETC___d1741 =
	     (!inputDest_1_2$wget[0] || !cpu$mem_master_r_canPut) &&
	     !inputDest_1_2$wget[1] ;
  assign IF_inputDest_1_3_whas__702_THEN_NOT_inputDest__ETC___d1767 =
	     (!inputDest_1_3$wget[0] || !cpu$mem_master_r_canPut) &&
	     !inputDest_1_3$wget[1] ;
  assign IF_inputDest_1_whas__28_THEN_NOT_inputDest_1_w_ETC___d889 =
	     (!inputDest_1$wget[0] ||
	      !IF_split_0_flitLeft_64_EQ_0_65_THEN_split_0_aw_ETC___d773) &&
	     (!inputDest_1$wget[1] ||
	      !IF_split_1_flitLeft_10_EQ_0_11_THEN_split_1_aw_ETC___d775) &&
	     (!inputDest_1$wget[2] ||
	      !IF_split_2_flitLeft_56_EQ_0_57_THEN_split_2_aw_ETC___d777) ;
  assign IF_inputDest_2_whas__097_THEN_NOT_inputDest_2__ETC___d1151 =
	     (!inputDest_2$wget[0] || !cpu$mem_master_b_canPut) &&
	     !inputDest_2$wget[1] ;
  assign IF_inputDest_3_whas__112_THEN_NOT_inputDest_3__ETC___d1177 =
	     (!inputDest_3$wget[0] || !cpu$mem_master_b_canPut) &&
	     !inputDest_3$wget[1] ;
  assign IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689 =
	     (merged_0_flitLeft == 8'd0) ?
	       merged_0_awff$EMPTY_N && merged_0_wff$EMPTY_N :
	       merged_0_wff$EMPTY_N ;
  assign IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d703 =
	     (CAN_FIRE_RL_merged_0_passFlit && !merged_0_outflit$wget[171]) ?
	       merged_0_outflit$wget[170:0] :
	       { 97'h0AAAAAAAAAAAAAAAAAAAAAAAA,
		 CAN_FIRE_RL_merged_0_passFlit ?
		   merged_0_outflit$wget[73:0] :
		   merged_0_wff$D_OUT } ;
  assign IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d709 =
	     addr__h35433 < soc_map$m_near_mem_io_addr_range[127:64] ;
  assign IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d711 =
	     x__h35492 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d714 =
	     addr__h35433 < soc_map$m_plic_addr_range[127:64] ;
  assign IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d717 =
	     x__h35517 < soc_map$m_plic_addr_range[63:0] ;
  assign IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d720 =
	     addr__h35433[63:40] == 24'd0 &&
	     (IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d709 ||
	      !IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d711) &&
	     !IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d714 &&
	     IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d717 ;
  assign IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d727 =
	     addr__h35433[63:40] == 24'd0 &&
	     (IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d709 ||
	      !IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d711) &&
	     (IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d714 ||
	      !IF_merged_0_outflit_whas__90_AND_NOT_merged_0__ETC___d717) ;
  assign IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732 =
	     (merged_1_flitLeft == 8'd0) ?
	       merged_1_awff$EMPTY_N && merged_1_wff$EMPTY_N :
	       merged_1_wff$EMPTY_N ;
  assign IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d746 =
	     (CAN_FIRE_RL_merged_1_passFlit && !merged_1_outflit$wget[171]) ?
	       merged_1_outflit$wget[170:0] :
	       { 97'h0AAAAAAAAAAAAAAAAAAAAAAAA,
		 CAN_FIRE_RL_merged_1_passFlit ?
		   merged_1_outflit$wget[73:0] :
		   merged_1_wff$D_OUT } ;
  assign IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d752 =
	     addr__h36306 < soc_map$m_near_mem_io_addr_range[127:64] ;
  assign IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d754 =
	     x__h36363 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d757 =
	     addr__h36306 < soc_map$m_plic_addr_range[127:64] ;
  assign IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d760 =
	     x__h36388 < soc_map$m_plic_addr_range[63:0] ;
  assign IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d763 =
	     addr__h36306[63:40] == 24'd0 &&
	     (IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d752 ||
	      !IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d754) &&
	     !IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d757 &&
	     IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d760 ;
  assign IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d770 =
	     addr__h36306[63:40] == 24'd0 &&
	     (IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d752 ||
	      !IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d754) &&
	     (IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d757 ||
	      !IF_merged_1_outflit_whas__33_AND_NOT_merged_1__ETC___d760) ;
  assign IF_split_0_flitLeft_64_EQ_0_65_THEN_split_0_aw_ETC___d773 =
	     (split_0_flitLeft == 8'd0) ?
	       !axi4_mem_shim_tmp_shimSlave_awff_rv[98] &&
	       !axi4_mem_shim_tmp_shimSlave_wff_rv[74] :
	       !axi4_mem_shim_tmp_shimSlave_wff_rv[74] ;
  assign IF_split_1_flitLeft_10_EQ_0_11_THEN_split_1_aw_ETC___d775 =
	     (split_1_flitLeft == 8'd0) ?
	       near_mem_io$axi4_slave_aw_canPut &&
	       near_mem_io$axi4_slave_w_canPut :
	       near_mem_io$axi4_slave_w_canPut ;
  assign IF_split_2_flitLeft_56_EQ_0_57_THEN_split_2_aw_ETC___d777 =
	     (split_2_flitLeft == 8'd0) ?
	       plic$axi4_slave_aw_canPut && plic$axi4_slave_w_canPut :
	       plic$axi4_slave_w_canPut ;
  assign NOT_IF_IF_inputDest_0_whas__82_THEN_inputDest__ETC___d800 =
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 &&
	     noRouteSlv_rspFF$FULL_N ;
  assign NOT_IF_IF_inputDest_1_0_whas__412_THEN_inputDe_ETC___d1430 =
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 &&
	     noRouteSlv_1_flitCount == 9'd0 ;
  assign NOT_IF_IF_inputDest_1_whas__28_THEN_inputDest__ETC___d843 =
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 &&
	     noRouteSlv_rspFF$FULL_N ;
  assign NOT_IF_moreFlits_56_BIT_0_31_THEN_1_ELSE_0_32__ETC___d941 =
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) !=
	     2'd1 &&
	     noRouteSlv_rspFF$FULL_N ;
  assign NOT_arbiter_1_firstHot_1_720_721_AND_arbiter_1_ETC___d1727 =
	     !arbiter_1_firstHot_1 &&
	     (arbiter_1_lastSelect_2 || arbiter_1_lastSelect_1_1 ||
	      arbiter_1_lastSelect_1) ;
  assign NOT_arbiter_firstHot_1_130_131_AND_arbiter_las_ETC___d1137 =
	     !arbiter_firstHot_1 &&
	     (arbiter_lastSelect_2 || arbiter_lastSelect_1_1 ||
	      arbiter_lastSelect_1) ;
  assign _0_CONCAT_axi4_mem_shim_tmp_tagCon_memory_reque_ETC___d302 =
	     x__h14680 + y__h14681 ;
  assign _theResult____h60686 =
	     toDfltOutput$wget[172] ?
	       noRouteSlv_awidReg :
	       currentAwid__h60871 ;
  assign addr__h35433 =
	     (CAN_FIRE_RL_merged_0_passFlit && !merged_0_outflit$wget[171]) ?
	       merged_0_outflit$wget[166:103] :
	       64'd0 ;
  assign addr__h36306 =
	     (CAN_FIRE_RL_merged_1_passFlit && !merged_1_outflit$wget[171]) ?
	       merged_1_outflit$wget[166:103] :
	       64'd0 ;
  assign araddr__h19225 =
	     { 24'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[140:101] } ;
  assign arcache__h19230 =
	     axi4_mem_shim_tmp_tagCon$memory_request_get[8] ? 4'd0 : 4'd15 ;
  assign arlen__h19226 =
	     { 5'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[5:3] } ;
  assign arsize_val__h19376 =
	     (axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       axi4_mem_shim_tmp_tagCon$memory_request_get[2:0] :
	       3'h2 ;
  assign aw_awaddr__h12033 = tmp__h11875 + { 60'd0, x__h12108 } ;
  assign aw_awlen__h12034 =
	     (axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1) ?
	       axi4_mem_shim_tmp_tagCon$memory_request_get[7:0] :
	       8'hAA ;
  assign aw_awsize_val__h14610 =
	     _0_CONCAT_axi4_mem_shim_tmp_tagCon_memory_reque_ETC___d302[0] ?
	       3'd0 :
	       (_0_CONCAT_axi4_mem_shim_tmp_tagCon_memory_reque_ETC___d302[1] ?
		  3'd1 :
		  (_0_CONCAT_axi4_mem_shim_tmp_tagCon_memory_reque_ETC___d302[2] ?
		     3'd2 :
		     (_0_CONCAT_axi4_mem_shim_tmp_tagCon_memory_reque_ETC___d302[3] ?
			3'd3 :
			3'd4))) ;
  assign cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1382 =
	     cpu$mem_master_ar_peek[92:29] <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1384 =
	     x__h83752 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1387 =
	     cpu$mem_master_ar_peek[92:29] <
	     soc_map$m_plic_addr_range[127:64] ;
  assign cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1390 =
	     x__h83777 < soc_map$m_plic_addr_range[63:0] ;
  assign cpu_mem_master_ar_peek__377_BITS_92_TO_69_379__ETC___d1393 =
	     cpu$mem_master_ar_peek[92:69] == 24'd0 &&
	     (cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1382 ||
	      !cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1384) &&
	     !cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1387 &&
	     cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1390 ;
  assign cpu_mem_master_ar_peek__377_BITS_92_TO_69_379__ETC___d1400 =
	     cpu$mem_master_ar_peek[92:69] == 24'd0 &&
	     (cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1382 ||
	      !cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1384) &&
	     (cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1387 ||
	      !cpu_mem_master_ar_peek__377_BITS_92_TO_29_381__ETC___d1390) ;
  assign currentAwid__h60871 =
	     { toDfltOutput$wget[0], toDfltOutput$wget[171:168] } ;
  assign inputCanPeek_0_whas__79_AND_inputCanPeek_0_wge_ETC___d855 =
	     IF_merged_0_flitLeft_74_EQ_0_75_THEN_merged_0__ETC___d689 &&
	     (NOT_IF_IF_inputDest_0_whas__82_THEN_inputDest__ETC___d800 ||
	      IF_IF_inputDest_0_whas__82_THEN_NOT_inputDest__ETC___d822) ||
	     IF_merged_1_flitLeft_24_EQ_0_25_THEN_merged_1__ETC___d732 &&
	     (NOT_IF_IF_inputDest_1_whas__28_THEN_inputDest__ETC___d843 ||
	      IF_IF_inputDest_1_whas__28_THEN_NOT_inputDest__ETC___d852) ;
  assign moreFlits_1_1_486_BIT_5_487_AND_moreFlits_1_1__ETC___d1575 =
	     moreFlits_1_1[5] && moreFlits_1_1[3] &&
	     cpu$mem_master_ar_canPeek &&
	     ((moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	      (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	      (moreFlits_1_1[2] ? 2'd1 : 2'd0) !=
	      2'd1 &&
	      noRouteSlv_1_flitCount == 9'd0 ||
	      IF_NOT_moreFlits_1_1_486_BIT_0_556_567_OR_NOT__ETC___d1573) ;
  assign tmp__h11875 = { 24'd0, x__h12065 } ;
  assign tmp__h9480 =
	     axi4_mem_shim_tmp_awreqff$D_OUT[92:29] +
	     axi4_mem_shim_tmp_addrOffset ;
  assign v_araddr__h19242 =
	     (axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       araddr__h19225 :
	       64'hAAAAAAAAAAAAAAAA ;
  assign v_arid__h19241 =
	     (axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       axi4_mem_shim_tmp_tagCon$memory_request_get[100:95] :
	       6'd0 ;
  assign v_arlen__h19243 =
	     (axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       arlen__h19226 :
	       8'd0 ;
  assign v_arsize_val__h19377 =
	     (axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       arsize_val__h19376 :
	       3'b0 ;
  assign w_wdata__h17166 =
	     (axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1) ?
	       axi4_mem_shim_tmp_tagCon$memory_request_get[71:8] :
	       64'hAAAAAAAAAAAAAAAA ;
  assign x__h12065 =
	     { axi4_mem_shim_tmp_tagCon$memory_request_get[140:104], 3'd0 } ;
  assign x__h12108 =
	     axi4_mem_shim_tmp_tagCon$memory_request_get[81] ?
	       4'd0 :
	       (axi4_mem_shim_tmp_tagCon$memory_request_get[82] ?
		  4'd1 :
		  (axi4_mem_shim_tmp_tagCon$memory_request_get[83] ?
		     4'd2 :
		     (axi4_mem_shim_tmp_tagCon$memory_request_get[84] ?
			4'd3 :
			(axi4_mem_shim_tmp_tagCon$memory_request_get[85] ?
			   4'd4 :
			   (axi4_mem_shim_tmp_tagCon$memory_request_get[86] ?
			      4'd5 :
			      (axi4_mem_shim_tmp_tagCon$memory_request_get[87] ?
				 4'd6 :
				 (axi4_mem_shim_tmp_tagCon$memory_request_get[88] ?
				    4'd7 :
				    4'd8))))))) ;
  assign x__h123491 = { 63'd0, x__h123543 } ;
  assign x__h123543 =
	     !axi4_mem_shim_tmp_shimSlave_awff_rv[98] &&
	     MUX_split_0_flitLeft$write_1__SEL_2 ;
  assign x__h123555 = { 63'd0, x__h123558 } ;
  assign x__h123558 =
	     CAN_FIRE_RL_split_0_wug_doPut &&
	     axi4_mem_shim_slave_monitor_wMonitor_evt$wget[1] ;
  assign x__h123579 = { 63'd0, x__h123582 } ;
  assign x__h123582 =
	     CAN_FIRE_RL_split_0_wug_doPut &&
	     axi4_mem_shim_slave_monitor_wMonitor_evt$wget[0] ;
  assign x__h123585 = { 63'd0, x__h123588 } ;
  assign x__h123588 =
	     WILL_FIRE_RL_input_follow_flit_3 ||
	     WILL_FIRE_RL_input_first_flit_3 ;
  assign x__h123592 = { 63'd0, x__h123595 } ;
  assign x__h123595 =
	     toOutput_1_0$whas && !axi4_mem_shim_tmp_shimSlave_arff_rv[98] ;
  assign x__h123599 = { 63'd0, x__h123602 } ;
  assign x__h123602 =
	     axi4_mem_shim_slave_monitor_rMonitor_evt$whas &&
	     axi4_mem_shim_slave_monitor_rMonitor_evt$wget[1] ;
  assign x__h123618 = { 63'd0, x__h123621 } ;
  assign x__h123621 =
	     axi4_mem_shim_slave_monitor_rMonitor_evt$whas &&
	     axi4_mem_shim_slave_monitor_rMonitor_evt$wget[0] ;
  assign x__h123635 = { 63'd0, EN_core_mem_master_aw_drop } ;
  assign x__h123699 = { 63'd0, x__h123702 } ;
  assign x__h123702 =
	     EN_core_mem_master_w_drop &&
	     axi4_mem_shim_master_monitor_wMonitor_evt$wget[1] ;
  assign x__h123724 = { 63'd0, x__h123727 } ;
  assign x__h123727 =
	     EN_core_mem_master_w_drop &&
	     axi4_mem_shim_master_monitor_wMonitor_evt$wget[0] ;
  assign x__h123730 = { 63'd0, EN_core_mem_master_b_put } ;
  assign x__h123737 = { 63'd0, EN_core_mem_master_ar_drop } ;
  assign x__h123744 = { 63'd0, x__h123747 } ;
  assign x__h123747 =
	     EN_core_mem_master_r_put &&
	     axi4_mem_shim_master_monitor_rMonitor_evt$wget[1] ;
  assign x__h123763 = { 63'd0, x__h123766 } ;
  assign x__h123766 =
	     EN_core_mem_master_r_put &&
	     axi4_mem_shim_master_monitor_rMonitor_evt$wget[0] ;
  assign x__h123780 = { 63'd0, axi4_mem_shim_tmp_tagCon$events[6] } ;
  assign x__h123811 = { 63'd0, axi4_mem_shim_tmp_tagCon$events[5] } ;
  assign x__h123818 = { 63'd0, axi4_mem_shim_tmp_tagCon$events[4] } ;
  assign x__h123825 = { 63'd0, axi4_mem_shim_tmp_tagCon$events[3] } ;
  assign x__h123832 = { 63'd0, axi4_mem_shim_tmp_tagCon$events[2] } ;
  assign x__h14680 = x__h14692 + y__h14693 ;
  assign x__h14692 = x__h14704 + y__h14705 ;
  assign x__h14704 = x__h14716 + y__h14717 ;
  assign x__h14716 = x__h14728 + y__h14729 ;
  assign x__h14728 = x__h14740 + y__h14741 ;
  assign x__h14740 = x__h14752 + y__h14753 ;
  assign x__h14752 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[88] } ;
  assign x__h16919 =
	     axi4_mem_shim_tmp_tagCon$memory_request_get[90] ? 4'd0 : 4'd15 ;
  assign x__h19479 =
	     (axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       arcache__h19230 :
	       4'd0 ;
  assign x__h35492 = addr__h35433 - soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h35517 = addr__h35433 - soc_map$m_plic_addr_range[127:64] ;
  assign x__h36363 = addr__h36306 - soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h36388 = addr__h36306 - soc_map$m_plic_addr_range[127:64] ;
  assign x__h83752 =
	     cpu$mem_master_ar_peek[92:29] -
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h83777 =
	     cpu$mem_master_ar_peek[92:29] -
	     soc_map$m_plic_addr_range[127:64] ;
  assign x__h9341 =
	     axi4_mem_shim_tmp_addrOffset +
	     (64'd1 << axi4_mem_shim_tmp_awreqff$D_OUT[20:18]) ;
  assign y__h14681 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[81] } ;
  assign y__h14693 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[82] } ;
  assign y__h14705 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[83] } ;
  assign y__h14717 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[84] } ;
  assign y__h14729 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[85] } ;
  assign y__h14741 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[86] } ;
  assign y__h14753 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[87] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi4_mem_shim_tmp_addrOffset <= `BSV_ASSIGNMENT_DELAY 64'd0;
	axi4_mem_shim_tmp_doneSendingAW <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi4_mem_shim_tmp_reset_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi4_mem_shim_tmp_shimMaster_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    100'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	axi4_mem_shim_tmp_shimMaster_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    100'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	axi4_mem_shim_tmp_shimMaster_bff_rv <= `BSV_ASSIGNMENT_DELAY 9'd170;
	axi4_mem_shim_tmp_shimMaster_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	axi4_mem_shim_tmp_shimMaster_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	axi4_mem_shim_tmp_shimSlave_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	axi4_mem_shim_tmp_shimSlave_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	axi4_mem_shim_tmp_shimSlave_bff_rv <= `BSV_ASSIGNMENT_DELAY 8'd42;
	axi4_mem_shim_tmp_shimSlave_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	axi4_mem_shim_tmp_shimSlave_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
	axi4_mem_shim_tmp_writeBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	moreFlits <= `BSV_ASSIGNMENT_DELAY 6'd10;
	moreFlits_1 <= `BSV_ASSIGNMENT_DELAY 7'd42;
	moreFlits_1_1 <= `BSV_ASSIGNMENT_DELAY 6'd10;
	moreFlits_1_2 <= `BSV_ASSIGNMENT_DELAY 7'd42;
	noRouteSlv_1_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (arbiter_1_firstHot$EN)
	  arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_1_firstHot$D_IN;
	if (arbiter_1_firstHot_1$EN)
	  arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_firstHot_1$D_IN;
	if (arbiter_1_lastSelect$EN)
	  arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect$D_IN;
	if (arbiter_1_lastSelect_1$EN)
	  arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_1$D_IN;
	if (arbiter_1_lastSelect_1_1$EN)
	  arbiter_1_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_1_1$D_IN;
	if (arbiter_1_lastSelect_2$EN)
	  arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_2$D_IN;
	if (arbiter_firstHot$EN)
	  arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_firstHot$D_IN;
	if (arbiter_firstHot_1$EN)
	  arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY arbiter_firstHot_1$D_IN;
	if (arbiter_lastSelect$EN)
	  arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY arbiter_lastSelect$D_IN;
	if (arbiter_lastSelect_1$EN)
	  arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_lastSelect_1$D_IN;
	if (arbiter_lastSelect_1_1$EN)
	  arbiter_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_lastSelect_1_1$D_IN;
	if (arbiter_lastSelect_2$EN)
	  arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_lastSelect_2$D_IN;
	if (axi4_mem_shim_tmp_addrOffset$EN)
	  axi4_mem_shim_tmp_addrOffset <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_addrOffset$D_IN;
	if (axi4_mem_shim_tmp_doneSendingAW$EN)
	  axi4_mem_shim_tmp_doneSendingAW <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_doneSendingAW$D_IN;
	if (axi4_mem_shim_tmp_reset_done$EN)
	  axi4_mem_shim_tmp_reset_done <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_reset_done$D_IN;
	if (axi4_mem_shim_tmp_shimMaster_arff_rv$EN)
	  axi4_mem_shim_tmp_shimMaster_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimMaster_arff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimMaster_awff_rv$EN)
	  axi4_mem_shim_tmp_shimMaster_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimMaster_awff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimMaster_bff_rv$EN)
	  axi4_mem_shim_tmp_shimMaster_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimMaster_bff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimMaster_rff_rv$EN)
	  axi4_mem_shim_tmp_shimMaster_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimMaster_rff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimMaster_wff_rv$EN)
	  axi4_mem_shim_tmp_shimMaster_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimMaster_wff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimSlave_arff_rv$EN)
	  axi4_mem_shim_tmp_shimSlave_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimSlave_arff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimSlave_awff_rv$EN)
	  axi4_mem_shim_tmp_shimSlave_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimSlave_awff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimSlave_bff_rv$EN)
	  axi4_mem_shim_tmp_shimSlave_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimSlave_bff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimSlave_rff_rv$EN)
	  axi4_mem_shim_tmp_shimSlave_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimSlave_rff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimSlave_wff_rv$EN)
	  axi4_mem_shim_tmp_shimSlave_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimSlave_wff_rv$D_IN;
	if (axi4_mem_shim_tmp_writeBurst$EN)
	  axi4_mem_shim_tmp_writeBurst <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_writeBurst$D_IN;
	if (merged_0_flitLeft$EN)
	  merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_0_flitLeft$D_IN;
	if (merged_1_flitLeft$EN)
	  merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_1_flitLeft$D_IN;
	if (moreFlits$EN) moreFlits <= `BSV_ASSIGNMENT_DELAY moreFlits$D_IN;
	if (moreFlits_1$EN)
	  moreFlits_1 <= `BSV_ASSIGNMENT_DELAY moreFlits_1$D_IN;
	if (moreFlits_1_1$EN)
	  moreFlits_1_1 <= `BSV_ASSIGNMENT_DELAY moreFlits_1_1$D_IN;
	if (moreFlits_1_2$EN)
	  moreFlits_1_2 <= `BSV_ASSIGNMENT_DELAY moreFlits_1_2$D_IN;
	if (noRouteSlv_1_flitCount$EN)
	  noRouteSlv_1_flitCount <= `BSV_ASSIGNMENT_DELAY
	      noRouteSlv_1_flitCount$D_IN;
	if (split_0_flitLeft$EN)
	  split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY split_0_flitLeft$D_IN;
	if (split_1_flitLeft$EN)
	  split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY split_1_flitLeft$D_IN;
	if (split_2_flitLeft$EN)
	  split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY split_2_flitLeft$D_IN;
      end
    if (noRouteSlv_1_currentReq$EN)
      noRouteSlv_1_currentReq <= `BSV_ASSIGNMENT_DELAY
	  noRouteSlv_1_currentReq$D_IN;
    if (noRouteSlv_awidReg$EN)
      noRouteSlv_awidReg <= `BSV_ASSIGNMENT_DELAY noRouteSlv_awidReg$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    arbiter_1_firstHot = 1'h0;
    arbiter_1_firstHot_1 = 1'h0;
    arbiter_1_lastSelect = 1'h0;
    arbiter_1_lastSelect_1 = 1'h0;
    arbiter_1_lastSelect_1_1 = 1'h0;
    arbiter_1_lastSelect_2 = 1'h0;
    arbiter_firstHot = 1'h0;
    arbiter_firstHot_1 = 1'h0;
    arbiter_lastSelect = 1'h0;
    arbiter_lastSelect_1 = 1'h0;
    arbiter_lastSelect_1_1 = 1'h0;
    arbiter_lastSelect_2 = 1'h0;
    axi4_mem_shim_tmp_addrOffset = 64'hAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_doneSendingAW = 1'h0;
    axi4_mem_shim_tmp_reset_done = 1'h0;
    axi4_mem_shim_tmp_shimMaster_arff_rv = 100'hAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimMaster_awff_rv = 100'hAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimMaster_bff_rv = 9'h0AA;
    axi4_mem_shim_tmp_shimMaster_rff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimMaster_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimSlave_arff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimSlave_awff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimSlave_bff_rv = 8'hAA;
    axi4_mem_shim_tmp_shimSlave_rff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimSlave_wff_rv = 75'h2AAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_writeBurst = 1'h0;
    merged_0_flitLeft = 8'hAA;
    merged_1_flitLeft = 8'hAA;
    moreFlits = 6'h2A;
    moreFlits_1 = 7'h2A;
    moreFlits_1_1 = 6'h2A;
    moreFlits_1_2 = 7'h2A;
    noRouteSlv_1_currentReq = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    noRouteSlv_1_flitCount = 9'h0AA;
    noRouteSlv_awidReg = 5'h0A;
    split_0_flitLeft = 8'hAA;
    split_1_flitLeft = 8'hAA;
    split_2_flitLeft = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1522 &&
	  IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1523)
	$display("mkFairOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1522 &&
	  IF_NOT_arbiter_1_firstHot_490_491_AND_arbiter__ETC___d1523)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_6)
	begin
	  v__h90115 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_6)
	$display("%0t -- %m error: input#%0d ",
		 v__h90115,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_6) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_7)
	begin
	  v__h90520 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_7)
	$display("%0t -- %m error: input#%0d ",
		 v__h90520,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_7) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_6 && WILL_FIRE_RL_input_follow_flit_6)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_6] and\n  [RL_input_follow_flit_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_output_selected_5 && WILL_FIRE_RL_output_selected_6)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected_5] and\n  [RL_output_selected_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_output_selected_5 ||
	   WILL_FIRE_RL_output_selected_6) &&
	  WILL_FIRE_RL_output_selected_7)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected_5,\n  RL_output_selected_6] and [RL_output_selected_7] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_output_selected_5 || WILL_FIRE_RL_output_selected_6 ||
	   WILL_FIRE_RL_output_selected_7) &&
	  WILL_FIRE_RL_dflt_output_selected_1)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected_5,\n  RL_output_selected_6, RL_output_selected_7] and [RL_dflt_output_selected_1]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_1_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_1_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_3_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_3_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_4_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_4_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1191)
	$display("mkFairOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  IF_NOT_arbiter_firstHot_1_130_131_AND_arbiter__ETC___d1191)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_2)
	begin
	  v__h70539 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_2)
	$display("%0t -- %m error: input#%0d ",
		 v__h70539,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_2) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2)
	begin
	  v__h70801 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2)
	$write("%0t -- %m error: input#%0d ",
	       v__h70801,
	       $signed(32'd0),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2 && noRouteSlv_rspFF$EMPTY_N &&
	  !inputDest_0_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2 &&
	  (!noRouteSlv_rspFF$EMPTY_N || inputDest_0_1$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2 && noRouteSlv_rspFF$EMPTY_N &&
	  !inputDest_0_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2 &&
	  (!noRouteSlv_rspFF$EMPTY_N || inputDest_0_1$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_3)
	begin
	  v__h71085 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_3)
	$display("%0t -- %m error: input#%0d ",
		 v__h71085,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_3) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3)
	begin
	  v__h71347 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3)
	$write("%0t -- %m error: input#%0d ",
	       v__h71347,
	       $signed(32'd1),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3 &&
	  axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	  !inputDest_1_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3 &&
	  (!axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] ||
	   inputDest_1_1$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3 &&
	  axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	  !inputDest_1_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3 &&
	  (!axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] ||
	   inputDest_1_1$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_4)
	begin
	  v__h71631 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_4)
	$display("%0t -- %m error: input#%0d ",
		 v__h71631,
		 $signed(32'd2),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4)
	begin
	  v__h71893 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4)
	$write("%0t -- %m error: input#%0d ",
	       v__h71893,
	       $signed(32'd2),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4 &&
	  near_mem_io$RDY_axi4_slave_b_peek &&
	  !inputDest_2$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4 &&
	  (!near_mem_io$RDY_axi4_slave_b_peek || inputDest_2$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4 &&
	  near_mem_io$RDY_axi4_slave_b_peek &&
	  !inputDest_2$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4 &&
	  (!near_mem_io$RDY_axi4_slave_b_peek || inputDest_2$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_5)
	begin
	  v__h72177 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_5)
	$display("%0t -- %m error: input#%0d ",
		 v__h72177,
		 $signed(32'd3),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_5) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5)
	begin
	  v__h72439 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5)
	$write("%0t -- %m error: input#%0d ",
	       v__h72439,
	       $signed(32'd3),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5 &&
	  plic$RDY_axi4_slave_b_peek &&
	  !inputDest_3$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5 &&
	  (!plic$RDY_axi4_slave_b_peek || inputDest_3$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5 &&
	  plic$RDY_axi4_slave_b_peek &&
	  !inputDest_3$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5 &&
	  (!plic$RDY_axi4_slave_b_peek || inputDest_3$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_3 && WILL_FIRE_RL_input_follow_flit_3)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_3] and\n  [RL_input_follow_flit_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_4 && WILL_FIRE_RL_input_follow_flit_4)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_4] and\n  [RL_input_follow_flit_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_5 && WILL_FIRE_RL_input_follow_flit_5)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_5] and\n  [RL_input_follow_flit_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1781)
	$display("mkFairOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  IF_NOT_arbiter_1_firstHot_1_720_721_AND_arbite_ETC___d1781)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_8)
	begin
	  v__h108852 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_8)
	$display("%0t -- %m error: input#%0d ",
		 v__h108852,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_8) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8)
	begin
	  v__h109114 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8)
	$write("%0t -- %m error: input#%0d ",
	       v__h109114,
	       $signed(32'd0),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8 &&
	  noRouteSlv_1_flitCount != 9'd0 &&
	  !inputDest_1_0_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8 &&
	  (!(noRouteSlv_1_flitCount != 9'd0) || inputDest_1_0_1$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8 &&
	  noRouteSlv_1_flitCount != 9'd0 &&
	  !inputDest_1_0_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8 &&
	  (!(noRouteSlv_1_flitCount != 9'd0) || inputDest_1_0_1$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_9)
	begin
	  v__h109398 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_9)
	$display("%0t -- %m error: input#%0d ",
		 v__h109398,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_9) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9)
	begin
	  v__h109660 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9)
	$write("%0t -- %m error: input#%0d ",
	       v__h109660,
	       $signed(32'd1),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9 &&
	  axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	  !inputDest_1_1_2$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9 &&
	  (!axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] ||
	   inputDest_1_1_2$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9 &&
	  axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	  !inputDest_1_1_2$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9 &&
	  (!axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] ||
	   inputDest_1_1_2$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_10)
	begin
	  v__h109944 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_10)
	$display("%0t -- %m error: input#%0d ",
		 v__h109944,
		 $signed(32'd2),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_10) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10)
	begin
	  v__h110206 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10)
	$write("%0t -- %m error: input#%0d ",
	       v__h110206,
	       $signed(32'd2),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10 &&
	  near_mem_io$RDY_axi4_slave_r_peek &&
	  !inputDest_1_2$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10 &&
	  (!near_mem_io$RDY_axi4_slave_r_peek || inputDest_1_2$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10 &&
	  near_mem_io$RDY_axi4_slave_r_peek &&
	  !inputDest_1_2$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10 &&
	  (!near_mem_io$RDY_axi4_slave_r_peek || inputDest_1_2$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_11)
	begin
	  v__h110490 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_11)
	$display("%0t -- %m error: input#%0d ",
		 v__h110490,
		 $signed(32'd3),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_11) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11)
	begin
	  v__h110752 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11)
	$write("%0t -- %m error: input#%0d ",
	       v__h110752,
	       $signed(32'd3),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11 &&
	  plic$RDY_axi4_slave_r_peek &&
	  !inputDest_1_3$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11 &&
	  (!plic$RDY_axi4_slave_r_peek || inputDest_1_3$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11 &&
	  plic$RDY_axi4_slave_r_peek &&
	  !inputDest_1_3$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11 &&
	  (!plic$RDY_axi4_slave_r_peek || inputDest_1_3$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_9 && WILL_FIRE_RL_input_follow_flit_9)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_9] and\n  [RL_input_follow_flit_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_10 &&
	  WILL_FIRE_RL_input_follow_flit_10)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_10] and\n  [RL_input_follow_flit_10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_8 && WILL_FIRE_RL_input_follow_flit_8)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_8] and\n  [RL_input_follow_flit_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_8 ||
	   WILL_FIRE_RL_input_follow_flit_8) &&
	  (WILL_FIRE_RL_input_first_flit_9 ||
	   WILL_FIRE_RL_input_follow_flit_9))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_8,\n  RL_input_follow_flit_8] and [RL_input_first_flit_9, RL_input_follow_flit_9]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_8 ||
	   WILL_FIRE_RL_input_follow_flit_8 ||
	   WILL_FIRE_RL_input_first_flit_9 ||
	   WILL_FIRE_RL_input_follow_flit_9) &&
	  (WILL_FIRE_RL_input_first_flit_10 ||
	   WILL_FIRE_RL_input_follow_flit_10))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_8,\n  RL_input_follow_flit_8, RL_input_first_flit_9, RL_input_follow_flit_9] and\n  [RL_input_first_flit_10, RL_input_follow_flit_10] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_8 ||
	   WILL_FIRE_RL_input_follow_flit_8 ||
	   WILL_FIRE_RL_input_first_flit_9 ||
	   WILL_FIRE_RL_input_follow_flit_9 ||
	   WILL_FIRE_RL_input_first_flit_10 ||
	   WILL_FIRE_RL_input_follow_flit_10) &&
	  (WILL_FIRE_RL_input_first_flit_11 ||
	   WILL_FIRE_RL_input_follow_flit_11))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_8,\n  RL_input_follow_flit_8, RL_input_first_flit_9, RL_input_follow_flit_9,\n  RL_input_first_flit_10, RL_input_follow_flit_10] and\n  [RL_input_first_flit_11, RL_input_follow_flit_11] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_11 &&
	  WILL_FIRE_RL_input_follow_flit_11)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_11] and\n  [RL_input_follow_flit_11] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest)
	  begin
	    TASK_testplusargs___d341 = $test$plusargs("debug");
	    #0;
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest)
	  begin
	    TASK_testplusargs___d342 = $test$plusargs("tagcontroller");
	    #0;
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342))
	  $write("Memory request ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("tagged Write ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("tagged Read ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("'h%h", v_arid__h19241);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("'h%h", v_araddr__h19242);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("'h%h", v_arlen__h19243);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("'h%h", v_arsize_val__h19377, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("'h%h", x__h19479);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("WriteReqFlit { ", "aw: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("'h%h", axi4_mem_shim_tmp_tagCon$memory_request_get[100:95]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("'h%h", aw_awaddr__h12033);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("'h%h", aw_awlen__h12034);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("'h%h", aw_awsize_val__h14610, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("'h%h", x__h16919);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "w: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("'h%h", w_wdata__h17166);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("'h%h", axi4_mem_shim_tmp_tagCon$memory_request_get[88:81]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1 &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[91])
	  $write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1 &&
	    !axi4_mem_shim_tmp_tagCon$memory_request_get[91])
	  $write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1)
	  $write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342) &&
	    axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1)
	  $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	    (TASK_testplusargs___d341 || TASK_testplusargs___d342))
	  $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite)
	  begin
	    TASK_testplusargs___d360 = $test$plusargs("debug");
	    #0;
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite)
	  begin
	    TASK_testplusargs___d361 = $test$plusargs("tagcontroller");
	    #0;
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	    (TASK_testplusargs___d360 || TASK_testplusargs___d361))
	  $write("Memory write response ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	    (TASK_testplusargs___d360 || TASK_testplusargs___d361))
	  $write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	    (TASK_testplusargs___d360 || TASK_testplusargs___d361))
	  $write("'h%h",
		 axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read[7:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	    (TASK_testplusargs___d360 || TASK_testplusargs___d361))
	  $write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	    (TASK_testplusargs___d360 || TASK_testplusargs___d361) &&
	    axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read[1:0] == 2'd0)
	  $write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	    (TASK_testplusargs___d360 || TASK_testplusargs___d361) &&
	    axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read[1:0] == 2'd1)
	  $write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	    (TASK_testplusargs___d360 || TASK_testplusargs___d361) &&
	    axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read[1:0] == 2'd2)
	  $write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	    (TASK_testplusargs___d360 || TASK_testplusargs___d361) &&
	    axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read[1:0] != 2'd0 &&
	    axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read[1:0] != 2'd1 &&
	    axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read[1:0] != 2'd2)
	  $write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	    (TASK_testplusargs___d360 || TASK_testplusargs___d361))
	  $write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	    (TASK_testplusargs___d360 || TASK_testplusargs___d361))
	  $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	    (TASK_testplusargs___d360 || TASK_testplusargs___d361))
	  $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead)
	  begin
	    TASK_testplusargs___d385 = $test$plusargs("debug");
	    #0;
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead)
	  begin
	    TASK_testplusargs___d386 = $test$plusargs("tagcontroller");
	    #0;
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386))
	  $write("Memory read response ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386))
	  $write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386))
	  $write("'h%h",
		 axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[72:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386))
	  $write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386))
	  $write("'h%h",
		 axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386))
	  $write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386) &&
	    axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[2:1] == 2'd0)
	  $write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386) &&
	    axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[2:1] == 2'd1)
	  $write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386) &&
	    axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[2:1] == 2'd2)
	  $write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386) &&
	    axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[2:1] != 2'd0 &&
	    axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[2:1] != 2'd1 &&
	    axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[2:1] != 2'd2)
	  $write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386))
	  $write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386) &&
	    axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[0])
	  $write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386) &&
	    !axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[0])
	  $write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386))
	  $write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386))
	  $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead &&
	    (TASK_testplusargs___d385 || TASK_testplusargs___d386))
	  $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d892 &&
	  IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d893)
	$display("mkFairOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d892 &&
	  IF_NOT_arbiter_firstHot_60_61_AND_arbiter_last_ETC___d893)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail)
	begin
	  v__h41674 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail)
	$display("%0t -- %m error: input#%0d ",
		 v__h41674,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_1)
	begin
	  v__h42081 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_1)
	$display("%0t -- %m error: input#%0d ",
		 v__h42081,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_1) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit && WILL_FIRE_RL_input_follow_flit)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 262, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit] and\n  [RL_input_follow_flit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit || WILL_FIRE_RL_input_follow_flit) &&
	  (WILL_FIRE_RL_input_first_flit_1 ||
	   WILL_FIRE_RL_input_follow_flit_1))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit,\n  RL_input_follow_flit] and [RL_input_first_flit_1, RL_input_follow_flit_1] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_1 && WILL_FIRE_RL_input_follow_flit_1)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_1] and\n  [RL_input_follow_flit_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_output_selected && WILL_FIRE_RL_output_selected_1)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected] and\n  [RL_output_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_output_selected || WILL_FIRE_RL_output_selected_1) &&
	  WILL_FIRE_RL_output_selected_2)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected,\n  RL_output_selected_1] and [RL_output_selected_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_output_selected || WILL_FIRE_RL_output_selected_1 ||
	   WILL_FIRE_RL_output_selected_2) &&
	  WILL_FIRE_RL_dflt_output_selected)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected,\n  RL_output_selected_1, RL_output_selected_2] and [RL_dflt_output_selected] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_2 && WILL_FIRE_RL_input_follow_flit_2)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_2] and\n  [RL_input_follow_flit_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_2 ||
	   WILL_FIRE_RL_input_follow_flit_2) &&
	  (WILL_FIRE_RL_input_first_flit_3 ||
	   WILL_FIRE_RL_input_follow_flit_3))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_2,\n  RL_input_follow_flit_2] and [RL_input_first_flit_3, RL_input_follow_flit_3]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_2 ||
	   WILL_FIRE_RL_input_follow_flit_2 ||
	   WILL_FIRE_RL_input_first_flit_3 ||
	   WILL_FIRE_RL_input_follow_flit_3) &&
	  (WILL_FIRE_RL_input_first_flit_4 ||
	   WILL_FIRE_RL_input_follow_flit_4))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_2,\n  RL_input_follow_flit_2, RL_input_first_flit_3, RL_input_follow_flit_3] and\n  [RL_input_first_flit_4, RL_input_follow_flit_4] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_2 ||
	   WILL_FIRE_RL_input_follow_flit_2 ||
	   WILL_FIRE_RL_input_first_flit_3 ||
	   WILL_FIRE_RL_input_follow_flit_3 ||
	   WILL_FIRE_RL_input_first_flit_4 ||
	   WILL_FIRE_RL_input_follow_flit_4) &&
	  (WILL_FIRE_RL_input_first_flit_5 ||
	   WILL_FIRE_RL_input_follow_flit_5))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_2,\n  RL_input_follow_flit_2, RL_input_first_flit_3, RL_input_follow_flit_3,\n  RL_input_first_flit_4, RL_input_follow_flit_4] and [RL_input_first_flit_5,\n  RL_input_follow_flit_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && merged_0_wff$D_OUT[1] &&
	  merged_0_flitLeft > 8'd1)
	$display("%m - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && merged_0_wff$D_OUT[1] &&
	  merged_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !merged_0_wff$D_OUT[1] &&
	  merged_0_flitLeft == 8'd1)
	$display("%m - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !merged_0_wff$D_OUT[1] &&
	  merged_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_awug_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_wug_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && merged_1_wff$D_OUT[1] &&
	  merged_1_flitLeft > 8'd1)
	$display("%m - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && merged_1_wff$D_OUT[1] &&
	  merged_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && !merged_1_wff$D_OUT[1] &&
	  merged_1_flitLeft == 8'd1)
	$display("%m - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && !merged_1_wff$D_OUT[1] &&
	  merged_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[172])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  split_0_doPut$wget[1] &&
	  split_0_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  split_0_doPut$wget[1] &&
	  split_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  !split_0_doPut$wget[1] &&
	  split_0_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  !split_0_doPut$wget[1] &&
	  split_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[172])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_awug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_wug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite)
	  begin
	    TASK_testplusargs___d182 = $test$plusargs("debug");
	    #0;
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite)
	  begin
	    TASK_testplusargs___d183 = $test$plusargs("tagcontroller");
	    #0;
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("TagController write request ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("'h%h", axi4_mem_shim_tmp_awreqff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("'h%h", tmp__h9480);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("'h%h", axi4_mem_shim_tmp_awreqff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("'h%h", axi4_mem_shim_tmp_awreqff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183) &&
	    axi4_mem_shim_tmp_awreqff$D_OUT[17:16] == 2'd0)
	  $write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183) &&
	    axi4_mem_shim_tmp_awreqff$D_OUT[17:16] == 2'd1)
	  $write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183) &&
	    axi4_mem_shim_tmp_awreqff$D_OUT[17:16] == 2'd2)
	  $write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183) &&
	    axi4_mem_shim_tmp_awreqff$D_OUT[17:16] != 2'd0 &&
	    axi4_mem_shim_tmp_awreqff$D_OUT[17:16] != 2'd1 &&
	    axi4_mem_shim_tmp_awreqff$D_OUT[17:16] != 2'd2)
	  $write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183) &&
	    axi4_mem_shim_tmp_awreqff$D_OUT[15])
	  $write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183) &&
	    !axi4_mem_shim_tmp_awreqff$D_OUT[15])
	  $write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("'h%h", axi4_mem_shim_tmp_awreqff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("'h%h", axi4_mem_shim_tmp_awreqff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("'h%h", axi4_mem_shim_tmp_awreqff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("'h%h", axi4_mem_shim_tmp_awreqff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(" - ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("'h%h",
		 axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[73:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("'h%h", axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[9:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183) &&
	    axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[1])
	  $write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183) &&
	    !axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[1])
	  $write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("'h%h",
		 axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[0],
		 " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi4_mem_shim_tmp_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	    (TASK_testplusargs___d182 || TASK_testplusargs___d183))
	  $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[172])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  split_1_doPut$wget[1] &&
	  split_1_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  split_1_doPut$wget[1] &&
	  split_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  !split_1_doPut$wget[1] &&
	  split_1_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  !split_1_doPut$wget[1] &&
	  split_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[172])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_awug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_wug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[172])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  split_2_doPut$wget[1] &&
	  split_2_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  split_2_doPut$wget[1] &&
	  split_2_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  !split_2_doPut$wget[1] &&
	  split_2_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  !split_2_doPut$wget[1] &&
	  split_2_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[172])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_awug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_wug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	begin
	  v__h22294 = $stime;
	  #0;
	end
    v__h22288 = v__h22294 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	$display("%0d: Core.rl_cpu_hart0_reset_from_soc_start", v__h22288);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	begin
	  v__h22508 = $stime;
	  #0;
	end
    v__h22502 = v__h22508 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	$display("%0d: Core.rl_cpu_hart0_reset_complete", v__h22502);
  end
  // synopsys translate_on
endmodule  // mkCore

